using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;using RFSRepository;


namespace RFSRepositoryOne
{
    public class CustomClient05Reps
    {

        Host _host = new Host();


        private Investment setInvestment(SqlDataReader dr)
        {
            Investment M_Investment = new Investment();
            M_Investment.BankPK = dr["BankPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BankPK"]);
            if (_host.CheckColumnIsExist(dr, "BankBranchPK"))
            {
                M_Investment.BankBranchPK = dr["BankBranchPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BankBranchPK"]);
            }
            M_Investment.InvestmentPK = dr["InvestmentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InvestmentPK"]);
            M_Investment.HistoryPK = Convert.ToInt32(dr["HistoryPK"]);
            M_Investment.SelectedInvestment = Convert.ToBoolean(dr["SelectedInvestment"]);
            M_Investment.SelectedDealing = Convert.ToBoolean(dr["SelectedDealing"]);
            M_Investment.SelectedSettlement = Convert.ToBoolean(dr["SelectedSettlement"]);
            M_Investment.StatusInvestment = dr["StatusInvestment"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatusInvestment"]);
            M_Investment.StatusDealing = dr["StatusDealing"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatusDealing"]);
            M_Investment.StatusSettlement = dr["StatusSettlement"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatusSettlement"]);
            M_Investment.StatusDesc = dr["StatusDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["StatusDesc"]);
            if (_host.CheckColumnIsExist(dr, "OrderStatusDesc"))
            {
                M_Investment.OrderStatusDesc = dr["OrderStatusDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["OrderStatusDesc"]);
            }
            M_Investment.Notes = dr["Notes"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Notes"]);
            M_Investment.DealingPK = dr["DealingPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["DealingPK"]);
            M_Investment.SettlementPK = dr["SettlementPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["SettlementPK"]);
            M_Investment.ValueDate = dr["ValueDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["ValueDate"]);
            M_Investment.PeriodPK = dr["PeriodPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["PeriodPK"]);
            M_Investment.PeriodID = dr["PeriodID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PeriodID"]);
            M_Investment.InstructionDate = dr["InstructionDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstructionDate"]);
            M_Investment.Reference = dr["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Reference"]);
            M_Investment.RefNo = dr["RefNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["RefNo"]);
            M_Investment.InstrumentTypePK = dr["InstrumentTypePK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InstrumentTypePK"]);
            M_Investment.InstrumentTypeID = dr["InstrumentTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstrumentTypeID"]);
            M_Investment.TrxType = dr["TrxType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["TrxType"]);
            M_Investment.TrxTypeID = dr["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["TrxTypeID"]);
            M_Investment.CounterpartPK = dr["CounterpartPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["CounterpartPK"]);
            M_Investment.CounterpartID = dr["CounterpartID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CounterpartID"]);
            M_Investment.CounterpartName = dr["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CounterpartName"]);
            M_Investment.MarketPK = dr["MarketPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["MarketPK"]);
            M_Investment.MarketID = dr["MarketID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["MarketID"]);
            M_Investment.InstrumentPK = dr["InstrumentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InstrumentPK"]);
            M_Investment.InstrumentID = dr["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstrumentID"]);
            M_Investment.InstrumentName = dr["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InstrumentName"]);
            M_Investment.FundPK = dr["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["FundPK"]);
            M_Investment.FundID = dr["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundID"]);
            M_Investment.FundName = dr["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundName"]);
            M_Investment.FundCashRefPK = dr["FundCashRefPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["FundCashRefPK"]);
            M_Investment.FundCashRefID = dr["FundCashRefID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundCashRefID"]);
            M_Investment.FundCashRefName = dr["FundCashRefName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundCashRefName"]);
            M_Investment.OrderPrice = dr["OrderPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["OrderPrice"]);
            M_Investment.Lot = dr["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Lot"]);
            M_Investment.LotInShare = dr["LotInShare"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LotInShare"]);
            M_Investment.RangePrice = dr["RangePrice"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["RangePrice"]);
            M_Investment.Volume = dr["Volume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Volume"]);
            M_Investment.Amount = dr["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Amount"]);
            M_Investment.InterestPercent = dr["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["InterestPercent"]);
            M_Investment.BreakInterestPercent = dr["BreakInterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["BreakInterestPercent"]);
            M_Investment.AccruedInterest = dr["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AccruedInterest"]);
            M_Investment.DoneAccruedInterest = dr["DoneAccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneAccruedInterest"]);
            M_Investment.LastCouponDate = dr["LastCouponDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["LastCouponDate"]);
            M_Investment.NextCouponDate = dr["NextCouponDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["NextCouponDate"]);
            M_Investment.MaturityDate = dr["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["MaturityDate"]);
            M_Investment.SettledDate = dr["SettlementDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["SettlementDate"]);
            M_Investment.InvestmentNotes = dr["InvestmentNotes"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["InvestmentNotes"]);
            M_Investment.DoneLot = dr["DoneLot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneLot"]);
            M_Investment.DoneVolume = dr["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneVolume"]);
            M_Investment.DonePrice = dr["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DonePrice"]);
            M_Investment.DoneAmount = dr["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["DoneAmount"]);
            M_Investment.Tenor = dr["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["Tenor"]);
            M_Investment.CommissionPercent = dr["CommissionPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["CommissionPercent"]);
            M_Investment.LevyPercent = dr["LevyPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LevyPercent"]);
            M_Investment.KPEIPercent = dr["KPEIPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["KPEIPercent"]);
            M_Investment.VATPercent = dr["VATPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["VATPercent"]);
            M_Investment.WHTPercent = dr["WHTPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["WHTPercent"]);
            M_Investment.OTCPercent = dr["OTCPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["OTCPercent"]);
            M_Investment.IncomeTaxSellPercent = dr["IncomeTaxSellPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxSellPercent"]);
            M_Investment.IncomeTaxInterestPercent = dr["IncomeTaxInterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxInterestPercent"]);
            M_Investment.IncomeTaxGainPercent = dr["IncomeTaxGainPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxGainPercent"]);
            M_Investment.CommissionAmount = dr["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["CommissionAmount"]);
            M_Investment.LevyAmount = dr["LevyAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["LevyAmount"]);
            M_Investment.KPEIAmount = dr["KPEIAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["KPEIAmount"]);
            M_Investment.VATAmount = dr["VATAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["VATAmount"]);
            M_Investment.WHTAmount = dr["WHTAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["WHTAmount"]);
            M_Investment.OTCAmount = dr["OTCAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["OTCAmount"]);
            M_Investment.IncomeTaxSellAmount = dr["IncomeTaxSellAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxSellAmount"]);
            M_Investment.IncomeTaxInterestAmount = dr["IncomeTaxInterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxInterestAmount"]);
            M_Investment.IncomeTaxGainAmount = dr["IncomeTaxGainAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["IncomeTaxGainAmount"]);
            M_Investment.TotalAmount = dr["TotalAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalAmount"]);
            M_Investment.CurrencyRate = dr["CurrencyRate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["CurrencyRate"]);
            M_Investment.SettlementMode = dr["SettlementMode"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["SettlementMode"]);
            M_Investment.SettlementModeDesc = dr["SettlementModeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["SettlementModeDesc"]);
            M_Investment.BoardType = dr["BoardType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BoardType"]);
            M_Investment.BoardTypeDesc = dr["BoardTypeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["BoardTypeDesc"]);
            M_Investment.AcqPrice = dr["AcqPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice"]);
            M_Investment.AcqVolume = dr["AcqVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume"]);
            M_Investment.AcqDate = dr["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate"]);
            M_Investment.AcqPrice1 = dr["AcqPrice1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice1"]);
            M_Investment.AcqVolume1 = dr["AcqVolume1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume1"]);
            M_Investment.AcqDate1 = dr["AcqDate1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate1"]);
            M_Investment.AcqPrice2 = dr["AcqPrice2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice2"]);
            M_Investment.AcqVolume2 = dr["AcqVolume2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume2"]);
            M_Investment.AcqDate2 = dr["AcqDate2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate2"]);
            M_Investment.AcqPrice3 = dr["AcqPrice3"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice3"]);
            M_Investment.AcqVolume3 = dr["AcqVolume3"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume3"]);
            M_Investment.AcqDate3 = dr["AcqDate3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate3"]);
            M_Investment.AcqPrice4 = dr["AcqPrice4"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice4"]);
            M_Investment.AcqVolume4 = dr["AcqVolume4"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume4"]);
            M_Investment.AcqDate4 = dr["AcqDate4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate4"]);
            M_Investment.AcqPrice5 = dr["AcqPrice5"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice5"]);
            M_Investment.AcqVolume5 = dr["AcqVolume5"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume5"]);
            M_Investment.AcqDate5 = dr["AcqDate5"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate5"]);
            M_Investment.AcqPrice6 = dr["AcqPrice6"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice6"]);
            M_Investment.AcqVolume6 = dr["AcqVolume6"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume6"]);
            M_Investment.AcqDate6 = dr["AcqDate6"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate6"]);
            M_Investment.AcqPrice7 = dr["AcqPrice7"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice7"]);
            M_Investment.AcqVolume7 = dr["AcqVolume7"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume7"]);
            M_Investment.AcqDate7 = dr["AcqDate7"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate7"]);
            M_Investment.AcqPrice8 = dr["AcqPrice8"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice8"]);
            M_Investment.AcqVolume8 = dr["AcqVolume8"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume8"]);
            M_Investment.AcqDate8 = dr["AcqDate8"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate8"]);
            M_Investment.AcqPrice9 = dr["AcqPrice9"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqPrice9"]);
            M_Investment.AcqVolume9 = dr["AcqVolume9"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AcqVolume9"]);
            M_Investment.AcqDate9 = dr["AcqDate9"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["AcqDate9"]);
            if (_host.CheckColumnIsExist(dr, "Category"))
            {
                M_Investment.Category = dr["Category"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Category"]);
            }
            if (_host.CheckColumnIsExist(dr, "CurrencyPK"))
            {
                M_Investment.CurrencyPK = dr["CurrencyPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["CurrencyPK"]);
            }
            if (_host.CheckColumnIsExist(dr, "CurrencyID"))
            {
                M_Investment.CurrencyID = dr["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CurrencyID"]);
            }

            if (_host.CheckColumnIsExist(dr, "InterestDaysType"))
            {
                M_Investment.InterestDaysType = dr["InterestDaysType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InterestDaysType"]);
            }

            if (_host.CheckColumnIsExist(dr, "InterestPaymentType"))
            {
                M_Investment.InterestPaymentType = dr["InterestPaymentType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["InterestPaymentType"]);
            }

            if (_host.CheckColumnIsExist(dr, "PaymentModeOnMaturity"))
            {
                M_Investment.PaymentModeOnMaturity = dr["PaymentModeOnMaturity"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["PaymentModeOnMaturity"]);
            }

            if (_host.CheckColumnIsExist(dr, "PaymentInterestSpecificDate"))
            {
                M_Investment.PaymentInterestSpecificDate = dr["PaymentInterestSpecificDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PaymentInterestSpecificDate"]);
            }

            if (_host.CheckColumnIsExist(dr, "PriceMode"))
            {
                M_Investment.PriceMode = dr["PriceMode"].Equals(DBNull.Value) == true ? 1 : Convert.ToInt16(dr["PriceMode"]);
            }

            if (_host.CheckColumnIsExist(dr, "BitIsAmortized"))
            {
                M_Investment.BitIsAmortized = dr["BitIsAmortized"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitIsAmortized"]);
            }

            if (_host.CheckColumnIsExist(dr, "TrxBuy"))
            {
                M_Investment.TrxBuy = dr["TrxBuy"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["TrxBuy"]);
            }

            if (_host.CheckColumnIsExist(dr, "TrxBuyType"))
            {
                M_Investment.TrxBuyType = dr["TrxBuyType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["TrxBuyType"]);
            }

            M_Investment.TaxExpensePercent = dr["TaxExpensePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TaxExpensePercent"]);
            M_Investment.YieldPercent = dr["YieldPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["YieldPercent"]);
            M_Investment.BitIsRounding = dr["BitIsRounding"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitIsRounding"]);
            M_Investment.BitBreakable = dr["BitBreakable"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitBreakable"]);
            M_Investment.AccruedHoldingAmount = dr["AccruedHoldingAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AccruedHoldingAmount"]);
            M_Investment.CrossFundFromPK = dr["CrossFundFromPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["CrossFundFromPK"]);
            M_Investment.CrossFundFromID = dr["CrossFundFromID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["CrossFundFromID"]);
            //M_Investment.PurposeOfTransaction = dr["PurposeOfTransaction"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["PurposeOfTransaction"]);
            //M_Investment.PurposeOfTransactionDesc = dr["PurposeOfTransactionDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PurposeOfTransactionDesc"]);
            //M_Investment.StatutoryType = dr["StatutoryType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatutoryType"]);

            if (_host.CheckColumnIsExist(dr, "PurposeOfTransaction"))
            {
                M_Investment.PurposeOfTransaction = dr["PurposeOfTransaction"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["PurposeOfTransaction"]);
            }
            if (_host.CheckColumnIsExist(dr, "PurposeOfTransactionDesc"))
            {
                M_Investment.PurposeOfTransactionDesc = dr["PurposeOfTransactionDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PurposeOfTransactionDesc"]);
            }
            if (_host.CheckColumnIsExist(dr, "StatutoryType"))
            {
                M_Investment.StatutoryType = dr["StatutoryType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["StatutoryType"]);
            }
            M_Investment.BitForeignTrx = dr["BitForeignTrx"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitForeignTrx"]);
            if (_host.CheckColumnIsExist(dr, "CPSafekeepingAccNumber"))
            {
                M_Investment.CPSafekeepingAccNumber = dr["CPSafekeepingAccNumber"].ToString();

            }
            if (_host.CheckColumnIsExist(dr, "PlaceOfSettlement"))
            {
                M_Investment.PlaceOfSettlement = dr["PlaceOfSettlement"].ToString();

            }
            if (_host.CheckColumnIsExist(dr, "FundSafekeepingAccountNumber"))
            {
                M_Investment.FundSafekeepingAccountNumber = dr["FundSafekeepingAccountNumber"].ToString();

            }
            if (_host.CheckColumnIsExist(dr, "SecurityCodeType"))
            {
                M_Investment.SecurityCodeType = dr["SecurityCodeType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["SecurityCodeType"]);
            }
            if (_host.CheckColumnIsExist(dr, "SecurityCodeTypeDesc"))
            {
                M_Investment.SecurityCodeTypeDesc = dr["SecurityCodeTypeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["SecurityCodeTypeDesc"]);
            }
            M_Investment.Posted = dr["Posted"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["Posted"]);
            M_Investment.PostedBy = dr["PostedBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PostedBy"]);
            M_Investment.PostedTime = dr["PostedTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["PostedTime"]);
            M_Investment.Revised = dr["Revised"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["Revised"]);
            M_Investment.RevisedBy = dr["RevisedBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["RevisedBy"]);
            M_Investment.RevisedTime = dr["RevisedTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["RevisedTime"]);
            M_Investment.EntryUsersID = dr["EntryUsersID"].ToString();
            M_Investment.UpdateUsersID = dr["UpdateUsersID"].ToString();
            M_Investment.ApprovedUsersID = dr["ApprovedUsersID"].ToString();
            M_Investment.VoidUsersID = dr["VoidUsersID"].ToString();
            M_Investment.EntryTime = dr["EntryTime"].ToString();
            M_Investment.UpdateTime = dr["UpdateTime"].ToString();
            M_Investment.ApprovedTime = dr["ApprovedTime"].ToString();
            M_Investment.VoidTime = dr["VoidTime"].ToString();
            M_Investment.EntryDealingID = dr["EntryDealingID"].ToString();
            M_Investment.UpdateDealingID = dr["UpdateDealingID"].ToString();
            M_Investment.ApprovedDealingID = dr["ApprovedDealingID"].ToString();
            M_Investment.VoidDealingID = dr["VoidDealingID"].ToString();
            M_Investment.EntryDealingTime = dr["EntryDealingTime"].ToString();
            M_Investment.UpdateDealingTime = dr["UpdateDealingTime"].ToString();
            M_Investment.ApprovedDealingTime = dr["ApprovedDealingTime"].ToString();
            M_Investment.VoidDealingTime = dr["VoidDealingTime"].ToString();
            M_Investment.EntrySettlementID = dr["EntrySettlementID"].ToString();
            M_Investment.UpdateSettlementID = dr["UpdateSettlementID"].ToString();
            M_Investment.ApprovedSettlementID = dr["ApprovedSettlementID"].ToString();
            M_Investment.VoidSettlementID = dr["VoidSettlementID"].ToString();
            M_Investment.EntrySettlementTime = dr["EntrySettlementTime"].ToString();
            M_Investment.UpdateSettlementTime = dr["UpdateSettlementTime"].ToString();
            M_Investment.ApprovedSettlementTime = dr["ApprovedSettlementTime"].ToString();
            M_Investment.VoidSettlementTime = dr["VoidSettlementTime"].ToString();
            M_Investment.DBUserID = dr["DBUserID"].ToString();
            M_Investment.DBTerminalID = dr["DBTerminalID"].ToString();
            M_Investment.LastUpdate = dr["LastUpdate"].ToString();
            M_Investment.LastUpdateDB = dr["LastUpdateDB"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["LastUpdateDB"]);
            return M_Investment;
        }

        public class AccountActivityByGroups
        {
            public decimal StartBalance { get; set; }
            public int journalPK { get; set; }
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public int AccountType { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string CurrencyID { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string CounterpartID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }

        public class PerhitunganFeeMIdanFeeBK
        {
            public int FundPK { get; set; }
            public string FundName { get; set; }
            public DateTime Date { get; set; }
            public decimal AUM { get; set; }
            public decimal NetFeeAmountMI { get; set; }
            public decimal TaxFeeAmountMI { get; set; }
            public decimal TotalFeeAmountMI { get; set; }
            public decimal NetFeeAmountCustodi { get; set; }
            public decimal TaxFeeAmountCustodi { get; set; }
            public decimal TotalFeeAmountCustodi { get; set; }
            public decimal NetFeeAmountSInvest { get; set; }
            public decimal TaxFeeAmountSInvest { get; set; }
            public decimal TotalFeeAmountSInvest { get; set; }
            public decimal FeePercentage { get; set; }


        }
        public class CounterpartTransaction
        {
            public decimal CommissionPercent { get; set; }
            public decimal CommissionAmount { get; set; }
            public string CounterpartID { get; set; }
            public string CounterpartName { get; set; }
            public decimal TotalYTD { get; set; }
            public decimal TargetAllocation { get; set; }
            public decimal Total { get; set; }
            public decimal percent { get; set; }
            public decimal Selisih { get; set; }
        }
        public class BrokerWinatauLossSummary
        {
            public string Board { get; set; }
            public string TrxTypeID { get; set; }
            public string CounterPartID { get; set; }
            public string InstrumentID { get; set; }
            public decimal AvgPriceDeal { get; set; }
            public decimal ClosingMarketPrice { get; set; }
            public decimal InterestPercent { get; set; }
            public string DealingID { get; set; }
        }
        public class HistoricalBond
        {
            public int FundPK { get; set; }
            public string TrxTypeID { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string IsinCode { get; set; }
            public string Industry { get; set; }
            public string SectorID { get; set; }
            public string FundName { get; set; }
            public string Custody { get; set; }
            public string Counterpart { get; set; }
            public string DealNo { get; set; }
            public string SettlementDate { get; set; }
            public decimal UnitNominal { get; set; }
            public decimal DonePrice { get; set; }
            public decimal Proceeds { get; set; }
            public decimal AccruedInterestBought { get; set; }
            public decimal TaxFinal { get; set; }
            public decimal NonFinal { get; set; }
            public decimal TotalSettleCounterpart { get; set; }
            public decimal TotalSettleTaxOffice { get; set; }
            public decimal TotalSettle { get; set; }
            public decimal InterestPercent { get; set; }
            public string MaturityDate { get; set; }
            public string AcqDate { get; set; }
            public decimal AcqPrice { get; set; }
            public string Remark { get; set; }

        }
        public class HistoricalStocks
        {
            public int FundPK { get; set; }
            public string InstrumentTypeName { get; set; }
            public string TrxTypeID { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string IsinCode { get; set; }
            public string Industry { get; set; }
            public string SectorID { get; set; }
            public string FundName { get; set; }
            public string Custody { get; set; }
            public string Counterpart { get; set; }
            public string DealNo { get; set; }
            public string DealDate { get; set; }
            public string SettlementDate { get; set; }
            public decimal GrossPrice { get; set; }
            public decimal DonePrice { get; set; }
            public decimal Proceeds { get; set; }
            public decimal AccruedInterestBought { get; set; }
            public decimal TaxFinal { get; set; }
            public decimal NonFinal { get; set; }
            public decimal TotalSettleCounterpart { get; set; }
            public decimal TotalSettleTaxOffice { get; set; }
            public decimal TotalSettle { get; set; }
            public decimal Unit { get; set; }
            public decimal RateFeeCounterpart { get; set; }
            public decimal CounterpartAmount { get; set; }
            public decimal Levy { get; set; }
            public decimal VAT { get; set; }
            public decimal IncomeTax { get; set; }
            public decimal Brokertax { get; set; }
            public decimal UnitNominal { get; set; }
            public decimal InterestPercent { get; set; }
            public string Remark { get; set; }

        }

        public class HistoricalTrackerBond
        {

            public string FundName { get; set; }
            public string Stock { get; set; }
            public DateTime ValueDate { get; set; }
            public DateTime SettleDate { get; set; }
            //
            public string Bond { get; set; }
            public string IssueName { get; set; }
            public string None1 { get; set; }
            public decimal NominalValue { get; set; }
            public decimal PriceTrade { get; set; }
            public decimal CummulativeValue { get; set; }
            public decimal None2 { get; set; }
            public decimal CostPrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal Maturity { get; set; }
            public DateTime None3 { get; set; }
            public decimal Coupon { get; set; }
            public decimal CoupFreq { get; set; }
            public decimal Basis { get; set; }
            public decimal AccruedInterestDays { get; set; }
            public decimal None4 { get; set; }
            public decimal PreviousCouponDate { get; set; }
            public decimal NextCouponDate { get; set; }
            public decimal None5 { get; set; }
            public decimal DaysBasis { get; set; }
            public decimal AccruedInterest { get; set; }

        }
        public class BondValuationReport
        {
            public string kodeKSEI { get; set; }
            public string FundID { get; set; }
            public string NamaObligasi { get; set; }
            public decimal Nominal { get; set; }
            public decimal Today { get; set; }
            public decimal Yesterday { get; set; }
            public decimal Change { get; set; }
            public string Alamat { get; set; }
            public string BankCustody { get; set; }
            public string ContactPerson { get; set; }

        }
        public class TransactionSummary
        {

            public string CIF { get; set; }
            public string Broker { get; set; }
            public decimal UnitBalance { get; set; }
            public decimal CashBalance { get; set; }
            public decimal ValueAmount { get; set; }
            public decimal CostPortofolio { get; set; }
            public decimal Lot { get; set; }
            public decimal Profit { get; set; }
            public decimal MarketValue { get; set; }
            public decimal PriceAvg { get; set; }
            public string ForReksaDana { get; set; }
            public string StockCode { get; set; }
            public string BuySell { get; set; }
            public DateTime TransactionDate { get; set; }
            public DateTime SettlementDate { get; set; }
            public decimal TOTALYTD { get; set; }
            public decimal TargetAllocation { get; set; }
            public decimal SELISIH { get; set; }

        }
        class DepositRecap
        {
            public string FundName { get; set; }
            public string Remarks { get; set; }
            public DateTime TradeDate { get; set; }
            public DateTime MaturityDate { get; set; }
            public decimal Tenor { get; set; }
            public decimal Rate { get; set; }
            public decimal Amount { get; set; }
            public decimal InterestAmount { get; set; }
            public decimal Tax { get; set; }
            public decimal TotalReceived { get; set; }
        }
        public class CashFlow
        {
            public decimal StartBalance { get; set; }
            public int journalPK { get; set; }
            public DateTime ValueDate { get; set; }
            public DateTime SettlementDate { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public int AccountType { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string CurrencyID { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }


        public class CashAdvanceRpt
        {
            public DateTime Date { get; set; }
            public string NamaVendor { get; set; }
            public string PurchaseRequisition { get; set; }
            public string Ref { get; set; }
            public string Type { get; set; }
            public string Branch { get; set; }
            public string Description { get; set; }
            public string Divisi { get; set; }
            public string Keterangan { get; set; }
            public decimal Nominal { get; set; }
            public string AccountFrom { get; set; }
            public string AccountTo { get; set; }
            public string Period { get; set; }
        }
        public class KartuHutangRpt
        {
            public DateTime Date { get; set; }
            public string NamaVendor { get; set; }
            public string Name { get; set; }
            public string PONo { get; set; }
            public string PRNo { get; set; }
            public string NoKartuHutang { get; set; }
            public string Keterangan { get; set; }
            public string TerminPembayaran { get; set; }
            public string Keterangan1 { get; set; }
            public decimal Nominal { get; set; }
            public decimal NominalKontrak { get; set; }
            public string OS { get; set; }
            public DateTime Tgl { get; set; }

        }

        public class VoucherPembayaran
        {
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public string CashierID { get; set; }
            public string Description { get; set; }
            public int RefNo { get; set; }
            public string BankID { get; set; }
            public string BankName { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public string BankCurrencyID { get; set; }
            public string DebitCredit { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseAmount { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }
            public string CostCenter { get; set; }
            public string Divisi { get; set; }
            public string NoRek { get; set; }
            public string PaitTo { get; set; }
            public string Bank { get; set; }
            public string Cab { get; set; }
            public decimal Persentase { get; set; }
            public decimal Total { get; set; }

        }
        public class VoucherPenerimaan
        {
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public string CashierID { get; set; }
            public string Description { get; set; }
            public int RefNo { get; set; }
            public string BankID { get; set; }
            public string BankName { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public string BankCurrencyID { get; set; }
            public string DebitCredit { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseAmount { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }
            public string CostCenter { get; set; }
            public string Divisi { get; set; }
            public string NoRek { get; set; }
            public string PaitTo { get; set; }
            public string Bank { get; set; }
            public string Cab { get; set; }
            public decimal Persentase { get; set; }
            public decimal Total { get; set; }
        }
        public class AccountingJournalListing
        {
            public decimal StartBalance { get; set; }
            public int journalPK { get; set; }
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public int AccountType { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string CurrencyID { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }
            public string AccountCurrencyID { get; set; }
            public string Type { get; set; }
            public string Description { get; set; } //
            public string ValueDateFrom { get; set; }
            public string ValueDateTo { get; set; }
            public DateTime StartDate { get; set; }
            public decimal JournalNID { get; set; }
            public decimal CurrentBalance { get; set; }

        }
        public class AnnualBudgetReport
        {
            public decimal StartBalance { get; set; }
            public int journalPK { get; set; }
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public int AccountType { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string CurrencyID { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }
        public class BudgetSummary
        {
            public decimal StartBalance { get; set; }
            public int journalPK { get; set; }
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public int AccountType { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string CurrencyID { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }
        public class LedgerBudget
        {
            public string COANo { get; set; }
            public string COAName { get; set; }
            public string Dept { get; set; }
            public string CostCenter { get; set; }
            public string Item { get; set; }

        }
        public class ProfitLoss
        {
            public decimal StartBalance { get; set; }
            public int journalPK { get; set; }
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public int AccountType { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string CurrencyID { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }
        public class TrialBalanceByCOAbyCostCenter
        {

            public string RPT { get; set; }
            public string CTG { get; set; }
            public string Cabang { get; set; }
            public string Account { get; set; }
            public string Currency { get; set; }
            public string CostCenter { get; set; }
            public DateTime ValueDate { get; set; }

        }
        public class TrialBalancebyCOA
        {

            public string RPT { get; set; }
            public string CTG { get; set; }
            public string Cabang { get; set; }
            public string Account { get; set; }
            public string Currency { get; set; }
            public string CostCenter { get; set; }
            public DateTime ValueDate { get; set; }


        }

        public class FundPortfolio
        {
            public DateTime Date { get; set; }
            public int InstrumentTypePK { get; set; }
            public string InstrumentTypeName { get; set; }
            public int FundPK { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public DateTime MaturityDate { get; set; }
            public decimal Balance { get; set; }
            public decimal CostValue { get; set; }
            public decimal AvgPrice { get; set; }
            public decimal ClosePrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal Unrealised { get; set; }
            public decimal PercentOfNav { get; set; }
            public decimal PercentOfPortfolio { get; set; }
            public string ISINCode { get; set; }

            public decimal InterestPercent { get; set; }
            public string PeriodeActual { get; set; }
            public decimal AccrualHarian { get; set; }
            public decimal Accrual { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }

        private class TrialBalance
        {
            public string COA { get; set; }
            public string AccountName { get; set; }
            public string KlasifikasiAccount { get; set; }
            public string Type { get; set; }
            public string Name { get; set; }
            public decimal PreviousBalance { get; set; }
            public decimal DebetMutasi { get; set; }
            public decimal CreditMutasi { get; set; }
            public decimal CurrentBalance { get; set; }
            public decimal MTD { get; set; }

        }

        public class AccruedInterestReport
        {
            public int TypeNo { get; set; }
            public int FundPK { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string InstrumentTypeName { get; set; }
            public string MaturityDate { get; set; }
            public decimal Balance { get; set; }
            public string LastCoupon { get; set; }
            public string NextCoupon { get; set; }
            public string AcqDate { get; set; }
            public decimal Tenor { get; set; }
            public decimal InterestPercent { get; set; }
            public decimal DailyInterest { get; set; }
            public decimal AccDays { get; set; }
            public decimal InterestAmount { get; set; }
            public decimal TaxDays { get; set; }
            public decimal TaxAmount { get; set; }
            public decimal NetAmount { get; set; }

        }


        public class LaporanJamuan
        {

            public string ClientName { get; set; }
            public string PurchaseRequisition { get; set; }
            public string Ref { get; set; }
            public string PO { get; set; }
            public string Branch { get; set; }
            public string Divisi { get; set; }
            public string Keterangan { get; set; }
            public decimal Nominal { get; set; }
            public DateTime ValueDate { get; set; }
            //
            public string Consignee { get; set; }
            public string Paidto { get; set; }
            public string CabangMAM { get; set; }
            public string NoRek { get; set; }
            public string NamaNasabah { get; set; }
            public string NamaSales { get; set; }
            public decimal NominalVoucherYangDiajukan { get; set; }

        }

        public class CashFlowSummary
        {

            public string FundName { get; set; }
            public string BankID { get; set; }
            public decimal BegBalance { get; set; }
            public decimal Amount { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public string Description { get; set; }
            public string ValueDate { get; set; }




        }

        public class PortfolioReport
        {
            public DateTime Date { get; set; }
            public int InstrumentTypePK { get; set; }
            public string InstrumentTypeName { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public DateTime MaturityDate { get; set; }
            public decimal Balance { get; set; }
            public decimal CostValue { get; set; }
            public decimal AvgPrice { get; set; }
            public decimal ClosePrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal Unrealised { get; set; }
            public decimal PercentOfNav { get; set; }
            public string ISINCode { get; set; }
            public int FundPK { get; set; }

            public decimal Total { get; set; }

            public decimal InterestPercent { get; set; }
            public string PeriodeActual { get; set; }
            public decimal AccrualHarian { get; set; }
            public decimal Accrual { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }

        private class DailyComplianceReport
        {
            public string Date { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public decimal Amount { get; set; }
            public decimal NAVPercent { get; set; }
            public string Type { get; set; }
            public int InstrumentType { get; set; }
            public string InstrumentID { get; set; }
            public decimal TotalAUM { get; set; }

            public decimal DepositoAmount { get; set; }
            public decimal DEPPercentOfNav { get; set; }
            public decimal BondAmount { get; set; }
            public decimal BondPercentOfNav { get; set; }
            public decimal EquityAmount { get; set; }
            public decimal EQPercentOfNav { get; set; }
            public decimal TotalPercent { get; set; }
        }

        private decimal Get_TotalAccountBalanceByFundPK(int _fundPK, int _fundJournalAccountPK, string _date)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"Declare @periodPK int
                      select @PeriodPK = PeriodPK from Period where status = 2 and @Date between dateFrom and DateTo

                      SELECT   CASE 
                                              WHEN C.type IN ( 1, 4 ) THEN Sum( 
                                              B.basedebit - B.basecredit) 
                                              ELSE Sum(B.basecredit - B.basedebit) 
                                            END  Result
                      FROM   fundjournal A 
                             LEFT JOIN fundjournaldetail B 
                                    ON A.fundjournalpk = B.fundjournalpk 
                                       AND B.status = 2 
                             LEFT JOIN fundjournalaccount C 
                                    ON B.fundjournalaccountpk = C.fundjournalaccountpk 
                                       AND C.status = 2 
                      WHERE  A.valuedate <= @Date 
                             AND A.posted = 1 
                             AND A.reversed = 0 
                             AND A.status = 2 
                             AND A.PeriodPK = @PeriodPK
                             AND B.fundpk = @FundPK 
                             AND @FundJournalAccountPK IN ( 
                                 C.fundjournalaccountpk, C.parentpk1, 
                                 C.parentpk2, 
                                 C.parentpk3, 
                                 C.parentpk4, C.parentpk5, C.parentpk6, 
                                 C.parentpk7, 
                                 C.parentpk8, C.parentpk9 ) 
                      GROUP  BY C.type ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundJournalAccountPK", _fundJournalAccountPK);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        private decimal Get_TotalMarketValueByFundPK(int _fundPK, string _date)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"

                        select sum(MarketValue) Result from FundPosition where FundPK = @FundPK and Date = @Date and status = 2

                        ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        private decimal Get_TotalAUMByFundPK(int _fundPK, int _asset, int _liabilities, string _date)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"

                        Declare @PeriodPK int
                        select @PeriodPK = PeriodPK from Period where status = 2 and @Date between dateFrom and DateTo

                      
                        select sum(Result) Result from (
                        SELECT   CASE WHEN C.type IN ( 1, 4 ) THEN Sum(B.basedebit - B.basecredit) 
                        ELSE Sum(B.basecredit - B.basedebit) END  Result
                        FROM   fundjournal A 
                        LEFT JOIN fundjournaldetail B ON A.fundjournalpk = B.fundjournalpk AND B.status = 2 
                        LEFT JOIN fundjournalaccount C ON B.fundjournalaccountpk = C.fundjournalaccountpk AND C.status = 2 
                        WHERE  A.valuedate <= @Date AND A.posted = 1 AND A.reversed = 0 AND A.status = 2 AND A.PeriodPK = @PeriodPK
                        AND B.fundpk = @FundPK AND @Asset IN ( 
                        C.fundjournalaccountpk, C.parentpk1,C.parentpk2, C.parentpk3, C.parentpk4, C.parentpk5, C.parentpk6, 
                        C.parentpk7, C.parentpk8, C.parentpk9 ) 
                        GROUP  BY C.type 

                        union all

                        SELECT  CASE WHEN C.type IN ( 1, 4 ) THEN Sum(B.basedebit - B.basecredit) 
                        ELSE Sum(B.basecredit - B.basedebit) END * -1  Result
                        FROM   fundjournal A 
                        LEFT JOIN fundjournaldetail B ON A.fundjournalpk = B.fundjournalpk AND B.status = 2 
                        LEFT JOIN fundjournalaccount C ON B.fundjournalaccountpk = C.fundjournalaccountpk AND C.status = 2 
                        WHERE  A.valuedate <= @Date AND A.posted = 1 AND A.reversed = 0 AND A.status = 2 AND A.PeriodPK = @PeriodPK 
                        AND B.fundpk = @FundPK AND @Liabilities IN ( 
                        C.fundjournalaccountpk, C.parentpk1, C.parentpk2, C.parentpk3,C.parentpk4, C.parentpk5, C.parentpk6, 
                        C.parentpk7,C.parentpk8, C.parentpk9 ) 
                        GROUP  BY C.type 
                        ) A

                        ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@Asset", _asset);
                        cmd.Parameters.AddWithValue("@Liabilities", _liabilities);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        private decimal Get_TotalUnitByFundPK(int _fundPK, string _date)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                      

Declare @UnitAmount numeric(22,4)



Select @UnitAmount = sum(UnitAmount)  from FundClientPosition where 
date = (select max(date) 
from FundClientPosition where date < @Date and fundPK = @FundPK)
and FundPK = @FundPK 


IF isnull(@UnitAmount,0) <> 0
BEGIN
	Select @UnitAmount Result
END
ELSE
BEGIN
	         Declare @periodPK int
                      select @PeriodPK = PeriodPK from Period where status = 2 and @Date between dateFrom and DateTo

                      SELECT @UnitAmount =  CASE 
                                              WHEN C.type IN ( 1, 4 ) THEN Sum( 
                                              B.basedebit - B.basecredit) 
                                              ELSE Sum(B.basecredit - B.basedebit) 
                                            END  
                      FROM   fundjournal A 
                             LEFT JOIN fundjournaldetail B 
                                    ON A.fundjournalpk = B.fundjournalpk 
                                       AND B.status = 2 
                             LEFT JOIN fundjournalaccount C 
                                    ON B.fundjournalaccountpk = C.fundjournalaccountpk 
                                       AND C.status = 2 
                      WHERE  A.valuedate <= @Date 
                             AND A.posted = 1 
                             AND A.reversed = 0 
                             AND A.status = 2 
                             AND A.PeriodPK = @PeriodPK
                             AND B.fundpk = @FundPK 
                             AND 1 IN ( 
                                 C.fundjournalaccountpk, C.parentpk1, 
                                 C.parentpk2, 
                                 C.parentpk3, 
                                 C.parentpk4, C.parentpk5, C.parentpk6, 
                                 C.parentpk7, 
                                 C.parentpk8, C.parentpk9 ) 
                      GROUP  BY C.type 
					  If isnull(@UnitAmount,0) >0
					  BEGIN 
					    	Select case when
 [dbo].[Fgetgroupaccountfundjournalbalancebyfundpk](@date, 1, @FundPK) - 
		    [dbo].[Fgetgroupaccountfundjournalbalancebyfundpk](@date, 63, @FundPK) 
		    = 0 then 0 else @UnitAmount/1000 end Result
						END
						ELSE
						BEGIN
						Select 0 result
						END
END

                    ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        private decimal Get_GetNAVProjectionByFundPK(int _fundPK, string _date)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
 
                        Declare @NAVRoundingMode int 
                        Declare @NAVDecimalPlaces int
                        Declare @Nav numeric(18,6)


                       
                        DECLARE @DateUnit DATETIME 

                        SELECT @DateUnit = Max(date) 
                        FROM   fundclientposition 
                        WHERE  date = (SELECT Max(date) 
                        FROM   fundclientposition 
                        WHERE  date < @date) 
    
                        SELECT @NAV = Case when 
                        [dbo].[Fgettotalunitbyfundpk](@DateUnit, @fundpk) = 0 then 1000 else Case
                        WHEN ( 
                        [dbo].[Fgetgroupaccountfundjournalbalancebyfundpk](@date, 1, @FundPK) - 
                        [dbo].[Fgetgroupaccountfundjournalbalancebyfundpk](@date, 63, @FundPK) ) 
                        = 0 
                        AND [dbo].[Fgettotalunitbyfundpk](@DateUnit, @fundpk) = 0 THEN 1000 
                        ELSE ( 
                        [dbo].[Fgetgroupaccountfundjournalbalancebyfundpk](@date, 1, @FundPK) - 
                        [dbo].[Fgetgroupaccountfundjournalbalancebyfundpk](@date, 63, @FundPK) ) / 
                        [dbo].[Fgettotalunitbyfundpk](@DateUnit, @FundPK) 
                        END END
                        


                        
                        Select @NAVRoundingMode = NAVRoundingMode, @NAVDecimalPlaces = NAVDecimalPlaces
                        From Fund Where FundPK = @FundPK and Status = 2

                        If @NAVRoundingMode = 1 BEGIN Set  @NAV = ROUND(@NAV,@NAVDecimalPlaces) 
	                        IF @NAVDecimalPlaces = 0 BEGIN
		                        set @NAV = @NAV + 1
	                        END 
	                        IF @NAVDecimalPlaces = 2 BEGIN
		                        set @NAV = @NAV + 0.01
	                        END 
	                        IF @NAVDecimalPlaces = 4 BEGIN
		                        set @NAV = @NAV + 0.0001
	                        END 
	                        IF @NAVDecimalPlaces = 6 BEGIN
		                        set @NAV = @NAV + 0.000001
	                        END 
	                        IF @NAVDecimalPlaces = 8 BEGIN
		                        set @NAV = @NAV + 0.00000001
	                        END 


                        END 

                        If @NAVRoundingMode = 2 BEGIN Set  @NAV = ROUND(@NAV,@NAVDecimalPlaces,1)   END 
                        If @NAVRoundingMode = 3 BEGIN Set  @NAV = ROUND(@NAV,@NAVDecimalPlaces)  END 

                        select @Nav Result
                    ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        private decimal Get_GetCloseNavYesterdayByFundPK(int _fundPK, DateTime _date)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Select isnull(NavRounded,0) Nav From CloseNav " +
                            "Where FundPK= @FundPK and Date=dbo.FworkingDay(@Date,-1) and status=2";
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        cmd.Parameters.AddWithValue("@Date", _date);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["Nav"]);
                            }
                            return 0;
                        }
                    }



                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public Boolean GenerateReportFundAccounting(string _userID, FundAccountingRpt _FundAccountingRpt)
        {

            //MNC
            #region Fee MI_Bank Custody
            if (_FundAccountingRpt.ReportName.Equals("Fee MI_Bank Custody"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        DateTime _dateTimeNow = DateTime.Now;
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            cmd.CommandText = @"
                            
select FundPK,Date,FundName,AUM,sum(FeePercent) FeePercentage,sum(FeePercentMI) FeePercent, sum(NetFeeAmountMI) NetFeeAmountMI,sum(TaxFeeAmountMI) TaxFeeAmountMI,sum(TotalFeeAmountMI)TotalFeeAmountMI, 
sum(NetFeeAmountCustodi) NetFeeAmountCustodi,sum(TaxFeeAmountCustodi) TaxFeeAmountCustodi,sum(TotalFeeAmountCustodi) TotalFeeAmountCustodi,
sum(NetFeeAmountSInvest) NetFeeAmountSInvest,sum(TaxFeeAmountSInvest) TaxFeeAmountSInvest,sum(TotalFeeAmountSinvest) TotalFeeAmountSinvest
from (

select A.Date,C.Name FundName,A.FundPK,isnull(B.AUM,0) AUM,D.DescOne FundType ,
[dbo].[FgetManagementFeePercentByDate](A.Date,A.FundPK)  FeePercent,
[dbo].[FgetManagementFeePercentByDate](A.Date,A.FundPK) / 100 FeePercentMI ,
A.ManagementFeeAmount/1.1 NetFeeAmountMI, A.ManagementFeeAmount/1.1 * 0.1 TaxFeeAmountMI,
A.ManagementFeeAmount TotalFeeAmountMI,0 NetFeeAmountCustodi,0 TaxFeeAmountCustodi,0 TotalFeeAmountCustodi,0 NetFeeAmountSinvest,0 TaxFeeAmountSinvest,0 TotalFeeAmountSinvest,
'Management Fee' Perhitungan from FundDailyFee A
left join CloseNAV B ON  dbo.fworkingday(A.Date,-1) = B.Date  AND B.status = 2 and A.fundPK = B.FundPK
left join Fund C on A.FundPk = C.FundPK and C.status = 2
LEFT JOIN MasterValue D on C.Type = D.Code and D.ID = 'FundType' AND D.status = 2
where A.Date between @ValueDateFrom and @ValueDateTo 
" + _paramFundFrom + @"
UNION ALL
select A.Date,C.Name FundName,A.FundPK,isnull(B.AUM,0) AUM,D.DescOne FundType ,
[dbo].[FgetCustodiFeePercentByDate](A.Date,A.FundPK)  FeePercent,
[dbo].[FgetCustodiFeePercentByDate](A.Date,A.FundPK) / 100 FeePercentMI ,
0 NetFeeAmountMI, 0 TaxFeeAmountMI,
0 TotalFeeAmountMI,
A.CustodiFeeAmount/1.1 NetFeeAmountCustodi,A.CustodiFeeAmount/1.1 * 0.1 TaxFeeAmountCustodi,
A.CustodiFeeAmount TotalFeeAmountCustodi,0 NetFeeAmountSinvest,0 TaxFeeAmountSinvest,0 TotalFeeAmountSinvest,
'Custodi Fee' Perhitungan from FundDailyFee A
left join CloseNAV B ON  dbo.fworkingday(A.Date,-1) = B.Date  AND B.status = 2 and A.fundPK = B.FundPK
left join Fund C on A.FundPk = C.FundPK and C.status = 2
LEFT JOIN MasterValue D on C.Type = D.Code and D.ID = 'FundType' AND D.status = 2
where A.Date between @ValueDateFrom and @ValueDateTo 
" + _paramFundFrom + @"

UNION ALL
select A.Date,C.Name FundName,A.FundPK,isnull(B.AUM,0) AUM,D.DescOne FundType ,
[dbo].[FgetSInvestFeePercentByDate](A.Date,A.FundPK)  FeePercent,
[dbo].[FgetSInvestFeePercentByDate](A.Date,A.FundPK) / 100 FeePercentMI ,
0 NetFeeAmountMI, 0 TaxFeeAmountMI,
0 TotalFeeAmountMI,
0 NetFeeAmountCustodi,0 TaxFeeAmountCustodi,
0 TotalFeeAmountCustodi,A.SInvestFeeAmount/1.1 NetFeeAmountSinvest,A.SInvestFeeAmount/1.1 * 0.1 TaxFeeAmountSinvest,A.SInvestFeeAmount TotalFeeAmountSinvest,
'Sinvest Fee' Perhitungan from FundDailyFee A
left join CloseNAV B ON  dbo.fworkingday(A.Date,-1) = B.Date  AND B.status = 2 and A.fundPK = B.FundPK
left join Fund C on A.FundPk = C.FundPK and C.status = 2
LEFT JOIN MasterValue D on C.Type = D.Code and D.ID = 'FundType' AND D.status = 2
where A.Date between @ValueDateFrom and @ValueDateTo 
" + _paramFundFrom + @" 
	
) Z 
group by FundPK,Date,FundName,AUM ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FeeMIBankCustody" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FeeMIBankCustody" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Perhitungan Fee MI dan Fee BK");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PerhitunganFeeMIdanFeeBK> rList = new List<PerhitunganFeeMIdanFeeBK>();
                                        while (dr0.Read())
                                        {
                                            PerhitunganFeeMIdanFeeBK rSingle = new PerhitunganFeeMIdanFeeBK();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.NetFeeAmountMI = Convert.ToDecimal(dr0["NetFeeAmountMI"]);
                                            rSingle.TaxFeeAmountMI = Convert.ToDecimal(dr0["TaxFeeAmountMI"]);
                                            rSingle.TotalFeeAmountMI = Convert.ToDecimal(dr0["TotalFeeAmountMI"]);
                                            rSingle.NetFeeAmountCustodi = Convert.ToDecimal(dr0["NetFeeAmountCustodi"]);
                                            rSingle.TaxFeeAmountCustodi = Convert.ToDecimal(dr0["TaxFeeAmountCustodi"]);
                                            rSingle.TotalFeeAmountCustodi = Convert.ToDecimal(dr0["TotalFeeAmountCustodi"]);
                                            rSingle.NetFeeAmountSInvest = Convert.ToDecimal(dr0["NetFeeAmountSInvest"]);
                                            rSingle.TaxFeeAmountSInvest = Convert.ToDecimal(dr0["TaxFeeAmountSInvest"]);
                                            rSingle.TotalFeeAmountSInvest = Convert.ToDecimal(dr0["TotalFeeAmountSInvest"]);
                                            rSingle.FeePercentage = Convert.ToDecimal(dr0["FeePercentage"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                                //orderby  r.ValueDate, r.RefNo, r.FundClientID, r.InstrumentID ascending
                                            group r by new { r.FundPK, r.FundName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;




                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            int RowQ = incRowExcel;
                                            int RowZ = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "PERHITUNGAN FEE MI, FEE BK & FEE SInvest";
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;


                                            incRowExcel = incRowExcel + 3;


                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Manager";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + _host.Get_CompanyName();

                                            worksheet.Cells[incRowExcel, 13].Value = "Print Date ";
                                            worksheet.Cells[incRowExcel, 14].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 13, incRowExcel, 14].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Custodian Bank";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_BankCustodianName(rsHeader.Key.FundPK);

                                            worksheet.Cells[incRowExcel, 13].Value = "Print Time ";
                                            worksheet.Cells[incRowExcel, 14].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                            worksheet.Cells[incRowExcel, 13, incRowExcel, 14].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundName(rsHeader.Key.FundPK);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundType(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account No";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundSinvestCode(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Period";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 2].Value = " : IDR";
                                            incRowExcel = incRowExcel + 3;


                                            //ThickBox Border HEADER
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 2;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "TANGGAL";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells["A" + RowB + ":A" + RowG].Style.WrapText = true;
                                            //worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;

                                            //worksheet.Cells["B" + RowB + ":B" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total dana kelolaan";
                                            //worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells["C" + RowB + ":C" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "FEE MI (" + Convert.ToDecimal(Get_FundManagementFeeByFundPK(rsHeader.Key.FundPK, _FundAccountingRpt.ValueDateTo)).ToString("#,##0.0000") + ")";
                                            //worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells["D" + RowB + ":D" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "PPN 10% ";
                                            //worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells["E" + RowB + ":E" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "TOTAL Fee MI & PPN ";
                                            //worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells["F" + RowB + ":F" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "FEE CUSTODI ";
                                            //worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells["G" + RowB + ":G" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "PPN 10% ";
                                            //worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells["H" + RowB + ":H" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "TOTAL Fee CUSTODI & PPN ";
                                            //worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //
                                            //worksheet.Cells["I" + RowB + ":I" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 9].Value = "FEE Sinvest ";
                                            //worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells["J" + RowB + ":J" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "PPN 10% ";
                                            //worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells["K" + RowB + ":K" + RowG].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "TOTAL Fee Sinvest & PPN ";
                                            //worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;





                                            incRowExcel++;
                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //string _range = "A" + incRowExcel + ":K" + incRowExcel;

                                            //using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I

                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {





                                                //ThickBox Border HEADER
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;
                                                worksheet.Cells["A" + RowD + ":K" + RowE].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":K" + RowE].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":K" + RowE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":K" + RowE].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NetFeeAmountMI;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TaxFeeAmountMI;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TotalFeeAmountMI;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NetFeeAmountCustodi;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.TaxFeeAmountCustodi;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.TotalFeeAmountCustodi;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.NetFeeAmountSInvest;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.TaxFeeAmountSInvest;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalFeeAmountSInvest;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Calculate();

                                            incRowExcel = incRowExcel + 2;

                                            incRowExcel = incRowExcel + 1;
                                            int _Rows = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL FEE MI";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                            worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "PPN 10%";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                            worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "PPH 2%";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _Rows + "*2%)";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        }

                                        //string _rangeDetail = "A:K";

                                        //using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        //{
                                        //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        //    r.Style.Font.Size = 11;
                                        //    r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //}

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND JOURNAL VOUCHER";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Counterpart Transaction
            else if (_FundAccountingRpt.ReportName.Equals("Counterpart Transaction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramCounterpart = "";
                            string _paramFundFrom = "";


                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            if (!_host.findString(_FundAccountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.CounterpartFrom))
                            {
                                _paramCounterpart = "And A.CounterpartPK  in ( " + _FundAccountingRpt.CounterpartFrom + " ) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }

                            cmd.CommandText = @"
                            select B.Name CounterpartName,B.ID CounterpartID,A.DoneAmount TotalYTD,A.CommissionAmount,A.CommissionPercent from Investment A
                            left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.status = 2 
                            Where A.ValueDate between @ValueDateFrom and @ValueDateTo " + _paramFundFrom + _paramCounterpart + @" and A.StatusSettlement = 2 ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CounterpartTransaction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CounterpartTransaction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CounterpartTransaction";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Counterpart Transaction");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CounterpartTransaction> rList = new List<CounterpartTransaction>();
                                        while (dr0.Read())
                                        {
                                            CounterpartTransaction rSingle = new CounterpartTransaction();
                                            rSingle.CommissionPercent = Convert.ToDecimal(dr0["CommissionPercent"]);
                                            rSingle.CommissionAmount = Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.CounterpartID = Convert.ToString(dr0["CounterpartID"]);
                                            rSingle.CounterpartName = Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.TotalYTD = Convert.ToDecimal(dr0["TotalYTD"]);
                                            rSingle.TargetAllocation = Convert.ToDecimal(dr0["CommissionPercent"]);
                                            rSingle.Total = Convert.ToDecimal(dr0["TotalYTD"]);
                                            rSingle.percent = Convert.ToDecimal(dr0["CommissionPercent"]);//
                                            rSingle.Selisih = Convert.ToDecimal(dr0["CommissionPercent"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                                ////orderby r.FundJournalAccountID, r.ValueDate, r.RefNo, r.FundClientID, r.InstrumentID ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;



                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            //ThickBox Border

                                            worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 1].Value = "BROKER";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL YTD";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "%";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "TARGET ALLOCATION";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "%";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "SELISIH";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                //ThickBox Border

                                                worksheet.Cells["A" + RowD + ":G" + RowE].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":G" + RowE].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":G" + RowE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":G" + RowE].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.TotalYTD;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.CommissionPercent;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TargetAllocation;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Total;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.percent;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Selisih;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                _endRowDetail = incRowExcel;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }



                                            worksheet.Cells["A" + _endRowDetail + ":G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#.##0.00";
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#.##0.00";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#.##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#.##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                            incRowExcel = incRowExcel + 2;



                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:H" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 35;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n \n \n &30&B Transaction Report Laporan Akun Bulanan Client";
                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 10.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftTextDisclaimer();
                                        //
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Broker Win atau Loss Summary
            else if (_FundAccountingRpt.ReportName.Equals("Broker Win atau Loss Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramCounterpart = "";
                            string _paramFundFrom = "";




                            //if (!_host.findString(_FundAccountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.CounterpartFrom))
                            //{
                            //    _paramCounterpart = "And A.CounterpartPK  in ( " + _FundAccountingRpt.CounterpartFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramCounterpart = "";
                            //}

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText = @"
                            select A.ApprovedDealingID,A.TrxTypeID,B.ID InstrumentID,isnull(D.ID,'') CounterpartID,A.InterestPercent,
                            isnull(A.DonePrice,0) ClosePrice,A.DonePrice from investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.status = 2
                            where A.ValueDate between @ValuedateFrom and @ValuedateTo " + _paramFundFrom + @" and A.StatusSettlement = 2 ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                            //cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BrokerWinatauLossSummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BrokerWinatauLossSummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Broker Win atau Loss Summary");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BrokerWinatauLossSummary> rList = new List<BrokerWinatauLossSummary>();
                                        while (dr0.Read())
                                        {
                                            BrokerWinatauLossSummary rSingle = new BrokerWinatauLossSummary();
                                            rSingle.Board = Convert.ToString(dr0["CounterPartID"]);
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.CounterPartID = Convert.ToString(dr0["CounterPartID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.AvgPriceDeal = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.ClosingMarketPrice = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.DealingID = Convert.ToString(dr0["ApprovedDealingID"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                                //orderby r.FundJournalAccountID, r.ValueDate, r.RefNo, r.FundClientID, r.InstrumentID ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Broker Win/Loss Summary ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;


                                            incRowExcel = incRowExcel + 3;


                                            //ThickBox Border HEADER

                                            //int RowB = incRowExcel;
                                            //int RowG = incRowExcel + 1;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "Order ID.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "Board";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Ticker";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "Transaction";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Avg Price Deal";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "Closing Market Price";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "%";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            string _range = "A" + incRowExcel + ":G" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I


                                                incRowExcel++;
                                            //int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //ThickBox Border HEADER
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingID;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Board;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TrxTypeID;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AvgPriceDeal;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.ClosingMarketPrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }

                                        }

                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 BROKER WIN ATAU LOSS SUMMARY";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Historical Bond
            else if (_FundAccountingRpt.ReportName.Equals("Historical Bond"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        DateTime _dateTimeNow = DateTime.Now;
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText =

                            @"
                            select A.InvestmentNotes,A.FundPK,A.TrxTypeID,C.ID InstrumentID,C.Name InstrumentName,C.ISIN IsinCode,isnull(E.ID,'') Industry,isnull(E.ID,'') SektorID,B.Name FundName,D.ID Custody,F.Name Counterpart
                            ,A.Reference DealNo,A.SettlementDate,A.DoneAmount UnitNominal,A.DonePrice,A.Amount Proceeds,A.AccruedInterest AccruedInterestBought,isnull(A.TaxExpensePercent,0) TaxFinal
                            ,isnull(A.TaxExpensePercent,0) NonFinal,A.DoneAmount TotalSettleCounterpart,isnull(A.TaxExpensePercent,0) TotalSettleTaxOffice,A.DoneAmount TotalSettle, C.InterestPercent, C.MaturityDate, A.AcqDate, A.AcqPrice, F.Name Counterpart from Investment A
                            left join Fund B on A.FundPK = B.FundPK and B.status = 2
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
                            left join BankBranch D on A.BankBranchPK = D.BankBranchPK and D.status = 2
                            left join Sector E on C.SectorPK = E.SectorPK and E.status = 2
                            left join Counterpart F on A.CounterpartPK = F.CounterpartPK and F.status = 2                            
                            where A.ValueDate between @ValuedateFrom and @ValuedateTo and StatusSettlement = 2 and C.InstrumentTypePK = 3 " + _paramFundFrom;


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValuedateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValuedateTo", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoricalBond" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoricalBond" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "HistoricalBond";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Historical Bond");

                                        int incRowExcel = 1;

                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "Recap Deal Fixed Income";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Book Date     :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy") + " - " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd/MMM/yyyy");
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<HistoricalBond> rList = new List<HistoricalBond>();
                                        while (dr0.Read())
                                        {
                                            HistoricalBond rSingle = new HistoricalBond();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.IsinCode = Convert.ToString(dr0["IsinCode"]);
                                            rSingle.Industry = Convert.ToString(dr0["Industry"]);
                                            rSingle.SectorID = Convert.ToString(dr0["SektorID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Custody = Convert.ToString(dr0["Custody"]);
                                            rSingle.Counterpart = Convert.ToString(dr0["Counterpart"]);
                                            rSingle.DealNo = Convert.ToString(dr0["DealNo"]);
                                            rSingle.SettlementDate = Convert.ToString(dr0["SettlementDate"]);
                                            rSingle.UnitNominal = Convert.ToDecimal(dr0["UnitNominal"]);
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.Proceeds = Convert.ToDecimal(dr0["Proceeds"]);
                                            rSingle.AccruedInterestBought = Convert.ToDecimal(dr0["AccruedInterestBought"]);
                                            rSingle.TaxFinal = Convert.ToDecimal(dr0["TaxFinal"]);
                                            rSingle.NonFinal = Convert.ToDecimal(dr0["NonFinal"]);
                                            rSingle.TotalSettleCounterpart = Convert.ToDecimal(dr0["TotalSettleCounterpart"]);
                                            rSingle.TotalSettleTaxOffice = Convert.ToDecimal(dr0["TotalSettleTaxOffice"]);
                                            rSingle.TotalSettle = Convert.ToDecimal(dr0["TotalSettle"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"]);
                                            rSingle.AcqDate = Convert.ToString(dr0["AcqDate"]);
                                            rSingle.AcqPrice = Convert.ToDecimal(dr0["AcqPrice"]);
                                            rSingle.Counterpart = Convert.ToString(dr0["Counterpart"]);
                                            rSingle.Remark = Convert.ToString(dr0["InvestmentNotes"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { r.FundPK, r.TrxTypeID } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Transaction Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + rsHeader.Key.TrxTypeID;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Manager";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + _host.Get_CompanyName();

                                            worksheet.Cells[incRowExcel, 10].Value = "Print Date : " + Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Custodian Bank";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_BankCustodianName(rsHeader.Key.FundPK);

                                            worksheet.Cells[incRowExcel, 10].Value = "Print Time : " + Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundName(rsHeader.Key.FundPK);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundType(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account No";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundSinvestCode(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Period";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 2].Value = " : IDR";

                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "ID";
                                            worksheet.Cells[incRowExcel, 2].Value = "ISIN CODE";
                                            worksheet.Cells[incRowExcel, 3].Value = "Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Maturity Date";
                                            worksheet.Cells[incRowExcel, 5].Value = "Interest Rate";
                                            worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 7].Value = "Acq Date";
                                            worksheet.Cells[incRowExcel, 8].Value = "Acq Price";
                                            worksheet.Cells[incRowExcel, 9].Value = "Broker";
                                            worksheet.Cells[incRowExcel, 10].Value = "Remark";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            //["C" + RowC + ":C" + RowW]

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.IsinCode;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.UnitNominal;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.AcqDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AcqPrice;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Counterpart;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Remark;



                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Size = 12;

                                                _endRowDetail = incRowExcel;

                                                incRowExcel++;
                                                //no++;
                                            }

                                            worksheet.Cells[incRowExcel, 3].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 13, incRowExcel, 21].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
                                            incRowExcel++;
                                            //incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 60;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 40;
                                        worksheet.Column(10).Width = 40;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20&B HISTORICAL BOND";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Historical Stocks
            else if (_FundAccountingRpt.ReportName.Equals("Historical Stocks"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        DateTime _dateTimeNow = DateTime.Now;
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText =

                            @"
                            select A.InvestmentNotes, A.FundPK,A.TrxTypeID,C.ID InstrumentID,C.Name InstrumentName,C.ISIN IsinCode,isnull(E.ID,'') Industry,isnull(E.ID,'') SektorID,B.Name FundName,D.ID Custody,F.Name Counterpart
                            ,A.Reference DealNo,A.SettlementDate,A.DoneAmount UnitNominal,A.DonePrice,A.Amount Proceeds,A.AccruedInterest AccruedInterestBought,isnull(A.TaxExpensePercent,0) TaxFinal
                            ,isnull(A.TaxExpensePercent,0) NonFinal,A.DoneAmount TotalSettleCounterpart,isnull(A.TaxExpensePercent,0) TotalSettleTaxOffice,A.DoneAmount TotalSettle, C.InterestPercent, F.Name Counterpart from Investment A
                            left join Fund B on A.FundPK = B.FundPK and B.status = 2
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
                            left join BankBranch D on A.BankBranchPK = D.BankBranchPK and D.status = 2
                            left join Sector E on C.SectorPK = E.SectorPK and E.status = 2
                            left join Counterpart F on A.CounterpartPK = F.CounterpartPK and F.status = 2                            
                            where A.ValueDate between @ValuedateFrom and @ValuedateTo and StatusSettlement = 2 and C.InstrumentTypePK = 1 " + _paramFundFrom;


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValuedateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValuedateTo", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoricalStocks" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoricalStocks" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "HistoricalBond";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Historical Stocks");

                                        int incRowExcel = 1;

                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "Recap Deal Fixed Income";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Book Date     :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy") + " - " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd/MMM/yyyy");
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<HistoricalStocks> rList = new List<HistoricalStocks>();
                                        while (dr0.Read())
                                        {
                                            HistoricalStocks rSingle = new HistoricalStocks();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.IsinCode = Convert.ToString(dr0["IsinCode"]);
                                            rSingle.Industry = Convert.ToString(dr0["Industry"]);
                                            rSingle.SectorID = Convert.ToString(dr0["SektorID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Custody = Convert.ToString(dr0["Custody"]);
                                            rSingle.Counterpart = Convert.ToString(dr0["Counterpart"]);
                                            rSingle.DealNo = Convert.ToString(dr0["DealNo"]);
                                            rSingle.SettlementDate = Convert.ToString(dr0["SettlementDate"]);
                                            rSingle.UnitNominal = Convert.ToDecimal(dr0["UnitNominal"]);
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.Proceeds = Convert.ToDecimal(dr0["Proceeds"]);
                                            rSingle.AccruedInterestBought = Convert.ToDecimal(dr0["AccruedInterestBought"]);
                                            rSingle.TaxFinal = Convert.ToDecimal(dr0["TaxFinal"]);
                                            rSingle.NonFinal = Convert.ToDecimal(dr0["NonFinal"]);
                                            rSingle.TotalSettleCounterpart = Convert.ToDecimal(dr0["TotalSettleCounterpart"]);
                                            rSingle.TotalSettleTaxOffice = Convert.ToDecimal(dr0["TotalSettleTaxOffice"]);
                                            rSingle.TotalSettle = Convert.ToDecimal(dr0["TotalSettle"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                            //rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"]);
                                            //rSingle.AcqDate = Convert.ToString(dr0["AcqDate"]);
                                            //rSingle.AcqPrice = Convert.ToDecimal(dr0["AcqPrice"]);
                                            rSingle.Counterpart = Convert.ToString(dr0["Counterpart"]);
                                            rSingle.Remark = Convert.ToString(dr0["InvestmentNotes"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { r.FundPK, r.TrxTypeID } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Transaction Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + rsHeader.Key.TrxTypeID;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Manager";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + _host.Get_CompanyName();

                                            worksheet.Cells[incRowExcel, 8].Value = "Print Date : " + Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Custodian Bank";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_BankCustodianName(rsHeader.Key.FundPK);

                                            worksheet.Cells[incRowExcel, 8].Value = "Print Time : " + Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundName(rsHeader.Key.FundPK);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundType(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account No";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Get_FundSinvestCode(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Period";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 2].Value = " : IDR";

                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "ID";
                                            worksheet.Cells[incRowExcel, 2].Value = "ISIN CODE";
                                            worksheet.Cells[incRowExcel, 3].Value = "Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 5].Value = "Acq Date";
                                            worksheet.Cells[incRowExcel, 6].Value = "Acq Price";
                                            worksheet.Cells[incRowExcel, 7].Value = "Broker";
                                            worksheet.Cells[incRowExcel, 8].Value = "Remark";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            //["C" + RowC + ":C" + RowW]

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.IsinCode;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                //worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.UnitNominal;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.AcqDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.AcqPrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Counterpart;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Remark;



                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 12;

                                                _endRowDetail = incRowExcel;

                                                incRowExcel++;
                                                //no++;
                                            }

                                            worksheet.Cells[incRowExcel, 3].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 13, incRowExcel, 21].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
                                            incRowExcel++;
                                            //incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 8];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 60;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 40;
                                        worksheet.Column(8).Width = 40;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20&B HISTORICAL STOCK ";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Bond Valuation Report
            else if (_FundAccountingRpt.ReportName.Equals("Bond Valuation Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText =

                              @"
                                select A.Date,B.ID FundID,B.Name FundNAme, C.Name InstrumentName, A.Balance Nominal,isnull(A.InterestPercent,0) Interest,E.Address Alamat,F.ID BankCustody,E.ContactPerson,
                                A.CostValue InterestAmount,A.TrxAmount Tax,A.CostValue InterestAmountBalance from fundposition A
                                left join fund B on A.fundPK = B.FundPK and B.status = 2
                                left join Instrument C on A.instrumentPK = C.instrumentPK and C.status = 2
                                left join FundCashRef D on B.FundPK = D.FundPK and D.status = 2
                                left join BankBranch E on D.BankBranchPK = E.BankBranchPK and E.status = 2
                                left join Bank F on E.BankPK = F.BankPK and F.status = 2
                                where A.Date Between @ValueDateFrom and @ValueDateTo 
                               ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BondValuationReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BondValuationReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "BondValuationReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("BondPortofolio");

                                        int incRowExcel = 1;




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BondValuationReport> rList = new List<BondValuationReport>();
                                        while (dr0.Read())
                                        {
                                            BondValuationReport rSingle = new BondValuationReport();
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.kodeKSEI = Convert.ToString(dr0["FundID"]);
                                            rSingle.NamaObligasi = Convert.ToString(dr0["FundName"]);
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Nominal"]);
                                            rSingle.Today = Convert.ToDecimal(dr0["Interest"]);
                                            rSingle.Yesterday = Convert.ToDecimal(dr0["InterestAmount"]);
                                            rSingle.Alamat = Convert.ToString(dr0["Alamat"]);
                                            rSingle.BankCustody = Convert.ToString(dr0["BankCustody"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                   from r in rList
                                                   group r by new { r.FundID, r.BankCustody, r.Alamat, r.ContactPerson } into rGroup
                                                   select rGroup;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth : ";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "CUSTODIAN " + "   " + rsHeader.Key.BankCustody;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Alamat;
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Row(incRowExcel).Height = 55; //perbesar row
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Alamat;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Up. " + rsHeader.Key.ContactPerson;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dengan hormat,";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;


                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundID;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "KODE KSEI";
                                            worksheet.Cells[incRowExcel, 3].Value = "NAMA OBLIGASI";
                                            worksheet.Cells[incRowExcel, 4].Value = "NOMINAL";
                                            worksheet.Cells[incRowExcel, 5].Value = "TODAY";
                                            worksheet.Cells[incRowExcel, 6].Value = "YESTERDAY";
                                            worksheet.Cells[incRowExcel, 7].Value = "CHANGE";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.kodeKSEI;
                                                worksheet.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NamaObligasi;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Nominal;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Today;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Yesterday;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Change;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel - 1;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + first.ToString() + ":D" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                            incRowExcel = incRowExcel + 1;
                                        }


                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "Demikian informasi yang dapat kami sampaikan. Atas perhatian dan kerja samanya kami ucapkan terima kasih.";
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 2].Value = "Prepared By,";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "Verified By,";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "Approved By,";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel = incRowExcel + 3;
                                        worksheet.Cells[incRowExcel, 2].Value = "Verified By,";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 4].Value = "Fund Manager";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 6].Value = "Direktur";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 7];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 35;
                                        worksheet.Column(7).Width = 15;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 REKSA DANA PT EMCO ASSET MANAGEMENT \n " + "&12 Bond Valuation Report ";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Transaction Summary
            else if (_FundAccountingRpt.ReportName.Equals("Transaction Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText =

                            @"
                            select A.ValueDate TransactionDate,isnull(A.SettlementDate,'') SettlementDate,B.ID ForReksaDana,case when A.TrxTypeID = 'BUY' then 'B' else 'S' end TrxTypeID,C.ID InstrumentID,A.DonePrice PriceAvg,A.DoneLot Lot
                            ,A.Amount VolumAmount,isnull(D.ID,'') CounterpartID from Investment A
                            left join Fund B on A.FundPK = B.FundPK and B.status = 2
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
                            left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.status = 2
                            where A.ValueDate between @ValuedateFrom and @ValuedateTo and C.InstrumentTypePK = 1 " + _paramFundFrom
                            ;


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            //cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TransactionSummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TransactionSummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "Fund Accounting Report";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Transaction Summary");

                                        int incRowExcel = 1;



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TransactionSummary> rList = new List<TransactionSummary>();
                                        while (dr0.Read())
                                        {
                                            TransactionSummary rSingle = new TransactionSummary();
                                            rSingle.TransactionDate = Convert.ToDateTime(dr0["TransactionDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.ForReksaDana = Convert.ToString(dr0["ForReksaDana"]);
                                            rSingle.BuySell = Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.StockCode = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.PriceAvg = Convert.ToDecimal(dr0["PriceAvg"]);
                                            //rSingle.CostPortofolio = Convert.ToString(dr0["CostPortofolio"]);
                                            rSingle.Lot = Convert.ToDecimal(dr0["Lot"]);
                                            //rSingle.Profit = Convert.ToDecimal(dr0["Profit"]);
                                            rSingle.ValueAmount = Convert.ToDecimal(dr0["VolumAmount"]);
                                            rSingle.Broker = Convert.ToString(dr0["CounterpartID"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { } into rGroup
                                                     select rGroup;

                                        //int incRowExcel = 1;
                                        int RowA = incRowExcel;
                                        incRowExcel = incRowExcel + 1;
                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Investment Transaction ";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Transaction for Equity Instrument";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Period                          :";
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " - " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;



                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            int RowBZ = incRowExcel;
                                            int RowGZ = incRowExcel + 1;

                                            worksheet.Row(incRowExcel).Height = 12;
                                            worksheet.Cells[incRowExcel, 1].Value = "Transaction Date";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Merge = true;
                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Settlement Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "For Reksa Dana";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "B / S";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                            worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Stock Code";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                            worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Price/Avg";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Merge = true;
                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Cost Portofolio ";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Merge = true;
                                            worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Lot(s)";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Merge = true;
                                            worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Profit %";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowBZ + ":I" + RowGZ].Merge = true;
                                            worksheet.Cells["I" + RowBZ + ":I" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowBZ + ":I" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Value Amount";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowBZ + ":J" + RowGZ].Merge = true;
                                            worksheet.Cells["J" + RowBZ + ":J" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowBZ + ":J" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Broker";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowBZ + ":K" + RowGZ].Merge = true;
                                            worksheet.Cells["K" + RowBZ + ":K" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowBZ + ":K" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;


                                                //ThickBox Border

                                                worksheet.Cells["A" + RowBZ + ":K" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowBZ + ":K" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                //worksheet.Cells[incRowExcel, 1].Value = _no;
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.TransactionDate;
                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ForReksaDana;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.BuySell;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.StockCode;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.PriceAvg;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CostPortofolio;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Lot;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Profit;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.ValueAmount;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Broker;
                                                worksheet.Cells[incRowExcel, 11].Style.Font.Color.SetColor(Color.Blue);
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Row(incRowExcel).Height = 12;

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            worksheet.Cells["A" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowBZ + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowBZ + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowBZ + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowBZ + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowBZ + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowBZ + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowBZ + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowBZ + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowBZ + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowBZ + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowBZ + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowBZ + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowBZ + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowBZ + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowBZ + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowBZ + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowBZ + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells["L" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["L" + RowBZ + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        }


                                        //Masuk Query baru
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =
                                                        @"
                                                        select A.ValueDate TransactionDate,isnull(A.SettlementDate,'') SettlementDate,B.ID ForReksaDana,A.TrxTypeID,C.ID InstrumentID,A.DonePrice PriceAvg,A.DoneLot Lot
                                                        ,A.Amount VolumAmount,isnull(D.ID,'') CounterpartID from Investment A
                                                        left join Fund B on A.FundPK = B.FundPK and B.status = 2
                                                        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
                                                        left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.status = 2
                                                        where A.ValueDate between @ValuedateFrom and @ValuedateTo and C.InstrumentTypePK = 1 " + _paramFundFrom
                                                        ;


                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);

                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<TransactionSummary> rList1 = new List<TransactionSummary>();
                                                            while (dr1.Read())
                                                            {
                                                                TransactionSummary rSingle1 = new TransactionSummary();
                                                                rSingle1.TransactionDate = Convert.ToDateTime(dr1["TransactionDate"]);
                                                                rSingle1.SettlementDate = Convert.ToDateTime(dr1["SettlementDate"]);
                                                                rSingle1.ForReksaDana = Convert.ToString(dr1["ForReksaDana"]);
                                                                rSingle1.BuySell = Convert.ToString(dr1["TrxTypeID"]);
                                                                rSingle1.StockCode = Convert.ToString(dr1["InstrumentID"]);
                                                                rSingle1.PriceAvg = Convert.ToDecimal(dr1["PriceAvg"]);
                                                                rSingle1.Lot = Convert.ToDecimal(dr1["Lot"]);
                                                                rSingle1.ValueAmount = Convert.ToDecimal(dr1["VolumAmount"]);
                                                                rSingle1.Broker = Convert.ToString(dr1["CounterpartID"]);
                                                                rList1.Add(rSingle1);

                                                            }

                                                            incRowExcel = incRowExcel + 2;
                                                            worksheet.Cells[incRowExcel, 1].Value = "TRANSAKSI REGULER  :  " + Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy") + " - " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd/MMM/yyyy");
                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 7].Value = "TRANSAKSI NEGO  :  " + Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy") + " - " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd/MMM/yyyy");
                                                            worksheet.Cells["G" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                                            worksheet.Cells["G" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            var QueryByFundID1 =
                                                            from r1 in rList1
                                                            group r1 by new { } into rGroup1
                                                            select rGroup1;

                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {
                                                                //-----------------------------------------


                                                                incRowExcel = incRowExcel + 2;

                                                                int RowCZ = incRowExcel;
                                                                //int RowHZ = incRowExcel + 1;

                                                                ////TRANSAKSI REGULER
                                                                //worksheet.Row(incRowExcel).Height = 12;
                                                                worksheet.Cells[incRowExcel, 1].Value = "BROKER";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + RowCZ + ":A" + RowCZ].Merge = true;
                                                                worksheet.Cells["A" + RowCZ + ":A" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["A" + RowCZ + ":A" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL Y T D ";
                                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                worksheet.Cells["B" + RowCZ + ":B" + RowCZ].Merge = true;
                                                                worksheet.Cells["B" + RowCZ + ":B" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["B" + RowCZ + ":B" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 3].Value = "%";
                                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                worksheet.Cells["C" + RowCZ + ":C" + RowCZ].Merge = true;
                                                                worksheet.Cells["C" + RowCZ + ":C" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["C" + RowCZ + ":C" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 4].Value = "Target Allocation";
                                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                                worksheet.Cells["D" + RowCZ + ":D" + RowCZ].Merge = true;
                                                                worksheet.Cells["D" + RowCZ + ":D" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["D" + RowCZ + ":D" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 5].Value = "SELISIH";
                                                                worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                worksheet.Cells["E" + RowCZ + ":E" + RowCZ].Merge = true;
                                                                worksheet.Cells["E" + RowCZ + ":E" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["E" + RowCZ + ":E" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                                ////TRANSAKSI NEGO
                                                                //worksheet.Row(incRowExcel).Height = 12;
                                                                worksheet.Cells[incRowExcel, 7].Value = "BROKER";
                                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                                worksheet.Cells["G" + RowCZ + ":G" + RowCZ].Merge = true;
                                                                worksheet.Cells["G" + RowCZ + ":G" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["G" + RowCZ + ":G" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 8].Value = "TOTAL Y T D ";
                                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                                worksheet.Cells["H" + RowCZ + ":H" + RowCZ].Merge = true;
                                                                worksheet.Cells["H" + RowCZ + ":H" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["H" + RowCZ + ":H" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 9].Value = "%";
                                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                                worksheet.Cells["I" + RowCZ + ":I" + RowCZ].Merge = true;
                                                                worksheet.Cells["I" + RowCZ + ":I" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["I" + RowCZ + ":I" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 10].Value = "Target Allocation";
                                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                                worksheet.Cells["J" + RowCZ + ":J" + RowCZ].Merge = true;
                                                                worksheet.Cells["J" + RowCZ + ":J" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["J" + RowCZ + ":J" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 11].Value = "SELISIH";
                                                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                                worksheet.Cells["K" + RowCZ + ":K" + RowCZ].Merge = true;
                                                                worksheet.Cells["K" + RowCZ + ":K" + RowCZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["K" + RowCZ + ":K" + RowCZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                incRowExcel++;

                                                                int RowS = incRowExcel;

                                                                //incRowExcel++;
                                                                //area header

                                                                //int _no2 = 1;
                                                                int _startRowDetail2 = incRowExcel;
                                                                int _endRowDetail2 = 0;

                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    //Row D = 5
                                                                    int RowD = incRowExcel;
                                                                    int RowE = incRowExcel + 1;


                                                                    //ThickBox Border
                                                                    worksheet.Cells["A" + RowCZ + ":E" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowCZ + ":E" + RowCZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowCZ + ":K" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowCZ + ":K" + RowCZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    //area detail REGULER
                                                                    //worksheet.Cells[incRowExcel, 1].Value = _no2;
                                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail1.Broker;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail1.ValueAmount;
                                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail1.PriceAvg;
                                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00%";
                                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail1.Lot;
                                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00%";
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Lot;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00%";

                                                                    //area detail NEGO
                                                                    //worksheet.Cells[incRowExcel, 1].Value = _no2;
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Broker;
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail1.ValueAmount;
                                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail1.PriceAvg;
                                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00%";
                                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail1.Lot;
                                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00%";
                                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail1.Lot;
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00%";

                                                                    //worksheet.Row(incRowExcel).Height = 12;

                                                                    _endRowDetail2 = incRowExcel;
                                                                    //_no2++;
                                                                    incRowExcel++;


                                                                }

                                                                //REGULER
                                                                worksheet.Cells[_startRowDetail2, 3, _endRowDetail2, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[_startRowDetail2, 3, _endRowDetail2, 3].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 246, 34));
                                                                worksheet.Cells[_startRowDetail2, 4, _endRowDetail2, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[_startRowDetail2, 4, _endRowDetail2, 4].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(75, 198, 231));
                                                                worksheet.Cells[_startRowDetail2, 5, _endRowDetail2, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[_startRowDetail2, 5, _endRowDetail2, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(46, 196, 57));

                                                                worksheet.Cells["A" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + RowCZ + ":A" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + RowCZ + ":A" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells["B" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["B" + RowCZ + ":B" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["B" + RowCZ + ":B" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["B" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells["C" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["C" + RowCZ + ":C" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["C" + RowCZ + ":C" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["C" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells["D" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["D" + RowCZ + ":D" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["D" + RowCZ + ":D" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["D" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells["E" + RowCZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["E" + RowCZ + ":E" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["E" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                //NEGO
                                                                worksheet.Cells[_startRowDetail2, 9, _endRowDetail2, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[_startRowDetail2, 9, _endRowDetail2, 9].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 246, 34));
                                                                worksheet.Cells[_startRowDetail2, 10, _endRowDetail2, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[_startRowDetail2, 10, _endRowDetail2, 10].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(75, 198, 231));
                                                                worksheet.Cells[_startRowDetail2, 11, _endRowDetail2, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[_startRowDetail2, 11, _endRowDetail2, 11].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(46, 196, 57));

                                                                worksheet.Cells["G" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["G" + RowCZ + ":G" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["G" + RowCZ + ":G" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["G" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells["H" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["H" + RowCZ + ":H" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["H" + RowCZ + ":H" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["H" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells["I" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["I" + RowCZ + ":I" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["I" + RowCZ + ":I" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["I" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells["J" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["J" + RowCZ + ":J" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["J" + RowCZ + ":J" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["J" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells["K" + RowCZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["K" + RowCZ + ":K" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["K" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                int _endRowDetail3 = incRowExcel;
                                                                incRowExcel++;
                                                                //REGULER
                                                                worksheet.Cells[_endRowDetail3, 2].Formula = "SUM(B" + _startRowDetail2 + ":B" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 3].Formula = "SUM(C" + _startRowDetail2 + ":C" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 4].Formula = "SUM(D" + _startRowDetail2 + ":D" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 5].Formula = "SUM(E" + _startRowDetail2 + ":E" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 2].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 3].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 4].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 5].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 2].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 3].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 4].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 5].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 2].Style.Numberformat.Format = "#,##0.0000";
                                                                worksheet.Cells[_endRowDetail3, 3].Style.Numberformat.Format = "#,##0.00%";
                                                                worksheet.Cells[_endRowDetail3, 4].Style.Numberformat.Format = "#,##0.00%";
                                                                worksheet.Cells[_endRowDetail3, 5].Style.Numberformat.Format = "#,##0.00%";
                                                                //NEGO
                                                                worksheet.Cells[_endRowDetail3, 8].Formula = "SUM(H" + _startRowDetail2 + ":H" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 9].Formula = "SUM(I" + _startRowDetail2 + ":I" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 10].Formula = "SUM(J" + _startRowDetail2 + ":J" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 11].Formula = "SUM(K" + _startRowDetail2 + ":K" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 8].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 9].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 10].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 11].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 8].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 9].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 10].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 11].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 8].Style.Numberformat.Format = "#,##0.0000";
                                                                worksheet.Cells[_endRowDetail3, 9].Style.Numberformat.Format = "#,##0.00%";
                                                                worksheet.Cells[_endRowDetail3, 10].Style.Numberformat.Format = "#,##0.00%";
                                                                worksheet.Cells[_endRowDetail3, 11].Style.Numberformat.Format = "#,##0.00%";

                                                                //REGULER
                                                                worksheet.Cells["A" + _endRowDetail3 + ":A" + _endRowDetail3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + _endRowDetail3 + ":E" + _endRowDetail3].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + _endRowDetail3 + ":E" + _endRowDetail3].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + _endRowDetail3 + ":E" + _endRowDetail3].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                //REGULER
                                                                worksheet.Cells["G" + _endRowDetail3 + ":G" + _endRowDetail3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["G" + _endRowDetail3 + ":K" + _endRowDetail3].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["G" + _endRowDetail3 + ":K" + _endRowDetail3].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["G" + _endRowDetail3 + ":K" + _endRowDetail3].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            }


                                                            //incRowExcel++;
                                                            int _lastRow = incRowExcel;

                                                            string _rangeA = "A:L" + incRowExcel;
                                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                            {
                                                                r.Style.Font.Size = 12;
                                                            }

                                                            worksheet.DeleteRow(_lastRow);

                                                            int RowQ = incRowExcel;
                                                            int RowZ = incRowExcel + 2;



                                                            incRowExcel = incRowExcel + 3;

                                                            worksheet.PrinterSettings.FitToPage = true;
                                                            worksheet.PrinterSettings.FitToWidth = 1;
                                                            worksheet.PrinterSettings.FitToHeight = 0;
                                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                                            worksheet.Column(1).Width = 20;
                                                            worksheet.Column(2).Width = 20;
                                                            worksheet.Column(3).Width = 15;
                                                            worksheet.Column(4).Width = 20;
                                                            worksheet.Column(5).Width = 15;
                                                            worksheet.Column(6).Width = 15;
                                                            worksheet.Column(7).Width = 15;
                                                            worksheet.Column(8).Width = 20;
                                                            worksheet.Column(9).Width = 15;
                                                            worksheet.Column(10).Width = 25;
                                                            worksheet.Column(11).Width = 15;


                                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                            //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                                            //worksheet.PrinterSettings.FitToPage = true;
                                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                            worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                                            //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 REKSA DANA PT EMCO ASSET MANAGEMENT \n " + "&12 Transaction Summary ";

                                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                            //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                                            worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                                            worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                                            worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                                            Image img = Image.FromFile(Tools.ReportImage);
                                                            worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                            worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                                            package.Save();
                                                            if (_FundAccountingRpt.DownloadMode == "PDF")
                                                            {
                                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                                            }
                                                            //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                                            return true;
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Deposit Recap
            else if (_FundAccountingRpt.ReportName.Equals("Deposit Recap"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            //string _paramFundClient = "";
                            //string _status = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            //if (!_host.findString(_FundAccountingRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundClientFrom))
                            //{
                            //    _paramFundClient = "And A.FundClientPK in ( " + _FundAccountingRpt.FundClientFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundClient = "";
                            //}




                            cmd.CommandText =

                            @" 
                            select B.Name FundName,C.ID Remarks,A.ValueDate TradeDate,A.MaturityDate,A.Tenor,A.InterestPercent Rate,A.Amount,sum((A.Amount * A.InterestPercent)/365) InterestAmount,
                            C.TaxExpensePercent Tax,A.DoneAmount TotalReceived from investment A
                            left join Fund B on A.FundPK = B.FundPK and B.status = 2
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
                            left join FundPosition D on B.FundPK = D.FundPK and D.status = 2
                            where A.ValueDate between  @ValueDateFrom and @ValuedateTo and C.InstrumentTypePK = 5 and A.StatusSettlement = 2 " + _paramFund + @"
                            Group by B.Name,C.ID,A.MaturityDate,A.ValueDate,A.Tenor,A.InterestPercent,A.Amount,C.TaxExpensePercent,A.DoneAmount ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValuedateTo", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DepositRecap" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DepositRecap" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Customer Deposito Recap");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DepositRecap> rList = new List<DepositRecap>();
                                        while (dr0.Read())
                                        {
                                            DepositRecap rSingle = new DepositRecap();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Remarks = Convert.ToString(dr0["Remarks"]);
                                            rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.Tenor = Convert.ToDecimal(dr0["Tenor"]);
                                            rSingle.Rate = Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.InterestAmount = Convert.ToDecimal(dr0["InterestAmount"]);
                                            rSingle.Tax = Convert.ToDecimal(dr0["Tax"]);
                                            rSingle.TotalReceived = Convert.ToDecimal(dr0["TotalReceived"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName, r.TradeDate } into rGroup
                                            select rGroup;



                                        int incRowExcel = 1;
                                        int RowA = incRowExcel;
                                        incRowExcel = incRowExcel + 1;
                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Tgl.";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.TradeDate;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            incRowExcel = incRowExcel + 2;


                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            int RowBZ = incRowExcel;
                                            int RowGZ = incRowExcel + 1;

                                            worksheet.Row(incRowExcel).Height = 25;
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Merge = true;
                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "REMARKS";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "TRADE DATE";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "MATURITY DATE";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                            worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "TENOR (DAYS)";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                            worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "RATE";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Merge = true;
                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "NOMINAL";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Merge = true;
                                            worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "INTEREST";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Merge = true;
                                            worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "TAX 20%";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowBZ + ":I" + RowGZ].Merge = true;
                                            worksheet.Cells["I" + RowBZ + ":I" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowBZ + ":I" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "TOTAL RECEIVED";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowBZ + ":J" + RowGZ].Merge = true;
                                            worksheet.Cells["J" + RowBZ + ":J" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowBZ + ":J" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel - 1;
                                            int _endRowDetail = 0;
                                            int _border = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5


                                                //ThickBox Border

                                                worksheet.Cells["A" + RowBZ + ":J" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowBZ + ":J" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Remarks;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TradeDate;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Tenor;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Rate;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Tax;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.TotalReceived;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";



                                                _endRowDetail = incRowExcel + 1;
                                                _border = incRowExcel + 2;

                                                _no++;
                                                //worksheet.Cells[_endRowDetail, 10].Style.Numberformat.Format = "#,##0.00";
                                                //worksheet.Cells[_endRowDetail, 10].Style.Font.Bold = true;
                                                //worksheet.Cells[_endRowDetail, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                //worksheet.Cells[_endRowDetail, 10].Calculate();

                                                incRowExcel++;
                                            }

                                            incRowExcel++;

                                            int _endRowDetails = _border + 1;

                                            worksheet.Cells["A" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowBZ + ":A" + _endRowDetails].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowBZ + ":A" + _endRowDetails].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowBZ + ":B" + _endRowDetails].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowBZ + ":D" + _endRowDetails].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowBZ + ":D" + _endRowDetails].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowBZ + ":F" + _endRowDetails].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowBZ + ":F" + _endRowDetails].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowBZ + ":G" + _endRowDetails].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowBZ + ":G" + _endRowDetails].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowBZ + ":H" + _endRowDetails].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowBZ + ":H" + _endRowDetails].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowBZ + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowBZ + ":I" + _endRowDetails].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowBZ + ":J" + _endRowDetails].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowBZ + ":J" + _endRowDetails].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _endRowDetails].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            int _row = incRowExcel;
                                            worksheet.Cells[_row, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[_row, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[_row, 10].Style.Font.Bold = true;
                                            worksheet.Cells[_row, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[_row, 10].Calculate();
                                            worksheet.Cells[_row, 10].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[_row, 7].Style.Font.Bold = true;
                                            worksheet.Cells[_row, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[_row, 7].Calculate();
                                            worksheet.Cells[_row, 7].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel = incRowExcel + 2;
                                            _endRowDetail = _endRowDetail - 1;



                                            incRowExcel = incRowExcel + 2;
                                        }

                                        //Masuk Query baru
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =
                                                        @" 
                                                        select B.Name FundName,C.ID Remarks,A.ValueDate TradeDate,A.MaturityDate,A.Tenor,A.InterestPercent Rate,A.Amount,sum((A.Amount * A.InterestPercent)/365) InterestAmount,
                                                        C.TaxExpensePercent Tax,A.DoneAmount TotalReceived from investment A
                                                        left join Fund B on A.FundPK = B.FundPK and B.status = 2
                                                        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
                                                        left join FundPosition D on B.FundPK = D.FundPK and D.status = 2
                                                        where A.ValueDate between  @ValueDateFrom and @ValuedateTo and C.InstrumentTypePK = 5 and A.StatusSettlement = 2 " + _paramFund + @"
                                                        Group by B.Name,C.ID,A.MaturityDate,A.ValueDate,A.Tenor,A.InterestPercent,A.Amount,C.TaxExpensePercent,A.DoneAmount ";


                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@ValuedateTo", _FundAccountingRpt.ValueDateTo);
                                                cmd1.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<DepositRecap> rList1 = new List<DepositRecap>();
                                                            while (dr1.Read())
                                                            {
                                                                DepositRecap rSingle1 = new DepositRecap();
                                                                rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                                rSingle1.Remarks = Convert.ToString(dr1["Remarks"]);
                                                                rSingle1.TradeDate = Convert.ToDateTime(dr1["TradeDate"]);
                                                                rSingle1.MaturityDate = Convert.ToDateTime(dr1["MaturityDate"]);
                                                                rSingle1.Tenor = Convert.ToDecimal(dr1["Tenor"]);
                                                                rSingle1.Rate = Convert.ToDecimal(dr1["Rate"]);
                                                                rSingle1.Amount = Convert.ToDecimal(dr1["Amount"]);
                                                                rSingle1.InterestAmount = Convert.ToDecimal(dr1["InterestAmount"]);
                                                                rSingle1.Tax = Convert.ToDecimal(dr1["Tax"]);
                                                                rSingle1.TotalReceived = Convert.ToDecimal(dr1["TotalReceived"]);
                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r1 in rList1
                                                                group r1 by new { r1.TradeDate } into rGroup1
                                                                select rGroup1;

                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {
                                                                //-----------------------------------------


                                                                incRowExcel = incRowExcel + 3;

                                                                worksheet.Cells[incRowExcel, 1].Value = "Date";
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader1.Key.TradeDate;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                                                incRowExcel++;

                                                                worksheet.Cells[incRowExcel, 1].Value = "Daftar Deposito Bank";
                                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                incRowExcel = incRowExcel + 2;

                                                                int RowQZ = incRowExcel;
                                                                int RowZZ = incRowExcel + 1;


                                                                worksheet.Cells["A" + RowQZ + ":AL" + RowZZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + RowQZ + ":AL" + RowZZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + RowQZ + ":AL" + RowZZ].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + RowQZ + ":AL" + RowZZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells[incRowExcel, 1].Value = "NO.";
                                                                worksheet.Cells["A" + RowQZ + ":A" + RowZZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["A" + RowQZ + ":A" + RowZZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells["A" + RowQZ + ":A" + RowZZ].Merge = true;

                                                                worksheet.Cells[incRowExcel, 2].Value = "BANK DEPOSITO";
                                                                worksheet.Cells["B" + RowQZ + ":B" + RowZZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["B" + RowQZ + ":B" + RowZZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells["B" + RowQZ + ":B" + RowZZ].Merge = true;
                                                                worksheet.Cells["B" + RowQZ + ":B" + RowZZ].Style.WrapText = true;

                                                                worksheet.Cells[incRowExcel, 3].Value = "RATE";
                                                                worksheet.Cells["C" + RowQZ + ":C" + RowZZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["C" + RowQZ + ":C" + RowZZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells["C" + RowQZ + ":C" + RowZZ].Merge = true;

                                                                worksheet.Cells[incRowExcel, 38].Value = "TOTAL";
                                                                worksheet.Cells[incRowExcel, 38].Style.Font.Bold = true;
                                                                worksheet.Cells["AL" + RowQZ + ":AL" + RowZZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["AL" + RowQZ + ":AL" + RowZZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells["AL" + RowQZ + ":AL" + RowZZ].Merge = true;

                                                                worksheet.Cells[incRowExcel, 4].Value = "NOMINAL";
                                                                worksheet.Cells["D" + incRowExcel + ":AK" + incRowExcel].Merge = true;
                                                                worksheet.Cells["D" + incRowExcel + ":AK" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["D" + incRowExcel + ":AK" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                incRowExcel++;


                                                                worksheet.Cells[incRowExcel, 4].Value = "LANCAR";
                                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 5].Value = "PASAR UANG II";
                                                                worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 6].Value = "SYARIAH BAROKAH";
                                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 7].Value = "LIKUID";
                                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 8].Value = "SYARIAH";
                                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 9].Value = "SBN";
                                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 10].Value = "PENDAPATAN TETAP II";
                                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 11].Value = "PENDAPATAN TETAP III";
                                                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 12].Value = "PENDAPATAN TETAP IV";
                                                                worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 13].Value = "EKUITAS";
                                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 14].Value = "SYAR EKUITAS";
                                                                worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 15].Value = "SYAR EKUITAS II";
                                                                worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 16].Value = "SAHAM";
                                                                worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 17].Value = "SAHAM II";
                                                                worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 17].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 18].Value = "MNC36";
                                                                worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 18].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 19].Value = "KOMBINASI";
                                                                worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 19].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                                worksheet.Cells[incRowExcel, 20].Value = "SYAR KOMBINASI";
                                                                worksheet.Cells[incRowExcel, 20].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 20].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 21].Value = "KOM KONSUMEN";
                                                                worksheet.Cells[incRowExcel, 21].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 21].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 22].Value = "KOM ICON";
                                                                worksheet.Cells[incRowExcel, 22].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 22].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 23].Value = "TERPROTEKSI III";
                                                                worksheet.Cells[incRowExcel, 23].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 23].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 23].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 24].Value = "TERPROTEKSI IV";
                                                                worksheet.Cells[incRowExcel, 24].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 24].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 24].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 25].Value = "TERPROTEKSI V";
                                                                worksheet.Cells[incRowExcel, 25].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 25].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 25].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 26].Value = "TERPROTEKSI VIII";
                                                                worksheet.Cells[incRowExcel, 26].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 26].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 26].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 27].Value = "TERPROTEKSI IX";
                                                                worksheet.Cells[incRowExcel, 27].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 27].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 27].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 28].Value = "TERPROTEKSI X";
                                                                worksheet.Cells[incRowExcel, 28].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 28].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 29].Value = "TERPROTEKSI XI";
                                                                worksheet.Cells[incRowExcel, 29].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 29].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 30].Value = "TERPROTEKSI XII";
                                                                worksheet.Cells[incRowExcel, 30].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 30].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 30].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 31].Value = "TERPROTEKSI XIII";
                                                                worksheet.Cells[incRowExcel, 31].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 31].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 31].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                                worksheet.Cells[incRowExcel, 32].Value = "TERPROTEKSI XIV";
                                                                worksheet.Cells[incRowExcel, 32].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 32].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 33].Value = "TERPROTEKSI XVII";
                                                                worksheet.Cells[incRowExcel, 33].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 33].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 33].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 34].Value = "MNC LIFE AKTIF";
                                                                worksheet.Cells[incRowExcel, 34].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 34].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 35].Value = "MNC LIFE SERASI";
                                                                worksheet.Cells[incRowExcel, 35].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 35].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 35].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 36].Value = "MNC LIFE PASTI";
                                                                worksheet.Cells[incRowExcel, 36].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 36].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 36].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 37].Value = "DOLLAR(USD)";
                                                                worksheet.Cells[incRowExcel, 37].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 37].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                                                incRowExcel++;
                                                                //area header

                                                                int _no2 = 1;
                                                                int _startRowDetail2 = incRowExcel;
                                                                int _endRowDetail2 = 0;

                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {


                                                                    //ThickBox Border
                                                                    int RowCZ = incRowExcel;
                                                                    int RowHZ = incRowExcel + 1;
                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _no2;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail1.Remarks;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Rate;
                                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "0.00%";
                                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 23].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 23].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 24].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 24].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 25].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 25].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 26].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 26].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 27].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 27].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 28].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 28].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 29].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 29].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 30].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 30].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 31].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 31].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 32].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 32].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 33].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 33].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 34].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 34].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 35].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 35].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 36].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 36].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 37].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 37].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 38].Value = rsDetail1.Amount;
                                                                    worksheet.Cells[incRowExcel, 38].Style.Numberformat.Format = "#,##0";
                                                                    //worksheet.Row(incRowExcel).Height = 15;

                                                                    _endRowDetail2 = incRowExcel;
                                                                    _no2++;
                                                                    incRowExcel++;
                                                                    worksheet.Cells["A" + RowCZ + ":A" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowCZ + ":A" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowCZ + ":B" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowCZ + ":C" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowCZ + ":D" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowCZ + ":E" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowCZ + ":F" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowCZ + ":G" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowCZ + ":H" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowCZ + ":I" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowCZ + ":J" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowCZ + ":K" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowCZ + ":L" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowCZ + ":M" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowCZ + ":N" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowCZ + ":O" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["P" + RowCZ + ":P" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["Q" + RowCZ + ":Q" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["R" + RowCZ + ":R" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["S" + RowCZ + ":S" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["T" + RowCZ + ":T" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["U" + RowCZ + ":U" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["V" + RowCZ + ":V" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["W" + RowCZ + ":W" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["X" + RowCZ + ":X" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["Y" + RowCZ + ":Y" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["Z" + RowCZ + ":Z" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AA" + RowCZ + ":AA" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AB" + RowCZ + ":AB" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AC" + RowCZ + ":AC" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AD" + RowCZ + ":AD" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AE" + RowCZ + ":AE" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AF" + RowCZ + ":AF" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AG" + RowCZ + ":AG" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AH" + RowCZ + ":AH" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AI" + RowCZ + ":AI" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AJ" + RowCZ + ":AJ" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AK" + RowCZ + ":AK" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["AL" + RowCZ + ":AL" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + _endRowDetail2 + ":AL" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + _endRowDetail2 + ":AL" + _endRowDetail2].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                                                }
                                                                int _endRowDetail3 = incRowExcel;

                                                                ////Row D = 5


                                                                worksheet.Cells[_endRowDetail3, 4].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 4].Formula = "SUM(D" + _startRowDetail2 + ":D" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 4].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 4].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 5].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 5].Formula = "SUM(E" + _startRowDetail2 + ":E" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 5].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 5].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 6].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 6].Formula = "SUM(F" + _startRowDetail2 + ":F" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 6].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 6].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 7].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 7].Formula = "SUM(G" + _startRowDetail2 + ":G" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 7].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 7].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 8].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 8].Formula = "SUM(H" + _startRowDetail2 + ":H" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 8].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 8].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 9].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 9].Formula = "SUM(I" + _startRowDetail2 + ":I" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 9].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 9].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 10].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 10].Formula = "SUM(J" + _startRowDetail2 + ":J" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 10].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 10].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 11].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 11].Formula = "SUM(K" + _startRowDetail2 + ":K" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 11].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 11].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 12].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 12].Formula = "SUM(L" + _startRowDetail2 + ":L" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 12].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 12].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 13].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 13].Formula = "SUM(M" + _startRowDetail2 + ":M" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 13].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 13].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 14].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 14].Formula = "SUM(N" + _startRowDetail2 + ":N" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 14].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 14].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 15].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 15].Formula = "SUM(O" + _startRowDetail2 + ":O" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 15].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 15].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 16].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 16].Formula = "SUM(P" + _startRowDetail2 + ":P" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 16].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 16].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 17].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 17].Formula = "SUM(Q" + _startRowDetail2 + ":Q" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 17].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 17].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 18].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 18].Formula = "SUM(R" + _startRowDetail2 + ":R" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 18].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 18].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 19].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 19].Formula = "SUM(S" + _startRowDetail2 + ":S" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 19].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 19].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 20].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 20].Formula = "SUM(T" + _startRowDetail2 + ":T" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 20].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 20].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 21].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 21].Formula = "SUM(U" + _startRowDetail2 + ":U" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 21].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 21].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[_endRowDetail3, 22].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 22].Formula = "SUM(V" + _startRowDetail2 + ":V" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 22].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 22].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 23].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 23].Formula = "SUM(W" + _startRowDetail2 + ":W" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 23].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 23].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 24].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 24].Formula = "SUM(X" + _startRowDetail2 + ":X" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 24].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 24].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 25].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 25].Formula = "SUM(Y" + _startRowDetail2 + ":Y" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 25].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 25].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 26].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 26].Formula = "SUM(Z" + _startRowDetail2 + ":Z" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 26].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 26].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 27].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 27].Formula = "SUM(AA" + _startRowDetail2 + ":AA" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 27].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 27].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 28].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 28].Formula = "SUM(AB" + _startRowDetail2 + ":AB" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 28].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 28].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 29].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 29].Formula = "SUM(AC" + _startRowDetail2 + ":AC" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 29].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 29].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 30].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 30].Formula = "SUM(AD" + _startRowDetail2 + ":AD" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 30].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 30].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 31].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 31].Formula = "SUM(AE" + _startRowDetail2 + ":AE" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 31].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 31].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 32].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 32].Formula = "SUM(AF" + _startRowDetail2 + ":AF" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 32].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 32].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 33].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 33].Formula = "SUM(AG" + _startRowDetail2 + ":AG" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 33].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 33].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 34].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 34].Formula = "SUM(AH" + _startRowDetail2 + ":AH" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 34].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 34].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 35].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 35].Formula = "SUM(AI" + _startRowDetail2 + ":AI" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 35].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 35].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 36].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 36].Formula = "SUM(AJ" + _startRowDetail2 + ":AJ" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 36].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 36].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 37].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 37].Formula = "SUM(AK" + _startRowDetail2 + ":AK" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 37].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 37].Style.Numberformat.Format = "#,##0.00";


                                                                worksheet.Cells[_endRowDetail3, 38].Style.Font.Bold = true;
                                                                worksheet.Cells[_endRowDetail3, 38].Formula = "SUM(AL" + _startRowDetail2 + ":AL" + _endRowDetail2 + ")";
                                                                worksheet.Cells[_endRowDetail3, 38].Calculate();
                                                                worksheet.Cells[_endRowDetail3, 38].Style.Numberformat.Format = "#,##0.00";



                                                                //worksheet.Cells["A" + _endRowDetail3 + ":AL" + _endRowDetail3].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                //worksheet.Cells[_endRowDetail3, 5, _endRowDetail3, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            }



                                                        }
                                                    }
                                                }
                                                worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;




                                                //incRowExcel++;
                                                int _lastRow = incRowExcel;

                                                string _rangeA = "A:AL" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 12;
                                                }

                                                worksheet.DeleteRow(_lastRow);



                                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 39];
                                                worksheet.Column(1).Width = 10;
                                                worksheet.Column(2).Width = 25;
                                                worksheet.Column(3).Width = 20;
                                                worksheet.Column(4).Width = 20;
                                                worksheet.Column(5).Width = 30;
                                                worksheet.Column(6).Width = 30;
                                                worksheet.Column(7).Width = 30;
                                                worksheet.Column(8).Width = 30;
                                                worksheet.Column(9).Width = 30;
                                                worksheet.Column(10).Width = 25;
                                                worksheet.Column(11).Width = 25;
                                                worksheet.Column(12).Width = 25;
                                                worksheet.Column(13).Width = 25;
                                                worksheet.Column(14).Width = 25;
                                                worksheet.Column(15).Width = 25;
                                                worksheet.Column(16).Width = 25;
                                                worksheet.Column(17).Width = 25;
                                                worksheet.Column(18).Width = 25;
                                                worksheet.Column(19).Width = 25;
                                                worksheet.Column(20).Width = 25;
                                                worksheet.Column(21).Width = 25;
                                                worksheet.Column(22).Width = 25;
                                                worksheet.Column(23).Width = 25;
                                                worksheet.Column(24).Width = 25;
                                                worksheet.Column(25).Width = 25;
                                                worksheet.Column(26).Width = 25;
                                                worksheet.Column(27).Width = 25;
                                                worksheet.Column(28).Width = 25;
                                                worksheet.Column(29).Width = 25;
                                                worksheet.Column(30).Width = 25;
                                                worksheet.Column(31).Width = 25;
                                                worksheet.Column(32).Width = 25;
                                                worksheet.Column(33).Width = 25;
                                                worksheet.Column(34).Width = 25;
                                                worksheet.Column(35).Width = 25;
                                                worksheet.Column(36).Width = 25;
                                                worksheet.Column(37).Width = 25;
                                                worksheet.Column(38).Width = 25;
                                                worksheet.Column(39).Width = 25;

                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                                //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                                worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                                //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";



                                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                Image img = Image.FromFile(Tools.ReportImage);
                                                worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                                //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                                //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                                package.Save();
                                                if (_FundAccountingRpt.DownloadMode == "PDF")
                                                {
                                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                                }

                                                return true;
                                            }
                                        }
                                    }

                                }

                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Fund Operation Report
            else if (_FundAccountingRpt.ReportName.Equals("Fund Operation Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @" 
                               

                            DECLARE A CURSOR FOR 
                            select FundPK from Fund 
                            where status = 2  " + _paramFund + @"


                            Open A
                            Fetch Next From A
                            Into @FundPK

                            While @@FETCH_STATUS = 0
                            BEGIN    

                            Select @Date Date,ROW,Description,sum(dbo.FGetGroupFundJournalAccountBalanceByFundPK(@Date,A.FundJournalAccountPK,@FundPK)) Amount  From FundOperationMappingReport A  
                            left join FundJournalAccount B on  A.FundJournalAccountPK = B.FundJournalAccountPK and B.Status	 =  2  
                            Group By ROW,Description
                            order by Row

                            Fetch next From A Into @FundPK
                            END
                            Close A
                            Deallocate A ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundOperationReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundOperationReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fund Operation Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<NavReportListing> rList = new List<NavReportListing>();
                                        while (dr0.Read())
                                        {

                                            NavReportListing rSingle = new NavReportListing();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"]);
                                            rSingle.Row = Convert.ToInt32(dr0["Row"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.Row ascending
                                            group r by new { r.FundPK, r.Date, r.CurrencyID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Formulir Nomor : ";
                                            worksheet.Cells[incRowExcel, 2].Value = "X.D.1-1";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Manager Investasi : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyName();
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Bank Kustodian : ";
                                            worksheet.Cells[incRowExcel, 2].Value = Get_BankCustodianName(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Nama Reksadana : ";
                                            worksheet.Cells[incRowExcel, 2].Value = Get_FundName(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Jenis Reksadana : ";
                                            worksheet.Cells[incRowExcel, 2].Value = Get_FundType(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Tanggal : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Mata Uang : ";
                                            worksheet.Cells[incRowExcel, 2].Value = Get_CurrencyID(rsHeader.Key.FundPK);
                                            incRowExcel++;


                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[RowB, 1].Style.Font.Bold = true;
                                            worksheet.Cells[RowB, 1].Value = "LAPORAN OPERASI";

                                            worksheet.Cells[RowB, 2].Style.Font.Bold = true;
                                            worksheet.Cells[RowB, 2].Value = "AMOUNT";

                                            worksheet.Cells[RowB + 1, 1].Style.Font.Bold = true;
                                            worksheet.Cells[RowB + 1, 1].Value = "PENDAPATAN INVESTASI";

                                            worksheet.Cells[14, 1].Style.Font.Bold = true;
                                            worksheet.Cells[14, 1].Value = "BIAYA PENGELOLAAN INVESTASI";

                                            worksheet.Cells[23, 1].Style.Font.Bold = true;
                                            worksheet.Cells[23, 1].Value = "LABA/RUGI YANG DIREALISASIKAN DAN";

                                            worksheet.Cells[24, 1].Style.Font.Bold = true;
                                            worksheet.Cells[24, 1].Value = "YANG BELUM DIREALISASIKAN";

                                            string _range = "A" + incRowExcel + ":B" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _description = "";
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":B" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":B" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":B" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //area detail

                                                worksheet.Cells[rsDetail.Row, 1].Value = rsDetail.Description;
                                                worksheet.Cells[rsDetail.Row, 2].Value = rsDetail.Amount;
                                                worksheet.Cells[rsDetail.Row, 2].Style.Numberformat.Format = "#,####0.00";
                                                //}

                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;
                                                _description = rsDetail.Description;





                                            }



                                            int RowF = _endRowDetail + 7;
                                            int RowH = _endRowDetail + 9;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            incRowExcel = incRowExcel + 10;

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:B";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 3];
                                        worksheet.Column(3).Width = 1;
                                        worksheet.Column(1).Width = 60;
                                        worksheet.Column(2).AutoFit();

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND OPERATION REPORT";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Accrued Interest Report
            if (_FundAccountingRpt.ReportName.Equals("Accrued Interest Report"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            // FUND
                            cmd.CommandText = @"
                            
                            select distinct A.FundPK,B.Name FundName from FundPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status  = 2 
                            where A.status in (1,2) and Date = @ValueDate
                            " + _paramFund;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {

                                if (dr0.HasRows)
                                {

                                    string filePath = Tools.ReportsPath + "AccruedInterestReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccruedInterestReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Accrued Interest Report");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundPortfolio> rList = new List<FundPortfolio>();
                                        while (dr0.Read())
                                        {
                                            FundPortfolio rSingle = new FundPortfolio();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                        from r in rList
                                        orderby r.FundPK, r.FundName ascending
                                        group r by new { r.FundPK, r.FundName } into rGroup
                                        select rGroup;

                                        int incRowExcel = 1;
                                        int _colCurrency = 0;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Manager";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "Print Date";
                                            worksheet.Cells[incRowExcel, 14].Value = " : ";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Value = Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 13, incRowExcel, 15].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Custodian Bank";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_BankCustodianName(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "Print Time";
                                            worksheet.Cells[incRowExcel, 14].Value = " : ";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Value = Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                            worksheet.Cells[incRowExcel, 13, incRowExcel, 15].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundName(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundType(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account No";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundSinvestCode(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Sub Account BI";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 4].Value = "0111CUS169";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_CurrencyID(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;

                                            _colCurrency = incRowExcel;

                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText =
                                                   // BOND

                                                   @"   
Create Table #A
(
FundPK int,
InstrumentID nvarchar(100),
InstrumentName  nvarchar(500),
InstrumentTypePK int,
MaturityDate datetime,
Balance numeric(18,4),
LastCoupon datetime,
NextCoupon datetime,
AcqDate datetime,
Tenor int,
InterestPercent numeric(18,4),
DailyInterest numeric(18,4),
AccDays int,
TaxExpensePercent numeric(18,4),
)


Create Table #B
(
FundPK int,
InstrumentID nvarchar(100),
InstrumentName  nvarchar(500),
InstrumentTypeName nvarchar(50),
MaturityDate datetime,
Balance numeric(18,4),
LastCoupon datetime,
NextCoupon datetime,
AcqDate datetime,
Tenor int,
InterestPercent numeric(18,4),
DailyInterest numeric(18,4),
AccDays int,
TaxDays int,
InterestAmount numeric(18,4),
TaxAmount numeric(18,4),
)


insert into #A (FundPK,InstrumentID,InstrumentName,InstrumentTypePK,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,TaxExpensePercent)
select A.FundPK,B.ID,B.Name,B.InstrumentTypePK,A.MaturityDate,A.Balance,case when B.InstrumentTypePK = 5 then AcqDate else case when B.InstrumentTypePK = 3 and datediff(day,@date,A.MaturityDate) <= 10 then A.AcqDate else dbo.FgetLastCouponDate(@date,A.InstrumentPK) end end LastCoupon,
case when B.InstrumentTypePK = 5 then A.MaturityDate else case when datediff(day,dbo.FgetNextCouponDate(@date,A.InstrumentPK),A.MaturityDate) < 10 then A.MaturityDate else dbo.FgetNextCouponDate(@date,A.InstrumentPK) end end NextCoupon,A.AcqDate,0 Tenor,A.InterestPercent,
case when B.InstrumentTypePK = 5 then A.Balance * (B.InterestPercent/100)/B.InterestDaysType else A.Balance * (B.InterestPercent/100)/360 end DailyInterest,0 AccDays,A.TaxExpensePercent from FundPosition A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
where Date = @Date
and A.FundPK = @FundPK
and A.status = 2
and B.InstrumentTypePK not in (1,4,5,16)
order by B.ID


insert into #B (FundPK,InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount)
select A.FundPK,InstrumentID,InstrumentName,B.Name,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate, dbo.[FgetDateDiffCorporateBond](@Date,NextCoupon) Tenor,InterestPercent,case when A.AcqDate >=@Date then 0 else case when dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) = 0 then 0 else  DailyInterest end end,dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) AccDays,
DailyInterest * dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) InterestAmount, case when AcqDate >= LastCoupon then  dbo.[FgetDateDiffCorporateBond](AcqDate,@Date) else  dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) end TaxDays,
case when AcqDate >= LastCoupon then (DailyInterest * TaxExpensePercent/100) * dbo.[FgetDateDiffCorporateBond](AcqDate,@Date) else (DailyInterest * TaxExpensePercent/100) * dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) end TaxAmount
from #A A
left join InstrumentType B on A.InstrumentTypePK = B.InstrumentTypePK and B.Status = 2
where A.InstrumentTypePK not in (1,4,5,16)


select FundPK,InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,
AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount,InterestAmount-TaxAmount NetAmount 
from #B order by InstrumentID";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                                                    cmd1.ExecuteNonQuery();


                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {

                                                        if (dr1.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<AccruedInterestReport> rList1 = new List<AccruedInterestReport>();
                                                                while (dr1.Read())
                                                                {
                                                                    AccruedInterestReport rSingle1 = new AccruedInterestReport();
                                                                    rSingle1.FundPK = Convert.ToInt32(dr1["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["FundPK"]));
                                                                    rSingle1.InstrumentID = Convert.ToString(dr1["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["InstrumentID"]));
                                                                    rSingle1.InstrumentName = Convert.ToString(dr1["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["InstrumentName"]));
                                                                    rSingle1.InstrumentTypeName = Convert.ToString(dr1["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["InstrumentTypeName"]));
                                                                    rSingle1.MaturityDate = Convert.ToString(dr1["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["MaturityDate"]));
                                                                    rSingle1.Balance = Convert.ToDecimal(dr1["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Balance"]));
                                                                    rSingle1.LastCoupon = Convert.ToString(dr1["LastCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["LastCoupon"]));
                                                                    rSingle1.NextCoupon = Convert.ToString(dr1["NextCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["NextCoupon"]));
                                                                    rSingle1.AcqDate = Convert.ToString(dr1["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["AcqDate"]));
                                                                    rSingle1.Tenor = Convert.ToDecimal(dr1["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Tenor"]));
                                                                    rSingle1.InterestPercent = Convert.ToDecimal(dr1["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["InterestPercent"]));
                                                                    rSingle1.DailyInterest = Convert.ToDecimal(dr1["DailyInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["DailyInterest"]));
                                                                    rSingle1.AccDays = Convert.ToDecimal(dr1["AccDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AccDays"]));
                                                                    rSingle1.InterestAmount = Convert.ToDecimal(dr1["InterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["InterestAmount"]));
                                                                    rSingle1.TaxDays = Convert.ToDecimal(dr1["TaxDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["TaxDays"]));
                                                                    rSingle1.TaxAmount = Convert.ToDecimal(dr1["TaxAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["TaxAmount"]));
                                                                    rSingle1.NetAmount = Convert.ToDecimal(dr1["NetAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["NetAmount"]));

                                                                    rList1.Add(rSingle1);

                                                                }


                                                                var GroupByReference1 =
                                                                from r1 in rList1
                                                                orderby r1.InstrumentTypeName ascending
                                                                group r1 by new { r1.InstrumentTypeName } into rGroup1
                                                                select rGroup1;


                                                                incRowExcel++;



                                                                foreach (var rsHeader1 in GroupByReference1)
                                                                {

                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.InstrumentTypeName;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                    incRowExcel++;

                                                                    //Row B = 3
                                                                    int RowB = incRowExcel;
                                                                    int RowG = incRowExcel + 1;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Security Code";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "Security Name";
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                                    worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                                                    worksheet.Cells[incRowExcel, 7].Value = "Term of Interest";
                                                                    worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 9].Value = "Days To Go";
                                                                    worksheet.Cells[incRowExcel, 10].Value = "Interest Rate (%)";
                                                                    worksheet.Cells[incRowExcel, 11].Value = "Daily Interest";
                                                                    worksheet.Cells[incRowExcel, 12].Value = "Accrued Days";
                                                                    worksheet.Cells[incRowExcel, 13].Value = "Accrued Interest";
                                                                    worksheet.Cells[incRowExcel, 14].Value = "Accrued Tax";
                                                                    worksheet.Cells[incRowExcel, 15].Value = "Net Accrued Interest";


                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    //incRowExcel++;


                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    incRowExcel++;
                                                                    //area header

                                                                    int _no = 1;
                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    int _B = 0;
                                                                    foreach (var rsDetail1 in rsHeader1)
                                                                    {
                                                                        //ThickBox Border

                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        //area detail
                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.InstrumentID;
                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.InstrumentName;
                                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail1.MaturityDate).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Balance;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail1.LastCoupon).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail1.NextCoupon).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail1.Tenor;
                                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";


                                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail1.InterestPercent;
                                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail1.DailyInterest;
                                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail1.AccDays;
                                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail1.InterestAmount;
                                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail1.TaxAmount;
                                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail1.NetAmount;
                                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                                                        _endRowDetail = incRowExcel;
                                                                        _no++;
                                                                        incRowExcel++;

                                                                    }

                                                                    int RowF = incRowExcel - 1;
                                                                    worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["N" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["O" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowB + ":O" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowB + ":O" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;





                                                                    _B = incRowExcel;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);

                                                                    worksheet.Cells[incRowExcel, 4].Value = "TOTAL ";
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                                    worksheet.Cells[incRowExcel, 13].Calculate();
                                                                    worksheet.Cells[incRowExcel, 14].Calculate();
                                                                    worksheet.Cells[incRowExcel, 15].Calculate();

                                                                    incRowExcel++;

                                                                }
                                                                //worksheet.Cells[incRowExcel, 1].Value = "TOTAL PORTFOLIO EQUITY";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                ////worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                                                ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;

                                                                //incRowExcel++;


                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                            using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon2.Open();
                                                using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                {
                                                    cmd2.CommandText =
                                                    // DEPOSITO
                                                    @"   
Create Table #A
(
FundPK int,
InstrumentID nvarchar(100),
InstrumentName  nvarchar(500),
InstrumentTypePK int,
MaturityDate datetime,
Balance numeric(18,4),
LastCoupon datetime,
NextCoupon datetime,
AcqDate datetime,
Tenor int,
InterestPercent numeric(18,4),
DailyInterest numeric(18,4),
AccDays int,
TaxExpensePercent numeric(18,4),
)


Create Table #B
(
FundPK int,
InstrumentID nvarchar(100),
InstrumentName  nvarchar(500),
InstrumentTypeName nvarchar(50),
MaturityDate datetime,
Balance numeric(18,4),
LastCoupon datetime,
NextCoupon datetime,
AcqDate datetime,
Tenor int,
InterestPercent numeric(18,4),
DailyInterest numeric(18,4),
AccDays int,
TaxDays int,
InterestAmount numeric(18,4),
TaxAmount numeric(18,4),
)


insert into #A (FundPK,InstrumentID,InstrumentName,InstrumentTypePK,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,TaxExpensePercent)
select A.FundPK,B.ID,B.Name,B.InstrumentTypePK,A.MaturityDate,A.Balance,case when B.InstrumentTypePK = 5 then AcqDate else case when B.InstrumentTypePK = 3 and datediff(day,@date,A.MaturityDate) <= 10 then A.AcqDate else dbo.FgetLastCouponDate(@date,A.InstrumentPK) end end LastCoupon,
case when B.InstrumentTypePK = 5 then A.MaturityDate else case when datediff(day,dbo.FgetNextCouponDate(@date,A.InstrumentPK),A.MaturityDate) < 10 then A.MaturityDate else dbo.FgetNextCouponDate(@date,A.InstrumentPK) end end NextCoupon,A.AcqDate,0 Tenor,A.InterestPercent,
case when B.InstrumentTypePK = 5 then A.Balance * (B.InterestPercent/100)/B.InterestDaysType else A.Balance * (B.InterestPercent/100)/360 end DailyInterest,0 AccDays,A.TaxExpensePercent from FundPosition A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
where Date = @Date
and A.FundPK = @FundPK
and A.status = 2
and B.InstrumentTypePK in (5)
order by B.ID


insert into #B (FundPK,InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount)
select A.FundPK,InstrumentID,InstrumentName,B.Name,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate, datediff(day,@Date,NextCoupon) Tenor,InterestPercent,case when datediff(day,LastCoupon,@Date) = 0 then 0 else  DailyInterest end,datediff(day,LastCoupon,@Date) AccDays,
DailyInterest * datediff(day,LastCoupon,@Date) InterestAmount, case when AcqDate > LastCoupon then  datediff(day,AcqDate,@Date) else  datediff(day,LastCoupon,@Date) end TaxDays,
case when AcqDate > LastCoupon then (DailyInterest * TaxExpensePercent/100) * datediff(day,AcqDate,@Date) else (DailyInterest * TaxExpensePercent/100) * datediff(day,LastCoupon,@Date) end TaxAmount
from #A A
left join InstrumentType B on A.InstrumentTypePK = B.InstrumentTypePK and B.Status = 2
where A.InstrumentTypePK in (5)


select FundPK,InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,
AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount,InterestAmount-TaxAmount NetAmount 
from #B order by InstrumentID";

                                                    cmd2.CommandTimeout = 0;
                                                    cmd2.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);


                                                    cmd2.ExecuteNonQuery();


                                                    using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                    {

                                                        if (dr2.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<AccruedInterestReport> rList2 = new List<AccruedInterestReport>();
                                                                while (dr2.Read())
                                                                {
                                                                    AccruedInterestReport rSingle2 = new AccruedInterestReport();

                                                                    rSingle2.FundPK = Convert.ToInt32(dr2["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr2["FundPK"]));
                                                                    rSingle2.InstrumentID = Convert.ToString(dr2["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["InstrumentID"]));
                                                                    rSingle2.InstrumentName = Convert.ToString(dr2["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["InstrumentName"]));
                                                                    rSingle2.InstrumentTypeName = Convert.ToString(dr2["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["InstrumentTypeName"]));
                                                                    rSingle2.MaturityDate = Convert.ToString(dr2["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["MaturityDate"]));
                                                                    rSingle2.Balance = Convert.ToDecimal(dr2["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["Balance"]));
                                                                    rSingle2.LastCoupon = Convert.ToString(dr2["LastCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["LastCoupon"]));
                                                                    rSingle2.NextCoupon = Convert.ToString(dr2["NextCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["NextCoupon"]));
                                                                    rSingle2.AcqDate = Convert.ToString(dr2["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["AcqDate"]));
                                                                    rSingle2.Tenor = Convert.ToDecimal(dr2["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["Tenor"]));
                                                                    rSingle2.InterestPercent = Convert.ToDecimal(dr2["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["InterestPercent"]));
                                                                    rSingle2.DailyInterest = Convert.ToDecimal(dr2["DailyInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["DailyInterest"]));
                                                                    rSingle2.AccDays = Convert.ToDecimal(dr2["AccDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["AccDays"]));
                                                                    rSingle2.InterestAmount = Convert.ToDecimal(dr2["InterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["InterestAmount"]));
                                                                    rSingle2.TaxDays = Convert.ToDecimal(dr2["TaxDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["TaxDays"]));
                                                                    rSingle2.TaxAmount = Convert.ToDecimal(dr2["TaxAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["TaxAmount"]));
                                                                    rSingle2.NetAmount = Convert.ToDecimal(dr2["NetAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["NetAmount"]));

                                                                    rList2.Add(rSingle2);

                                                                }



                                                                var GroupByReference2 =
                                                                from r2 in rList2
                                                                orderby r2.InstrumentTypeName ascending
                                                                group r2 by new { r2.InstrumentTypeName } into rGroup2
                                                                select rGroup2;


                                                                incRowExcel++;



                                                                foreach (var rsHeader2 in GroupByReference2)
                                                                {
                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader2.Key.InstrumentTypeName;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                    incRowExcel++;

                                                                    //Row B = 3
                                                                    int RowB = incRowExcel;
                                                                    int RowG = incRowExcel + 1;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Security Code";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "Security Name";
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                                    worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                                                    worksheet.Cells[incRowExcel, 7].Value = "Term of Interest";
                                                                    worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 9].Value = "Days To Go";
                                                                    worksheet.Cells[incRowExcel, 10].Value = "Interest Rate (%)";
                                                                    worksheet.Cells[incRowExcel, 11].Value = "Daily Interest";
                                                                    worksheet.Cells[incRowExcel, 12].Value = "Accrued Days";
                                                                    worksheet.Cells[incRowExcel, 13].Value = "Accrued Interest";
                                                                    worksheet.Cells[incRowExcel, 14].Value = "Accrued Tax";
                                                                    worksheet.Cells[incRowExcel, 15].Value = "Net Accrued Interest";

                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    //incRowExcel++;


                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    incRowExcel++;
                                                                    //area header

                                                                    int _no = 1;
                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    int _B = 0;
                                                                    foreach (var rsDetail2 in rsHeader2)
                                                                    {

                                                                        //ThickBox Border

                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        //area detail
                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail2.InstrumentID;
                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail2.InstrumentName;
                                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail2.MaturityDate).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail2.Balance;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail2.AcqDate).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail2.NextCoupon).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail2.Tenor;
                                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";


                                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail2.InterestPercent;
                                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail2.DailyInterest;
                                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail2.AccDays;
                                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail2.InterestAmount;
                                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail2.TaxAmount;
                                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail2.NetAmount;
                                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                                        _endRowDetail = incRowExcel;
                                                                        _no++;
                                                                        incRowExcel++;

                                                                    }

                                                                    int RowF = incRowExcel - 1;
                                                                    worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["N" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["O" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowB + ":O" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowB + ":O" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;




                                                                    _B = incRowExcel;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);

                                                                    worksheet.Cells[incRowExcel, 4].Value = "TOTAL ";
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                                    worksheet.Cells[incRowExcel, 13].Calculate();
                                                                    worksheet.Cells[incRowExcel, 14].Calculate();
                                                                    worksheet.Cells[incRowExcel, 15].Calculate();



                                                                    incRowExcel++;


                                                                }
                                                                //worksheet.Cells[incRowExcel, 1].Value = "TOTAL PORTFOLIO BOND";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                ////worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                                                ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;

                                                                //incRowExcel++;




                                                            }

                                                        }
                                                    }
                                                }
                                            }

                                            incRowExcel++;
                                        }

                                        worksheet.Row(incRowExcel).PageBreak = true;

                                        incRowExcel++;



                                        string _rangeDetail = "A:O";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 16];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 5;
                                        worksheet.Column(4).Width = 60;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 15;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 25;
                                        worksheet.Column(15).Width = 25;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20&B ACCRUED INTEREST REPORT";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                    }

                                }

                                return true;
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

            #endregion

            #region Cash Flow Summary
            if (_FundAccountingRpt.ReportName.Equals("Cash Flow Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";
                            string _paramBankFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            if (!_host.findString(_FundAccountingRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.BankFrom))
                            {
                                _paramBankFrom = "And A.BankPK  in ( " + _FundAccountingRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFrom = "";
                            }

                            cmd.CommandText = @"
                            select A.ValueDate,B.ID BankID,C.Name FundName,Amount ,A.Description from CashProjection A
                            left join bank B on A.BankPK = B.BankPK and B.status = 2
                            left join Fund C on A.FundPK = C.FundPK and C.status = 2
                            where A.ValueDate between @ValuedateFrom and @ValuedateTo and A.status = 2   " + _paramFundFrom + _paramBankFrom;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CashFlowSummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CashFlowSummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Cash Flow Summary");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CashFlowSummary> rList = new List<CashFlowSummary>();
                                        while (dr0.Read())
                                        {
                                            CashFlowSummary rSingle = new CashFlowSummary();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.BankID = Convert.ToString(dr0["BankID"]);
                                            //rSingle.BegBalance = Convert.ToDecimal(dr0["BegBalance"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.ValueDate = Convert.ToString(dr0["ValueDate"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.FundName, r.BankID ascending
                                            group r by new { r.FundName, r.BankID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 3;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.BankID;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;




                                            incRowExcel = incRowExcel + 1;


                                            //ThickBox Border HEADER

                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.WrapText = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Description";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Total";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_LastCashProjectionByBankIDByFundName(_FundAccountingRpt.ValueDateFrom, rsHeader.Key.BankID, rsHeader.Key.FundName);
                                            worksheet.Row(incRowExcel).Height = 0;



                                            incRowExcel++;
                                            int first = incRowExcel;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            int _rowA = 0;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {


                                                _rowA = incRowExcel - 1;
                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.ValueDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Description;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(C" + incRowExcel + "+D" + _rowA + ") ";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 4].Calculate();

                                                _endRowDetail = incRowExcel;


                                                incRowExcel++;

                                            }

                                            incRowExcel = incRowExcel + 2;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 25;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND JOURNAL VOUCHER";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Cash Flow - Historical Tracker - Bond
            if (_FundAccountingRpt.ReportName.Equals("Cash Flow - Historical Tracker - Bond"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
                                    select Notes FundName, TrxName Stock,ValueDate, ValueDate SettleDate, Reference Bond, Description IssueName, 
                                    Notes None1, 10000 NominalValue, 2000 PriceTrade, 3000 CummulativeValue, 5000 None2, 1250 CostPrice, 2500 MarketValue, 
                                    7500 Maturity, ValueDate None3, 3500 Coupon, 3210 CoupFreq, 4500 Basis, 5500 AccruedInterestDays, 6500 None4, 
                                    1000 PreviousCouponDate,2300 NextCouponDate, 3400 None5, 5700 DaysBasis, 9000 AccruedInterest,* from journal 
                                    where TrxName = 'CP' and ValueDate between '01/01/18' and '01/10/18'
                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoricalTrackerBond" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoricalTrackerBond" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "HistoricalTrackerBond";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Historical Tracker Bond");

                                        int incRowExcel = 3;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<HistoricalTrackerBond> rList = new List<HistoricalTrackerBond>();
                                        while (dr0.Read())
                                        {
                                            HistoricalTrackerBond rSingle = new HistoricalTrackerBond();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Stock = Convert.ToString(dr0["Stock"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettleDate = Convert.ToDateTime(dr0["SettleDate"]);
                                            rSingle.Bond = Convert.ToString(dr0["Bond"]);
                                            rSingle.IssueName = Convert.ToString(dr0["IssueName"]);
                                            rSingle.None1 = Convert.ToString(dr0["None1"]);
                                            rSingle.NominalValue = Convert.ToDecimal(dr0["NominalValue"]);
                                            rSingle.PriceTrade = Convert.ToDecimal(dr0["PriceTrade"]);
                                            rSingle.CummulativeValue = Convert.ToDecimal(dr0["CummulativeValue"]);
                                            rSingle.None2 = Convert.ToDecimal(dr0["None2"]);
                                            rSingle.CostPrice = Convert.ToDecimal(dr0["CostPrice"]);
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"]);
                                            rSingle.Maturity = Convert.ToDecimal(dr0["Maturity"]);
                                            rSingle.None3 = Convert.ToDateTime(dr0["None3"]);
                                            rSingle.Coupon = Convert.ToDecimal(dr0["Coupon"]);

                                            rSingle.CoupFreq = Convert.ToDecimal(dr0["CoupFreq"]);
                                            rSingle.Basis = Convert.ToDecimal(dr0["Basis"]);
                                            rSingle.AccruedInterestDays = Convert.ToDecimal(dr0["AccruedInterestDays"]);
                                            rSingle.None4 = Convert.ToDecimal(dr0["None4"]);
                                            rSingle.PreviousCouponDate = Convert.ToDecimal(dr0["PreviousCouponDate"]);
                                            rSingle.NextCouponDate = Convert.ToDecimal(dr0["NextCouponDate"]);
                                            rSingle.None5 = Convert.ToDecimal(dr0["None5"]);
                                            rSingle.DaysBasis = Convert.ToDecimal(dr0["DaysBasis"]);
                                            rSingle.AccruedInterest = Convert.ToDecimal(dr0["AccruedInterest"]);

                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.Stock, r.ValueDate } into rGroup
                                         select rGroup;


                                        //int incRowExcel = 9;

                                        incRowExcel = 1;

                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsHeader.Key.ValueDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 13;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Stock;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                            incRowExcel = incRowExcel + 2;


                                            worksheet.Cells[incRowExcel, 1].Value = "Settle Date";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Bond";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Issue Name";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Nominal Value";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Price Trade";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 7].Value = "Cummulative Value";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Cost Price";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Market Value";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 11].Value = "Maturity";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Coupon";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 14].Value = "Coup Freq";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 15].Value = "Basis";
                                            worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 16].Value = "Accrued Interest(Days)";
                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 17].Value = "";
                                            worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 18].Value = "Previous Coupon Date";
                                            worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 19].Value = "Next Coupon Date";
                                            worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 20].Value = "";
                                            worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 21].Value = "Days Basis";
                                            worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 22].Value = "Accrued Interest";
                                            worksheet.Cells[incRowExcel, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Font.Bold = true;


                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;


                                            //area header

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.SettleDate).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Bond;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.IssueName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.None1;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NominalValue;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.PriceTrade;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CummulativeValue;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.None2;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.CostPrice;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Maturity;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Value = Convert.ToDateTime(rsDetail.None3).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Coupon;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.CoupFreq;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.Basis;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.AccruedInterestDays;
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.None4;
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.PreviousCouponDate;
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.NextCouponDate;
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.None5;
                                                worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 21].Value = rsDetail.DaysBasis;
                                                worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 22].Value = rsDetail.AccruedInterest;


                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }

                                            worksheet.Cells["A" + _startRowDetail + ":V" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":V" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":V" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":V" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            int RowA = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Formula = "B" + RowA;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Calculate();



                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 19].Calculate();
                                            worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 22].Formula = "SUM(V" + _startRowDetail + ":V" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 22].Calculate();
                                            worksheet.Cells[incRowExcel, 22].Style.Font.Bold = true;

                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Double;


                                            incRowExcel = incRowExcel + 4;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 22];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 15;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 15;
                                        worksheet.Column(15).Width = 15;
                                        worksheet.Column(16).Width = 25;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 25;
                                        worksheet.Column(19).Width = 25;
                                        worksheet.Column(20).Width = 15;
                                        worksheet.Column(21).Width = 15;
                                        worksheet.Column(22).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 HISTORICAL TRACKER BOND REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Summary Deposito
            if (_FundAccountingRpt.ReportName.Equals("Summary Deposito"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            // FUND
                            cmd.CommandText = @"
                            
                            select distinct A.FundPK,B.Name FundName from FundPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status  = 2 
                            where A.status in (1,2) and Date = @ValueDate
                            " + _paramFund;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {

                                if (dr0.HasRows)
                                {

                                    string filePath = Tools.ReportsPath + "SummaryDeposito" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SummaryDeposito" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Summary Deposito");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundPortfolio> rList = new List<FundPortfolio>();
                                        while (dr0.Read())
                                        {
                                            FundPortfolio rSingle = new FundPortfolio();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                        from r in rList
                                        orderby r.FundPK, r.FundName ascending
                                        group r by new { r.FundPK, r.FundName } into rGroup
                                        select rGroup;

                                        int incRowExcel = 1;
                                        int _colCurrency = 0;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Manager";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "Print Date";
                                            worksheet.Cells[incRowExcel, 14].Value = " : ";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Value = Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 13, incRowExcel, 15].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Custodian Bank";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_BankCustodianName(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "Print Time";
                                            worksheet.Cells[incRowExcel, 14].Value = " : ";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Value = Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                            worksheet.Cells[incRowExcel, 13, incRowExcel, 15].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundName(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundType(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account No";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundSinvestCode(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Sub Account BI";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 4].Value = "0111CUS169";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_CurrencyID(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;

                                            _colCurrency = incRowExcel;

                                            //                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            //                                            {
                                            //                                                DbCon1.Open();
                                            //                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            //                                                {
                                            //                                                    cmd1.CommandText =
                                            //                                                        // BOND

                                            //                                                   @"   
                                            //Create Table #A
                                            //(
                                            //FundPK int,
                                            //InstrumentID nvarchar(100),
                                            //InstrumentName  nvarchar(500),
                                            //InstrumentTypePK int,
                                            //MaturityDate datetime,
                                            //Balance numeric(18,4),
                                            //LastCoupon datetime,
                                            //NextCoupon datetime,
                                            //AcqDate datetime,
                                            //Tenor int,
                                            //InterestPercent numeric(18,4),
                                            //DailyInterest numeric(18,4),
                                            //AccDays int,
                                            //TaxExpensePercent numeric(18,4),
                                            //)
                                            //
                                            //
                                            //Create Table #B
                                            //(
                                            //FundPK int,
                                            //InstrumentID nvarchar(100),
                                            //InstrumentName  nvarchar(500),
                                            //InstrumentTypeName nvarchar(50),
                                            //MaturityDate datetime,
                                            //Balance numeric(18,4),
                                            //LastCoupon datetime,
                                            //NextCoupon datetime,
                                            //AcqDate datetime,
                                            //Tenor int,
                                            //InterestPercent numeric(18,4),
                                            //DailyInterest numeric(18,4),
                                            //AccDays int,
                                            //TaxDays int,
                                            //InterestAmount numeric(18,4),
                                            //TaxAmount numeric(18,4),
                                            //)
                                            //
                                            //
                                            //insert into #A (FundPK,InstrumentID,InstrumentName,InstrumentTypePK,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,TaxExpensePercent)
                                            //select A.FundPK,B.ID,B.Name,B.InstrumentTypePK,A.MaturityDate,A.Balance,case when B.InstrumentTypePK = 5 then AcqDate else case when B.InstrumentTypePK = 3 and datediff(day,@date,A.MaturityDate) <= 10 then A.AcqDate else dbo.FgetLastCouponDate(@date,A.InstrumentPK) end end LastCoupon,
                                            //case when B.InstrumentTypePK = 5 then A.MaturityDate else case when datediff(day,dbo.FgetNextCouponDate(@date,A.InstrumentPK),A.MaturityDate) < 10 then A.MaturityDate else dbo.FgetNextCouponDate(@date,A.InstrumentPK) end end NextCoupon,A.AcqDate,0 Tenor,A.InterestPercent,
                                            //case when B.InstrumentTypePK = 5 then A.Balance * (B.InterestPercent/100)/B.InterestDaysType else A.Balance * (B.InterestPercent/100)/360 end DailyInterest,0 AccDays,A.TaxExpensePercent from FundPosition A 
                                            //left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                                            //where Date = @Date
                                            //and A.FundPK = @FundPK
                                            //and A.status = 2
                                            //and B.InstrumentTypePK not in (1,4,5,16)
                                            //order by B.ID
                                            //
                                            //
                                            //insert into #B (FundPK,InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount)
                                            //select A.FundPK,InstrumentID,InstrumentName,B.Name,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate, dbo.[FgetDateDiffCorporateBond](@Date,NextCoupon) Tenor,InterestPercent,case when A.AcqDate >=@Date then 0 else case when dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) = 0 then 0 else  DailyInterest end end,dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) AccDays,
                                            //DailyInterest * dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) InterestAmount, case when AcqDate >= LastCoupon then  dbo.[FgetDateDiffCorporateBond](AcqDate,@Date) else  dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) end TaxDays,
                                            //case when AcqDate >= LastCoupon then (DailyInterest * TaxExpensePercent/100) * dbo.[FgetDateDiffCorporateBond](AcqDate,@Date) else (DailyInterest * TaxExpensePercent/100) * dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) end TaxAmount
                                            //from #A A
                                            //left join InstrumentType B on A.InstrumentTypePK = B.InstrumentTypePK and B.Status = 2
                                            //where A.InstrumentTypePK not in (1,4,5,16)
                                            //
                                            //
                                            //select FundPK,InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,
                                            //AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount,InterestAmount-TaxAmount NetAmount 
                                            //from #B order by InstrumentID";

                                            //                                                    cmd1.CommandTimeout = 0;
                                            //                                                    cmd1.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                            //                                                    cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                                            //                                                    cmd1.ExecuteNonQuery();


                                            //                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            //                                                    {

                                            //                                                        if (dr1.HasRows)
                                            //                                                        {


                                            //                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                            //                                                            using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                            //                                                            {

                                            //                                                                //ATUR DATA GROUPINGNYA DULU
                                            //                                                                List<AccruedInterestReport> rList1 = new List<AccruedInterestReport>();
                                            //                                                                while (dr1.Read())
                                            //                                                                {
                                            //                                                                    AccruedInterestReport rSingle1 = new AccruedInterestReport();
                                            //                                                                    rSingle1.FundPK = Convert.ToInt32(dr1["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["FundPK"]));
                                            //                                                                    rSingle1.InstrumentID = Convert.ToString(dr1["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["InstrumentID"]));
                                            //                                                                    rSingle1.InstrumentName = Convert.ToString(dr1["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["InstrumentName"]));
                                            //                                                                    rSingle1.InstrumentTypeName = Convert.ToString(dr1["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["InstrumentTypeName"]));
                                            //                                                                    rSingle1.MaturityDate = Convert.ToString(dr1["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["MaturityDate"]));
                                            //                                                                    rSingle1.Balance = Convert.ToDecimal(dr1["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Balance"]));
                                            //                                                                    rSingle1.LastCoupon = Convert.ToString(dr1["LastCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["LastCoupon"]));
                                            //                                                                    rSingle1.NextCoupon = Convert.ToString(dr1["NextCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["NextCoupon"]));
                                            //                                                                    rSingle1.AcqDate = Convert.ToString(dr1["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["AcqDate"]));
                                            //                                                                    rSingle1.Tenor = Convert.ToDecimal(dr1["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Tenor"]));
                                            //                                                                    rSingle1.InterestPercent = Convert.ToDecimal(dr1["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["InterestPercent"]));
                                            //                                                                    rSingle1.DailyInterest = Convert.ToDecimal(dr1["DailyInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["DailyInterest"]));
                                            //                                                                    rSingle1.AccDays = Convert.ToDecimal(dr1["AccDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AccDays"]));
                                            //                                                                    rSingle1.InterestAmount = Convert.ToDecimal(dr1["InterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["InterestAmount"]));
                                            //                                                                    rSingle1.TaxDays = Convert.ToDecimal(dr1["TaxDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["TaxDays"]));
                                            //                                                                    rSingle1.TaxAmount = Convert.ToDecimal(dr1["TaxAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["TaxAmount"]));
                                            //                                                                    rSingle1.NetAmount = Convert.ToDecimal(dr1["NetAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["NetAmount"]));

                                            //                                                                    rList1.Add(rSingle1);

                                            //                                                                }


                                            //                                                                var GroupByReference1 =
                                            //                                                                from r1 in rList1
                                            //                                                                orderby r1.InstrumentTypeName ascending
                                            //                                                                group r1 by new { r1.InstrumentTypeName } into rGroup1
                                            //                                                                select rGroup1;


                                            //                                                                incRowExcel++;



                                            //                                                                foreach (var rsHeader1 in GroupByReference1)
                                            //                                                                {

                                            //                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.InstrumentTypeName;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                            //                                                                    incRowExcel++;

                                            //                                                                    //Row B = 3
                                            //                                                                    int RowB = incRowExcel;
                                            //                                                                    int RowG = incRowExcel + 1;

                                            //                                                                    worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            //                                                                    worksheet.Cells[incRowExcel, 2].Value = "Security Code";
                                            //                                                                    worksheet.Cells[incRowExcel, 3].Value = "Security Name";
                                            //                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            //                                                                    worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                            //                                                                    worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                            //                                                                    worksheet.Cells[incRowExcel, 7].Value = "Term of Interest";
                                            //                                                                    worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            //                                                                    worksheet.Cells[incRowExcel, 9].Value = "Days To Go";
                                            //                                                                    worksheet.Cells[incRowExcel, 10].Value = "Interest Rate (%)";
                                            //                                                                    worksheet.Cells[incRowExcel, 11].Value = "Daily Interest";
                                            //                                                                    worksheet.Cells[incRowExcel, 12].Value = "Accrued Days";
                                            //                                                                    worksheet.Cells[incRowExcel, 13].Value = "Accrued Interest";
                                            //                                                                    worksheet.Cells[incRowExcel, 14].Value = "Accrued Tax";
                                            //                                                                    worksheet.Cells[incRowExcel, 15].Value = "Net Accrued Interest";


                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            //                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                            //                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //                                                                    //incRowExcel++;


                                            //                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                            //                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //                                                                    incRowExcel++;
                                            //                                                                    //area header

                                            //                                                                    int _no = 1;
                                            //                                                                    int _startRowDetail = incRowExcel;
                                            //                                                                    int _endRowDetail = 0;
                                            //                                                                    int _B = 0;
                                            //                                                                    foreach (var rsDetail1 in rsHeader1)
                                            //                                                                    {
                                            //                                                                        //ThickBox Border

                                            //                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            //                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                            //                                                                        //area detail
                                            //                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                            //                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.InstrumentID;
                                            //                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.InstrumentName;
                                            //                                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            //                                                                        worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail1.MaturityDate).ToString("dd-MMM-yyyy");
                                            //                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Balance;
                                            //                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                        worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail1.LastCoupon).ToString("dd-MMM-yyyy");
                                            //                                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //                                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail1.NextCoupon).ToString("dd-MMM-yyyy");
                                            //                                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //                                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail1.Tenor;
                                            //                                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";


                                            //                                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail1.InterestPercent;
                                            //                                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                            //                                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail1.DailyInterest;
                                            //                                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                            //                                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail1.AccDays;
                                            //                                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                            //                                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail1.InterestAmount;
                                            //                                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                            //                                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail1.TaxAmount;
                                            //                                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                            //                                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail1.NetAmount;
                                            //                                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                            //                                                                        _endRowDetail = incRowExcel;
                                            //                                                                        _no++;
                                            //                                                                        incRowExcel++;

                                            //                                                                    }

                                            //                                                                    int RowF = incRowExcel - 1;
                                            //                                                                    worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            //                                                                    worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            //                                                                    worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            //                                                                    worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            //                                                                    worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["M" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["N" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["N" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["O" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["O" + RowB + ":O" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["O" + RowB + ":O" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["O" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;





                                            //                                                                    _B = incRowExcel;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //                                                                    worksheet.Cells["O" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);

                                            //                                                                    worksheet.Cells[incRowExcel, 4].Value = "TOTAL ";
                                            //                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            //                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            //                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            //                                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                    worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            //                                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                    worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                            //                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                            //                                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                            //                                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                            //                                                                    worksheet.Cells[incRowExcel, 13].Calculate();
                                            //                                                                    worksheet.Cells[incRowExcel, 14].Calculate();
                                            //                                                                    worksheet.Cells[incRowExcel, 15].Calculate();

                                            //                                                                    incRowExcel++;

                                            //                                                                }
                                            //                                                                //worksheet.Cells[incRowExcel, 1].Value = "TOTAL PORTFOLIO EQUITY";
                                            //                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                            //                                                                ////worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                            //                                                                ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;

                                            //                                                                //incRowExcel++;


                                            //                                                            }

                                            //                                                        }
                                            //                                                    }
                                            //                                                }
                                            //                                            }


                                            using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon2.Open();
                                                using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                {
                                                    cmd2.CommandText =
                                                    // DEPOSITO
                                                    @"   
Create Table #A
(
FundPK int,
InstrumentID nvarchar(100),
InstrumentName  nvarchar(500),
InstrumentTypePK int,
MaturityDate datetime,
Balance numeric(18,4),
LastCoupon datetime,
NextCoupon datetime,
AcqDate datetime,
Tenor int,
InterestPercent numeric(18,4),
DailyInterest numeric(18,4),
AccDays int,
TaxExpensePercent numeric(18,4),
)


Create Table #B
(
FundPK int,
InstrumentID nvarchar(100),
InstrumentName  nvarchar(500),
InstrumentTypeName nvarchar(50),
MaturityDate datetime,
Balance numeric(18,4),
LastCoupon datetime,
NextCoupon datetime,
AcqDate datetime,
Tenor int,
InterestPercent numeric(18,4),
DailyInterest numeric(18,4),
AccDays int,
TaxDays int,
InterestAmount numeric(18,4),
TaxAmount numeric(18,4),
)


insert into #A (FundPK,InstrumentID,InstrumentName,InstrumentTypePK,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,TaxExpensePercent)
select A.FundPK,B.ID,B.Name,B.InstrumentTypePK,A.MaturityDate,A.Balance,case when B.InstrumentTypePK = 5 then AcqDate else case when B.InstrumentTypePK = 3 and datediff(day,@date,A.MaturityDate) <= 10 then A.AcqDate else dbo.FgetLastCouponDate(@date,A.InstrumentPK) end end LastCoupon,
case when B.InstrumentTypePK = 5 then A.MaturityDate else case when datediff(day,dbo.FgetNextCouponDate(@date,A.InstrumentPK),A.MaturityDate) < 10 then A.MaturityDate else dbo.FgetNextCouponDate(@date,A.InstrumentPK) end end NextCoupon,A.AcqDate,0 Tenor,A.InterestPercent,
case when B.InstrumentTypePK = 5 then A.Balance * (B.InterestPercent/100)/B.InterestDaysType else A.Balance * (B.InterestPercent/100)/360 end DailyInterest,0 AccDays,A.TaxExpensePercent from FundPosition A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
where Date = @Date
and A.FundPK = @FundPK
and A.status = 2
and B.InstrumentTypePK in (5)
order by B.ID


insert into #B (FundPK,InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount)
select A.FundPK,InstrumentID,InstrumentName,B.Name,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate, datediff(day,@Date,NextCoupon) Tenor,InterestPercent,case when datediff(day,LastCoupon,@Date) = 0 then 0 else  DailyInterest end,datediff(day,LastCoupon,@Date) AccDays,
DailyInterest * datediff(day,LastCoupon,@Date) InterestAmount, case when AcqDate > LastCoupon then  datediff(day,AcqDate,@Date) else  datediff(day,LastCoupon,@Date) end TaxDays,
case when AcqDate > LastCoupon then (DailyInterest * TaxExpensePercent/100) * datediff(day,AcqDate,@Date) else (DailyInterest * TaxExpensePercent/100) * datediff(day,LastCoupon,@Date) end TaxAmount
from #A A
left join InstrumentType B on A.InstrumentTypePK = B.InstrumentTypePK and B.Status = 2
where A.InstrumentTypePK in (5)


select FundPK,InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,
AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount,InterestAmount-TaxAmount NetAmount 
from #B order by InstrumentID";

                                                    cmd2.CommandTimeout = 0;
                                                    cmd2.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);


                                                    cmd2.ExecuteNonQuery();


                                                    using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                    {

                                                        if (dr2.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<AccruedInterestReport> rList2 = new List<AccruedInterestReport>();
                                                                while (dr2.Read())
                                                                {
                                                                    AccruedInterestReport rSingle2 = new AccruedInterestReport();

                                                                    rSingle2.FundPK = Convert.ToInt32(dr2["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr2["FundPK"]));
                                                                    rSingle2.InstrumentID = Convert.ToString(dr2["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["InstrumentID"]));
                                                                    rSingle2.InstrumentName = Convert.ToString(dr2["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["InstrumentName"]));
                                                                    rSingle2.InstrumentTypeName = Convert.ToString(dr2["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["InstrumentTypeName"]));
                                                                    rSingle2.MaturityDate = Convert.ToString(dr2["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["MaturityDate"]));
                                                                    rSingle2.Balance = Convert.ToDecimal(dr2["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["Balance"]));
                                                                    rSingle2.LastCoupon = Convert.ToString(dr2["LastCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["LastCoupon"]));
                                                                    rSingle2.NextCoupon = Convert.ToString(dr2["NextCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["NextCoupon"]));
                                                                    rSingle2.AcqDate = Convert.ToString(dr2["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["AcqDate"]));
                                                                    rSingle2.Tenor = Convert.ToDecimal(dr2["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["Tenor"]));
                                                                    rSingle2.InterestPercent = Convert.ToDecimal(dr2["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["InterestPercent"]));
                                                                    rSingle2.DailyInterest = Convert.ToDecimal(dr2["DailyInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["DailyInterest"]));
                                                                    rSingle2.AccDays = Convert.ToDecimal(dr2["AccDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["AccDays"]));
                                                                    rSingle2.InterestAmount = Convert.ToDecimal(dr2["InterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["InterestAmount"]));
                                                                    rSingle2.TaxDays = Convert.ToDecimal(dr2["TaxDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["TaxDays"]));
                                                                    rSingle2.TaxAmount = Convert.ToDecimal(dr2["TaxAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["TaxAmount"]));
                                                                    rSingle2.NetAmount = Convert.ToDecimal(dr2["NetAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["NetAmount"]));

                                                                    rList2.Add(rSingle2);

                                                                }



                                                                var GroupByReference2 =
                                                                from r2 in rList2
                                                                orderby r2.InstrumentTypeName ascending
                                                                group r2 by new { r2.InstrumentTypeName } into rGroup2
                                                                select rGroup2;


                                                                incRowExcel++;



                                                                foreach (var rsHeader2 in GroupByReference2)
                                                                {
                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader2.Key.InstrumentTypeName;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                    incRowExcel++;

                                                                    //Row B = 3
                                                                    int RowB = incRowExcel;
                                                                    int RowG = incRowExcel + 1;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Security Code";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "Security Name";
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                                    worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                                                    worksheet.Cells[incRowExcel, 7].Value = "Term of Interest";
                                                                    worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 9].Value = "Days To Go";
                                                                    worksheet.Cells[incRowExcel, 10].Value = "Interest Rate (%)";
                                                                    worksheet.Cells[incRowExcel, 11].Value = "Daily Interest";
                                                                    worksheet.Cells[incRowExcel, 12].Value = "Accrued Days";
                                                                    worksheet.Cells[incRowExcel, 13].Value = "Accrued Interest";
                                                                    worksheet.Cells[incRowExcel, 14].Value = "Accrued Tax";
                                                                    worksheet.Cells[incRowExcel, 15].Value = "Net Accrued Interest";

                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    //incRowExcel++;


                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    incRowExcel++;
                                                                    //area header

                                                                    int _no = 1;
                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    int _B = 0;
                                                                    foreach (var rsDetail2 in rsHeader2)
                                                                    {

                                                                        //ThickBox Border

                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        //area detail
                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail2.InstrumentID;
                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail2.InstrumentName;
                                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail2.MaturityDate).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail2.Balance;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail2.AcqDate).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail2.NextCoupon).ToString("dd-MMM-yyyy");
                                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail2.Tenor;
                                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";


                                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail2.InterestPercent;
                                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail2.DailyInterest;
                                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail2.AccDays;
                                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail2.InterestAmount;
                                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail2.TaxAmount;
                                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail2.NetAmount;
                                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                                        _endRowDetail = incRowExcel;
                                                                        _no++;
                                                                        incRowExcel++;

                                                                    }

                                                                    int RowF = incRowExcel - 1;
                                                                    worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["N" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["O" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowB + ":O" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowB + ":O" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;




                                                                    _B = incRowExcel;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["O" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);

                                                                    worksheet.Cells[incRowExcel, 4].Value = "TOTAL ";
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                                    worksheet.Cells[incRowExcel, 13].Calculate();
                                                                    worksheet.Cells[incRowExcel, 14].Calculate();
                                                                    worksheet.Cells[incRowExcel, 15].Calculate();



                                                                    incRowExcel++;


                                                                }
                                                                //worksheet.Cells[incRowExcel, 1].Value = "TOTAL PORTFOLIO BOND";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                ////worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                                                ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;

                                                                //incRowExcel++;




                                                            }

                                                        }
                                                    }
                                                }
                                            }

                                            incRowExcel++;
                                        }

                                        worksheet.Row(incRowExcel).PageBreak = true;

                                        incRowExcel++;



                                        string _rangeDetail = "A:O";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 16];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 5;
                                        worksheet.Column(4).Width = 60;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 15;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 25;
                                        worksheet.Column(15).Width = 25;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20&B SUMMARY DEPOSITO";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                    }
                                    return true;
                                }


                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Nav Report
            if (_FundAccountingRpt.ReportName.Equals("Nav Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @" 
                               

                            DECLARE A CURSOR FOR 
                            select FundPK from Fund 
                            where status = 2  " + _paramFund + @"


                            Open A
                            Fetch Next From A
                            Into @FundPK

                            While @@FETCH_STATUS = 0
                            BEGIN    

                            Select @Date Date,ROW,Description,sum(dbo.FGetGroupFundJournalAccountBalanceByFundPK(@Date,A.FundJournalAccountPK,@FundPK)) Amount  From NAVmappingReport A  
                            left join FundJournalAccount B on  A.FundJournalAccountPK = B.FundJournalAccountPK and B.Status	 =  2  
                            Group By ROW,Description
                            order by Row

                            Fetch next From A Into @FundPK
                            END
                            Close A
                            Deallocate A ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NavReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NavReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Nav Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<NavReportListing> rList = new List<NavReportListing>();
                                        while (dr0.Read())
                                        {

                                            NavReportListing rSingle = new NavReportListing();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"]);
                                            rSingle.Row = Convert.ToInt32(dr0["Row"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.AmountBefore = Convert.ToDecimal(dr0["Amount"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.Row ascending
                                            group r by new { r.FundPK, r.Date, r.CurrencyID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Formulir Nomor : ";
                                            worksheet.Cells[incRowExcel, 2].Value = "X.D.1-1";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Manager Investasi : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyName();
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Bank Kustodian : ";
                                            worksheet.Cells[incRowExcel, 2].Value = Get_BankCustodianName(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Nama Reksadana : ";
                                            worksheet.Cells[incRowExcel, 2].Value = Get_FundName(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Jenis Reksadana : ";
                                            worksheet.Cells[incRowExcel, 2].Value = Get_FundType(rsHeader.Key.FundPK);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Tanggal : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Mata Uang : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _host.Get_CurrencyID(_FundAccountingRpt.FundFrom);
                                            incRowExcel = incRowExcel + 2;


                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[RowB, 1].Style.Font.Bold = true;
                                            worksheet.Cells[RowB, 1].Value = "LAPORAN AKTIVA DAN KEWAJIBAN";
                                            worksheet.Cells[RowB, 2].Style.Font.Bold = true;
                                            worksheet.Cells[RowB, 2].Value = "AMOUNT";
                                            worksheet.Cells[RowB, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowB, 3].Value = "AMOUNT";
                                            worksheet.Cells[RowB + 1, 1].Style.Font.Bold = true;
                                            worksheet.Cells[RowB + 1, 1].Value = "AKTIVA";
                                            worksheet.Cells[22, 1].Style.Font.Bold = true;
                                            worksheet.Cells[22, 1].Value = "KEWAJIBAN";

                                            string _range = "A" + incRowExcel + ":C" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _description = "";
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":C" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":C" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":C" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //area detail

                                                //if (_description != rsDetail.Description && rsDetail.Amount != 0)
                                                //{
                                                worksheet.Cells[rsDetail.Row, 1].Value = rsDetail.Description;
                                                worksheet.Cells[rsDetail.Row, 2].Value = rsDetail.Amount;
                                                worksheet.Cells[rsDetail.Row, 2].Style.Numberformat.Format = "#,####0.00";
                                                worksheet.Cells[rsDetail.Row, 3].Value = rsDetail.AmountBefore;
                                                worksheet.Cells[rsDetail.Row, 3].Style.Numberformat.Format = "#,####0.00";
                                                //}

                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;
                                                _description = rsDetail.Description;





                                            }

                                            //decimal _totalAktiva = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 20);
                                            //decimal _totalKewajiban = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 25);


                                            //decimal _subs = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 29);
                                            //decimal _redemp = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 30);
                                            //decimal _retainEarning = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 31);
                                            //decimal _dividen = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 32);
                                            //decimal _realised = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 33);
                                            //decimal _unrealised = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 34);

                                            decimal _totalAUM = _host.Get_FundAUM(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo);
                                            decimal _totalUnit = _host.Get_FundUnitPosition(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo);
                                            decimal _nav;
                                            if (_totalUnit == 0)
                                            {
                                                _nav = 1000;
                                            }
                                            else
                                            {
                                                _nav = _totalAUM / _totalUnit;
                                            }

                                            //worksheet.Cells[27, 1].Value = "TOTAL AKTIVA BERSIH";
                                            //worksheet.Cells[27, 2].Value = _totalAktiva - _totalKewajiban;
                                            //worksheet.Cells[27, 2].Style.Numberformat.Format = "#,####0";
                                            //worksheet.Cells[33, 2].Value = (_realised);
                                            //worksheet.Cells[33, 2].Style.Numberformat.Format = "#,####0";
                                            //worksheet.Cells[34, 2].Value = (_unrealised);
                                            //worksheet.Cells[34, 2].Style.Numberformat.Format = "#,####0";
                                            //worksheet.Cells[35, 1].Value = "PENDAPATAN INVESTASI BERSIH";
                                            //worksheet.Cells[35, 2].Value = (_totalAktiva - _totalKewajiban) - (_subs + _redemp + _retainEarning + _dividen + _realised + _unrealised);
                                            //worksheet.Cells[35, 2].Style.Numberformat.Format = "#,####0";

                                            //worksheet.Cells[_endRowDetail + 6, 1].Value = "TOTAL SAHAM/UNIT PENYERTAAN DAN LABA/RUGI";
                                            //worksheet.Cells[_endRowDetail + 6, 2].Value = _totalAktiva - _totalKewajiban;
                                            //worksheet.Cells[_endRowDetail + 6, 2].Style.Numberformat.Format = "#,####0.0000";

                                            worksheet.Cells[_endRowDetail + 8, 1].Value = "JUMLAH SAHAM/UNIT PENYERTAAN YANG BEREDAR";
                                            worksheet.Cells[_endRowDetail + 8, 2].Value = _totalUnit;
                                            worksheet.Cells[_endRowDetail + 8, 2].Style.Numberformat.Format = "#,####0.0000";
                                            worksheet.Cells[_endRowDetail + 8, 3].Value = _totalUnit;
                                            worksheet.Cells[_endRowDetail + 8, 3].Style.Numberformat.Format = "#,####0.0000";




                                            worksheet.Cells[_endRowDetail + 9, 1].Value = "NILAI AKTIVA BERSIH PER SAHAM/UNIT PENYERTAAN";
                                            worksheet.Cells[_endRowDetail + 9, 2].Value = _nav;
                                            worksheet.Cells[_endRowDetail + 9, 2].Style.Numberformat.Format = "#,####0.0000";
                                            worksheet.Cells[_endRowDetail + 9, 3].Value = _nav;
                                            worksheet.Cells[_endRowDetail + 9, 3].Style.Numberformat.Format = "#,####0.0000";

                                            int RowF = _endRowDetail + 7;
                                            int RowH = _endRowDetail + 9;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowH].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowH].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowH].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowH].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowH].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowH].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowH].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowH].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowH].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";

                                            incRowExcel = incRowExcel + 10;

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:C";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 3];
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(1).Width = 60;
                                        worksheet.Column(2).AutoFit();

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20&B NAV REPORT";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportHeaderRightText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Portfolio Report
            if (_FundAccountingRpt.ReportName.Equals("Portfolio Report"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            // DEPOSITO
                            cmd.CommandText = @"
                            
            
                            select distinct A.FundPK,B.Name FundName from FundPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status  = 2 
                            where A.status in (1,2) and Date = @ValueDate " + _paramFund + @"
                         ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {

                                if (dr0.HasRows)
                                {

                                    string filePath = Tools.ReportsPath + "FundPortfolioValuationRpt" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundPortfolioValuationRpt" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fund Portfolio");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundPortfolio> rList = new List<FundPortfolio>();
                                        while (dr0.Read())
                                        {
                                            FundPortfolio rSingle = new FundPortfolio();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                        from r in rList
                                        orderby r.FundPK, r.FundName ascending
                                        group r by new { r.FundPK, r.FundName } into rGroup
                                        select rGroup;

                                        int incRowExcel = 1;
                                        int _colCurrency = 0;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Manager ";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "Cash At Bank ";
                                            worksheet.Cells[incRowExcel, 6].Value = Get_TotalAccountBalanceByFundPK(rsHeader.Key.FundPK, 3, Convert.ToString(_FundAccountingRpt.ValueDateFrom));
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Value = "Print Date";
                                            worksheet.Cells[incRowExcel, 12].Value = " : ";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Value = Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 13].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Custodian Bank";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_BankCustodianName(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "AUM ";
                                            worksheet.Cells[incRowExcel, 6].Value = Get_TotalAUMByFundPK(rsHeader.Key.FundPK, 1, 63, Convert.ToString(_FundAccountingRpt.ValueDateFrom));
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 11].Value = "Print Time";
                                            worksheet.Cells[incRowExcel, 12].Value = " : ";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Value = Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 13].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundName(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "UNIT ";
                                            worksheet.Cells[incRowExcel, 6].Value = Get_TotalUnitByFundPK(rsHeader.Key.FundPK, Convert.ToString(_FundAccountingRpt.ValueDateFrom));
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;



                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundType(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV T0 ";
                                            worksheet.Cells[incRowExcel, 6].Value = Get_GetNAVProjectionByFundPK(rsHeader.Key.FundPK, Convert.ToString(_FundAccountingRpt.ValueDateFrom));
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;




                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account No";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_FundSinvestCode(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV T-1 ";
                                            worksheet.Cells[incRowExcel, 6].Value = Get_GetCloseNavYesterdayByFundPK(rsHeader.Key.FundPK, _FundAccountingRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Sub Account BI";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 4].Value = "0111CUS169";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "% of Portfolio ";
                                            worksheet.Cells[incRowExcel, 6].Value = Get_TotalMarketValueByFundPK(rsHeader.Key.FundPK, Convert.ToString(_FundAccountingRpt.ValueDateFrom)) / Get_TotalAUMByFundPK(rsHeader.Key.FundPK, 1, 63, Convert.ToString(_FundAccountingRpt.ValueDateFrom)) * 100;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = Get_CurrencyID(rsHeader.Key.FundPK);
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;

                                            _colCurrency = incRowExcel;

                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText =
                                                   // EQUITY
                                                   @"select I.ISIN ISINCode,FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
                                                F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,case when FP.MaturityDate is null then '01/01/1900' else FP.MaturityDate end  MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
                                                FP.ClosePrice ClosePrice
                                                ,FP.InterestPercent 
                                                ,FP.MarketValue MarketValue,
                                                sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
                                                case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav,isnull(sum(FP.MarketValue /[dbo].[FgetTotalMarketValueFromFundPosition](@ValueDate,FP.FundPK,I.InstrumentTypePK)),0) * 100 PercentOfPortfolio,
                                                case when I.InstrumentTypePK in (1,4,16) then 1 else case when  I.InstrumentTypePK not in (1,4,5,16) then 2 else 3 end  end Flag 
                                                from fundposition FP   
                                                left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status = 2   
                                                left join Fund F on FP.FundPK = F.FundPK and F.status = 2   
                                                left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                                                left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status = 2  
                                                left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType' and M.Status = 2
                                                where FP.status in (1,2)  and FP.Date = @ValueDate and I.InstrumentTypePK in (1,4,16)
                                                and FP.FundPK = @FundPK
                                                group by FP.FundPK,I.ISIN,Fp.AVgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
                                                FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne
                                                order by Flag,InstrumentTypeName,I.ID";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd1.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);
                                                    cmd1.ExecuteNonQuery();


                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {

                                                        if (dr1.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<FundPortfolio> rList1 = new List<FundPortfolio>();
                                                                while (dr1.Read())
                                                                {
                                                                    FundPortfolio rSingle1 = new FundPortfolio();
                                                                    rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                                    rSingle1.InstrumentTypePK = Convert.ToInt32(dr1["InstrumentTypePK"]);
                                                                    rSingle1.InstrumentTypeName = Convert.ToString(dr1["InstrumentTypeName"]);
                                                                    rSingle1.FundID = Convert.ToString(dr1["FundID"]);
                                                                    rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                                    rSingle1.InstrumentID = Convert.ToString(dr1["InstrumentID"]);
                                                                    rSingle1.InstrumentName = Convert.ToString(dr1["InstrumentName"]);
                                                                    rSingle1.ISINCode = Convert.ToString(dr1["ISINCode"]);
                                                                    rSingle1.MaturityDate = Convert.ToDateTime(dr1["MaturityDate"]);
                                                                    rSingle1.AvgPrice = Convert.ToDecimal(dr1["AvgPrice"]);
                                                                    rSingle1.Balance = Convert.ToDecimal(dr1["Balance"]);
                                                                    rSingle1.CostValue = Convert.ToDecimal(dr1["CostValue"]);
                                                                    rSingle1.ClosePrice = dr1["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ClosePrice"]);
                                                                    //rSingle1.ClosePrice = Convert.ToDecimal(dr1["ClosePrice"]);
                                                                    rSingle1.MarketValue = dr1["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["MarketValue"]);
                                                                    rSingle1.Unrealised = dr1["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Unrealised"]);
                                                                    //rSingle1.PercentOfNav = dr1["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["PercentOfNav"]);
                                                                    rSingle1.PercentOfNav = Convert.ToDecimal(dr1["PercentOfNav"]);
                                                                    rSingle1.PercentOfPortfolio = Convert.ToDecimal(dr1["PercentOfPortfolio"]);
                                                                    rSingle1.InterestPercent = Convert.ToDecimal(dr1["InterestPercent"]);
                                                                    rList1.Add(rSingle1);

                                                                }


                                                                var GroupByReference1 =
                                                                from r1 in rList1
                                                                orderby r1.InstrumentTypeName ascending
                                                                group r1 by new { r1.InstrumentTypeName } into rGroup1
                                                                select rGroup1;


                                                                incRowExcel++;



                                                                foreach (var rsHeader1 in GroupByReference1)
                                                                {

                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.InstrumentTypeName;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                    incRowExcel++;

                                                                    //Row B = 3
                                                                    int RowB = incRowExcel;
                                                                    int RowG = incRowExcel + 1;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Security Code";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "ISIN Code";
                                                                    worksheet.Cells[incRowExcel, 4].Value = "Security Name";
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                                    worksheet.Cells[incRowExcel, 6].Value = "Quantity (Face Value)";
                                                                    worksheet.Cells[incRowExcel, 7].Value = "Average Cost";
                                                                    worksheet.Cells[incRowExcel, 8].Value = "Cost Value";
                                                                    worksheet.Cells[incRowExcel, 9].Value = "Market Price";
                                                                    worksheet.Cells[incRowExcel, 10].Value = "Market Value";
                                                                    worksheet.Cells[incRowExcel, 11].Value = "Unrealized Gain/Loss";
                                                                    worksheet.Cells[incRowExcel, 12].Value = "% of NAV";
                                                                    worksheet.Cells[incRowExcel, 13].Value = "% of Portfolio";



                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    //incRowExcel++;


                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    incRowExcel++;
                                                                    //area header

                                                                    int _no = 1;
                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    int _B = 0;
                                                                    foreach (var rsDetail1 in rsHeader1)
                                                                    {
                                                                        //ThickBox Border

                                                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        //area detail
                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.InstrumentID;
                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.ISINCode;
                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail1.InstrumentName;
                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.MaturityDate;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Balance;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail1.AvgPrice;
                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail1.CostValue;
                                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail1.ClosePrice;
                                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail1.MarketValue;
                                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail1.Unrealised;
                                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail1.PercentOfNav;
                                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail1.PercentOfPortfolio;
                                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";

                                                                        _endRowDetail = incRowExcel;
                                                                        _no++;
                                                                        incRowExcel++;

                                                                    }

                                                                    int RowF = incRowExcel - 1;
                                                                    worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    _B = incRowExcel;
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);

                                                                    worksheet.Cells[incRowExcel, 4].Value = "TOTAL ";
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                                                    worksheet.Cells[incRowExcel, 8].Calculate();
                                                                    worksheet.Cells[incRowExcel, 10].Calculate();
                                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                                    worksheet.Cells[incRowExcel, 12].Calculate();
                                                                    worksheet.Cells[incRowExcel, 13].Calculate();

                                                                    incRowExcel++;

                                                                }
                                                                //worksheet.Cells[incRowExcel, 1].Value = "TOTAL PORTFOLIO EQUITY";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                ////worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                                                ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;

                                                                //incRowExcel++;


                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                            using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon2.Open();
                                                using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                {
                                                    cmd2.CommandText =
                                                   // BOND
                                                   @"select I.ISIN ISINCode,FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
                                                F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,case when FP.MaturityDate is null then '01/01/1900' else FP.MaturityDate end  MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
                                                FP.ClosePrice ClosePrice
                                                ,FP.InterestPercent 
                                                ,FP.MarketValue MarketValue,
                                                sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
                                                case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav,isnull(sum(FP.MarketValue /[dbo].[FgetTotalMarketValueFromFundPosition](@ValueDate,FP.FundPK,I.InstrumentTypePK)),0) * 100 PercentOfPortfolio,
                                                case when I.InstrumentTypePK in (1,4,16) then 1 else case when  I.InstrumentTypePK not in (1,4,5,16) then 2 else 3 end  end Flag 
                                                from fundposition FP   
                                                left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status = 2   
                                                left join Fund F on FP.FundPK = F.FundPK and F.status = 2   
                                                left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                                                left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status = 2  
                                                left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType' and M.Status = 2
                                                where FP.status in (1,2)  and FP.Date = @ValueDate and I.InstrumentTypePK not in (1,4,5,16)
                                                and FP.FundPK = @FundPK
                                                group by FP.FundPK,I.ISIN,Fp.AVgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
                                                FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne
                                                order by Flag,InstrumentTypeName,I.ID";

                                                    cmd2.CommandTimeout = 0;
                                                    cmd2.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd2.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);


                                                    cmd2.ExecuteNonQuery();


                                                    using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                    {

                                                        if (dr2.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<FundPortfolio> rList2 = new List<FundPortfolio>();
                                                                while (dr2.Read())
                                                                {
                                                                    FundPortfolio rSingle2 = new FundPortfolio();
                                                                    rSingle2.Date = Convert.ToDateTime(dr2["Date"]);
                                                                    rSingle2.InstrumentTypePK = Convert.ToInt32(dr2["InstrumentTypePK"]);
                                                                    rSingle2.InstrumentTypeName = Convert.ToString(dr2["InstrumentTypeName"]);
                                                                    rSingle2.FundID = Convert.ToString(dr2["FundID"]);
                                                                    rSingle2.FundName = Convert.ToString(dr2["FundName"]);
                                                                    rSingle2.InstrumentID = Convert.ToString(dr2["InstrumentID"]);
                                                                    rSingle2.InstrumentName = Convert.ToString(dr2["InstrumentName"]);
                                                                    rSingle2.ISINCode = Convert.ToString(dr2["ISINCode"]);
                                                                    rSingle2.MaturityDate = Convert.ToDateTime(dr2["MaturityDate"]);
                                                                    rSingle2.AvgPrice = Convert.ToDecimal(dr2["AvgPrice"]);
                                                                    rSingle2.Balance = Convert.ToDecimal(dr2["Balance"]);
                                                                    rSingle2.CostValue = Convert.ToDecimal(dr2["CostValue"]);
                                                                    rSingle2.ClosePrice = dr2["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["ClosePrice"]);
                                                                    //rSingle2.ClosePrice = Convert.ToDecimal(dr2["ClosePrice"]);
                                                                    rSingle2.MarketValue = dr2["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["MarketValue"]);
                                                                    rSingle2.Unrealised = dr2["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["Unrealised"]);
                                                                    //rSingle2.PercentOfNav = dr2["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["PercentOfNav"]);
                                                                    rSingle2.PercentOfNav = Convert.ToDecimal(dr2["PercentOfNav"]);
                                                                    rSingle2.PercentOfPortfolio = Convert.ToDecimal(dr2["PercentOfPortfolio"]);
                                                                    rSingle2.InterestPercent = Convert.ToDecimal(dr2["InterestPercent"]);
                                                                    rList2.Add(rSingle2);

                                                                }


                                                                var GroupByReference2 =
                                                                from r2 in rList2
                                                                orderby r2.InstrumentTypeName ascending
                                                                group r2 by new { r2.InstrumentTypeName } into rGroup2
                                                                select rGroup2;


                                                                incRowExcel++;



                                                                foreach (var rsHeader2 in GroupByReference2)
                                                                {
                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader2.Key.InstrumentTypeName;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                    incRowExcel++;

                                                                    //Row B = 3
                                                                    int RowB = incRowExcel;
                                                                    int RowG = incRowExcel + 1;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Security Code";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "ISIN Code";
                                                                    worksheet.Cells[incRowExcel, 4].Value = "Security Name";
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                                    worksheet.Cells[incRowExcel, 6].Value = "Interest Rate";
                                                                    worksheet.Cells[incRowExcel, 7].Value = "Quantity (Face Value)";
                                                                    worksheet.Cells[incRowExcel, 8].Value = "Average Cost";
                                                                    worksheet.Cells[incRowExcel, 9].Value = "Cost Value";
                                                                    worksheet.Cells[incRowExcel, 10].Value = "Market Price";
                                                                    worksheet.Cells[incRowExcel, 11].Value = "Market Value";
                                                                    worksheet.Cells[incRowExcel, 12].Value = "Unrealized Gain/Loss";
                                                                    worksheet.Cells[incRowExcel, 13].Value = "% of NAV";
                                                                    worksheet.Cells[incRowExcel, 14].Value = "% of Portfolio";



                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    //incRowExcel++;


                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    incRowExcel++;
                                                                    //area header

                                                                    int _no = 1;
                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    int _B = 0;
                                                                    foreach (var rsDetail2 in rsHeader2)
                                                                    {
                                                                        //ThickBox Border

                                                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        //area detail
                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail2.InstrumentID;
                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ISINCode;
                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail2.InstrumentName;
                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail2.MaturityDate;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail2.InterestPercent;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail2.Balance;
                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail2.AvgPrice;
                                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail2.CostValue;
                                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail2.ClosePrice;
                                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail2.MarketValue;
                                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail2.Unrealised;
                                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail2.PercentOfNav;
                                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail2.PercentOfPortfolio;
                                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";

                                                                        _endRowDetail = incRowExcel;
                                                                        _no++;
                                                                        incRowExcel++;

                                                                    }

                                                                    int RowF = incRowExcel - 1;
                                                                    worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["N" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    _B = incRowExcel;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);

                                                                    worksheet.Cells[incRowExcel, 4].Value = "TOTAL ";
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 7].Calculate();
                                                                    worksheet.Cells[incRowExcel, 9].Calculate();
                                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                                    worksheet.Cells[incRowExcel, 12].Calculate();
                                                                    worksheet.Cells[incRowExcel, 13].Calculate();
                                                                    worksheet.Cells[incRowExcel, 14].Calculate();




                                                                    incRowExcel++;


                                                                }
                                                                //worksheet.Cells[incRowExcel, 1].Value = "TOTAL PORTFOLIO BOND";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                ////worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                                                ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;

                                                                //incRowExcel++;




                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                            using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon3.Open();
                                                using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                                {
                                                    cmd3.CommandText =
                                                   // DEPOSITO
                                                   @"select I.ISIN ISINCode,FP.ClosePrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
                                                F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,case when FP.MaturityDate is null then '01/01/1900' else FP.MaturityDate end  MaturityDate,FP.Balance Balance,FP.Balance CostValue,  
                                                FP.ClosePrice ClosePrice
                                                ,FP.InterestPercent 
                                                ,FP.MarketValue MarketValue,
                                                0 Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
                                                case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav,isnull(sum(FP.MarketValue /[dbo].[FgetTotalMarketValueFromFundPosition](@ValueDate,FP.FundPK,I.InstrumentTypePK)),0) * 100 PercentOfPortfolio,
                                                case when I.InstrumentTypePK in (1,4,16) then 1 else case when  I.InstrumentTypePK not in (1,4,5,16) then 2 else 3 end  end Flag 
                                                from fundposition FP   
                                                left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status = 2   
                                                left join Fund F on FP.FundPK = F.FundPK and F.status = 2   
                                                left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                                                left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status = 2  
                                                left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType' and M.Status = 2
                                                where FP.status in (1,2)  and FP.Date = @ValueDate and I.InstrumentTypePK in (5)
                                                and FP.FundPK = @FundPK
                                                group by FP.FundPK,I.ISIN,Fp.AVgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
                                                FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne
                                                order by Flag,InstrumentTypeName,I.ID";

                                                    cmd3.CommandTimeout = 0;
                                                    cmd3.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    cmd3.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);


                                                    cmd3.ExecuteNonQuery();


                                                    using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                    {

                                                        if (dr3.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package3 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<FundPortfolio> rList3 = new List<FundPortfolio>();
                                                                while (dr3.Read())
                                                                {
                                                                    FundPortfolio rSingle3 = new FundPortfolio();
                                                                    rSingle3.Date = Convert.ToDateTime(dr3["Date"]);
                                                                    rSingle3.InstrumentTypePK = Convert.ToInt32(dr3["InstrumentTypePK"]);
                                                                    rSingle3.InstrumentTypeName = Convert.ToString(dr3["InstrumentTypeName"]);
                                                                    rSingle3.FundID = Convert.ToString(dr3["FundID"]);
                                                                    rSingle3.FundName = Convert.ToString(dr3["FundName"]);
                                                                    rSingle3.InstrumentID = Convert.ToString(dr3["InstrumentID"]);
                                                                    rSingle3.InstrumentName = Convert.ToString(dr3["InstrumentName"]);
                                                                    rSingle3.ISINCode = Convert.ToString(dr3["ISINCode"]);
                                                                    rSingle3.MaturityDate = Convert.ToDateTime(dr3["MaturityDate"]);
                                                                    rSingle3.AvgPrice = Convert.ToDecimal(dr3["AvgPrice"]);
                                                                    rSingle3.Balance = Convert.ToDecimal(dr3["Balance"]);
                                                                    rSingle3.CostValue = Convert.ToDecimal(dr3["CostValue"]);
                                                                    rSingle3.ClosePrice = dr3["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr3["ClosePrice"]);
                                                                    //rSingle3.ClosePrice = Convert.ToDecimal(dr3["ClosePrice"]);
                                                                    rSingle3.MarketValue = dr3["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr3["MarketValue"]);
                                                                    rSingle3.Unrealised = dr3["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr3["Unrealised"]);
                                                                    //rSingle3.PercentOfNav = dr3["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr3["PercentOfNav"]);
                                                                    rSingle3.PercentOfNav = Convert.ToDecimal(dr3["PercentOfNav"]);
                                                                    rSingle3.PercentOfPortfolio = Convert.ToDecimal(dr3["PercentOfPortfolio"]);
                                                                    rSingle3.InterestPercent = Convert.ToDecimal(dr3["InterestPercent"]);
                                                                    rList3.Add(rSingle3);

                                                                }


                                                                var GroupByReference3 =
                                                                from r3 in rList3
                                                                orderby r3.InstrumentTypeName ascending
                                                                group r3 by new { r3.InstrumentTypeName } into rGroup3
                                                                select rGroup3;

                                                                incRowExcel++;



                                                                foreach (var rsHeader3 in GroupByReference3)
                                                                {
                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader3.Key.InstrumentTypeName;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                    incRowExcel++;

                                                                    //Row B = 3
                                                                    int RowB = incRowExcel;
                                                                    int RowG = incRowExcel + 1;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Security Code";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "ISIN Code";
                                                                    worksheet.Cells[incRowExcel, 4].Value = "Security Name";
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                                    worksheet.Cells[incRowExcel, 6].Value = "Interest Rate";
                                                                    worksheet.Cells[incRowExcel, 7].Value = "Quantity (Face Value)";
                                                                    worksheet.Cells[incRowExcel, 8].Value = "Average Cost";
                                                                    worksheet.Cells[incRowExcel, 9].Value = "Cost Value";
                                                                    worksheet.Cells[incRowExcel, 10].Value = "Market Price";
                                                                    worksheet.Cells[incRowExcel, 11].Value = "Market Value";
                                                                    worksheet.Cells[incRowExcel, 12].Value = "Unrealized Gain/Loss";
                                                                    worksheet.Cells[incRowExcel, 13].Value = "% of NAV";
                                                                    worksheet.Cells[incRowExcel, 14].Value = "% of Portfolio";



                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    //incRowExcel++;


                                                                    //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                    //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    incRowExcel++;
                                                                    //area header

                                                                    int _no = 1;
                                                                    int _startRowDetail = incRowExcel;
                                                                    int _endRowDetail = 0;
                                                                    int _B = 0;
                                                                    foreach (var rsDetail3 in rsHeader3)
                                                                    {
                                                                        //ThickBox Border

                                                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        //area detail
                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail3.InstrumentID;
                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail3.ISINCode;
                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail3.InstrumentName;
                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail3.MaturityDate;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail3.InterestPercent;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail3.Balance;
                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail3.AvgPrice;
                                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail3.CostValue;
                                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail3.ClosePrice;
                                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail3.MarketValue;
                                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail3.Unrealised;
                                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail3.PercentOfNav;
                                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail3.PercentOfPortfolio;
                                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";

                                                                        _endRowDetail = incRowExcel;
                                                                        _no++;
                                                                        incRowExcel++;

                                                                    }

                                                                    int RowF = incRowExcel - 1;
                                                                    worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["M" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["N" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowB + ":N" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                                    _B = incRowExcel;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);


                                                                    worksheet.Cells[incRowExcel, 4].Value = "TOTAL ";
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 7].Calculate();
                                                                    worksheet.Cells[incRowExcel, 9].Calculate();
                                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                                    worksheet.Cells[incRowExcel, 12].Calculate();
                                                                    worksheet.Cells[incRowExcel, 13].Calculate();
                                                                    worksheet.Cells[incRowExcel, 14].Calculate();

                                                                    incRowExcel++;

                                                                }
                                                                //worksheet.Cells[incRowExcel, 1].Value = "TOTAL PORTFOLIO DEPOSITO";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                ////worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                                                ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;

                                                                //incRowExcel++;
                                                            }

                                                        }
                                                    }
                                                }
                                            }

                                            incRowExcel++;



                                            incRowExcel++;
                                        }

                                        worksheet.Row(incRowExcel).PageBreak = true;

                                        incRowExcel++;



                                        string _rangeDetail = "A:N";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 15];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 60;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 15;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&22 FUND PORTFOLIO";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                    }
                                    return true;
                                }
                                else
                                {
                                    return false;
                                }


                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

            #endregion

            #region Daily Compliance Report
            else if (_FundAccountingRpt.ReportName.Equals("Daily Compliance Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";

                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =

                             @"
                            
                                create table #A (FundID nvarchar(50),FundName nvarchar(100),DepositoAmount numeric(22,4),DEPPercentOfNav numeric(18,4),BondAmount numeric(22,4),BondPercentOfNav numeric(18,4),EquityAmount numeric(22,4),EQPercentOfNav numeric(18,4))
                                insert into #A (FundID,FundName,DepositoAmount,DEPPercentOfNav,BondAmount,BondPercentOfNav,EquityAmount,EQPercentOfNav)
                                select B.ID,B.Name,0,0,0,0,isnull(sum(A.MarketValue),0) MarketValue,case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
                                case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End PercentOfNav   from FundPosition A 
                                left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
                                left join CloseNav D on D.Date = A.Date and A.FundPK = D.FundPK and D.status = 2  
                                where A.Date = @valuedate and A.status = 2 and InstrumentTypePK in (1,4,16) " + _paramFund + @"
                                group by B.ID,B.Name,D.AUM

                                union all
                                select B.ID,B.Name,0,0,isnull(sum(A.MarketValue),0) MarketValue,case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
                                case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End PercentOfNav,0,0   from FundPosition A 
                                left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
                                left join CloseNav D on D.Date = A.Date and A.FundPK = D.FundPK and D.status = 2  
                                where A.Date = @valuedate and A.status = 2 and InstrumentTypePK not in (1,4,5,6,16) " + _paramFund + @"
                                group by B.ID,B.Name,D.AUM

                                union all
                                select B.ID,B.Name,isnull(sum(A.MarketValue),0) MarketValue,case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
                                case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End PercentOfNav,0,0,0,0   from FundPosition A 
                                left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
                                left join CloseNav D on D.Date = A.Date and A.FundPK = D.FundPK and D.status = 2  
                                where A.Date = @valuedate and A.status = 2 and InstrumentTypePK in (5) " + _paramFund + @"
                                group by B.ID,B.Name,D.AUM

                                select @ValueDate Date,FundID,FundName,sum(DepositoAmount) DepositoAmount,sum(DEPPercentOfNav) DEPPercentOfNav,sum(BondAmount) BondAmount,sum(BondPercentOfNav) BondPercentOfNav,sum(EquityAmount) EquityAmount,sum(EQPercentOfNav) EQPercentOfNav,sum(DEPPercentOfNav + BondPercentOfNav + EQPercentOfNav ) TotalPercent  from #A
                                group By FundID,FundName
                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailyComplianceReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailyComplianceReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Transaction Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailyComplianceReport> rList = new List<DailyComplianceReport>();
                                        while (dr0.Read())
                                        {
                                            DailyComplianceReport rSingle = new DailyComplianceReport();
                                            rSingle.Date = Convert.ToString(dr0["Date"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.DepositoAmount = Convert.ToDecimal(dr0["DepositoAmount"]);
                                            rSingle.DEPPercentOfNav = Convert.ToDecimal(dr0["DEPPercentOfNav"]);
                                            rSingle.BondAmount = Convert.ToDecimal(dr0["BondAmount"]);
                                            rSingle.BondPercentOfNav = Convert.ToDecimal(dr0["BondPercentOfNav"]);
                                            rSingle.EquityAmount = Convert.ToDecimal(dr0["EquityAmount"]);
                                            rSingle.EQPercentOfNav = Convert.ToDecimal(dr0["EQPercentOfNav"]);
                                            rSingle.TotalPercent = Convert.ToDecimal(dr0["TotalPercent"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Date } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Daily Compliance Report";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date   :  ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            //int rowA = incRowExcel;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "ID";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "FUND NAME";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "DEPOSITO";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "BOND";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "EQUITY";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":H" + RowB].Merge = true;
                                            worksheet.Cells["G" + RowB + ":H" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Total Investment (% NAV)";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "%NAV";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 5].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "%NAV";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            //worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            //worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "%NAV";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            //worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            //incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //var _fundID = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                //int RowD = incRowExcel;
                                                //int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowB + ":I" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":I" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":I" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":I" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DepositoAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DEPPercentOfNav;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BondAmount;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BondPercentOfNav;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.EquityAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.EQPercentOfNav;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TotalPercent;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                //_fundID = rsDetail.Fund;
                                            }

                                            worksheet.Cells["A" + _endRowDetail + ":I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        }




                                        incRowExcel++;

                                        //-----------------------------------
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"
                                                Create Table #Exposure
                                                (
                                                InstrumentTypePK int,
                                                InstrumentPK int,
                                                FundPK int,
                                                Amount numeric(22,2),
                                                NAVPercent numeric(18,4)
                                                )

                                                Declare @InstrumentTypePK int
                                                Declare @InstrumentPK int
                                                Declare @FundPK int
                                                Declare @Amount numeric(22,2)
                                                Declare @NAVPercent numeric(18,4)
                                                Declare @WarningMaxExposurePercent numeric(18,4)

                                                SET ANSI_WARNINGS OFF

                                                DECLARE A CURSOR FOR 
                                                select C.InstrumentTypePK,A.InstrumentPK,A.FundPK,isnull(sum(A.MarketValue),0),case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
                                                case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End NAVPercent   from FundPosition A 
                                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
                                                left join CloseNav D on D.Date = A.Date and A.FundPK = D.FundPK and D.status = 2 
                                                left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2 
                                                where A.Date = @ValueDate and A.status = 2 " + _paramFund + @"
                                                group by C.InstrumentTypePK,A.InstrumentPK,A.FundPK,D.AUM
                                                having case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
                                                case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End > 0
        	
                                                Open A
                                                Fetch Next From A
                                                Into @InstrumentTypePK,@InstrumentPK,@FundPK,@Amount,@NAVPercent
        
                                                While @@FETCH_STATUS = 0
                                                BEGIN
                                                set @WarningMaxExposurePercent = 0

                                                IF (@InstrumentTypePK in (1,4,16))
                                                BEGIN
	                                                IF EXISTS(select * from FundExposure where FundPK = @FundPK and Type = 5 and status = 2)
	                                                BEGIN
		                                                select @WarningMaxExposurePercent = isnull(WarningMaxExposurePercent,0) from FundExposure where FundPK = @FundPK and Type = 5 and status = 2
		                                                IF (@NAVPercent >= @WarningMaxExposurePercent)
		                                                BEGIN
			                                                insert into #Exposure(InstrumentTypePK,InstrumentPK,FundPK,Amount,NAVPercent)
			                                                select @InstrumentTypePK,@InstrumentPK,@FundPK,@Amount,@NAVPercent
		                                                END
	                                                END

                                                END
                                                ELSE IF (@InstrumentTypePK = 5)
                                                BEGIN  
	                                                IF EXISTS(select * from FundExposure where FundPK = @FundPK and Type = 10 and status = 2)
	                                                BEGIN
		                                                select @WarningMaxExposurePercent = isnull(WarningMaxExposurePercent,0) from FundExposure where FundPK = @FundPK and Type = 10 and status = 2
		                                                IF (@NAVPercent >= @WarningMaxExposurePercent)
		                                                BEGIN
			                                                insert into #Exposure(InstrumentTypePK,InstrumentPK,FundPK,Amount,NAVPercent)
			                                                select @InstrumentTypePK,@InstrumentPK,@FundPK,@Amount,@NAVPercent
		                                                END
	                                                END
                                                END
                                                ELSE
                                                BEGIN  
	                                                IF EXISTS(select * from FundExposure where FundPK = @FundPK and Type = 13 and status = 2)
	                                                BEGIN
		                                                select @WarningMaxExposurePercent = isnull(WarningMaxExposurePercent,0) from FundExposure where FundPK = @FundPK and Type = 13 and status = 2
		                                                IF (@NAVPercent >= @WarningMaxExposurePercent)
		                                                BEGIN
			                                                insert into #Exposure(InstrumentTypePK,InstrumentPK,FundPK,Amount,NAVPercent)
			                                                select @InstrumentTypePK,@InstrumentPK,@FundPK,@Amount,@NAVPercent
		                                                END
	                                                END
                                                END
                                                Fetch next From A Into @InstrumentTypePK,@InstrumentPK,@FundPK,@Amount,@NAVPercent
                                                END
                                                Close A
                                                Deallocate A 


                                                select @ValueDate Date,E.Name Type,C.ID InstrumentID,B.ID FundID,B.Name FundName,Amount,NAVPercent   from #Exposure A 
                                                left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
                                                left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2 
                                                order by B.ID

                                                 ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@valuedate", _FundAccountingRpt.ValueDateTo);
                                                //cmd1.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);



                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    //if (!dr1.HasRows)
                                                    //{
                                                    //    return false;
                                                    //}
                                                    //else
                                                    //{


                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<DailyComplianceReport> rList1 = new List<DailyComplianceReport>();
                                                        while (dr1.Read())
                                                        {
                                                            DailyComplianceReport rSingle1 = new DailyComplianceReport();
                                                            rSingle1.Date = Convert.ToString(dr1["Date"]);
                                                            rSingle1.FundID = Convert.ToString(dr1["FundID"]);
                                                            rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                            rSingle1.Amount = Convert.ToDecimal(dr1["Amount"]);
                                                            rSingle1.NAVPercent = Convert.ToDecimal(dr1["NAVPercent"]);
                                                            rSingle1.Type = Convert.ToString(dr1["Type"]);
                                                            rSingle1.InstrumentID = Convert.ToString(dr1["InstrumentID"]);
                                                            rList1.Add(rSingle1);

                                                        }


                                                        var QueryByFundID1 =
                                                            from r1 in rList1
                                                            group r1 by new { r1.Date } into rGroup1
                                                            select rGroup1;

                                                        incRowExcel = incRowExcel + 2;
                                                        int _endRowDetailZ = 0;


                                                        foreach (var rsHeader1 in QueryByFundID1)
                                                        {
                                                            //worksheet.Cells[incRowExcel, 1].Value = "Total " + rsHeader1.Key.FundID + " : ";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            incRowExcel = incRowExcel + 2;
                                                            //Row B = 3
                                                            int RowBZ = incRowExcel;
                                                            int RowGZ = incRowExcel + 1;

                                                            worksheet.Cells[incRowExcel, 1].Value = "ID";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Merge = true;
                                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = "Exposure Monitoring";
                                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                            worksheet.Cells["C" + RowBZ + ":E" + RowBZ].Merge = true;
                                                            worksheet.Cells["C" + RowBZ + ":E" + RowBZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["C" + RowBZ + ":E" + RowBZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = "%NAV";
                                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Merge = true;
                                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            incRowExcel++;


                                                            worksheet.Cells[incRowExcel, 3].Value = "Type";
                                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                            //worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 4].Value = "Instrument";
                                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                            //worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                                            worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 5].Value = "Amount";
                                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                            //worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                                            worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                            incRowExcel++;

                                                            // Row C = 4
                                                            int RowCZ = incRowExcel;

                                                            //incRowExcel++;
                                                            //area header

                                                            int _noZ = 1;
                                                            int _startRowDetailZ = incRowExcel;
                                                            foreach (var rsDetail1 in rsHeader1)
                                                            {
                                                                //Row D = 5
                                                                int RowDZ = incRowExcel;
                                                                int RowEZ = incRowExcel + 1;


                                                                //ThickBox Border

                                                                worksheet.Cells["A" + RowBZ + ":F" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + RowBZ + ":F" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + RowBZ + ":F" + RowGZ].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + RowBZ + ":F" + RowGZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                                //area detail
                                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail1.FundID;
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundName;
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Type;
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.InstrumentID;
                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Amount;
                                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail1.NAVPercent;
                                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;



                                                                _endRowDetailZ = incRowExcel;
                                                                _noZ++;
                                                                incRowExcel++;

                                                            }

                                                            worksheet.Cells["A" + _endRowDetailZ + ":F" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + _startRowDetailZ + ":F" + _endRowDetailZ].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + _startRowDetailZ + ":F" + _endRowDetailZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                            //incRowExcel++;
                                                        }
                                                        //disini
                                                        incRowExcel++;

                                                        //-----------------------------------
                                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                        {
                                                            DbCon2.Open();
                                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                            {
                                                                cmd2.CommandText =

                                                                @"
                                                                    select @ValueDate Date,B.ID FundID,B.Name FundName,isnull(A.AUM,0) TotalAUM from CloseNAV A
                                                                    left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                                    where A.date = @ValueDate " + _paramFund;

                                                                cmd2.CommandTimeout = 0;
                                                                cmd2.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);

                                                                cmd2.ExecuteNonQuery();


                                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                                {
                                                                    //if (!dr2.HasRows)
                                                                    //{
                                                                    //    return false;
                                                                    //}
                                                                    //else
                                                                    //{


                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                    using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                                    {

                                                                        //ATUR DATA GROUPINGNYA DULU
                                                                        List<DailyComplianceReport> rList2 = new List<DailyComplianceReport>();
                                                                        while (dr2.Read())
                                                                        {
                                                                            DailyComplianceReport rSingle2 = new DailyComplianceReport();
                                                                            rSingle2.Date = Convert.ToString(dr2["Date"]);
                                                                            rSingle2.FundID = Convert.ToString(dr2["FundID"]);
                                                                            rSingle2.FundName = Convert.ToString(dr2["FundName"]);
                                                                            rSingle2.TotalAUM = Convert.ToDecimal(dr2["TotalAUM"]);
                                                                            rList2.Add(rSingle2);

                                                                        }


                                                                        var QueryByFundID2 =
                                                                            from r2 in rList2
                                                                            group r2 by new { r2.Date } into rGroup2
                                                                            select rGroup2;

                                                                        incRowExcel = incRowExcel + 2;
                                                                        int _endRowDetailZZ = 0;


                                                                        foreach (var rsHeader2 in QueryByFundID2)
                                                                        {
                                                                            //worksheet.Cells[incRowExcel, 1].Value = "Total " + rsHeader1.Key.FundID + " : ";
                                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                            incRowExcel = incRowExcel + 2;
                                                                            //Row B = 3
                                                                            int RowBZ = incRowExcel;
                                                                            int RowGZ = incRowExcel + 1;

                                                                            worksheet.Cells[incRowExcel, 1].Value = "AUM monitoring";
                                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                            worksheet.Cells["A" + RowBZ + ":C" + RowBZ].Merge = true;
                                                                            worksheet.Cells["A" + RowBZ + ":C" + RowBZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                            worksheet.Cells["A" + RowBZ + ":C" + RowBZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                            incRowExcel++;

                                                                            worksheet.Cells[incRowExcel, 1].Value = "ID";
                                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                            //worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Merge = true;
                                                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                            worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                            //worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                            worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                            worksheet.Cells[incRowExcel, 3].Value = "Total AUM";
                                                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                            //worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                            worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;






                                                                            incRowExcel++;

                                                                            // Row C = 4
                                                                            int RowCZ = incRowExcel;

                                                                            //incRowExcel++;
                                                                            //area header

                                                                            int _noZ = 1;
                                                                            int _startRowDetailZ = incRowExcel;
                                                                            foreach (var rsDetail2 in rsHeader2)
                                                                            {
                                                                                //Row D = 5
                                                                                int RowDZ = incRowExcel;
                                                                                int RowEZ = incRowExcel + 1;


                                                                                //ThickBox Border

                                                                                //if (rsDetail1.Type == "Subscription")
                                                                                //{
                                                                                worksheet.Cells["A" + RowBZ + ":C" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                                worksheet.Cells["A" + RowBZ + ":C" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                                worksheet.Cells["A" + RowBZ + ":C" + RowGZ].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                                worksheet.Cells["A" + RowBZ + ":C" + RowGZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                                //area detail
                                                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail2.FundID;
                                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.FundName;
                                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.TotalAUM;
                                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;




                                                                                _endRowDetailZZ = incRowExcel;
                                                                                _noZ++;
                                                                                incRowExcel++;

                                                                            }

                                                                            worksheet.Cells["A" + _endRowDetailZZ + ":C" + _endRowDetailZZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRowDetailZ + ":C" + _endRowDetailZZ].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRowDetailZ + ":C" + _endRowDetailZZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            incRowExcel++;
                                                                        }





                                                                        //string _rangeA1 = "A:M" + incRowExcel;
                                                                        //using (ExcelRange r = worksheet.Cells[_rangeA1]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                                        //{
                                                                        //    r.Style.Font.Size = 22;
                                                                        //}
                                                                        //}

                                                                    }
                                                                }
                                                            }
                                                        }



                                                        //string _rangeA1 = "A:M" + incRowExcel;
                                                        //using (ExcelRange r = worksheet.Cells[_rangeA1]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                        //{
                                                        //    r.Style.Font.Size = 22;
                                                        //}
                                                    }

                                                    //}
                                                }
                                            }
                                        }



                                        int _lastRow = incRowExcel;

                                        //incRowExcel = incRowExcel + 7;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Disclaimer   : ";
                                        //incRowExcel++;
                                        //worksheet.Row(incRowExcel).Height = 50;
                                        //worksheet.Cells[incRowExcel, 1].Value = Tools.DefaultDisclaimerReportFooterLeftText();
                                        //worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                        //worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        //worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                        incRowExcel++;
                                        worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        //worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 50;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        //worksheet.Column(10).Width = 20;
                                        //worksheet.Column(11).Width = 20;
                                        //worksheet.Column(12).Width = 20;
                                        //worksheet.Column(13).Width = 15;
                                        //worksheet.Column(14).Width = 15;
                                        //worksheet.Column(15).Width = 30;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &18&B Daily Total Transaction Report ";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region WIN LOSS Report
            else if (_FundAccountingRpt.ReportName.Equals("WIN LOSS Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";


                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";

                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                             @"


SELECT 
	A.ValueDate TransactionDate
	,A.SettlementDate
	,ISNULL(B.ID,'') FundName
	,ISNULL(A.TrxTypeID,'') BS
	,ISNULL(C.ID,'') StockCode
	,ISNULL(A.DonePrice,0) Price
	,ISNULL(A.Lot,0) Lot
	,ISNULL(A.LotInShare,100) SharePerLot
	,ISNULL(A.DoneAmount,0) ValueAmount
	,ISNULL(D.DescOne,'') BoardType
	,ISNULL(E.ID,'') Broker
	,ISNULL(F.ClosePriceValue,0) ClosePrice
    ,case when ISNULL(F.ClosePriceValue,0) = 0 then 0 else case when A.TrxType = 1 then (( ISNULL(F.ClosePriceValue,0) - ISNULL(A.DonePrice,0) ) / ISNULL(F.ClosePriceValue,0)  * 100)/100 
	else ((ISNULL(A.DonePrice,0) - ISNULL(F.ClosePriceValue,0) ) / ISNULL(F.ClosePriceValue,0)  * 100)/100  end end WinLossPercent
	,ISNULL(A.Reference,'') Descr
	,ISNULL(A.InvestmentNotes,'') Remarks


FROM dbo.Investment A
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
LEFT JOIN dbo.Instrument C ON A.InstrumentPK = C.InstrumentPK AND C.status IN (1,2)
LEFT JOIN dbo.MasterValue D ON A.BoardType = D.Code AND D.Status IN (1,2) AND D.ID = 'BoardType'
LEFT JOIN dbo.Counterpart E ON A.CounterpartPK = E.CounterpartPK AND E.status IN (1,2)
LEFT JOIN ClosePrice F ON A.ValueDate = F.Date AND F.status IN (1,2) AND A.InstrumentPK = F.InstrumentPK
WHERE A.StatusSettlement = 2
AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND A.InstrumentTypePK IN (1,4,16)
                                ";

                            cmd.CommandTimeout = 0;
                            //cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "WinLossReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "WinLossReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("WIN LOSS Report");



                                        int incRowExcel = 2;

                                        worksheet.Cells[incRowExcel, 1].Value = "WIN LOSS Report";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "Transaction Date";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "Settlement Date";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "Fund Name";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "B/S";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "Stock Code";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "Price";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "Lot";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "Share per lot";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "Value Amount";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "Board Type";
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "Broker";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Value = "Close Price";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 12].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Value = "Win/Loss Percent";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Value = "Descr";
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 15].Value = "Remark";
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Size = 10;
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 15].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;
                                        while (dr0.Read())
                                        {
                                            if (Convert.ToDecimal(dr0["WinLossPercent"]) >= 0)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Color.SetColor(Color.Green);
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Color.SetColor(Color.Red);
                                            }
                                            worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(dr0["TransactionDate"]).ToShortDateString();
                                            worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(dr0["SettlementDate"]).ToShortDateString();
                                            worksheet.Cells[incRowExcel, 2].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToString(dr0["FundName"]);
                                            worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToString(dr0["BS"]);
                                            worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToString(dr0["StockCode"]);
                                            worksheet.Cells[incRowExcel, 5].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 6].Value = Convert.ToDecimal(dr0["Price"]);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDecimal(dr0["Lot"]);
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 8].Value = Convert.ToDecimal(dr0["Shareperlot"]);
                                            worksheet.Cells[incRowExcel, 8].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 9].Value = Convert.ToDecimal(dr0["ValueAmount"]);
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 10].Value = Convert.ToString(dr0["BoardType"]);
                                            worksheet.Cells[incRowExcel, 10].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 11].Value = Convert.ToString(dr0["Broker"]);
                                            worksheet.Cells[incRowExcel, 11].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 12].Value = Convert.ToDecimal(dr0["ClosePrice"]);
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 12].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 13].Value = Convert.ToDecimal(dr0["WinLossPercent"]);
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#0.000%";
                                            worksheet.Cells[incRowExcel, 13].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 14].Value = Convert.ToString(dr0["Descr"]);
                                            worksheet.Cells[incRowExcel, 14].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 15].Value = Convert.ToString(dr0["Remarks"]);
                                            worksheet.Cells[incRowExcel, 15].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                            incRowExcel++;

                                        };


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 15];
                                        worksheet.Column(1).Width = 18;
                                        worksheet.Column(2).Width = 18;
                                        worksheet.Column(3).Width = 17;
                                        worksheet.Column(4).Width = 10;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 13;
                                        worksheet.Column(7).Width = 13;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 17;
                                        worksheet.Column(10).Width = 17;
                                        worksheet.Column(11).Width = 10;
                                        worksheet.Column(12).Width = 10;
                                        worksheet.Column(13).Width = 18;
                                        worksheet.Column(14).Width = 17;
                                        worksheet.Column(15).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = " &18&B WIN LOSS Report ";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Dealing Rekap Transaksi Per Broker
            else if (_FundAccountingRpt.ReportName.Equals("Report Dealing Rekap Transaksi Per Broker"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramCounterpart = "";

                            if (!_host.findString(_FundAccountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.CounterpartFrom))
                            {
                                _paramCounterpart = " And A.CounterpartPK in ( " + _FundAccountingRpt.CounterpartFrom + " ) ";

                            }
                            else
                            {
                                _paramCounterpart = "";
                            }

                            cmd.CommandText = @"  
                            
                            CREATE TABLE #MNCEquityReportByCounterpart
                            (
	                            ID NVARCHAR(200),
	                            DoneAmount NUMERIC(24,2),
	                            Type NVARCHAR(20),
	                            FundID NVARCHAR(200)
                            )

                            INSERT INTO #MNCEquityReportByCounterpart
                            SELECT B.ID,SUM(ISNULL(A.DoneAmount,0)) DoneAmount,C.DescOne 
                            ,D.ID 
                            FROM dbo.Investment A 
                            LEFT JOIN dbo.Counterpart B ON A.CounterpartPK = B.CounterpartPK AND B.status IN (1,2)
                            LEFT JOIN dbo.MasterValue C ON A.BoardType = C.Code AND C.ID = 'BoardType' AND C.status IN(1,2)
                            LEFT JOIN dbo.Fund D ON A.FundPK = D.FundPK AND D.Status IN (1,2)
                            WHERE A.StatusSettlement = 2 and ValueDate between @DateFrom and @DateTo " + _paramCounterpart + @"
                            AND A.InstrumentTypePK IN (1,4,16)
                            GROUP BY B.ID,C.DescOne,D.ID


                            DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
                            @query  AS NVARCHAR(MAX)
                            ,@colsForQueryBalance AS NVARCHAR(MAX)

                            select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(FundID) +',0) ' + QUOTENAME(FundID) 
                                        from (SELECT DISTINCT FundID FROM #MNCEquityReportByCounterpart) A
			                            order by A.FundID
                                FOR XML PATH(''), TYPE
                                ).value('.', 'NVARCHAR(MAX)') 
                            ,1,1,'')


	                            select @cols = STUFF((SELECT distinct ',' + QUOTENAME(FundID) 
                                        from #MNCEquityReportByCounterpart
				
                                FOR XML PATH(''), TYPE
                                ).value('.', 'NVARCHAR(MAX)') 
                            ,1,1,'')


                            --SELECT @cols
                            --SELECT @colsForQuery

                            set @query = 'SELECT ID,Type,' + @colsForQuery + '   from 
                                                (
                                                SELECT ID,DoneAmount,FundID,Type FROM #MNCEquityReportByCounterpart 
                                            ) x
                                            pivot 
                                            (
                                                SUM(DoneAmount)
                                                for FundID in (' + @cols + ')
                                            ) p 
				                            group by Type,ID, ' +@cols +'
				                            order by ID asc
			                                '

				                            exec (@query)

                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string pdfPath = Tools.ReportsPath + "ReportDealingRekapTransaksiPerBroker" + "_" + _userID + ".pdf";
                                    string filePath = Tools.ReportsPath + "ReportDealingRekapTransaksiPerBroker" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }



                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Dealing Rekap Transaksi Per Broker");
                                        int incRowExcel;
                                        int _endRow = 0;
                                        int _endRowZ = 0;
                                        int incColExcel = 1;
                                        incRowExcel = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _rowCtrp = 0;
                                        int _endRowDetail = 0;
                                        int _endColDetail = 0;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date From";
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To";
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                        // ini buat header
                                        incRowExcel++;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetName(inc1).ToString();
                                            incColExcel++;
                                        }
                                        incRowExcel++;
                                        while (dr0.Read())
                                        {
                                            incColExcel = 1;

                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                _rowCtrp = incColExcel;
                                                //_endRow = dr0.FieldCount + 2;
                                                //_endRowZ = dr0.FieldCount + 1;
                                                worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                incColExcel++;


                                            }

                                            //if (_rowCtrp > 2)
                                            //{
                                            //    worksheet.Cells[_endRow, _rowCtrp].Formula = "SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + incColExcel + ")";
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Font.Bold = true;
                                            //    worksheet.Cells[_endRow, _rowCtrp].Style.Numberformat.Format = "#,##0";
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //    //worksheet.Cells[16, _rowCtrp].Formula = "SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + "14) * 100 /" + _totalAmount;
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Font.Bold = true;
                                            //    worksheet.Cells[_endRow, _rowCtrp].Style.Numberformat.Format = "#,##0.00";
                                            //}



                                            worksheet.Cells[3, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[3, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[3, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            _endColDetail = incColExcel - 1;
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells[3, incColExcel].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(B" + incRowExcel + ":" + _host.GetAlphabet(_endColDetail) + incRowExcel + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Column(incColExcel).Width = 20;

                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[15, incColExcel].Value = _totalAmount;
                                            worksheet.Cells[15, incColExcel].Style.Numberformat.Format = "#,##0";
                                            incRowExcel++;
                                        }


                                        incRowExcel = incRowExcel + 2;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells.AutoFitColumns(18);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Report Dealing Rekap Transaksi Per Broker";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }
                                }
                            }

                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion


            else
            {
                return false;
            }
        }

        public Boolean GenerateReportFinance(string _userID, FinanceRpt _financeRpt)
        {
            //MNC

            #region Bank Reconcile
            if (_financeRpt.ReportName.Equals("Bank Reconcile"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramBankFromDebitCashRef = "";
                            string _paramBankFromCreditCashRef = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromDebitCashRef = "And C.DebitCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromDebitCashRef = "";
                            }

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromCreditCashRef = "And C.CreditCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromCreditCashRef = "";
                            }

                            if (_financeRpt.Status == 1)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";

                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";

                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _status = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";

                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _status = " and C.Status = 1  ";

                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _status = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status <> 3  ";

                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _status = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status <> 3  ";

                            }


                            cmd.CommandText =
                            @" DECLARE @Description nvarchar(Max)    
                            Declare @CurRef nvarchar(max)    
                            Declare @CurDescription nvarchar(max)    
                            set @Description = ''    

                            CREATE TABLE #TempDescription ( tmDescription nvarChar( max ), reference nvarchar(100) )    
                            CREATE TABLE #TempFinalDescription ( tmDescription nvarChar( max ), reference nvarchar(100) )    
                            Insert into #TempDescription    
                            Select distinct Description, reference  From Cashier C where    
                            ValueDate Between @DateFrom and @DateTo    
                            " + _status + @"
                            group By Reference,Description    
                            Declare A Cursor For    
                            Select distinct reference From Cashier where    
                            ValueDate Between @DateFrom and @DateTo    
                            Open A    
                            Fetch Next From A    
                            into @CurRef    
                            while @@Fetch_Status = 0    
                            BEGIN    
                            set @Description = ''    
                            select @Description =  @description  + ' || ' +   tmDescription    
                            from #TempDescription Where Reference = @CurRef     
                            Insert into #TempFinalDescription    
                            select @Description A,@CurRef    
                            FETCH NEXT FROM A INTO @CurRef    
                            END    
                            Close A    
                            Deallocate A    
                            Select A.ValueDate,A.Reference,A.NoReference,A.CashierID,case when A.Reference = '' or A.Reference is null then 0 else cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) end RefNo,A.AccountID,A.AccountName, B.tmDescription Description,    
                            Case When sum(A.BaseDebit) > sum(A.BaseCredit) then 'C' else 'D' end DebitCredit,    
                            case when sum(A.BaseDebit) < sum(A.BaseCredit) then sum(A.BaseCredit) - sum(A.BaseDebit) else 0 end BaseDebit,    
                            case when sum(A.BaseDebit) > sum(A.BaseCredit) then sum(A.BaseDebit) - sum(A.BaseCredit) else 0 end BaseCredit,    
                            [dbo].[FGetStartAccountBalance](@DateFrom,C.AccountPK) StartBalance,isnull(ConsigneeID,'') ConsigneeID    
                            From (    
                            Select        
                            reference,NoReference,C.CashierID , valuedate,A.ID AccountID, A.Name AccountName, C.Description,         
                            Case When DebitCredit = 'D' then BaseDebit else 0 End BaseDebit,    
                            Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,    
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,    
                            [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance , H.ID ConsigneeID      
                            from Cashier C           
                            left join Office E on C.OfficePK = E.OfficePK and E.status in (1,2)           
                            left join Department F on C.DepartmentPK = F.DepartmentPK and F.status in (1,2)        
                            left join Agent G on C.AgentPK = G.AgentPK and G.status in (1,2)          
                            left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status in (1,2)         
                            left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status in (1,2)     
                            left join Account A on C.Debitaccountpk =A.Accountpk and A.status in (1,2)     
                            Where C.DebitAccountPK IN  (SELECT AccountPK FROM dbo.CashRef WHERE status in (1,2)) and C.ValueDate between @DateFrom and @DateTo           
                            AND C.creditAccountPK <> C.DebitAccountPK    
                            " + _status + _paramBankFromDebitCashRef + @"
                            UNION ALL           
                            Select          
                            reference ,NoReference,C.CashierID , valuedate,A.ID AccountID, A.Name AccountName, c.Description,           
                            Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,    
                            Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,    
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,    
                            [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK)   StartBalance, H.ID ConsigneeID             
                            from Cashier C           
                            left join Office E on C.OfficePK = E.OfficePK and E.status = 2          
                            left join Department F on C.DepartmentPK = F.DepartmentPK and F.status in (1,2)       
                            left join Agent G on C.AgentPK = G.AgentPK and G.status in (1,2)           
                            left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status in (1,2)        
                            left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status in (1,2)      
                            left join Account A on C.Creditaccountpk =A.Accountpk and A.status in (1,2)    
                            Where C.CreditAccountPK IN  (SELECT AccountPK FROM dbo.CashRef WHERE status in (1,2)) and C.ValueDate between @DateFrom and @DateTo      
                            AND C.creditAccountPK <> C.DebitAccountPK    
                            " + _status + _paramBankFromCreditCashRef + @"
                            ) A left join #TempFinalDescription B on A.Reference COLLATE DATABASE_DEFAULT = B.Reference  COLLATE DATABASE_DEFAULT  
                            left join Account C on A.AccountID = C.ID and C.status in (1,2)    
                            Group By A.ValueDate,A.AccountID,A.AccountName,A.Reference,A.NoReference, A.CashierID ,   
                            B.tmDescription,[dbo].[FGetStartAccountBalance](@DateFrom,C.AccountPK),case when A.Reference = '' or A.Reference is null then 0 else cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) end,A.ConsigneeID  
                            Order By ValueDate,RefNo Asc   ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@BankFrom", _financeRpt.BankFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BankReconcile" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BankReconcile" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Bank Reconcile");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            //rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.NoReference = Convert.ToString(dr0["NoReference"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.CashierID = Convert.ToString(dr0["CashierID"]);
                                            //rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            //rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            //rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.AccountID, r.AccountName, r.StartBalance } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 3].Value = _financeRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 3].Value = _financeRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Value = "BEG BALANCE :";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "CASHIER ID";
                                            worksheet.Cells[incRowExcel, 4].Value = "CONSIGNEE ID";
                                            worksheet.Cells[incRowExcel, 5].Value = "REF";
                                            worksheet.Cells[incRowExcel, 6].Value = "NO REFERENCE";
                                            worksheet.Cells[incRowExcel, 7].Value = "DESC";
                                            //worksheet.Cells[incRowExcel, 5].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 6].Value = "INST";
                                            worksheet.Cells[incRowExcel, 8].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 9].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 10].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = "JOURNAL NO";
                                            //worksheet.Cells[incRowExcel, 3].Value = "DESCRIPTION";
                                            //worksheet.Cells[incRowExcel, 6].Value = "OFF";
                                            //worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 8].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 9].Value = "CONSG";
                                            //worksheet.Cells[incRowExcel, 10].Value = "Instrument";
                                            //worksheet.Cells[incRowExcel, 11].Value = "BALANCE";

                                            _range = "A" + incRowExcel + ":J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                //worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.ValueDate).ToShortDateString();
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.CashierID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ConsigneeID;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NoReference;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BaseCredit;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 10].Formula = "J" + _rowEndBalance + "+H" + incRowExcel + "-I" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.journalPK;
                                                //worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.DetailDescription;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.OfficeID;

                                                //worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentID;
                                                //worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 9].Value = rsDetail.ConsigneeID;

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                            //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 2].Value = ")";
                                            //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                            //worksheet.Cells[incRowExcel, 6].Value = ")";
                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:J";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 BANK RECONCILE";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "";
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion


            #region Voucher Pembayaran
            if (_financeRpt.ReportName.Equals("Voucher Pembayaran"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramReferenceFrom = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_financeRpt.ReferenceFrom.ToLower(), "'all'", ",") && !string.IsNullOrEmpty(_financeRpt.ReferenceFrom))
                            {
                                _paramReferenceFrom = " and C.Reference  in ( " + _financeRpt.ReferenceFrom + " ) ";
                            }
                            else
                            {
                                _paramReferenceFrom = "";
                            }

                            if (_financeRpt.Status == 1)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _status = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _status = " and C.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _status = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status <> 3  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _status = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status <> 3  ";
                            }

                            cmd.CommandText =
                                @" 
                             
                                Select C.EntryUsersID CheckedBy,C.EntryUsersID ApprovedBy, C.CashierID,C.PercentAmount,      
                                reference , valuedate,E.ID CostCenter,F.ID Divisi,A.ID AccountID, A.Name AccountName, C.Description,     
                                DebitCredit,(Case When DebitCredit ='D' then BaseDebit else BaseCredit end) Amount,F.ID DepartmentID,isnull(H.ID,'') ConsigneeID,isnull(J.BankAccountNo,'') BankAccountNo,
                                isnull(J.BankAccountName,'') BankAccountName,isnull(J.BankAccountBranchName,'') BankAccountBranchName ,(Case When DebitCredit ='D' then BaseDebit else BaseCredit * -1 end) Total          
                                from Cashier C       
                                left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2       
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2       
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2       
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2       
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2 
                                left join CashRef J on C.CreditCashRefPK = J.CashRefPK and J.status = 2       
                                Where C.Status in (1,2) and C.ValueDate between @ValuedateFrom and @valuedateTo and C.Type = 'CP' " + _status + _paramReferenceFrom + @"    
                                Order By DebitCredit Desc 
                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValuedateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValuedateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "VoucherPembayaran" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "VoucherPembayaran" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Voucher Pembayaran");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<VoucherPembayaran> rList = new List<VoucherPembayaran>();
                                        while (dr0.Read())
                                        {
                                            VoucherPembayaran rSingle = new VoucherPembayaran();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.CashierID = Convert.ToString(dr0["CashierID"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.CheckedBy = Convert.ToString(dr0["CheckedBy"]);
                                            rSingle.ApprovedBy = Convert.ToString(dr0["ApprovedBy"]);
                                            rSingle.CostCenter = Convert.ToString(dr0["CostCenter"]);
                                            rSingle.Divisi = Convert.ToString(dr0["Divisi"]);
                                            rSingle.NoRek = Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.PaitTo = Convert.ToString(dr0["CheckedBy"]);
                                            rSingle.Bank = Convert.ToString(dr0["BankAccountName"]);
                                            rSingle.Cab = Convert.ToString(dr0["BankAccountBranchName"]);
                                            rSingle.Persentase = Convert.ToDecimal(dr0["PercentAmount"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.Total = Convert.ToDecimal(dr0["Total"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r.ValueDate, r.RefNo ascending
                                                group r by new { r.Reference, r.CashierID } into rGroup
                                                select rGroup;


                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "No Voucher";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Entry Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Value = _financeRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Value date";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Value = _financeRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "No Cek";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CashierID;
                                            incRowExcel++;

                                            int _rowTotalAmount = incRowExcel;
                                            int _colTotalAmount = 2;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Amount                         :";
                                            worksheet.Cells[incRowExcel, 2].Value = 0;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "DATE : ";
                                            //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            //worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ValueDate;

                                            //worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(rsHeader.Key.ValueDate).ToShortDateString();
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "BANK";
                                            //worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BankID + "-" + rsHeader.Key.BankName;
                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Account";
                                            worksheet.Cells[incRowExcel, 2].Value = "Cost Center";
                                            worksheet.Cells[incRowExcel, 3].Value = "Divisi";
                                            worksheet.Cells[incRowExcel, 4].Value = "Keterangan";
                                            worksheet.Cells[incRowExcel, 5].Value = "D/K";
                                            worksheet.Cells[incRowExcel, 6].Value = "Persentase";
                                            worksheet.Cells[incRowExcel, 7].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Consignee";
                                            worksheet.Cells[incRowExcel, 9].Value = "Paid to";
                                            worksheet.Cells[incRowExcel, 10].Value = "No Rek";
                                            worksheet.Cells[incRowExcel, 11].Value = "Bank";
                                            worksheet.Cells[incRowExcel, 12].Value = "Cab";


                                            string _range = "A" + incRowExcel + ":L" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            //int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AccountID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.CostCenter;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Divisi;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Description;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DebitCredit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Persentase;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ConsigneeID;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.PaitTo;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NoRek;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Bank;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Cab;
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Total;
                                                _endRowDetail = incRowExcel;

                                                //_no++;
                                                incRowExcel++;





                                            }

                                            int RowF = incRowExcel - 1;

                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Font.Size = 12;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(189, 222, 239));
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;





                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[_rowTotalAmount, _colTotalAmount].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[_rowTotalAmount, _colTotalAmount].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[_rowTotalAmount, _colTotalAmount].Calculate();

                                            incRowExcel = incRowExcel + 1;
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Value = worksheet.Cells[incRowExcel - 1, 5].Value;
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 6].Value = worksheet.Cells[incRowExcel - 1, 6].Value;
                                            //worksheet.Cells[incRowExcel - 1, 5].Value = "";
                                            //worksheet.Cells[incRowExcel - 1, 6].Value = "";
                                            //incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 2].Value = "Prepared By";
                                            //worksheet.Cells[incRowExcel, 4].Value = "Checked By";
                                            //worksheet.Cells[incRowExcel, 6].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 2].Value = "(     " ;//+ rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 3].Value = "      )";
                                            //worksheet.Cells[incRowExcel, 4].Value = "(                                         )";
                                            //worksheet.Cells[incRowExcel, 6].Value = "(                                 ";
                                            //worksheet.Cells[incRowExcel, 7].Value = "      )";
                                            worksheet.Row(incRowExcel).PageBreak = true;
                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:L";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 7;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 10;
                                        worksheet.Column(12).Width = 10;
                                        worksheet.Column(13).Width = 1;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER VOUCHER PEMBAYARAN";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                    }
                                    return true;
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion //

            #region Voucher Penerimaan
            else if (_financeRpt.ReportName.Equals("Voucher Penerimaan"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            //string _type = "";
                            //string _paramBankFromDebitCashRef = "";
                            //string _paramBankFromCreditCashRef = "";
                            string _paramReferenceFrom = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            //if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            //{
                            //    _paramBankFromDebitCashRef = "And C.DebitCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramBankFromDebitCashRef = "";
                            //}

                            //if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            //{
                            //    _paramBankFromCreditCashRef = "And C.CreditCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramBankFromCreditCashRef = "";
                            //}


                            if (!_host.findString(_financeRpt.ReferenceFrom.ToLower(), "'all'", ",") && !string.IsNullOrEmpty(_financeRpt.ReferenceFrom))
                            {
                                _paramReferenceFrom = " and C.Reference  in ( " + _financeRpt.ReferenceFrom + " ) ";
                            }
                            else
                            {
                                _paramReferenceFrom = "";
                            }

                            if (_financeRpt.Status == 1)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _status = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _status = " and C.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _status = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status <> 3  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _status = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status <> 3  ";
                            }

                            //if (_financeRpt.CashierType == "IN")
                            //{
                            //    _type = "  C.Type in ( 'CR') ";
                            //}
                            //else if (_financeRpt.CashierType == "OUT")
                            //{
                            //    _type = "  C.Type in ( 'CP') ";
                            //}
                            //else if (_financeRpt.CashierType == "ALL")
                            //{
                            //    _type = "  C.Type in ( 'CR','CP') ";
                            //}


                            cmd.CommandText =
                                @" 
                                Select C.EntryUsersID CheckedBy,C.EntryUsersID ApprovedBy, C.CashierID,C.PercentAmount,      
                                reference , valuedate,E.ID CostCenter,F.ID Divisi,A.ID AccountID, A.Name AccountName, C.Description,     
                                DebitCredit,(Case When DebitCredit ='D' then BaseDebit else BaseCredit end) Amount,F.ID DepartmentID,isnull(H.ID,'') ConsigneeID,isnull(J.BankAccountNo,'') BankAccountNo,
                                isnull(J.BankAccountName,'') BankAccountName,isnull(J.BankAccountBranchName,'') BankAccountBranchName,(Case When DebitCredit ='D' then BaseDebit * -1 else BaseCredit end) Total                   
                                from Cashier C             
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2       
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2       
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2       
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2       
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2      
                                left join CashRef J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                Where C.Status in (1,2) and C.ValueDate between @ValuedateFrom and @valuedateTo and C.Type = 'CR'  " + _status + _paramReferenceFrom + @"    
                                Order By DebitCredit Desc 


                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValuedateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValuedateTo", _financeRpt.ValueDateTo);
                            //cmd.Parameters.AddWithValue("@BankFrom", _financeRpt.BankFrom);
                            //cmd.Parameters.AddWithValue("@Reference", _financeRpt.ReferenceFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "VoucherPenerimaan" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "VoucherPenerimaan" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Voucher Penerimaan");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<VoucherPenerimaan> rList = new List<VoucherPenerimaan>();
                                        while (dr0.Read())
                                        {
                                            VoucherPenerimaan rSingle = new VoucherPenerimaan();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.CashierID = Convert.ToString(dr0["CashierID"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.CheckedBy = Convert.ToString(dr0["CheckedBy"]);
                                            rSingle.ApprovedBy = Convert.ToString(dr0["ApprovedBy"]);
                                            rSingle.CostCenter = Convert.ToString(dr0["CostCenter"]);
                                            rSingle.Divisi = Convert.ToString(dr0["Divisi"]);
                                            rSingle.NoRek = Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.PaitTo = Convert.ToString(dr0["CheckedBy"]);
                                            rSingle.Bank = Convert.ToString(dr0["BankAccountName"]);
                                            rSingle.Cab = Convert.ToString(dr0["BankAccountBranchName"]);
                                            rSingle.Persentase = Convert.ToDecimal(dr0["PercentAmount"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.Total = Convert.ToDecimal(dr0["Total"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r.ValueDate, r.RefNo ascending
                                                group r by new { r.Reference, r.CashierID } into rGroup
                                                select rGroup;


                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "No Voucher";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Entry Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Value = _financeRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Value date";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Value = _financeRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "No Cek";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CashierID;
                                            incRowExcel++;

                                            int _rowTotalAmount = incRowExcel;
                                            int _colTotalAmount = 2;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 2].Value = 0;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "DATE : ";
                                            //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            //worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ValueDate;

                                            //worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(rsHeader.Key.ValueDate).ToShortDateString();
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "BANK";
                                            //worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BankID + "-" + rsHeader.Key.BankName;
                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Account";
                                            worksheet.Cells[incRowExcel, 2].Value = "Cost Center";
                                            worksheet.Cells[incRowExcel, 3].Value = "Divisi";
                                            worksheet.Cells[incRowExcel, 4].Value = "Keterangan";
                                            worksheet.Cells[incRowExcel, 5].Value = "D/K";
                                            worksheet.Cells[incRowExcel, 6].Value = "Persentase";
                                            worksheet.Cells[incRowExcel, 7].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Consignee";
                                            worksheet.Cells[incRowExcel, 9].Value = "Paid to";
                                            worksheet.Cells[incRowExcel, 10].Value = "No Rek";
                                            worksheet.Cells[incRowExcel, 11].Value = "Bank";
                                            worksheet.Cells[incRowExcel, 12].Value = "Cab";



                                            string _range = "A" + incRowExcel + ":L" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            //int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AccountID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.CostCenter;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Divisi;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Description;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DebitCredit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Persentase;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ConsigneeID;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.PaitTo;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NoRek;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Bank;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Cab;
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Total;
                                                _endRowDetail = incRowExcel;

                                                //_no++;
                                                incRowExcel++;





                                            }

                                            int RowF = incRowExcel - 1;

                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Font.Size = 12;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(189, 222, 239));
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[RowB, 1, RowB, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;





                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[_rowTotalAmount, _colTotalAmount].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[_rowTotalAmount, _colTotalAmount].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[_rowTotalAmount, _colTotalAmount].Calculate();

                                            incRowExcel = incRowExcel + 1;
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Value = worksheet.Cells[incRowExcel - 1, 5].Value;
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 6].Value = worksheet.Cells[incRowExcel - 1, 6].Value;
                                            //worksheet.Cells[incRowExcel - 1, 5].Value = "";
                                            //worksheet.Cells[incRowExcel - 1, 6].Value = "";
                                            //incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 2].Value = "Prepared By";
                                            //worksheet.Cells[incRowExcel, 4].Value = "Checked By";
                                            //worksheet.Cells[incRowExcel, 6].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 2].Value = "(     " ;//+ rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 3].Value = "      )";
                                            //worksheet.Cells[incRowExcel, 4].Value = "(                                         )";
                                            //worksheet.Cells[incRowExcel, 6].Value = "(                                 ";
                                            //worksheet.Cells[incRowExcel, 7].Value = "      )";
                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:L";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 7;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 10;
                                        worksheet.Column(12).Width = 10;
                                        worksheet.Column(13).Width = 1;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER VOUCHER PENERIMAAN";



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                    }
                                    return true;
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Accounting Journal Listing
            else if (_financeRpt.ReportName.Equals("Accounting Journal Listing"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusCashier = "";
                            string _statusJournal = "";
                            string _paramAccount = "";

                            if (!_host.findString(_financeRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.AccountFrom))
                            {
                                _paramAccount = "And A.AccountPK  in ( " + _financeRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_financeRpt.Status == 1)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 0 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _statusCashier = " and C.Status = 1  ";
                                _statusJournal = " and J.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _statusCashier = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _statusCashier = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 1 Or J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }


                            cmd.CommandText =


                                @" Select     
                                 A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, C.Description,       
                                 DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                 Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                 Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                 Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                 Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                 Case When A.Type > 2 then G.ID else '' end AgentID,  
                                 Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                 cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                 [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance     
                                 from Cashier C         
                                 left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2    
                                 left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                 left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                 left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                 left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                 left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2     
                                --// left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                 Where C.ValueDate between @DateFrom and @DateTo        
                                 and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _paramAccount +
                                _statusCashier +
                                @"UNION ALL         

                                Select        
                                A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, c.Description,        
                                DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                Case When A.Type > 2 then G.ID else '' end AgentID,  
                                Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance            
                                from Cashier C         
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2         
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2        
                                --//left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                Where C.ValueDate between @DateFrom and @DateTo  " +
                                _paramAccount +
                                //" and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _statusCashier +
                                @"UNION ALL   

                                select  A.Type AccountType,J.Reference,J.ValueDate,A.ID AccountID,A.Name AccountName, B.DetailDescription Description,    
                                B.DebitCredit,B.BaseDebit,B.BaseCredit,F.ID DepartmentID,I.ID InstrumentID,E.ID OfficeID,G.ID AgentID,H.ID ConsigneeID,     
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,     
                                [dbo].[FGetStartAccountBalance](@DateFrom,B.AccountPK) StartBalance      
                                from journal J     
                                left join journalDetail B on J.JournalPK = B.JournalPK     
                                left join Account A on B.AccountPK = A.AccountPK and A.status = 2     
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2     
                                left join Office E on B.OfficePK = E.OfficePK and E.status = 2     
                                left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2     
                                left join Agent G on B.AgentPK = G.AgentPK and G.status = 2     
                                left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2     
                                left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2     
                                Where J.ValueDate Between @DateFrom and @DateTo and year(J.ValueDate) = YEAR(@DateTo)   
                                and A.AccountPK not in (select AccountPk From CashRef where Status = 2)" +
                                _paramAccount +
                                _statusJournal +
                                @"and J.Type <> 3 order by ValueDate ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountingJournalListing" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccountingJournalListing" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Cashier & Journal Activity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountingJournalListing> rList = new List<AccountingJournalListing>();
                                        while (dr0.Read())
                                        {
                                            AccountingJournalListing rSingle = new AccountingJournalListing();
                                            rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.JournalNID = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.CurrentBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.AccountCurrencyID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.Type = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        //int _rowEndBalance = 0;


                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dddd" + ",dd-MMM-yy";
                                            worksheet.Cells[incRowExcel, 1].Value = _financeRpt.ValueDateFrom;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(_financeRpt.ValueDateFrom).ToShortDateString();
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yy";
                                            worksheet.Cells[incRowExcel, 3].Value = _financeRpt.ValueDateTo;

                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);
                                            incRowExcel++;
                                            int abc = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["B" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "No ";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Account";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "AccountCurrencyID";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "StartDate";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "StartBalance";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "Date";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "JournalNID";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "Type";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Value = "Desc";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Debet";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "Credit";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Value = "CurrentBalance";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = "Reference";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Value = "DepartmentNID";
                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 15].Value = " ";

                                            int bca = incRowExcel;

                                            worksheet.Cells["A" + abc + ":O" + bca].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + abc + ":O" + bca].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + abc + ":O" + bca].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + abc + ":O" + bca].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;


                                            int _no = 1;

                                            int _starta = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccountName;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccountCurrencyID;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.StartDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.StartBalance;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.JournalNID;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Type;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Description;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.CurrentBalance;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 15].Value = " ";



                                                _no++;
                                                incRowExcel++;
                                            }
                                            //string _range = "A" + incRowExcel + ":I" + incRowExcel;
                                            int _ends = incRowExcel;


                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;
                                            incRowExcel++;

                                            worksheet.Cells["A" + _starta + ":O" + _ends].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _starta + ":O" + _ends].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _starta + ":O" + _ends].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _starta + ":O" + _ends].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                        }

                                        //string _rangeDetail = "A:V";

                                        //using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        //{
                                        //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        //    r.Style.Font.Size = 11;
                                        //    r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        //}



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 15];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(11).AutoFit();
                                        worksheet.Column(12).AutoFit();
                                        worksheet.Column(13).AutoFit();
                                        worksheet.Column(14).AutoFit();
                                        worksheet.Column(15).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER & JOURNAL ACTIVITY";
                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            //ini dinamic saat ini posisi masih hardcode
            #region Annual Budget Report
            else if (_financeRpt.ReportName.Equals("Annual Budget Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusCashier = "";
                            string _statusJournal = "";
                            string _paramAccount = "";

                            if (!_host.findString(_financeRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.AccountFrom))
                            {
                                _paramAccount = "And A.AccountPK  in ( " + _financeRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_financeRpt.Status == 1)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 0 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _statusCashier = " and C.Status = 1  ";
                                _statusJournal = " and J.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _statusCashier = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _statusCashier = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 1 Or J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }


                            cmd.CommandText =


                            @" Select     
                                 A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, C.Description,       
                                 DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                 Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                 Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                 Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                 Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                 Case When A.Type > 2 then G.ID else '' end AgentID,  
                                 Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                 cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                 [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance     
                                 from Cashier C         
                                 left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2    
                                 left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                 left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                 left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                 left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                 left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2     
                                --// left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                 Where C.ValueDate between @DateFrom and @DateTo        
                                 and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _paramAccount +
                                _statusCashier +
                                @"UNION ALL         

                                Select        
                                A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, c.Description,        
                                DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                Case When A.Type > 2 then G.ID else '' end AgentID,  
                                Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance            
                                from Cashier C         
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2         
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2        
                                --//left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                Where C.ValueDate between @DateFrom and @DateTo  " +
                                _paramAccount +
                                //" and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _statusCashier +
                                @"UNION ALL   

                                select  A.Type AccountType,J.Reference,J.ValueDate,A.ID AccountID,A.Name AccountName, B.DetailDescription Description,    
                                B.DebitCredit,B.BaseDebit,B.BaseCredit,F.ID DepartmentID,I.ID InstrumentID,E.ID OfficeID,G.ID AgentID,H.ID ConsigneeID,     
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,     
                                [dbo].[FGetStartAccountBalance](@DateFrom,B.AccountPK) StartBalance      
                                from journal J     
                                left join journalDetail B on J.JournalPK = B.JournalPK     
                                left join Account A on B.AccountPK = A.AccountPK and A.status = 2     
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2     
                                left join Office E on B.OfficePK = E.OfficePK and E.status = 2     
                                left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2     
                                left join Agent G on B.AgentPK = G.AgentPK and G.status = 2     
                                left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2     
                                left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2     
                                Where J.ValueDate Between @DateFrom and @DateTo and year(J.ValueDate) = YEAR(@DateTo)   
                                and A.AccountPK not in (select AccountPk From CashRef where Status = 2)" +
                                _paramAccount +
                                _statusJournal +
                                @"and J.Type <> 3 order by ValueDate ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AnnualBudgetReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AnnualBudgetReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Annual Budget Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AnnualBudgetReport> rList = new List<AnnualBudgetReport>();
                                        while (dr0.Read())
                                        {
                                            AnnualBudgetReport rSingle = new AnnualBudgetReport();
                                            rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        //int _rowEndBalance = 0;
                                        //int _start = incRowExcel;
                                        worksheet.Cells[incRowExcel, 1].Value = "BRANCH: ";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "{ CODE } - { BRANCH NAME }";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 6].Value = "ANNUAL BUDGETING REPORT 2014";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        incRowExcel = incRowExcel + 2;
                                        int _StartRow = incRowExcel;

                                        worksheet.Cells[incRowExcel, 3].Value = "Jan-16";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 4].Value = "Feb-16";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 5].Value = "Mar-16";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 6].Value = "Apr-16";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 7].Value = "May-16";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 8].Value = "Jun-16";
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 9].Value = "Jul-16";
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 10].Value = "Aug-16";
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 11].Value = "Sep-16";
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 12].Value = "Oct-16";
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 13].Value = "Nov-16";
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 14].Value = "Dec-16";
                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 15].Value = "YTD DEC 2016";
                                        worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 16].Value = "TOTAL DEC 2016";
                                        worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "1";
                                        worksheet.Cells[incRowExcel, 2].Value = "2";
                                        worksheet.Cells[incRowExcel, 3].Value = "3";
                                        worksheet.Cells[incRowExcel, 4].Value = "4";
                                        worksheet.Cells[incRowExcel, 5].Value = "5";
                                        worksheet.Cells[incRowExcel, 6].Value = "6";
                                        worksheet.Cells[incRowExcel, 7].Value = "7";
                                        worksheet.Cells[incRowExcel, 8].Value = "8";
                                        worksheet.Cells[incRowExcel, 9].Value = "9";
                                        worksheet.Cells[incRowExcel, 10].Value = "10";
                                        worksheet.Cells[incRowExcel, 11].Value = "11";
                                        worksheet.Cells[incRowExcel, 12].Value = "12";
                                        worksheet.Cells[incRowExcel, 13].Value = "13";
                                        worksheet.Cells[incRowExcel, 14].Value = "14";
                                        worksheet.Cells[incRowExcel, 15].Value = "15";
                                        worksheet.Cells[incRowExcel, 16].Value = "16";
                                        //int _end = incRowExcel;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Font.Color.SetColor(Color.LightGray);


                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AccountName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 16].Formula = "SUM(C" + incRowExcel + ":O" + incRowExcel + ")";

                                                incRowExcel++;

                                            }


                                        }

                                        foreach (var rsHeader1 in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "OPERATING EXPENSES";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            foreach (var rsDetail1 in rsHeader1)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail1.AccountName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Total Operating expense";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Income (loss) from operation";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                        }

                                        foreach (var rsHeader2 in GroupByReference)
                                        {


                                            worksheet.Cells[incRowExcel, 1].Value = "OTHER INCOME (LOSS) ";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            foreach (var rsDetail2 in rsHeader2)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail2.AccountName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Total other income (loss)";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Income (loss) before tax";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                        }


                                        foreach (var rsHeader3 in GroupByReference)
                                        {




                                            foreach (var rsDetail3 in rsHeader3)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail3.AccountName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Net Income After Tax";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;

                                        }

                                        foreach (var rsHeader3 in GroupByReference)
                                        {




                                            foreach (var rsDetail3 in rsHeader3)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = "EBITDA";
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                int _EndRow = incRowExcel;

                                                worksheet.Cells["A" + _StartRow + ":P" + _EndRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _StartRow + ":P" + _EndRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _StartRow + ":P" + _EndRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _StartRow + ":P" + _EndRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                incRowExcel++;

                                            }

                                            incRowExcel++;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 35;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 25;
                                        worksheet.Column(15).Width = 25;
                                        worksheet.Column(16).Width = 25;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER & JOURNAL ACTIVITY";
                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            //ini dinamic saat ini posisi masih hardcode
            #region Budget Summary
            else if (_financeRpt.ReportName.Equals("Budget Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusCashier = "";
                            string _statusJournal = "";
                            string _paramAccount = "";

                            if (!_host.findString(_financeRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.AccountFrom))
                            {
                                _paramAccount = "And A.AccountPK  in ( " + _financeRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_financeRpt.Status == 1)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 0 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _statusCashier = " and C.Status = 1  ";
                                _statusJournal = " and J.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _statusCashier = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _statusCashier = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 1 Or J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }


                            cmd.CommandText =


                                @" Select     
                                 A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, C.Description,       
                                 DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                 Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                 Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                 Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                 Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                 Case When A.Type > 2 then G.ID else '' end AgentID,  
                                 Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                 cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                 [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance     
                                 from Cashier C         
                                 left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2    
                                 left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                 left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                 left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                 left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                 left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2     
                                --// left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                 Where C.ValueDate between @DateFrom and @DateTo        
                                 and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _paramAccount +
                                _statusCashier +
                                @"UNION ALL         

                                Select        
                                A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, c.Description,        
                                DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                Case When A.Type > 2 then G.ID else '' end AgentID,  
                                Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance            
                                from Cashier C         
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2         
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2        
                                --//left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                Where C.ValueDate between @DateFrom and @DateTo  " +
                                _paramAccount +
                                //" and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _statusCashier +
                                @"UNION ALL   

                                select  A.Type AccountType,J.Reference,J.ValueDate,A.ID AccountID,A.Name AccountName, B.DetailDescription Description,    
                                B.DebitCredit,B.BaseDebit,B.BaseCredit,F.ID DepartmentID,I.ID InstrumentID,E.ID OfficeID,G.ID AgentID,H.ID ConsigneeID,     
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,     
                                [dbo].[FGetStartAccountBalance](@DateFrom,B.AccountPK) StartBalance      
                                from journal J     
                                left join journalDetail B on J.JournalPK = B.JournalPK     
                                left join Account A on B.AccountPK = A.AccountPK and A.status = 2     
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2     
                                left join Office E on B.OfficePK = E.OfficePK and E.status = 2     
                                left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2     
                                left join Agent G on B.AgentPK = G.AgentPK and G.status = 2     
                                left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2     
                                left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2     
                                Where J.ValueDate Between @DateFrom and @DateTo and year(J.ValueDate) = YEAR(@DateTo)   
                                and A.AccountPK not in (select AccountPk From CashRef where Status = 2)" +
                                _paramAccount +
                                _statusJournal +
                                @"and J.Type <> 3 order by ValueDate ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BudgetSummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BudgetSummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Budget Summary");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BudgetSummary> rList = new List<BudgetSummary>();
                                        while (dr0.Read())
                                        {
                                            BudgetSummary rSingle = new BudgetSummary();
                                            rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        //int _rowEndBalance = 0;



                                        worksheet.Cells[incRowExcel, 1].Value = "Summary Budget";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        int _start = incRowExcel;
                                        int _end = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Color.SetColor(Color.White);
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + _start + ":A" + _end].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;


                                        worksheet.Cells["A" + _start + ":H" + _end].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start + ":H" + _end].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start + ":H" + _end].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start + ":H" + _end].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Account";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + _start + ":B" + _end].Merge = true;
                                        worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 3].Value = "Budget 2017";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + _start + ":C" + _end].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 4].Value = "Budget 2016";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + _start + ":D" + _end].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 5].Value = "Estimated 2016";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + _start + ":E" + _end].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 6].Value = "Actual 2015";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + _start + ":F" + _end].Merge = true;
                                        worksheet.Cells[incRowExcel, 6].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 7].Value = "Increment 16-17";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + _start + ":G" + _end].Merge = true;
                                        worksheet.Cells[incRowExcel, 7].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 8].Value = "Increment 15-16";
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + _start + ":H" + _end].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Style.WrapText = true;

                                        incRowExcel = incRowExcel + 2;

                                        int _starts = incRowExcel;
                                        worksheet.Cells[incRowExcel, 1].Value = "1";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "AUM (RD+KPD)";
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "2";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Pendapatan (Fee MI)";
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "3";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Beban Operasional";
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "4";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Laba (Rugi) Operasional ";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "5";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Pendapatan (Beban) Lain-lain ";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "6";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "EBITDA";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "7";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Laba Bersih ";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "8";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Total Aset ";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "Total Ekuitas ";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 2].Value = "Gross Profit Margin";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "Net Profit Margin ";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "EBITDA Margin ";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "ROA ";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "ROE ";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "*Fee lainnya termasuk Subs Fee, Fee Lain, dan NPW";
                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                        int _ends = incRowExcel;

                                        incRowExcel = incRowExcel + 3;
                                        worksheet.Cells["A" + _starts + ":H" + _ends].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _starts + ":H" + _ends].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _starts + ":H" + _ends].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _starts + ":H" + _ends].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        worksheet.Cells[incRowExcel, 1].Value = "Pendapatan";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                        incRowExcel++;

                                        int _start1 = incRowExcel;
                                        int _end1 = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Color.SetColor(Color.White);
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + _start1 + ":A" + _end1].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;


                                        worksheet.Cells["A" + _start1 + ":H" + _end1].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start1 + ":H" + _end1].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start1 + ":H" + _end1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start1 + ":H" + _end1].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Account";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + _start1 + ":B" + _end1].Merge = true;
                                        worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 3].Value = "Budget 2017";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + _start1 + ":C" + _end1].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 4].Value = "Budget 2016";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + _start1 + ":D" + _end1].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 5].Value = "Estimated 2016";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + _start1 + ":E" + _end1].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 6].Value = "Actual 2015";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + _start1 + ":F" + _end1].Merge = true;
                                        worksheet.Cells[incRowExcel, 6].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 7].Value = "Increment 16-17";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + _start1 + ":G" + _end1].Merge = true;
                                        worksheet.Cells[incRowExcel, 7].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 8].Value = "Increment 15-16";
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + _start1 + ":H" + _end1].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Style.WrapText = true;

                                        incRowExcel = incRowExcel + 2;
                                        int _startss = incRowExcel;
                                        worksheet.Cells[incRowExcel, 1].Value = "1";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "AUM Reksa Dana";
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "   - Reksa Dana Konvensional";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "   - Reksa Dana Terproteksi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "2";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "AUM KPD  (MNC Link)";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "3";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Pendapatan MI Fee Reksa Dana ";
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "   - Reksa Dana Konvensional";

                                        worksheet.Cells[incRowExcel, 2].Value = "- Reksa Dana Terproteksi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "4";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Pendapatan KPD  (MNC Link)";
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "5";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Fee Lainnya";
                                        int _endss = incRowExcel;
                                        incRowExcel = incRowExcel + 3;
                                        worksheet.Cells["A" + _startss + ":H" + _endss].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startss + ":H" + _endss].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startss + ":H" + _endss].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startss + ":H" + _endss].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Beban Operasional";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                        incRowExcel++;

                                        int _start2 = incRowExcel;
                                        int _end2 = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Color.SetColor(Color.White);

                                        worksheet.Cells["A" + _start2 + ":H" + _end2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start2 + ":H" + _end2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start2 + ":H" + _end2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _start2 + ":H" + _end2].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + _start2 + ":A" + _end2].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 2].Value = "Account";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + _start2 + ":B" + _end2].Merge = true;
                                        worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 3].Value = "Budget 2017";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + _start2 + ":C" + _end2].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 4].Value = "Budget 2016";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + _start2 + ":D" + _end2].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 5].Value = "Estimated 2016";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + _start2 + ":E" + _end2].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 6].Value = "Actual 2015";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + _start2 + ":F" + _end2].Merge = true;
                                        worksheet.Cells[incRowExcel, 6].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 7].Value = "Increment 16-17";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + _start2 + ":G" + _end2].Merge = true;
                                        worksheet.Cells[incRowExcel, 7].Style.WrapText = true;

                                        worksheet.Cells[incRowExcel, 8].Value = "Increment 15-16";
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + _start2 + ":H" + _end2].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Style.WrapText = true;

                                        incRowExcel = incRowExcel + 2;

                                        int _startas = incRowExcel;
                                        worksheet.Cells[incRowExcel, 1].Value = "1";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Salary and Allowances";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "2";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Komisi Sales";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "3";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Pelatihan dan Training";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "4";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Management Fee";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "5";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Advertisement and Promotion";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "6";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Rent";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "7";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Office Expenses";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "8";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Cetakan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "9";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Outsourcing Expense";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "10";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Depreciation of Fixed Assets";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "11";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Entertainment and donation";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "12";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Communication and Information";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "13";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Honorarium Experts";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "14";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Travel and Transporation";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "15";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Amortization";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "16";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Sharing Fee";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "17";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Taxes Expense";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "18";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Maintenance";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "19";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Iuran OJK";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "20";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Others";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "21";
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "IT Project Cost";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Value = "Total Beban Operasional ";
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                        int _endows = incRowExcel;

                                        worksheet.Cells["A" + _startas + ":H" + _endows].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startas + ":H" + _endows].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startas + ":H" + _endows].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startas + ":H" + _endows].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        incRowExcel = incRowExcel + 3;
                                        //worksheet.Cells["A" + _start + ":D" + _end].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + _start + ":D" + _end].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + _start + ":D" + _end].Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                        //worksheet.Cells["A" + _start + ":D" + _end].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + _start + ":D" + _end].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + _start + ":D" + _end].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + _start + ":D" + _end].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        //worksheet.Cells[incRowExcel, 5].Value = "Year : 2016 ";
                                        //worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;

                                        //worksheet.Cells[incRowExcel, 9].Value = "Year : 2017 ";
                                        //worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells["I" + incRowExcel + ":S" + incRowExcel].Merge = true;
                                        //incRowExcel++;


                                        int abc = incRowExcel;



                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            //incRowExcel++;


                                            //_rowEndBalance = incRowExcel;


                                            int _no = 1;

                                            int _starta = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                            }
                                            //string _range = "A" + incRowExcel + ":I" + incRowExcel;

                                        }

                                        //string _rangeDetail = "A:V";

                                        //using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        //{
                                        //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        //    r.Style.Font.Size = 11;
                                        //    r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        //}



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER & JOURNAL ACTIVITY";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion


            #region Ledger Budget
            else if (_financeRpt.ReportName.Equals("Ledger Budget"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusCashier = "";
                            string _statusJournal = "";
                            string _paramAccount = "";

                            if (!_host.findString(_financeRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.AccountFrom))
                            {
                                _paramAccount = "And A.AccountPK  in ( " + _financeRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_financeRpt.Status == 1)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 0 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _statusCashier = " and C.Status = 1  ";
                                _statusJournal = " and J.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _statusCashier = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _statusCashier = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 1 Or J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }


                            cmd.CommandText =


                             @" Select     
                                 A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, C.Description,       
                                 DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                 Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                 Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                 Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                 Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                 Case When A.Type > 2 then G.ID else '' end AgentID,  
                                 Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                 cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                 [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance     
                                 from Cashier C         
                                 left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2    
                                 left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                 left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                 left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                 left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                 left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2     
                                --// left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                 Where C.ValueDate between @DateFrom and @DateTo        
                                 and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _paramAccount +
                                _statusCashier +
                                @"UNION ALL         

                                Select        
                                A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, c.Description,        
                                DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                Case When A.Type > 2 then G.ID else '' end AgentID,  
                                Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance            
                                from Cashier C         
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2         
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2        
                                --//left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                Where C.ValueDate between @DateFrom and @DateTo  " +
                                _paramAccount +
                                //" and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _statusCashier +
                                @"UNION ALL   

                                select  A.Type AccountType,J.Reference,J.ValueDate,A.ID AccountID,A.Name AccountName, B.DetailDescription Description,    
                                B.DebitCredit,B.BaseDebit,B.BaseCredit,F.ID DepartmentID,I.ID InstrumentID,E.ID OfficeID,G.ID AgentID,H.ID ConsigneeID,     
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,     
                                [dbo].[FGetStartAccountBalance](@DateFrom,B.AccountPK) StartBalance      
                                from journal J     
                                left join journalDetail B on J.JournalPK = B.JournalPK     
                                left join Account A on B.AccountPK = A.AccountPK and A.status = 2     
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2     
                                left join Office E on B.OfficePK = E.OfficePK and E.status = 2     
                                left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2     
                                left join Agent G on B.AgentPK = G.AgentPK and G.status = 2     
                                left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2     
                                left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2     
                                Where J.ValueDate Between @DateFrom and @DateTo and year(J.ValueDate) = YEAR(@DateTo)   
                                and A.AccountPK not in (select AccountPk From CashRef where Status = 2)" +
                                _paramAccount +
                                _statusJournal +
                                @"and J.Type <> 3 order by ValueDate ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LedgerBudget" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LedgerBudget" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Ledger Budget");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LedgerBudget> rList = new List<LedgerBudget>();
                                        while (dr0.Read())
                                        {
                                            LedgerBudget rSingle = new LedgerBudget();
                                            rSingle.COANo = Convert.ToString(dr0["Reference"]);
                                            rSingle.COAName = Convert.ToString(dr0["Description"]);
                                            rSingle.Dept = Convert.ToString(dr0["AccountID"]);
                                            rSingle.CostCenter = Convert.ToString(dr0["AccountName"]);
                                            rSingle.Item = Convert.ToString(dr0["AccountName"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.COANo ascending
                                            group r by new { r.COANo, r.COAName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        //int _rowEndBalance = 0;
                                        //int _start = incRowExcel;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 17].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Value = "LEDGER BUDGET";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Fill.BackgroundColor.SetColor(Color.Yellow);

                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 19].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 34].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 19].Value = "LEDGER ACTUAL";
                                            worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 19, incRowExcel, 34].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            worksheet.Cells[incRowExcel, 19, incRowExcel, 34].Style.Fill.BackgroundColor.SetColor(Color.Yellow);

                                            incRowExcel = incRowExcel + 3;



                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Value = "Ledger Budget = Nilai yang tertera diambil dari BudgetEntry";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;

                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 19].Value = "Ledger Actual = Nilai yang tertera diambil dari Ledger Accounting";
                                            worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 19].Style.Font.Size = 20;

                                            //int _end = incRowExcel;


                                            incRowExcel = incRowExcel + 2;

                                            int _start = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1].Value = "COA No";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.COANo;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "COA Name";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.COAName;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                            int _end = incRowExcel;

                                            worksheet.Cells["A" + _start + ":B" + _end].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _start + ":B" + _end].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _start + ":B" + _end].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _start + ":B" + _end].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            incRowExcel = incRowExcel + 2;


                                            int _StartRow = incRowExcel;

                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 17].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                            worksheet.Cells[incRowExcel, 19, incRowExcel, 34].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 19, incRowExcel, 34].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                            worksheet.Cells[incRowExcel, 2].Value = "Dept";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 3].Value = "Cost Center";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 4].Value = "Item";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "JAN";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 6].Value = "FEB";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 7].Value = "MAR";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "APR";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 9].Value = "MAY";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "JUN";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Value = "JUL";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 12].Value = "AUG";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "SEP";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 14].Value = "OCT";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 15].Value = "NOV";
                                            worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 16].Value = "DEC";
                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 17].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 19].Value = "Dept";
                                            worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 20].Value = "Cost Center";
                                            worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 20].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 21].Value = "Item";
                                            worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 21].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 22].Value = "JAN";
                                            worksheet.Cells[incRowExcel, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 22].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 23].Value = "FEB";
                                            worksheet.Cells[incRowExcel, 23].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 23].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 24].Value = "MAR";
                                            worksheet.Cells[incRowExcel, 24].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 24].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 25].Value = "APR";
                                            worksheet.Cells[incRowExcel, 25].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 25].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 26].Value = "MAY";
                                            worksheet.Cells[incRowExcel, 26].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 26].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 27].Value = "JUN";
                                            worksheet.Cells[incRowExcel, 27].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 27].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 28].Value = "JUL";
                                            worksheet.Cells[incRowExcel, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 28].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 29].Value = "AUG";
                                            worksheet.Cells[incRowExcel, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 29].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 30].Value = "SEP";
                                            worksheet.Cells[incRowExcel, 30].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 30].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 31].Value = "OCT";
                                            worksheet.Cells[incRowExcel, 31].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 31].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 32].Value = "NOV";
                                            worksheet.Cells[incRowExcel, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 32].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 33].Value = "DEC";
                                            worksheet.Cells[incRowExcel, 33].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 33].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 34].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 34].Style.Font.Bold = true;

                                            incRowExcel++;

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Dept;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.CostCenter;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Item;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.Dept;
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.CostCenter;
                                                worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.Item;
                                                worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                int _EndRow = incRowExcel;
                                                worksheet.Cells["B" + _StartRow + ":Q" + _EndRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["B" + _StartRow + ":Q" + _EndRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["B" + _StartRow + ":Q" + _EndRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["B" + _StartRow + ":Q" + _EndRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells["S" + _StartRow + ":AH" + _EndRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["S" + _StartRow + ":AH" + _EndRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["S" + _StartRow + ":AH" + _EndRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["S" + _StartRow + ":AH" + _EndRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                incRowExcel++;
                                            }

                                            worksheet.Cells[incRowExcel, 4].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells["B" + incRowExcel + ":Q" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            worksheet.Cells[incRowExcel, 21].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 21].Style.Font.Bold = true;

                                            worksheet.Cells["S" + incRowExcel + ":AH" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;
                                            incRowExcel++;

                                        }




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 34];

                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 10;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 10;
                                        worksheet.Column(8).Width = 10;
                                        worksheet.Column(9).Width = 10;
                                        worksheet.Column(10).Width = 10;
                                        worksheet.Column(11).Width = 10;
                                        worksheet.Column(12).Width = 10;
                                        worksheet.Column(13).Width = 10;
                                        worksheet.Column(14).Width = 10;
                                        worksheet.Column(15).Width = 10;
                                        worksheet.Column(16).Width = 10;
                                        worksheet.Column(17).Width = 10;

                                        worksheet.Column(18).Width = 10;
                                        worksheet.Column(19).Width = 30;
                                        worksheet.Column(20).Width = 10;
                                        worksheet.Column(21).Width = 10;
                                        worksheet.Column(22).Width = 10;
                                        worksheet.Column(23).Width = 10;
                                        worksheet.Column(24).Width = 10;
                                        worksheet.Column(25).Width = 10;
                                        worksheet.Column(26).Width = 10;
                                        worksheet.Column(27).Width = 10;
                                        worksheet.Column(28).Width = 10;
                                        worksheet.Column(29).Width = 10;
                                        worksheet.Column(30).Width = 10;
                                        worksheet.Column(31).Width = 10;
                                        worksheet.Column(32).Width = 10;
                                        worksheet.Column(33).Width = 10;
                                        worksheet.Column(34).Width = 10;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER & JOURNAL ACTIVITY";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            //ini dinamic saat ini posisi masih hardcode
            #region Profit And Loss
            else if (_financeRpt.ReportName.Equals("Profit And Loss"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusCashier = "";
                            string _statusJournal = "";
                            string _paramAccount = "";

                            if (!_host.findString(_financeRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.AccountFrom))
                            {
                                _paramAccount = "And A.AccountPK  in ( " + _financeRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_financeRpt.Status == 1)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 0 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _statusCashier = " and C.Status = 1  ";
                                _statusJournal = " and J.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _statusCashier = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _statusCashier = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 1 Or J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }


                            cmd.CommandText =


                            @" Select     
                                 A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, C.Description,       
                                 DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                 Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                 Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                 Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                 Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                 Case When A.Type > 2 then G.ID else '' end AgentID,  
                                 Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                 cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                 [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance     
                                 from Cashier C         
                                 left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2    
                                 left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                 left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                 left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                 left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                 left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2     
                                --// left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                 Where C.ValueDate between @DateFrom and @DateTo        
                                 and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _paramAccount +
                                _statusCashier +
                                @"UNION ALL         

                                Select        
                                A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, c.Description,        
                                DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                Case When A.Type > 2 then G.ID else '' end AgentID,  
                                Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance            
                                from Cashier C         
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2         
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2        
                                --//left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                Where C.ValueDate between @DateFrom and @DateTo  " +
                                _paramAccount +
                                //" and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _statusCashier +
                                @"UNION ALL   

                                select  A.Type AccountType,J.Reference,J.ValueDate,A.ID AccountID,A.Name AccountName, B.DetailDescription Description,    
                                B.DebitCredit,B.BaseDebit,B.BaseCredit,F.ID DepartmentID,I.ID InstrumentID,E.ID OfficeID,G.ID AgentID,H.ID ConsigneeID,     
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,     
                                [dbo].[FGetStartAccountBalance](@DateFrom,B.AccountPK) StartBalance      
                                from journal J     
                                left join journalDetail B on J.JournalPK = B.JournalPK     
                                left join Account A on B.AccountPK = A.AccountPK and A.status = 2     
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2     
                                left join Office E on B.OfficePK = E.OfficePK and E.status = 2     
                                left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2     
                                left join Agent G on B.AgentPK = G.AgentPK and G.status = 2     
                                left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2     
                                left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2     
                                Where J.ValueDate Between @DateFrom and @DateTo and year(J.ValueDate) = YEAR(@DateTo)   
                                and A.AccountPK not in (select AccountPk From CashRef where Status = 2)" +
                                _paramAccount +
                                _statusJournal +
                                @"and J.Type <> 3 order by ValueDate ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ProfitAndLoss" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ProfitAndLoss" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Profit And Loss");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ProfitLoss> rList = new List<ProfitLoss>();
                                        while (dr0.Read())
                                        {
                                            ProfitLoss rSingle = new ProfitLoss();
                                            rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        //int _rowEndBalance = 0;
                                        //int _start = incRowExcel;
                                        worksheet.Cells[incRowExcel, 1].Value = "Profit & Loss";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Periode : " + Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        incRowExcel++;
                                        int _StartRow = incRowExcel;
                                        worksheet.Cells[incRowExcel, 2].Value = "Des-16";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 3].Value = "Jan";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 4].Value = "Feb";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 5].Value = "Mar";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 6].Value = "Q1 " + " - " + Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 7].Value = "Apr";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 8].Value = "May";
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 9].Value = "Jun";
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 10].Value = "Q2 " + " - " + Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 11].Value = "Jul";
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 12].Value = "Aug";
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 13].Value = "Sep";
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 14].Value = "Q3 " + " - " + Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 15].Value = "Oct";
                                        worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 16].Value = "Nov";
                                        worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 17].Value = "Dec";
                                        worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 18].Value = "Q4 " + " - " + Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                        worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 19].Value = "YTD  " + Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                        worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                        //int _end = incRowExcel;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.MediumBlue);
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Font.Color.SetColor(Color.White);


                                        worksheet.Cells[incRowExcel, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 2].Style.Fill.BackgroundColor.SetColor(Color.Green);

                                        worksheet.Cells[incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Color.SetColor(Color.Black);

                                        worksheet.Cells[incRowExcel, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 10].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Color.SetColor(Color.Black);

                                        worksheet.Cells[incRowExcel, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 14].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Color.SetColor(Color.Black);

                                        worksheet.Cells[incRowExcel, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 18].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells[incRowExcel, 18].Style.Font.Color.SetColor(Color.Black);

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "OPERATING REVENUE";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AccountName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Total Revenue";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);

                                            incRowExcel++;


                                        }

                                        foreach (var rsHeader1 in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "OPERATING EXPENSES";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            foreach (var rsDetail1 in rsHeader1)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail1.AccountName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail1.BaseDebit;
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Total Operating expense";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Income (loss) from operation";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                        }

                                        foreach (var rsHeader2 in GroupByReference)
                                        {


                                            worksheet.Cells[incRowExcel, 1].Value = "OTHER INCOME (LOSS) ";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            foreach (var rsDetail2 in rsHeader2)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail2.AccountName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail2.BaseDebit;
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Total other income (loss)";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Income (loss) before tax";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                        }


                                        foreach (var rsHeader3 in GroupByReference)
                                        {




                                            foreach (var rsDetail3 in rsHeader3)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail3.AccountName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Net Income After Tax";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;

                                        }

                                        foreach (var rsHeader3 in GroupByReference)
                                        {




                                            foreach (var rsDetail3 in rsHeader3)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = "EBITDA";
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail3.BaseDebit;
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                int _EndRow = incRowExcel;

                                                worksheet.Cells["A" + _StartRow + ":S" + _EndRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _StartRow + ":S" + _EndRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _StartRow + ":S" + _EndRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _StartRow + ":S" + _EndRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                incRowExcel++;

                                            }

                                            incRowExcel++;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 15;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 15;
                                        worksheet.Column(15).Width = 15;
                                        worksheet.Column(16).Width = 15;
                                        worksheet.Column(17).Width = 15;
                                        worksheet.Column(18).Width = 15;
                                        worksheet.Column(19).Width = 15;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER & JOURNAL ACTIVITY";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Trial Balance By COA by Cost Center
            else if (_financeRpt.ReportName.Equals("Trial Balance By COA by Cost Center"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusCashier = "";
                            string _statusJournal = "";
                            string _paramAccount = "";

                            if (!_host.findString(_financeRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.AccountFrom))
                            {
                                _paramAccount = "And A.AccountPK  in ( " + _financeRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_financeRpt.Status == 1)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 0 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _statusCashier = " and C.Status = 1  ";
                                _statusJournal = " and J.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _statusCashier = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _statusCashier = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 1 Or J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }


                            cmd.CommandText =


                                 @" Select     
                                 A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, C.Description,       
                                 DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                 Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                 Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                 Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                 Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                 Case When A.Type > 2 then G.ID else '' end AgentID,  
                                 Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                 cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                 [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance     
                                 from Cashier C         
                                 left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2    
                                 left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                 left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                 left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                 left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                 left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2     
                                --// left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                 Where C.ValueDate between @DateFrom and @DateTo        
                                 and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _paramAccount +
                                _statusCashier +
                                @"UNION ALL         

                                Select        
                                A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, c.Description,        
                                DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                Case When A.Type > 2 then G.ID else '' end AgentID,  
                                Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance            
                                from Cashier C         
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2         
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2        
                                --//left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                Where C.ValueDate between @DateFrom and @DateTo  " +
                                _paramAccount +
                                //" and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _statusCashier +
                                @"UNION ALL   

                                select  A.Type AccountType,J.Reference,J.ValueDate,A.ID AccountID,A.Name AccountName, B.DetailDescription Description,    
                                B.DebitCredit,B.BaseDebit,B.BaseCredit,F.ID DepartmentID,I.ID InstrumentID,E.ID OfficeID,G.ID AgentID,H.ID ConsigneeID,     
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,     
                                [dbo].[FGetStartAccountBalance](@DateFrom,B.AccountPK) StartBalance      
                                from journal J     
                                left join journalDetail B on J.JournalPK = B.JournalPK     
                                left join Account A on B.AccountPK = A.AccountPK and A.status = 2     
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2     
                                left join Office E on B.OfficePK = E.OfficePK and E.status = 2     
                                left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2     
                                left join Agent G on B.AgentPK = G.AgentPK and G.status = 2     
                                left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2     
                                left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2     
                                Where J.ValueDate Between @DateFrom and @DateTo and year(J.ValueDate) = YEAR(@DateTo)   
                                and A.AccountPK not in (select AccountPk From CashRef where Status = 2)" +
                                _paramAccount +
                                _statusJournal +
                                @"and J.Type <> 3 order by ValueDate ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TrialBalanceByCOAbyCostCenter" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TrialBalanceByCOAbyCostCenter" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Trial Balance by COA by COST CENTER");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TrialBalanceByCOAbyCostCenter> rList = new List<TrialBalanceByCOAbyCostCenter>();
                                        while (dr0.Read())
                                        {
                                            TrialBalanceByCOAbyCostCenter rSingle = new TrialBalanceByCOAbyCostCenter();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.RPT = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.CTG = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.Account = Convert.ToString(dr0["AccountName"]);
                                            rSingle.Currency = Convert.ToString(dr0["AccountName"]);
                                            rSingle.CostCenter = Convert.ToString(dr0["AccountName"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.ValueDate ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        //int _rowEndBalance = 0;
                                        int _start = incRowExcel;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        int _end = incRowExcel;

                                        worksheet.Cells[_start, 1, _end, 4].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[_start, 1, _end, 4].Style.Fill.BackgroundColor.SetColor(Color.PeachPuff);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "CABANG :";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 3].Value = "{Code} - {Branch Name}";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["H" + incRowExcel + ":T" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 2].Value = "RPT";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 3].Value = "CTG";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 4].Value = "Account";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "Cost Center";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 6].Value = "CurrencyID";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 7].Value = "YTD SEP";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "BUDGET 2016";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 9].Value = "JAN";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "FEB";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Value = "MAR";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 12].Value = "APR";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "MAY";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 14].Value = "JUN";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 15].Value = "JUL";
                                            worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 16].Value = "AUG";
                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 17].Value = "SEP";
                                            worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 18].Value = "OCT";
                                            worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 19].Value = "NOV";
                                            worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 20].Value = "DEC";
                                            worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 20].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 21].Value = "BUDGET " + Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                            worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 21].Style.Font.Bold = true;
                                            incRowExcel++;

                                            int _no = 1;
                                            int _starta = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.RPT;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.CTG;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Account;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CostCenter;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Currency;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }


                                        }

                                        worksheet.Cells["A" + _startRowDetail + ":U" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startRowDetail + ":U" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startRowDetail + ":U" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + _startRowDetail + ":U" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 21];
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;
                                        worksheet.Column(21).Width = 20;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 TRIAL BALANCE BY COA BY COST CENTER";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Trial Balance By COA
            else if (_financeRpt.ReportName.Equals("Trial Balance By COA"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusCashier = "";
                            string _statusJournal = "";
                            string _paramAccount = "";

                            if (!_host.findString(_financeRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.AccountFrom))
                            {
                                _paramAccount = "And A.AccountPK  in ( " + _financeRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_financeRpt.Status == 1)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 0 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _statusCashier = " and C.Status = 1  ";
                                _statusJournal = " and J.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _statusCashier = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _statusCashier = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 1 Or J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }


                            cmd.CommandText =


                            @" Select     
                                 A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, C.Description,       
                                 DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                 Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                 Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                 Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                 Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                 Case When A.Type > 2 then G.ID else '' end AgentID,  
                                 Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                 cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                 [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance     
                                 from Cashier C         
                                 left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2    
                                 left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                 left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                 left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                 left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                 left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2     
                                --// left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                 Where C.ValueDate between @DateFrom and @DateTo        
                                 and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _paramAccount +
                                _statusCashier +
                                @"UNION ALL         

                                Select        
                                A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, c.Description,        
                                DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,  
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,  
                                Case When A.Type > 2 then F.ID else '' end  DepartmentID,  
                                Case When A.Type > 0 then I.ID else '' end InstrumentID,  
                                Case When A.Type > 2 then E.ID else '' end OfficeID,  
                                Case When A.Type > 2 then G.ID else '' end AgentID,  
                                Case When A.Type > 2 then H.ID else '' end ConsigneeID,  
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,  
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance            
                                from Cashier C         
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2         
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2      
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2        
                                --//left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2  
                                Where C.ValueDate between @DateFrom and @DateTo  " +
                                _paramAccount +
                                //" and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                                _statusCashier +
                                @"UNION ALL   

                                select  A.Type AccountType,J.Reference,J.ValueDate,A.ID AccountID,A.Name AccountName, B.DetailDescription Description,    
                                B.DebitCredit,B.BaseDebit,B.BaseCredit,F.ID DepartmentID,I.ID InstrumentID,E.ID OfficeID,G.ID AgentID,H.ID ConsigneeID,     
                                cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,     
                                [dbo].[FGetStartAccountBalance](@DateFrom,B.AccountPK) StartBalance      
                                from journal J     
                                left join journalDetail B on J.JournalPK = B.JournalPK     
                                left join Account A on B.AccountPK = A.AccountPK and A.status = 2     
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2     
                                left join Office E on B.OfficePK = E.OfficePK and E.status = 2     
                                left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2     
                                left join Agent G on B.AgentPK = G.AgentPK and G.status = 2     
                                left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2     
                                left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2     
                                Where J.ValueDate Between @DateFrom and @DateTo and year(J.ValueDate) = YEAR(@DateTo)   
                                and A.AccountPK not in (select AccountPk From CashRef where Status = 2)" +
                                _paramAccount +
                                _statusJournal +
                                @"and J.Type <> 3 order by ValueDate ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TrialBalanceByCOA" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TrialBalanceByCOA" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Trial Balance by COA");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TrialBalancebyCOA> rList = new List<TrialBalancebyCOA>();
                                        while (dr0.Read())
                                        {
                                            TrialBalancebyCOA rSingle = new TrialBalancebyCOA();

                                            rSingle.Cabang = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.RPT = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.CTG = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.Account = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.Currency = Convert.ToString(dr0["DepartmentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.Cabang ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        //int _rowEndBalance = 0;
                                        int _start = incRowExcel;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        int _end = incRowExcel;

                                        worksheet.Cells[_start, 1, _end, 4].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[_start, 1, _end, 4].Style.Fill.BackgroundColor.SetColor(Color.PeachPuff);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "CABANG :";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        worksheet.Cells[incRowExcel, 2].Value = "{Code} - {Branch Name}";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["H" + incRowExcel + ":T" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 20].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 2].Value = "RPT";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 3].Value = "CTG";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 4].Value = "Account";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 5].Value = "CurrencyID";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 6].Value = "YTD SEP";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 7].Value = "BUDGET 2016";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "JAN";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 9].Value = "FEB";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "MAR";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Value = "APR";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 12].Value = "MAY";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "JUN";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 14].Value = "JUL";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 15].Value = "AUG";
                                            worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 16].Value = "SEP";
                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 17].Value = "OCT";
                                            worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 18].Value = "NOV";
                                            worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 19].Value = "DEC";
                                            worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 20].Value = "BUDGET " + Convert.ToDateTime(_financeRpt.ValueDateTo).ToString("yyyy");
                                            worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 20].Style.Font.Bold = true;
                                            incRowExcel++;

                                            int _no = 1;
                                            int _starta = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.RPT;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.CTG;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Account;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Currency;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            worksheet.Cells["A" + _startRowDetail + ":T" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":T" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":T" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":T" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        }




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 20];
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 TRIAL BALANCE BY COA";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_financeRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion


            else
            {
                return false;
            }

        }

        public Boolean GenerateReportAccounting(string _userID, AccountingRpt _accountingRpt)
        {

            //ini dynamic
            #region Cash Flow
            if (_accountingRpt.ReportName.Equals("Cash Flow"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0  ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0  ";
                            }
                            cmd.CommandText = @"
                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                              isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
                              isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                              B.BaseDebit,B.BaseCredit,[dbo].[FGetStartAccountBalance](@ValueDateFrom,B.AccountPK) StartBalance ,    
                              cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) RefNo       
                              from journal A    
                              left join journalDetail B on A.JournalPK = B.JournalPK    
                              left join Account C on B.AccountPK = C.AccountPK and C.status = 2    
                              left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2    
                              left join Office E on B.OfficePK = E.OfficePK and E.status = 2    
                              left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2    
                              left join Agent G on B.AgentPK = G.AgentPK and G.status = 2    
                              left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2    
                              left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2    
                              Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                              and year(A.ValueDate) = YEAR(@ValueDateTo) and A.description <> 'PERIOD CLOSING'
                             " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CashFlow" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CashFlow" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity Plain");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CashFlow> rList = new List<CashFlow>();
                                        while (dr0.Read())
                                        {

                                            CashFlow rSingle = new CashFlow();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                         from r in rList
                                         orderby r.AccountID ascending
                                         group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance, r.SettlementDate } into rGroup
                                         select rGroup;

                                        int incRowExcel = 1;


                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        //worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Laporan Arus Kas";
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.SettlementDate;
                                            worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells["B" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Jan";
                                            worksheet.Cells[incRowExcel, 3].Value = "Feb";
                                            worksheet.Cells[incRowExcel, 4].Value = "Mar";
                                            worksheet.Cells[incRowExcel, 5].Value = "Apr";
                                            worksheet.Cells[incRowExcel, 6].Value = "Mei";
                                            worksheet.Cells[incRowExcel, 7].Value = "Juni";
                                            worksheet.Cells[incRowExcel, 8].Value = "Juli";
                                            worksheet.Cells[incRowExcel, 9].Value = "Aug";
                                            worksheet.Cells[incRowExcel, 10].Value = "Sep";
                                            worksheet.Cells[incRowExcel, 11].Value = "Oct";
                                            worksheet.Cells[incRowExcel, 12].Value = "Nov";
                                            worksheet.Cells[incRowExcel, 13].Value = "Dec";
                                            worksheet.Cells[incRowExcel, 14].Value = "YTD Dec 17";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "ARUS KAS DARI AKTIVITAS OPERASI";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Penerimaan dari:";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Penjualan aset keuangan melalui laba rugi";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Jasa manajer investasi";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Pendapatan bunga, Arranger Fee dan dividen";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Restitusi";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Pembayaran untuk:";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Pembayaran bunga pinjaman";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Pajak";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Karyawan";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Beban usaha";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "   Perolehan aset keuangan melalui laba rugi";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            int RowT = incRowExcel;
                                            int RowU = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Arus Kas Bersih yang Diperoleh Dari Aktivitas Operasi";
                                            worksheet.Cells["A" + RowT + ":A" + RowU].Merge = true;
                                            worksheet.Cells["A" + RowT + ":A" + RowU].Style.WrapText = true;
                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "ARUS KAS DARI AKTIVITAS INVESTASI";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Pembelian aset tetap";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Penjualan aset tetap";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Penjualan LOGAM MULIA (EMAS)";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Uang Muka Modal Disetor ";
                                            incRowExcel++;

                                            int RowA = incRowExcel;
                                            int RowB = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Arus kas bersih yang digunakan untuk aktivitas investasi";
                                            worksheet.Cells["A" + RowA + ":A" + RowB].Merge = true;
                                            worksheet.Cells["A" + RowA + ":A" + RowB].Style.WrapText = true;
                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "ARUS KAS DARI AKTIVITAS PENDANAAN";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Pembayaran dividen";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Pembayaran sewa pembiayaan";
                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Penerimaan dana nasabah";
                                            incRowExcel = incRowExcel + 2;


                                            int RowC = incRowExcel;
                                            int RowD = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Arus kas bersih yang digunakan untuk aktivitas pendanaan";
                                            worksheet.Cells["A" + RowC + ":A" + RowD].Merge = true;
                                            worksheet.Cells["A" + RowC + ":A" + RowD].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 2].Value = "-";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowC + ":B" + RowD].Merge = true;
                                            worksheet.Cells["B" + RowC + ":B" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 3].Value = "-";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowC + ":C" + RowD].Merge = true;
                                            worksheet.Cells["C" + RowC + ":C" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 4].Value = "-";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowC + ":D" + RowD].Merge = true;
                                            worksheet.Cells["D" + RowC + ":D" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "-";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowC + ":E" + RowD].Merge = true;
                                            worksheet.Cells["E" + RowC + ":E" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 6].Value = "-";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowC + ":F" + RowD].Merge = true;
                                            worksheet.Cells["F" + RowC + ":F" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 7].Value = "-";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowC + ":G" + RowD].Merge = true;
                                            worksheet.Cells["G" + RowC + ":G" + RowD].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "-";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowC + ":H" + RowD].Merge = true;
                                            worksheet.Cells["H" + RowC + ":H" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 9].Value = "-";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowC + ":I" + RowD].Merge = true;
                                            worksheet.Cells["I" + RowC + ":I" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 10].Value = "-";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowC + ":J" + RowD].Merge = true;
                                            worksheet.Cells["J" + RowC + ":J" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 11].Value = "-";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowC + ":K" + RowD].Merge = true;
                                            worksheet.Cells["K" + RowC + ":K" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 12].Value = "-";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowC + ":L" + RowD].Merge = true;
                                            worksheet.Cells["L" + RowC + ":L" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 13].Value = "-";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowC + ":M" + RowD].Merge = true;
                                            worksheet.Cells["M" + RowC + ":M" + RowD].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowC + ":N" + RowD].Merge = true;
                                            worksheet.Cells["N" + RowC + ":N" + RowD].Style.WrapText = true;
                                            incRowExcel = incRowExcel + 3;

                                            int RowE = incRowExcel;
                                            int RowF = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "KENAIKAN (PENURUNAN) BERSIH KAS DAN SETARA KAS";
                                            worksheet.Cells["A" + RowE + ":A" + RowF].Merge = true;
                                            worksheet.Cells["A" + RowE + ":A" + RowF].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 2].Value = "-";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowE + ":B" + RowF].Merge = true;
                                            worksheet.Cells["B" + RowE + ":B" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 3].Value = "-";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowE + ":C" + RowF].Merge = true;
                                            worksheet.Cells["C" + RowE + ":C" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 4].Value = "-";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowE + ":D" + RowF].Merge = true;
                                            worksheet.Cells["D" + RowE + ":D" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "-";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowE + ":E" + RowF].Merge = true;
                                            worksheet.Cells["E" + RowE + ":E" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 6].Value = "-";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowE + ":F" + RowF].Merge = true;
                                            worksheet.Cells["F" + RowE + ":F" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 7].Value = "-";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowE + ":G" + RowF].Merge = true;
                                            worksheet.Cells["G" + RowE + ":G" + RowF].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "-";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowE + ":H" + RowF].Merge = true;
                                            worksheet.Cells["H" + RowE + ":H" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 9].Value = "-";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowE + ":I" + RowF].Merge = true;
                                            worksheet.Cells["I" + RowE + ":I" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 10].Value = "-";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowE + ":J" + RowF].Merge = true;
                                            worksheet.Cells["J" + RowE + ":J" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 11].Value = "-";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowE + ":K" + RowF].Merge = true;
                                            worksheet.Cells["K" + RowE + ":K" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 12].Value = "-";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowE + ":L" + RowF].Merge = true;
                                            worksheet.Cells["L" + RowE + ":L" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 13].Value = "-";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowE + ":M" + RowF].Merge = true;
                                            worksheet.Cells["M" + RowE + ":M" + RowF].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowE + ":N" + RowF].Merge = true;
                                            worksheet.Cells["N" + RowE + ":N" + RowF].Style.WrapText = true;

                                            incRowExcel = incRowExcel + 4;

                                            int RowG = incRowExcel;
                                            int RowH = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dampak perubahan selisih kurs terhadap kas dan setara kas";
                                            worksheet.Cells["A" + RowG + ":A" + RowH].Merge = true;
                                            worksheet.Cells["A" + RowG + ":A" + RowH].Style.WrapText = true;

                                            worksheet.Cells["N" + RowG + ":N" + RowH].Value = "-";
                                            worksheet.Cells["N" + RowG + ":N" + RowH].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowG + ":N" + RowH].Merge = true;
                                            worksheet.Cells["N" + RowG + ":N" + RowH].Style.WrapText = true;
                                            incRowExcel = incRowExcel + 4;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "KAS DAN SETARA KAS AWAL PERIODE";
                                            worksheet.Cells[incRowExcel, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 2].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            worksheet.Cells[incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                                            worksheet.Cells[incRowExcel, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 14].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);


                                            worksheet.Cells[incRowExcel, 3].Value = "-";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 4].Value = "-";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 5].Value = "-";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 6].Value = "-";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 7].Value = "-";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "-";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 9].Value = "-";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "-";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 11].Value = "-";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "-";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 13].Value = "-";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 3;

                                            int RowI = incRowExcel;
                                            int RowJ = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["B" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowI + ":B" + RowJ].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["B" + RowI + ":B" + RowJ].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                                            worksheet.Cells[incRowExcel, 1].Value = "KAS DAN SETARA KAS AKHIR PERIODE (nilai harus sama dengan balance kas dan setara kas)";
                                            worksheet.Cells["A" + RowI + ":A" + RowJ].Merge = true;
                                            worksheet.Cells["A" + RowI + ":A" + RowJ].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 2].Value = "-";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowI + ":B" + RowJ].Merge = true;
                                            worksheet.Cells["B" + RowI + ":B" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 3].Value = "-";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowI + ":C" + RowJ].Merge = true;
                                            worksheet.Cells["C" + RowI + ":C" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 4].Value = "-";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowI + ":D" + RowJ].Merge = true;
                                            worksheet.Cells["D" + RowI + ":D" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 5].Value = "-";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowI + ":E" + RowJ].Merge = true;
                                            worksheet.Cells["E" + RowI + ":E" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 6].Value = "-";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowI + ":F" + RowJ].Merge = true;
                                            worksheet.Cells["F" + RowI + ":F" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 7].Value = "-";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowI + ":G" + RowJ].Merge = true;
                                            worksheet.Cells["G" + RowI + ":G" + RowJ].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "-";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowI + ":H" + RowJ].Merge = true;
                                            worksheet.Cells["H" + RowI + ":H" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 9].Value = "-";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowI + ":I" + RowJ].Merge = true;
                                            worksheet.Cells["I" + RowI + ":I" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 10].Value = "-";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowI + ":J" + RowJ].Merge = true;
                                            worksheet.Cells["J" + RowI + ":J" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 11].Value = "-";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowI + ":K" + RowJ].Merge = true;
                                            worksheet.Cells["K" + RowI + ":K" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 12].Value = "-";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowI + ":L" + RowJ].Merge = true;
                                            worksheet.Cells["L" + RowI + ":L" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 13].Value = "-";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowI + ":M" + RowJ].Merge = true;
                                            worksheet.Cells["M" + RowI + ":M" + RowJ].Style.WrapText = true;


                                            worksheet.Cells[incRowExcel, 14].Value = "-";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowI + ":N" + RowJ].Merge = true;
                                            worksheet.Cells["N" + RowI + ":N" + RowJ].Style.WrapText = true;
                                            incRowExcel = incRowExcel + 5;


                                            string _range = "A" + incRowExcel + ":N" + incRowExcel;

                                            //_range = "A" + incRowExcel + ":G" + incRowExcel;
                                            //using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            //{
                                            //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            //    r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            //    r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            //    r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //    r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            //    r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                            //    r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //    //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            //    r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //    r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //}
                                            //incRowExcel++;
                                            //int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                _range = "A" + incRowExcel + ":N" + incRowExcel;


                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:N";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];
                                        worksheet.Column(1).Width = 45;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();
                                        worksheet.Column(11).AutoFit();
                                        worksheet.Column(12).AutoFit();
                                        worksheet.Column(13).AutoFit();
                                        worksheet.Column(14).AutoFit();

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY PLAIN";
                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            //ini dynamic
            #region Mutasi Fix Asset
            else if (_accountingRpt.ReportName.Equals("Mutasi Fix Asset"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0  ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0  ";
                            }
                            cmd.CommandText = @"
                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                              isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
                              isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                              B.BaseDebit,B.BaseCredit,[dbo].[FGetStartAccountBalance](@ValueDateFrom,B.AccountPK) StartBalance ,    
                              cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) RefNo       
                              from journal A    
                              left join journalDetail B on A.JournalPK = B.JournalPK    
                              left join Account C on B.AccountPK = C.AccountPK and C.status = 2    
                              left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2    
                              left join Office E on B.OfficePK = E.OfficePK and E.status = 2    
                              left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2    
                              left join Agent G on B.AgentPK = G.AgentPK and G.status = 2    
                              left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2    
                              left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2    
                              Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                              and year(A.ValueDate) = YEAR(@ValueDateTo) and A.description <> 'PERIOD CLOSING'
                             " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "MutasiFixAsset" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "MutasiFixAsset" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity Plain");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {

                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                         from r in rList
                                         orderby r.AccountID ascending
                                         group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance, r.ValueDate } into rGroup
                                         select rGroup;

                                        int incRowExcel = 1;


                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Mutasi Asset Tetap";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "31-Aug-17";
                                        incRowExcel++;
                                        incRowExcel = incRowExcel + 2;

                                        int _startRowDetail = incRowExcel;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 4, incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Beginning Balance";
                                        worksheet.Cells[incRowExcel, 5].Value = "Addition";
                                        worksheet.Cells[incRowExcel, 6].Value = "Deduction";
                                        worksheet.Cells[incRowExcel, 7].Value = "Reklasifikasi";
                                        worksheet.Cells[incRowExcel, 8].Value = "Ending Balance";
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Aset Tetap";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Biaya Perolehan";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Kendaraan Bermotor";

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "Total - Biaya Perolehan";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Akumulasi Penyusutan";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Kendaraan Bermotor";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "Total - Akumulasi Penyusutan";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "Total Aset Tetap,Neto";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Aset tidak Berwujud";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Software SIAP SIAR";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Amortisasi Software SIAP SIAR";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "Total Aset tidak Berwujud, Neto";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        int _endRowDetail = incRowExcel;
                                        worksheet.Cells["D" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        incRowExcel = incRowExcel + 3;

                                        //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MMM-yyyy";

                                        foreach (var rsHeader in GroupByReference)
                                        {




                                            string _range = "A" + incRowExcel + ":J" + incRowExcel;



                                            //int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                _range = "A" + incRowExcel + ":J" + incRowExcel;


                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }

                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Detail Mutasi Asset Tetap";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "31-Aug-17";
                                        incRowExcel++;
                                        int _startRowDetail1 = incRowExcel;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 5, incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "Jan-17";
                                        worksheet.Cells[incRowExcel, 6].Value = "Feb-17";
                                        worksheet.Cells[incRowExcel, 7].Value = "Mar-17";
                                        worksheet.Cells[incRowExcel, 8].Value = "Apr-17";
                                        worksheet.Cells[incRowExcel, 9].Value = "May-17";
                                        worksheet.Cells[incRowExcel, 10].Value = "Jun-17";
                                        worksheet.Cells[incRowExcel, 11].Value = "Jul-17";
                                        worksheet.Cells[incRowExcel, 12].Value = "Aug-17";
                                        worksheet.Cells[incRowExcel, 13].Value = "As Of Aug'17";
                                        incRowExcel = incRowExcel + 2;


                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Biaya Perolehan";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Beginning Balance";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Bermotor";

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 3].Value = "Sub Total - Beginning Balance";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Addition";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Bermotor";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Addition";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "Deduction";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Bermotor";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Deduction";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Ending Balance";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Bermotor";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 3].Value = "Sub Total - Ending Balance";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 3].Value = "Total - Biaya Perolehan";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        incRowExcel = incRowExcel + 2;



                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Akumulasi Penyusutan";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Beginning Balance";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Bermotor";

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 3].Value = "Sub Total - Beginning Balance";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Addition";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Bermotor";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Addition";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "Deduction";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Bermotor";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Deduction";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 2].Value = "Ending Balance";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Partisi";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Bermotor";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Fincen";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Peralatan Kantor Cabang";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Kendaraan Pembiayaan";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Ending Balance";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 3].Value = "Total - Akumulasi Penyusutan";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 3].Value = "Total Aset Tetap, Neto";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        incRowExcel = incRowExcel + 2;



                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Aset tidak Berwujud";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Beginning Balance";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Software SIAP SIAR";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Beginning Balance";
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Addition";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Software SIAP SIAR";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Addition";
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Deduction";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Software SIAP SIAR";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Deduction";
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 2].Value = "Ending Balance";
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Value = "Software SIAP SIAR";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 4].Value = "Sub Total - Ending Balance";
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 3].Value = "Total Aset tidak Berwujud, Neto";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        int _endRowDetail1 = incRowExcel;
                                        worksheet.Cells["E" + _startRowDetail1 + ":M" + _endRowDetail1].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + _startRowDetail1 + ":M" + _endRowDetail1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        incRowExcel = incRowExcel + 2;

                                        foreach (var rsHeader1 in GroupByReference)
                                        {


                                        }
                                        string _rangeDetail = "A:M";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 13];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 5;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();
                                        worksheet.Column(11).AutoFit();
                                        worksheet.Column(12).AutoFit();
                                        worksheet.Column(13).AutoFit();

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY PLAIN";
                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Cash Advance
            else if (_accountingRpt.ReportName.Equals("Cash Advance"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText =

                             @"
                            
                            select G.ID Period,ValueDate Date,B.Name NamaVendor,PRNumber PurchaseRequisition,case when A.BankType = 1 then 'Bank' else 'Non Bank' end Type,Reference Ref,A.Description Keterangan,
                            C.Name AccountFrom,D.Name AccountTo,E.ID Branch,F.ID Divisi,case when CashRefPK <> 0 then Amount else Amount * - 1 end Nominal from AdvanceCard A
                            left join Consignee B on A.ConsigneePK = B.ConsigneePK and B.Status = 2
                            left join Account C on A.AccountPKFrom = C.AccountPK and C.Status = 2
                            left join Account D on A.AccountPKTo = D.AccountPK and D.Status = 2
                            left join Department E on A.DepartmentPK = E.DepartmentPK and E.Status = 2
                            left join Office F on A.OfficePK = F.OfficePK and F.Status = 2
                            left join Period G on A.PeriodPK = G.PeriodPK and G.status = 2
                            where ValueDate between @DateFrom and @DateTo and A.status = 2 and Posted = 1 and Revised = 0 and A.Type = 1 ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CashAdvance" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CashAdvance" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Cash Advance");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CashAdvanceRpt> rList = new List<CashAdvanceRpt>();
                                        while (dr0.Read())
                                        {
                                            CashAdvanceRpt rSingle = new CashAdvanceRpt();
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.NamaVendor = Convert.ToString(dr0["NamaVendor"]);
                                            rSingle.PurchaseRequisition = Convert.ToString(dr0["PurchaseRequisition"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.Ref = Convert.ToString(dr0["Ref"]);
                                            rSingle.AccountFrom = Convert.ToString(dr0["AccountFrom"]);
                                            rSingle.AccountTo = Convert.ToString(dr0["AccountTo"]);
                                            rSingle.Branch = Convert.ToString(dr0["Branch"]);
                                            rSingle.Divisi = Convert.ToString(dr0["Divisi"]);
                                            rSingle.Keterangan = Convert.ToString(dr0["Keterangan"]);
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Nominal"]);
                                            rSingle.Period = Convert.ToString(dr0["Period"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Ref, r.Period } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "Kartu Advance";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;



                                        incRowExcel = incRowExcel + 2;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        foreach (var rsHeader in QueryByFundID)
                                        {


                                            worksheet.Cells[incRowExcel, 1].Value = "Period                     :";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Period;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date From             :";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date To                  :";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateTo;
                                            ;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "Reference";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Nama Vendor";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "Purchase Requisition";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Type";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Account From";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Account To";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "Keterangan";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Branch";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Value = "Divisi";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                            incRowExcel++;

                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":K" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Date;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Ref;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NamaVendor;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.PurchaseRequisition;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Type;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AccountFrom;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.AccountTo;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Keterangan;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Branch;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Divisi;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Nominal;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                incRowExcel++;
                                                _endRowDetail = incRowExcel;


                                            }

                                        }

                                        //incRowExcel++;

                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        string _rangeA = "A:K" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 14;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 14];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 30;
                                        worksheet.Column(9).Width = 10;
                                        worksheet.Column(10).Width = 10;
                                        worksheet.Column(11).Width = 30;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Kartu Hutang
            else if (_accountingRpt.ReportName.Equals("Kartu Hutang"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText =

                             @"
                            select ValueDate Date,B.Name,PRNumber,PONumber,case when A.BankType = 1 then 'Bank' else 'Non Bank' end Type,Reference,A.Description,
                            C.Name AccountFrom,D.Name AccountTo,E.ID DepartmentID,F.ID OfficeID,case when CashRefPK <> 0 then Amount else Amount * - 1 end Nominal, isnull(ContractAmount,0) NominalKontrak from AdvanceCard A
                            left join Consignee B on A.ConsigneePK = B.ConsigneePK and B.Status = 2
                            left join Account C on A.AccountPKFrom = C.AccountPK and C.Status = 2
                            left join Account D on A.AccountPKTo = D.AccountPK and D.Status = 2
                            left join Department E on A.DepartmentPK = E.DepartmentPK and E.Status = 2
                            left join Office F on A.OfficePK = F.OfficePK and F.Status = 2
                            where ValueDate between @DateFrom and @DateTo and A.status = 2 and Posted = 1 and Revised = 0 and A.Type = 2";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "KartuHutang" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "KartuHutang" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Kartu Hutang");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<KartuHutangRpt> rList = new List<KartuHutangRpt>();
                                        while (dr0.Read())
                                        {
                                            KartuHutangRpt rSingle = new KartuHutangRpt();
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.NoKartuHutang = Convert.ToString(dr0["Reference"]);
                                            rSingle.PRNo = Convert.ToString(dr0["PRNumber"]);
                                            rSingle.PONo = Convert.ToString(dr0["PONumber"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.Keterangan = Convert.ToString(dr0["Description"]);
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Nominal"]);
                                            rSingle.NominalKontrak = Convert.ToDecimal(dr0["NominalKontrak"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Name, r.NoKartuHutang, r.PONo, r.PRNo, r.NominalKontrak } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel = incRowExcel + 2;
                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            //worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Name;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 2].Value = "No. Kartu Hutang";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.NoKartuHutang;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "PR No";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.PRNo;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "PO No";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.PONo;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            int _RowNominal = incRowExcel;
                                            worksheet.Cells[incRowExcel, 2].Value = "Nominal Kontrak";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.NominalKontrak;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel = incRowExcel + 3;


                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 2].Value = "Tgl";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 3].Value = "Keterangan";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 5].Value = "O/S";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Aquamarine);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.NominalKontrak;
                                            worksheet.Row(incRowExcel).Height = 0;
                                            incRowExcel++;

                                            //area header
                                            int _no = 1;
                                            int _rowA = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                _rowA = incRowExcel - 1;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Keterangan;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Nominal;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _rowA + "+D" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        }

                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        string _rangeA = "A:E" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 14;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 5];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 40;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;


                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Trial Balance
            else if (_accountingRpt.ReportName.Equals("Trial Balance"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            string _paramAccount = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "and A.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.Status <> 3  ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                            }
                            if (_accountingRpt.ParamData == 1)
                            {
                                _paramData = "  A.Groups = 1  ";
                            }
                            else if (_accountingRpt.ParamData == 2)
                            {
                                _paramData = "  A.Groups = 0  ";
                            }
                            else if (_accountingRpt.ParamData == 3)
                            {
                                _paramData = "  A.Groups in (0,1)  ";
                            }


                            cmd.CommandText = @"  
	                            Declare @PeriodPK int
                                Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= @ValueDateTo and  B.PeriodPK = @PeriodPK
                              " + _status + _paramAccount + @"     
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE " + _paramData + @"  AND
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < @ValueDateFrom  and  B.PeriodPK = @PeriodPK 
                               " + _status + _paramAccount + @" 
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE " + _paramData + @" AND  (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                                Order BY C.ID 
                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TrialBalance" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TrialBalance" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Trial Balance");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TrialBalance> rList = new List<TrialBalance>();
                                        while (dr0.Read())
                                        {

                                            TrialBalance rSingle = new TrialBalance();
                                            rSingle.COA = Convert.ToString(dr0["ID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["Name"]);
                                            rSingle.KlasifikasiAccount = Convert.ToString(dr0["Name"]);
                                            rSingle.Type = Convert.ToString(dr0["Name"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.PreviousBalance = Convert.ToDecimal(dr0["PreviousBaseBalance"]);
                                            rSingle.DebetMutasi = Convert.ToDecimal(dr0["BaseDebitMutasi"]);
                                            rSingle.CreditMutasi = Convert.ToDecimal(dr0["BaseCreditMutasi"]);
                                            rSingle.CurrentBalance = Convert.ToDecimal(dr0["CurrentBaseBalance"]);
                                            rSingle.MTD = Convert.ToDecimal(dr0["PreviousBaseBalance"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                                //orderby r.COA  ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        int _startRowDetail = 0;
                                        int _endRowDetail = 0;
                                        worksheet.Cells[incRowExcel, 6].Value = "PER 31 JULI 2017";
                                        incRowExcel = incRowExcel + 2;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            _startRowDetail = incRowExcel;
                                            worksheet.Cells["A" + _startRowDetail + ":K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":K" + _startRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Value = "Chart of Account (COA)";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 14;

                                            worksheet.Cells[incRowExcel, 2].Value = "Account Name";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = "Klasifikasi Account";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //incRowExcel++;
                                            worksheet.Cells[incRowExcel, 6].Value = "PreviousBalance";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "DebetMutasi";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "CreditMutasi";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "CurrentBalance";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Value = "MTD";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.COA;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccountName;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Type;
                                                //incRowExcel++;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.KlasifikasiAccount;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.PreviousBalance;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DebetMutasi;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CreditMutasi;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.CurrentBalance;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.MTD;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells["A" + _endRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Value = "*** Account dan klasifikasi Account akan mengikuti Chart of Account yang baru";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:K";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 12;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 40;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 10;
                                        worksheet.Column(11).Width = 25;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 TRIAL BALANCE REPORT";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }

                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Account Activity By Groups
            if (_accountingRpt.ReportName.Equals("Account Activity By Groups"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            string _paramCounterpart = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (!_host.findString(_accountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.CounterpartFrom))
                            {
                                _paramCounterpart = "And B.CounterpartPK  in ( " + _accountingRpt.CounterpartFrom + " ) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status <> 3 ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status <> 3  ";
                            }
                            cmd.CommandText = @"
	                        Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                            isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
                            isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                            B.BaseDebit,B.BaseCredit,[dbo].[FGetStartAccountBalance](@ValueDateFrom,B.AccountPK) StartBalance ,    
                            cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) RefNo,J.ID CounterpartID     
                            from journal A    
                            left join journalDetail B on A.JournalPK = B.JournalPK and B.status in (1,2)    
                            left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)    
                            left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in (1,2)    
                            left join Office E on B.OfficePK = E.OfficePK and E.status in (1,2)    
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in (1,2)    
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in (1,2)    
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in (1,2)    
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in (1,2) 
                            left join Counterpart J on B.CounterpartPK = J.CounterpartPK and J.status in (1,2) 
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                            and A.PeriodPK = @PeriodPK 
                             " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument + _paramCounterpart;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);
                            cmd.Parameters.AddWithValue("@CounterpartFrom", _accountingRpt.CounterpartFrom);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountActivityByGroups" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccountActivityByGroups" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity By Groups");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivityByGroups> rList = new List<AccountActivityByGroups>();
                                        while (dr0.Read())
                                        {
                                            AccountActivityByGroups rSingle = new AccountActivityByGroups();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = dr0["RefNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.CounterpartID = dr0["CounterpartID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByAccountID =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByAccountID)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 8].Value = _accountingRpt.ValueDateFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 8].Value = _accountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Value = "BEG BALANCE :";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "REF";
                                            worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 5].Value = "COUNT";
                                            worksheet.Cells[incRowExcel, 6].Value = "INST";
                                            worksheet.Cells[incRowExcel, 7].Value = "DEP";
                                            worksheet.Cells[incRowExcel, 8].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 9].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 10].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }

                                            _range = "A" + incRowExcel + ":J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BaseCredit;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Formula = "J" + _rowEndBalance + "+H" + incRowExcel + "-I" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Formula = "J" + _rowEndBalance + "-H" + incRowExcel + "+I" + incRowExcel;
                                                }
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }
                                                _no++;


                                            }
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:J";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(11).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY BY GROUPS";

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion


            #region Lap Keu
            else if (_accountingRpt.ReportName.Equals("Lap Keu"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            string _paramAccount = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "and A.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.Status <> 3  ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                            }
                            if (_accountingRpt.ParamData == 1)
                            {
                                _paramData = "  A.Groups = 1  ";
                            }
                            else if (_accountingRpt.ParamData == 2)
                            {
                                _paramData = "  A.Groups = 0  ";
                            }
                            else if (_accountingRpt.ParamData == 3)
                            {
                                _paramData = "  A.Groups in (0,1)  ";
                            }


                            cmd.CommandText = @"  
                            
                           
                            DECLARE @ValuedateFrom DATETIME
                            SET @ValueDateFrom = DATEADD(yy, DATEDIFF(yy, 0, @ValueDateTo), 0)

                            DECLARE @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2


                            Create table #TB  (
                            Row int,
                            ID nvarchar(100),
                            Name nvarchar(100),
                            InstrumentID nvarchar(100),
                            DepartmentID nvarchar(100),
                            PreviousBaseBalance numeric(22,4),
                            BaseDebitMutasi numeric(22,4),
                            BaseCreditMutasi numeric(22,4),
                            CurrentBaseBalance numeric(22,4)
                            )

                            Create table #TempTBMonthly  (
                            ID nvarchar(100),
                            Name nvarchar(500),
                            InstrumentID nvarchar(500),
                            DepartmentID nvarchar(500),
                            Bulan int,
                            Balance numeric(22,4)
                            )

                            Create table #TBMTD  (
                            ID nvarchar(100),
                            Name nvarchar(500),
                            InstrumentID nvarchar(500),
                            DepartmentID nvarchar(500),
                            Balance numeric(22,4)
                            )




                            Declare @DateCounter datetime
                            set @DateCounter = @ValueDateFrom

                            Declare @DateCounterBS DATETIME
                            SET @DateCounterBS =  DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@ValueDateFrom)+1,0))

                            while (@DateCounter<= @ValueDateTo)
                            BEGIN



                            insert into #TempTBMonthly		
                            ( ID ,
                            Name ,
                            InstrumentID,
                            DepartmentID,
                            Bulan ,
                            Balance 
                            )

                            select B.ID,B.Name,isnull(Instrument,''),isnull(Department,''),Month(@DateCounter),sum(EndBalance) CurrentBaseBalance from (
                            select A.AccountPK,D.ID Instrument,C.ID Department,sum(BaseDebit-BaseCredit) BegBalance,0 Debit,0 Credit,0 EndBalance from journaldetail A
                            left join journal B on A.JournalPK = B.JournalPK
                            left join Department C on A.DepartmentPK = C.DepartmentPK and C.Status = 2
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                            where B.Status = 2 and B.posted = 1 and B.Reversed = 0 and valuedate < @DateCounter and PeriodPK = @PeriodPK
                            group by A.AccountPK, C.ID,D.ID -- BEG BALANCE
                            union all
                            select A.AccountPK,D.ID,C.ID,0,sum(BaseDebit),sum(BaseCredit),0 from journaldetail A
                            left join journal B on A.JournalPK = B.JournalPK
                            left join Department C on A.DepartmentPK = C.DepartmentPK and C.Status = 2
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                            where B.Status = 2 and B.posted = 1 and B.Reversed = 0 and valuedate between @DateCounter and @DateCounterBS and PeriodPK = @PeriodPK
                            group by  A.AccountPK,C.ID,D.ID -- END BALANCE
                            union all
                            select A.AccountPK,D.ID,C.ID,0,0,0,sum(BaseDebit-BaseCredit) EndBalance from journaldetail A
                            left join journal B on A.JournalPK = B.JournalPK
                            left join Department C on A.DepartmentPK = C.DepartmentPK and C.Status = 2
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                            where B.Status = 2 and B.posted = 1 and B.Reversed = 0 and valuedate <= @DateCounterBS and PeriodPK = @PeriodPK
                            group by  A.AccountPK,C.ID,D.ID -- END BALANCE
                            ) A
                            left join Account B on A.AccountPK = B.AccountPK and B.Status = 2
                            where Groups = 0
                            Group by B.ID,B.Name,A.Instrument,A.Department


                            SET @DateCounter = DATEADD(MONTH,1,@DateCounter)
                            SET @DateCounterBS = DATEADD(MONTH,1,@DateCounterBS)

                            SET @DateCounterBS = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@DateCounterBS)+1,0))
			
                            END


		  
                            insert into #TB(Row,ID,Name,InstrumentID,DepartmentID,PreviousBaseBalance,BaseDebitMutasi,BaseCreditMutasi,CurrentBaseBalance)
                            select ROW_NUMBER() OVER (ORDER BY B.ID) Row, B.ID ID,B.Name Name,isnull(Instrument,'') InstrumentID,isnull(Department,'') DepartmentID,sum(BegBalance) PreviousBaseBalance,sum(Debit) BaseDebitMutasi,sum(Credit) BaseCreditMutasi,sum(EndBalance) CurrentBaseBalance from (
                            select A.AccountPK,D.ID Instrument,C.ID Department,sum(BaseDebit-BaseCredit) BegBalance,0 Debit,0 Credit,0 EndBalance from journaldetail A
                            left join journal B on A.JournalPK = B.JournalPK
                            left join Department C on A.DepartmentPK = C.DepartmentPK and C.Status = 2
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                            where B.Status = 2 and B.posted = 1 and B.Reversed = 0 and valuedate < @DateFrom and PeriodPK = @PeriodPK
                            group by A.AccountPK, C.ID,D.ID -- BEG BALANCE
                            union all
                            select A.AccountPK,D.ID,C.ID,0,sum(BaseDebit),sum(BaseCredit),0 from journaldetail A
                            left join journal B on A.JournalPK = B.JournalPK
                            left join Department C on A.DepartmentPK = C.DepartmentPK and C.Status = 2
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                            where B.Status = 2 and B.posted = 1 and B.Reversed = 0 and valuedate between @DateFrom and @ValueDateTo and PeriodPK = @PeriodPK
                            group by  A.AccountPK,C.ID,D.ID -- MOVEMENT
                            union all
                            select A.AccountPK,D.ID,C.ID,0,0,0,sum(BaseDebit-BaseCredit) EndBalance from journaldetail A
                            left join journal B on A.JournalPK = B.JournalPK
                            left join Department C on A.DepartmentPK = C.DepartmentPK and C.Status = 2
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                            where B.Status = 2 and B.posted = 1 and B.Reversed = 0 and valuedate <= @ValueDateTo and PeriodPK = @PeriodPK
                            group by  A.AccountPK,C.ID,D.ID -- END BALANCE
                            ) A
                            left join Account B on A.AccountPK = B.AccountPK and B.Status = 2
                            where Groups = 0
                            Group by B.ID,B.Name,A.Instrument,A.Department


		  
                            insert into #TBMTD(ID,Name,InstrumentID,DepartmentID,Balance)
                            select E.ID,E.Name,isnull(D.ID,''),isnull(C.ID,''),sum(BaseDebit-BaseCredit) EndBalance from journaldetail A
                            left join journal B on A.JournalPK = B.JournalPK
                            left join Department C on A.DepartmentPK = C.DepartmentPK and C.Status = 2
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                            left join Account E on A.AccountPK = E.AccountPK and E.Status = 2
                            where B.Status = 2 and B.posted = 1 and B.Reversed = 0 and valuedate <= @ValueDateTo and PeriodPK = @PeriodPK and E.Groups = 0
                            Group by E.ID,E.Name,D.ID,C.ID


                            DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
                            @query  AS NVARCHAR(MAX)

                            select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(bulan) +',0) ' + QUOTENAME(bulan) 
                            from (SELECT DISTINCT bulan FROM #TempTBMonthly) A
                            order by A.bulan
                            FOR XML PATH(''), TYPE
                            ).value('.', 'NVARCHAR(MAX)') 
                            ,1,1,'')

                            select @cols = STUFF((SELECT distinct ',' + QUOTENAME(bulan) 
                            from #TempTBMonthly
				
                            FOR XML PATH(''), TYPE
                            ).value('.', 'NVARCHAR(MAX)') 
                            ,1,1,'')

                            set @query = 'SELECT A.*,B.Balance MTD,' + @colsForQuery + ' from #TB A 
                            left join #TBMTD B on A.ID = B.ID and A.Name = B.Name and A.InstrumentID = B.InstrumentID and A.DepartmentID = B.DepartmentID 
                            left join (SELECT ID,Name,InstrumentID,DepartmentID,' + @colsForQuery + ' from 
                            (
                            SELECT ID,Name,isnull(InstrumentID,0) InstrumentID,isnull(DepartmentID,0) DepartmentID,Bulan,Balance FROM #TempTBMonthly 
                            ) x
                            pivot 
                            (
                            SUM(Balance)
                            for Bulan in (' + @cols + ')
                            ) p 
                            ) C on A.ID = C.ID and A.Name = C.Name and A.InstrumentID = C.InstrumentID and A.DepartmentID = C.DepartmentID
                            '
                            exec(@query)	

                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {

                                    string filePath = Tools.ReportsPath + "LapKeu_MAM" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsPath + "TemplateLK_MAM.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets["Trial Balance"];
                                        worksheet.Cells[2, 2].Value = Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy"); ;
                                        worksheet.Cells[3, 2].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("dd/MMM/yyyy"); ;

                                        int _row = 0;
                                        int ColExcelFinal = 1;
                                        int GlobRow = 5;
                                        string _month = "";

                                        while (dr0.Read())
                                        {
                                            _row = Convert.ToInt32(dr0["Row"]) + 4;
                                            worksheet.Cells[_row, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[_row, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[_row, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[_row, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[_row, 1].Value = Convert.ToString(dr0["ID"]);
                                            worksheet.Cells[_row, 2].Value = Convert.ToString(dr0["Name"]);
                                            worksheet.Cells[_row, 3].Value = Convert.ToString(dr0["InstrumentID"]);
                                            worksheet.Cells[_row, 4].Value = Convert.ToString(dr0["DepartmentID"]);
                                            worksheet.Cells[_row, 5].Value = Convert.ToDecimal(dr0["PreviousBaseBalance"]);
                                            worksheet.Cells[_row, 6].Value = Convert.ToDecimal(dr0["BaseDebitMutasi"]);
                                            worksheet.Cells[_row, 7].Value = Convert.ToDecimal(dr0["BaseCreditMutasi"]);
                                            worksheet.Cells[_row, 8].Value = Convert.ToDecimal(dr0["CurrentBaseBalance"]);



                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                if (dr0.GetName(inc1).ToString() == "MTD")
                                                {
                                                    _month = "MTD";
                                                    ColExcelFinal = 11;

                                                }

                                                if (dr0.GetName(inc1).ToString() == "1")
                                                {
                                                    _month = "JAN";
                                                    ColExcelFinal = 12;

                                                }
                                                if (dr0.GetName(inc1).ToString() == "2")
                                                {
                                                    _month = "FEB";
                                                    ColExcelFinal = 13;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "3")
                                                {
                                                    _month = "MAR";
                                                    ColExcelFinal = 14;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "4")
                                                {
                                                    _month = "APR";
                                                    ColExcelFinal = 15;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "5")
                                                {
                                                    _month = "MAY";
                                                    ColExcelFinal = 16;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "6")
                                                {
                                                    _month = "JUN";
                                                    ColExcelFinal = 17;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "7")
                                                {
                                                    _month = "JUL";
                                                    ColExcelFinal = 18;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "8")
                                                {
                                                    _month = "AUG";
                                                    ColExcelFinal = 19;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "9")
                                                {
                                                    _month = "SEP";
                                                    ColExcelFinal = 20;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "10")
                                                {
                                                    _month = "OCT";
                                                    ColExcelFinal = 21;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "11")
                                                {
                                                    _month = "NOV";
                                                    ColExcelFinal = 22;
                                                }
                                                if (dr0.GetName(inc1).ToString() == "12")
                                                {
                                                    _month = "DEC";
                                                    ColExcelFinal = 23;
                                                }
                                                worksheet.Cells[4, ColExcelFinal].Value = _month;
                                                worksheet.Cells[GlobRow, ColExcelFinal].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[GlobRow, ColExcelFinal].Value = dr0.GetValue(inc1);

                                            }
                                            GlobRow++;


                                        }
                                        package.Save();
                                        return true;
                                    }

                                }
                            }

                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Account Activity
            else if (_accountingRpt.ReportName.Equals("Account Activity"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status <> 3 ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status <> 3  ";
                            }
                            cmd.CommandText = @"

Declare @PeriodPK int
Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2


DECLARE @AccountRpt TABLE
(
AccountPK int
)

INSERT INTO @AccountRpt
    ( AccountPK )
SELECT DISTINCT B.AccountPK 
FROM journal A  
LEFT join journalDetail B on A.JournalPK = B.JournalPK   
Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
and A.PeriodPK = @PeriodPK 


DECLARE @AccountBalance TABLE
(
AccountPK INT,
StartBalance NUMERIC(22,4)
)

INSERT INTO @AccountBalance
    ( AccountPK, StartBalance )
SELECT AccountPK,[dbo].[FGetStartAccountBalance](@ValueDateFrom,AccountPK) FROM @AccountRpt

select C.Type AccountType,A.JournalPK,J.CashierID,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
B.BaseDebit,B.BaseCredit,isnull(K.StartBalance,0) StartBalance ,    
case when A.Reference = '' or A.Reference is null then 0 else cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) end RefNo     
from journal A    
left join journalDetail B on A.JournalPK = B.JournalPK    
left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)    
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in (1,2)    
left join Office E on B.OfficePK = E.OfficePK and E.status in (1,2)    
left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in (1,2)    
left join Agent G on B.AgentPK = G.AgentPK and G.status in (1,2)    
left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in (1,2)    
left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
left join (
Select distinct CashierPK,CashierID from cashier where ValueDate between @ValueDateFrom and @ValueDateTo
)J on A.TrxNo = J.CashierPK 
LEFT JOIN @AccountBalance K ON B.AccountPK  = K.AccountPK 
Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
and A.PeriodPK = @PeriodPK
                             " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            //cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            //cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            //cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            //cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            //cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            //cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountActivity" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccountActivity" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = dr0["RefNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.CashierID = dr0["CashierID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CashierID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByAccountID =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByAccountID)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "BEG BALANCE :";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "REF";
                                            worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 5].Value = "DEPT";
                                            worksheet.Cells[incRowExcel, 6].Value = "INST";
                                            worksheet.Cells[incRowExcel, 7].Value = "CONSIGNEE ID";
                                            worksheet.Cells[incRowExcel, 8].Value = "CASHIER ID";
                                            worksheet.Cells[incRowExcel, 9].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 10].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 11].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":K" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }

                                            _range = "A" + incRowExcel + ":K" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":K" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.ConsigneeID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CashierID;


                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.BaseCredit;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Formula = "K" + _rowEndBalance + "+I" + incRowExcel + "-J" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Formula = "K" + _rowEndBalance + "-I" + incRowExcel + "+J" + incRowExcel;
                                                }
                                                //worksheet.Cells[incRowExcel, 11].Calculate();
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":K" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }
                                                _no++;


                                            }


                                            //incRowExcel = incRowExcel - 1;
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                            //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 2].Value = ")";
                                            //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                            //worksheet.Cells[incRowExcel, 6].Value = ")";
                                            //worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                            worksheet.Cells["K" + _startRowDetail + ":K" + _rowEndBalance].Calculate();
                                        }
                                        string _rangeDetail = "A:K";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 13];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;





                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion


            #region Account Activity Plain
            else if (_accountingRpt.ReportName.Equals("Account Activity Plain"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status <> 3 ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status <> 3  ";
                            }


                            cmd.CommandText = @"
                            Declare @PeriodPK int
Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

select C.Type AccountType,J.CashierID,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
B.BaseDebit,B.BaseCredit,[dbo].[FGetStartAccountBalance](@ValueDateFrom,B.AccountPK) StartBalance ,    
case when A.Reference = '' or A.Reference is null then 0 else cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) end RefNo     
from journal A    
left join journalDetail B on A.JournalPK = B.JournalPK and B.status in (1,2)    
left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)    
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in (1,2)    
left join Office E on B.OfficePK = E.OfficePK and E.status in (1,2)    
left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in (1,2)    
left join Agent G on B.AgentPK = G.AgentPK and G.status in (1,2)    
left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in (1,2)    
left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in (1,2)    
left join (
	Select distinct CashierID,Reference from cashier where ValueDate between @ValueDateFrom and @ValueDateTo
)J on A.Reference = J.Reference
Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
and A.PeriodPK = @PeriodPK
                            " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountActivityPlain" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccountActivityPlain" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity Plain");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {

                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.CashierID = dr0["CashierID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CashierID"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                         from r in rList
                                         orderby r.AccountID, r.ValueDate ascending
                                         group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance } into rGroup
                                         select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 9].Value = _accountingRpt.ValueDateFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 9].Value = _accountingRpt.ValueDateTo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "BEG BALANCE";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "CASHIER ID";
                                            worksheet.Cells[incRowExcel, 4].Value = "REF";
                                            worksheet.Cells[incRowExcel, 5].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 6].Value = "CONSIGNEE ID";
                                            worksheet.Cells[incRowExcel, 7].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 8].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 9].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":I" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = "JOURNAL NO";
                                            //worksheet.Cells[incRowExcel, 3].Value = "DESCRIPTION";
                                            //worksheet.Cells[incRowExcel, 6].Value = "OFF";
                                            //worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 8].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 9].Value = "CONSG";
                                            //worksheet.Cells[incRowExcel, 10].Value = "Instrument";
                                            //worksheet.Cells[incRowExcel, 11].Value = "BALANCE";

                                            _range = "A" + incRowExcel + ":I" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":I" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.CashierID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.ConsigneeID;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseCredit;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Formula = "I" + _rowEndBalance + "+G" + incRowExcel + "-H" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Formula = "I" + _rowEndBalance + "-G" + incRowExcel + "+H" + incRowExcel;
                                                }
                                                worksheet.Cells[incRowExcel, 9].Calculate();

                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":I" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.journalPK;
                                                //worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.DetailDescription;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.OfficeID;

                                                //worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentID;
                                                //worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 9].Value = rsDetail.ConsigneeID;

                                                _endRowDetail = incRowExcel;
                                                _no++;


                                            }
                                            //incRowExcel = incRowExcel - 1;
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                            //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 2].Value = ")";
                                            //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                            //worksheet.Cells[incRowExcel, 6].Value = ")";
                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:I";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY PLAIN";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Account Activity By INSTRUMENT
            else if (_accountingRpt.ReportName.Equals("Account Activity By INSTRUMENT"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramInstrument = "";
                            string _paramAccount = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0  ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1  ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0  ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4)  ";
                            }
                            cmd.CommandText = @"
                            Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            -------------------------------------------

                            DECLARE @AccountRpt TABLE
                            (
	                            AccountPK int,
	                            InstrumentPK int
                            )

                            INSERT INTO @AccountRpt
                                    ( AccountPK, InstrumentPK )
                            SELECT DISTINCT B.AccountPK, B.InstrumentPK 
                            FROM journal A  
                            LEFT join journalDetail B on A.JournalPK = B.JournalPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                                and A.PeriodPK = @PeriodPK 


                            DECLARE @AccountBalance TABLE
                            (
	                            AccountPK INT,InstrumentPK INT,
	                            StartBalance NUMERIC(22,4)
                            )

                            INSERT INTO @AccountBalance
                                    ( AccountPK,InstrumentPK, StartBalance )
                            SELECT AccountPK,InstrumentPK,[dbo].[FGetStartAccountBalanceByInstrumentPK](@ValueDateFrom,AccountPK,InstrumentPK) FROM @AccountRpt
                            -------------------------------------------


                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName, 
                            D.ID CurrencyID,isnull(E.ID,'Belum Dialokasi') AS OfficeID,isnull(F.ID,'Belum Dialokasi') AS DepartmentID,isnull(G.ID,'Belum Dialokasi') AS AgentID,
                            isnull(H.ID,'Belum Dialokasi') AS ConsigneeID, 
                            isnull(I.ID,'Belum Dialokasi') AS InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate, 
                            B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance 
                            from journal A 
                            left join journalDetail B on A.JournalPK = B.JournalPK 
                            left join Account C on B.AccountPK = C.AccountPK and C.status in(1,2)
                            left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in(1,2)
                            left join Office E on B.OfficePK = E.OfficePK and E.status in(1,2) 
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in(1,2)
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in(1,2)
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in(1,2)
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in(1,2)
                            LEFT JOIN @AccountBalance J ON B.AccountPK  = J.AccountPK and B.InstrumentPK = J.InstrumentPK
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo  and A.PeriodPK = @PeriodPK  " +
                            _status + _paramAccount + _paramInstrument + " order by I.ID asc";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountActivityByInstrument" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccountActivityByInstrument" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity By Instrument");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.ValueDate ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance, r.InstrumentID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "INST : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentID;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "REF";
                                            worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }
                                            //incRowExcel++;

                                            _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel + ")";
                                                    //worksheet.Cells[incRowExcel, 7].Calculate();
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel + ")";
                                                    //worksheet.Cells[incRowExcel, 7].Calculate();
                                                }
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }


                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }

                                            worksheet.Cells["G" + _startRowDetail + ":G" + _rowEndBalance].Calculate();

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(8).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY BY INSTRUMENT";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion



            #region Financial Statement PL Cabang
            else if (_accountingRpt.ReportName.Equals("Financial Statement PL Cabang"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"  
                            
                            
DECLARE @ValuedateFrom DATETIME
SET @ValueDateFrom = DATEADD(yy, DATEDIFF(yy, 0, @ValueDateTo), 0)

DECLARE @PeriodPK int
Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

Create table #TBMTD  (
ID nvarchar(100),
Name nvarchar(500),
DepartmentPK int,
DepartmentID nvarchar(500),
Balance numeric(22,4)
)


Declare @DateCounter datetime
Declare @DateCounterBS DATETIME

set @DateCounter  = DATEADD(month, DATEDIFF(month, 0, @ValueDateTo), 0)
set @DateCounterBS = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@DateCounter)+1,0))


insert into #TBMTD(ID,Name,DepartmentPK,DepartmentID,Balance)
select E.ID,E.Name,isnull(C.DepartmentPK,0) DepartmentPK,isnull(C.ID,'NO DEPT') DepartmentID,case when E.ID not in ('402.01.01.000','402.02.01.000') then abs(sum(BaseDebit-BaseCredit)) else sum(BaseDebit-BaseCredit) end EndBalance from journaldetail A
left join journal B on A.JournalPK = B.JournalPK
left join Department C on A.DepartmentPK = C.DepartmentPK and C.Status = 2
left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
left join Account E on A.AccountPK = E.AccountPK and E.Status = 2
--where valuedate between @DateCounter and @DateCounterBS and PeriodPK = @PeriodPK and B.Status = 2 and B.posted = 1 and B.Reversed = 0 
where B.Status = 2 and B.posted = 1 and B.Reversed = 0 and valuedate between @DateCounter and @DateCounterBS and PeriodPK = @PeriodPK
and E.Groups = 0 and E.Type > 2 
--and E.ID not in ('402.01.01.000','402.02.02.000','402.02.01.000')
group by  E.ID,E.Name,C.DepartmentPK,C.ID,D.ID




DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
@query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(DepartmentPK) +',0)  as ' + QUOTENAME(DepartmentID) 
from (SELECT DISTINCT DepartmentPK,DepartmentID FROM #TBMTD) A
order by A.DepartmentPK
FOR XML PATH(''), TYPE
).value('.', 'NVARCHAR(MAX)') 
,1,1,'')



select @cols = STUFF((SELECT distinct ',' + QUOTENAME(DepartmentPK) 
from #TBMTD
				
FOR XML PATH(''), TYPE
).value('.', 'NVARCHAR(MAX)') 
,1,1,'')



set @query = 'SELECT ID,Name,' + @colsForQuery + ' from 
(
SELECT ID,Name,isnull(DepartmentPK,0) DepartmentPK,Balance FROM #TBMTD 
) x
pivot 
(
SUM(Balance)
for DepartmentPK in (' + @cols + ')
) p 
order by ID
'
exec(@query)
	

                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FinancialStatementPLCabang" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "Template_PLCabang.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        ExcelWorksheet worksheet = package.Workbook.Worksheets["Map Radsoft"];



                                        int incRowExcel = 2;
                                        int _startRowDetail = incRowExcel;
                                        int _rowCtrp = 0;
                                        int _endRowDetail = 0;
                                        int _endColDetail = 0;
                                        while (dr0.Read())
                                        {
                                            int incColExcel = 1;
                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {

                                                worksheet.Cells[1, incColExcel].Value = dr0.GetName(inc1);
                                                worksheet.Cells[1, incColExcel].Style.Font.Bold = true;
                                                worksheet.Cells[1, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Font.Size = Tools.DefaultReportFontSize();



                                                if (incColExcel == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = (dr0.GetValue(inc1));
                                                    worksheet.Column(incColExcel).Width = 15;
                                                }
                                                else if (incColExcel >= 3)
                                                {
                                                    _rowCtrp = incColExcel;
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                    worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Column(incColExcel).Width = 20;



                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                }


                                                incColExcel++;

                                            }
                                            _endColDetail = incColExcel - 1;
                                            _endRowDetail = incRowExcel - 1;


                                            incRowExcel++;


                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A1:Z1"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.Cells["K2:Z2"].AutoFitColumns(); // CEK DARI ENTRY ID SAMPE LAST UPDATE
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 Financial Statement PL Cabang";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        return true;
                                    }

                                }
                            }

                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            //MNC

            #region Laporan Jamuan
            else if (_accountingRpt.ReportName.Equals("Laporan Jamuan"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText =
                              @"Declare @PeriodPK int
                                Select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

                                select ValueDate,ClientName,C.Name Consignee,D.Name PaidTo,E.ID CabangMAM,F.BankAccountNo NoRek,A.Description Keterangan,BaseCredit Nominal from Cashier A
                                left join Consignee C on A.ConsigneePK = C.ConsigneePK and C.Status = 2
                                left join Agent D on A.AgentPK = D.AgentPK and D.Status = 2
                                left join Department E on A.DepartmentPK = E.DepartmentPK and E.Status = 2
                                left join CashRef F on A.CreditCashRefPK = F.CashRefPK and F.Status = 2
                                where A.Posted = 1 and A.Revised = 0 and ValueDate between @DateFrom and @DateTo and DebitAccountPK = 171 and A.Type = 'CP' and PeriodPK = @PeriodPK ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanJamuan" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanJamuan" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Laporan Jamuan");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanJamuan> rList = new List<LaporanJamuan>();
                                        while (dr0.Read())
                                        {
                                            LaporanJamuan rSingle = new LaporanJamuan();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Consignee = Convert.ToString(dr0["Consignee"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.Paidto = Convert.ToString(dr0["Paidto"]);
                                            rSingle.CabangMAM = Convert.ToString(dr0["CabangMAM"]);
                                            rSingle.NoRek = Convert.ToString(dr0["NoRek"]);
                                            rSingle.Keterangan = Convert.ToString(dr0["Keterangan"]);
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Nominal"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.ClientName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        //worksheet.Cells[incRowExcel, 1].Value = "Kartu Advance";
                                        //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        incRowExcel = incRowExcel + 2;
                                        int _endRowDetail = 0;
                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ClientName;
                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Value = "Tgl.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "Consignee";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Paid to";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "Cabang MAM";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "No Rek";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "Keterangan";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 7].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;


                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;


                                            //area header

                                            int _startRowDetail = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.ValueDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Consignee;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Paidto;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.CabangMAM;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NoRek;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Keterangan;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Nominal;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }

                                            worksheet.Cells["A" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            incRowExcel = incRowExcel + 4;

                                        }

                                        //-------------------------// 1

                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {


                                                cmd1.CommandText =

                                                 @"
                                                Declare @PeriodPK int
                                                Select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

                                                select ValueDate,ClientName,C.Name Consignee,D.Name PaidTo,E.ID CabangMAM,F.BankAccountNo NoRek,A.Description Keterangan,BaseCredit Nominal from Cashier A
                                                left join Consignee C on A.ConsigneePK = C.ConsigneePK and C.Status = 2
                                                left join Agent D on A.AgentPK = D.AgentPK and D.Status = 2
                                                left join Department E on A.DepartmentPK = E.DepartmentPK and E.Status = 2
                                                left join CashRef F on A.CreditCashRefPK = F.CashRefPK and F.Status = 2
                                                where A.Posted = 1 and A.Revised = 0 and ValueDate between @DateFrom and @DateTo and DebitAccountPK = 171 and A.Type = 'CP' and PeriodPK = @PeriodPK
                                                ";


                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<LaporanJamuan> rList1 = new List<LaporanJamuan>();
                                                            while (dr1.Read())
                                                            {
                                                                LaporanJamuan rSingle1 = new LaporanJamuan();
                                                                rSingle1.NamaNasabah = Convert.ToString(dr1["ClientName"]);
                                                                rSingle1.Branch = Convert.ToString(dr1["CabangMAM"]);
                                                                rSingle1.NamaSales = Convert.ToString(dr1["Consignee"]);
                                                                rSingle1.NominalVoucherYangDiajukan = Convert.ToDecimal(dr1["Nominal"]);
                                                                rSingle1.Keterangan = Convert.ToString(dr1["Keterangan"]);
                                                                rSingle1.ValueDate = Convert.ToDateTime(dr1["ValueDate"]);
                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r in rList1
                                                                group r by new { } into rGroup
                                                                select rGroup;

                                                            //int incRowExcel = 1;
                                                            incRowExcel = incRowExcel + 2;
                                                            worksheet.Cells[incRowExcel, 1].Value = "REKAP JAMUAN PER PROGRAM";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                            incRowExcel++;
                                                            int _startRowDetail1 = incRowExcel;
                                                            int _endRowDetail1 = 0;
                                                            int _no = 1;
                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {
                                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 2].Value = "NAMA NASABAH";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 3].Value = "BRANCH";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 4].Value = "NAMA SALES";
                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 5].Value = "NOMINAL VOUCHER Yang diajukan";
                                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 6].Value = "KETERANGAN";
                                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Bold = true;

                                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                incRowExcel++;


                                                                //area header

                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {

                                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail1.NamaNasabah;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Branch;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail1.NamaSales;
                                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.NominalVoucherYangDiajukan;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Keterangan;
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                                    _endRowDetail1 = incRowExcel;
                                                                    _no++;
                                                                    incRowExcel++;

                                                                }
                                                                worksheet.Cells["A" + _startRowDetail1 + ":F" + _endRowDetail1].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + _startRowDetail1 + ":F" + _endRowDetail1].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + _startRowDetail1 + ":F" + _endRowDetail1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                worksheet.Cells["A" + _startRowDetail1 + ":F" + _endRowDetail1].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail1 + ":E" + _endRowDetail1 + ")";
                                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                                worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;


                                                            }

                                                            incRowExcel++;

                                                        }
                                                    }
                                                }

                                            }

                                        }

                                        incRowExcel++;

                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        string _rangeA = "A:K" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 7];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 60;
                                        worksheet.Column(7).Width = 30;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            else
            {
                return false;
            }
        }

        public string CashierReference_GenerateNewReference(string _type, int _periodPK, DateTime _valueDate)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        cmd.CommandText =
                      @" 

                     Declare @LastNo int   
                     Declare @Reference nvarchar(20) 
      
                     if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK    
        
                     and substring(right(reference,4),1,2) = month(@ValueDate))       
    
                     BEGIN       
    
                     Select @LastNo = max(No) +  1 From CashierReference where Type = @type And PeriodPK = @periodPK and   
        
                     substring(right(reference,4),1,2) = month(@ValueDate)       
        
                     Set @Reference =  Cast(@LastNo as nvarchar(10)) + '/'  + Case when @type = 'CP' then 'OUT' else    
        
                     Case When @type = 'AR' then 'AR' else Case when @type = 'AP' then 'AP' else    
        
                     case when @type = 'ADJ' then 'ADJ' Else Case when @Type = 'CA' then 'CA' Else Case when @Type = 'INV' then 'INV' else 'IN' END END END END END END  
        
                     + '/' +  REPLACE(RIGHT(CONVERT(VARCHAR(8), @ValueDate, 3), 5) ,'/','')       
    
                     Update CashierReference Set Reference = @Reference, No = @LastNo where Type = @type And PeriodPK = @periodPK    
        
                     and substring(right(reference,4),1,2) = month(@ValueDate)    
    
                    END    
    
                    ELSE BEGIN       
    
                     Set @Reference = '1/' +  Case when @type = 'CP' then 'OUT' else    
        
                      Case When @type = 'AR' then 'AR' else Case when @type = 'AP' then 'AP' else    
       
                      case when @type = 'ADJ' then 'ADJ' Else Case when @Type = 'CA' then 'CA' Else Case when @Type = 'INV' then 'INV' else 'IN' END END END END END END + '/' +  REPLACE(RIGHT(CONVERT(VARCHAR(8), @ValueDate, 3), 5) ,'/','')    
    
                      Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No)    
        
                      Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,@type,@Reference,1 from CashierReference   
    
                     END       
    
                     Select isnull(@Reference,'')   LastReference ";


                        cmd.Parameters.AddWithValue("@type", _type);
                        cmd.Parameters.AddWithValue("@periodPK", _periodPK);
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["LastReference"]);
                            }
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string JournalImport(string _userID, string _fileSource)
        {
            string _msg = "";
            try
            {
                DateTime _now = DateTime.Now;
                // delete data yang lama
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "truncate table JournalImportTemp";
                        cmd.ExecuteNonQuery();
                    }
                }

                // import data ke temp dulu
                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.JournalImportTemp";
                    bulkCopy.WriteToServer(CreateDataTableFromJournalExcelFile(_fileSource));
                }

                // logic kalo import success
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = @"Declare @Msg nvarchar(1000) Declare @Balance numeric(19,0)  Declare @No	nvarchar(1000)  
                    Declare @TempTableBalance Table (tmpNo int, tmpBalance numeric(19,4))  
                    Declare @TempTableAccount Table (tmpAccountID nvarchar(100))  
                    Declare @TempTableCurrency Table (tmpCurrencyID nvarchar(100))  
                    Declare @TempTableOffice Table (tmpOfficeID nvarchar(100))  
                    Declare @TempTableDepartment Table (tmpDepartmentID nvarchar(100))  
                    Declare @TempTableAgent Table (tmpAgentID nvarchar(100))  
                    Declare @TempTableCounterPart Table (tmpCounterPartID nvarchar(100))  
                    Declare @TempTableInstrument Table (tmpInstrumentID nvarchar(100))  
                    Declare @TempTableConsignee Table (tmpConsigneeID nvarchar(100))   

                    set @No = ''   

                    INSERT into @TempTableBalance  
                    Select A,Sum(isnull(N,0)*isnull(P,0)) - Sum(isnull(O,0)*isnull(P,0)) Balance  from JournalImportTemp   
                    Group By A having Sum(isnull(N,0)*isnull(P,0)) - Sum(isnull(O,0)*isnull(P,0)) <> 0  

                    INSERT into @TempTableAccount  
                    Select C From JournalImportTemp Where (Len(B) = 0 or B is null) and C not in  (  
                    Select ID from Account where status = 2 and Groups = 0 )  

                    Insert into @TempTableCurrency Select E From JournalImportTemp  
                    Where (Len(B) = 0 or B is null) and (Len(E) > 0 and E is Not null  and E not in ( Select ID from Currency where status = 2  ))  

                    Insert into @TempTableOffice  
                    Select F From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(F) > 0 and F is Not null and F not in (  
                    Select ID from Office where status = 2  ))  

                    INSERT into @TempTableDepartment Select G From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(G) > 0 and G is Not null and G not in  
                    (Select ID from Department where status = 2 ))  

                    INSERT into @TempTableAgent Select H From JournalImportTemp  Where (Len(B) = 0 or B is null) and (Len(H) > 0 and H is Not null and H not in  
                    (Select ID from Agent where status = 2 ))  

                    INSERT into @TempTableCounterPart Select I From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(I) > 0 and I is Not null and I not in  
                    (Select ID from CounterPart where status = 2 ))  

                    INSERT into @TempTableInstrument Select J From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(J) > 0 and J is Not null and J not in  
                    (Select ID from Instrument where status = 2 ))  

                    INSERT into @TempTableConsignee Select K From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(K) > 0 and K is Not null and K not in  
                    (Select ID from Consignee where status = 2 ))  
 
                    IF Exists(Select * from @TempTableBalance)BEGIN   
                    Select @No = @No +  Cast(tmpNo as Nvarchar(10)) + ',' from @TempTableBalance  
                    set @Msg = 'Debit Credit Not Balance in No : ' + @No  

                    INSERT into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID  Return END  
                     ELSE IF EXISTS(Select * From @TempTableAccount ) BEGIN  
                     Select @No = @No + tmpAccountID + ' , ' from @TempTableAccount set @Msg = 'Please Check This Account : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID  RETURN END  
                     ELSE IF Exists( Select * From @TempTableCurrency  ) BEGIN Select @No = @No + tmpCurrencyID +  ' , ' from @TempTableCurrency set @Msg = 'Please Check This Currency : ' + @No   Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   Return END  
                     ELSE IF Exists( Select * From @TempTableOffice   ) BEGIN Select @No = @No + tmpOfficeID  + ' , ' from @TempTableOffice  set @Msg = 'Please Check This Office : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableDepartment ) BEGIN Select @No = @No + tmpDepartmentID + ' , ' from @TempTableDepartment  set @Msg = 'Please Check This Department : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableAgent ) BEGIN Select @No = @No + tmpAgentID  + ' , ' from @TempTableAgent set @Msg = 'Please Check This Agent : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableCounterPart  ) BEGIN Select @No = @No + tmpCounterPartID +  ' , ' from @TempTableCounterPart set @Msg = 'Please Check This CounterPart : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableInstrument  ) BEGIN Select @No = @No + tmpInstrumentID +  ' , ' from @TempTableInstrument set @Msg = 'Please Check This Instrument : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableConsignee  ) BEGIN Select @No = @No + tmpConsigneeID  + ' , ' from @TempTableConsignee set @Msg = 'Please Check This Consignee : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE BEGIN  
                     set @Msg = 'Debit Credit Balance'  
                     Declare @CountHeader nvarchar(10)  
                     Declare @CountDetail nvarchar(10)  
                     Declare @TotalRow nvarchar(10)  
                     Select @TotalRow = Max(PK) From JournalImportTemp  
                     Select @CountHeader = Count(PK) From JournalImportTemp  
                     Where A is not null and isDate(B) = 1 and dbo.IsInteger(A) = 1  
                     Select @CountDetail = Count(PK) From JournalImportTemp Where len(B)= 0 or B is null  
                     Set @Msg = @Msg + ' <br> Total Row : ' + @TotalRow + ' <br> Total Header Voucher : ' + @CountHeader + ' <br> Total Detail : ' + @CountDetail  
                     END  
                     declare @MaxJournalPK int  
                     select @MaxJournalPK = max(JournalPK) from Journal set @MaxJournalPK = isnull(@MaxJournalPK,0)  
                     declare @Bridge table  
                     (  
                     JournalImportPK int,  
                     JournalPK int  
                     )  
                     insert into @Bridge  
                     select A, row_number() over (order by A) + @MaxJournalPK from ( Select distinct A from JournalImportTemp ) a  
                     INSERT INTO [dbo].[Journal]  
                     ([JournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Reference],[Type],[Description],[EntryUsersID],[EntryTime],[LastUpdate])  
                     select b.JournalPK, 1, 1, isnull(C,''), c.PeriodPK,B,  Case when len(D) > 0 or D is not null then D else '' end,2,isnull(C,''),@UserID,@TimeNow,@TimeNow from JournalImportTemp t  
                     left join @Bridge b on t.A = b.JournalImportPK left join Period c on t.b between c.datefrom and c.dateto and c.status = 2 where isdate(t.b) = 1  
                     INSERT INTO [dbo].[JournalDetail]  
                     ([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK],[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],  
                     [DetailDescription],[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUsersID])  
                     select B.JournalPK,row_number() over (order by A),1,2,Ac.AccountPK, isnull(Ac.CurrencyPK,1),isnull(O.OfficePK,1),isnull(De.DepartmentPK,0),isnull(Ag.AgentPK,0),isnull(Co.CounterpartPK,0),isnull(Ins.InstrumentPK,0), isnull(Con.ConsigneePK,0),T.L,T.M,Case when N is null or N = 0 then 'C' else 'D' end, case when N is Null or N = 0  then isnull(O,0) else isnull(N,0) End,  
                     case when N is Null or N = 0 then 0 else N End,case when O is Null or O = 0 then 0 else O end,T.P, case when N is Null or N = 0 then 0 else N * P end,case when O is Null Or O = 0 then 0 else O * P end,@UserID  
                     from JournalImportTemp t  
                     left join @Bridge b on T.A = b.JournalImportPK left join Account Ac on T.C = Ac.ID and Ac.Status = 2 left join Currency Cu on T.E = Cu.ID and Cu.status = 2 left join Office O on T.F = O.ID and O.status = 2  
                     left join Department De on T.G = De.ID  and De.Status = 2 left join Agent Ag on T.H = Ag.ID and Ag.Status = 2 left join Counterpart Co on T.I = Co.ID And Co.Status = 2 left join Instrument Ins on T.J = Ins.ID and Ins.Status = 2  
                     left join Consignee Con on T.K = Con.ID and Con.status = 2 where isdate(t.b) <> 1  
                     Declare @CurJournalPK int  
                     Declare @CurReference nvarchar(100)  
                     Declare @CurValueDate datetime  
                     Declare A Cursor For  
                     select JournalPK from @Bridge  
                     Open A  
                     Fetch Next From A  
                     Into @CurJournalPK  
                     WHILE @@FETCH_STATUS = 0  
                     BEGIN  
                     if Exists ( Select * from journal Where JournalPK = @CurJournalPK and len(Reference) = 0 or reference is null )  
                     Begin  
                     select @CurValueDate = valueDate from Journal where JournalPK = @CurJournalPK  
                     exec getJournalReference @CurValueDate,'GJ',@CurReference out  
                     Update journal Set Reference = @CurReference where JournalPK = @CurJournalPK  
                     end  
                     FETCH NEXT FROM A INTO @CurJournalPK  
                     END  
                     Close A  
                     Deallocate A  
                     Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,1,@TimeNow,@UserID  ";
                        cmd.Parameters.AddWithValue("@Userid", _userID);
                        cmd.Parameters.AddWithValue("@TimeNow", _now);
                        cmd.ExecuteNonQuery();

                    }
                }
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "Select Description From ImportLogEvent where ImportLogEventPK = (select Max(ImportLogEventPK) From ImportLogEvent where UserID = @UserID)";
                        cmd.Parameters.AddWithValue("@Userid", _userID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                _msg = Convert.ToString(dr["Description"]);
                            }
                        }
                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }
        private DataTable CreateDataTableFromJournalExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Int32");
                    dc.ColumnName = "AutoNo";
                    dc.Unique = false;
                    dc.AutoIncrement = true;
                    dc.AutoIncrementSeed = 1;
                    dc.AutoIncrementStep = 1;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Int32");
                    dc.ColumnName = "NID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Date";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Description";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Reference";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CurrencyID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "OfficeID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "DepartmentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "AgentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CounterpartID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Consigne";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "DetailDescription";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "DocRef";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Debit";
                    dc.Unique = false;
                    dt.Columns.Add(dc);


                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Credit";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Rate";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    using (OleDbConnection odConnection = new OleDbConnection(Tools.ConStringExcel2007(_path)))
                    {
                        odConnection.Open();
                        using (OleDbCommand odCmd = odConnection.CreateCommand())
                        {
                            // _oldfilename = nama sheet yang ada di file excel yang diimport
                            odCmd.CommandText = "SELECT * FROM [Sheet1$]";
                            using (OleDbDataReader odRdr = odCmd.ExecuteReader())
                            {
                                // start counting from index = 1 --> skipping the header (index=0)
                                for (int i = 1; i <= 10; i++)
                                {
                                    odRdr.Read();
                                }
                                do
                                {
                                    dr = dt.NewRow();

                                    dr["NID"] = odRdr[0];
                                    dr["Date"] = odRdr[1];
                                    dr["Description"] = odRdr[2];
                                    dr["Reference"] = odRdr[3];
                                    dr["CurrencyID"] = odRdr[4];
                                    dr["OfficeID"] = odRdr[5];
                                    dr["DepartmentID"] = odRdr[6];
                                    dr["AgentID"] = odRdr[7];
                                    dr["CounterpartID"] = odRdr[8];
                                    dr["InstrumentID"] = odRdr[9];
                                    dr["Consigne"] = odRdr[10];
                                    dr["DetailDescription"] = odRdr[11];
                                    dr["DocRef"] = odRdr[12];
                                    dr["Debit"] = Tools.IsNumber(odRdr[13].ToString().Replace(",", "")) == true ? odRdr[13] : 0;
                                    dr["Credit"] = Tools.IsNumber(odRdr[14].ToString().Replace(",", "")) == true ? odRdr[14] : 0;
                                    dr["Rate"] = Tools.IsNumber(odRdr[15].ToString().Replace(",", "")) == true ? odRdr[15] : 0;


                                    if (dr["NID"].Equals(DBNull.Value) != true) { dt.Rows.Add(dr); }
                                } while (odRdr.Read());
                            }
                        }
                        odConnection.Close();
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }




        public string Generate_PortfolioRevaluation(DateTime _date, string _usersID)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"

                        Declare @InstrumentPK int 
Declare @LastVolume numeric(19,4) 
Declare @InstrumentTypePK int 
Declare @CadanganAccountPK int 
Declare @UnrealisedAccountPK int 
Declare @MarketValue Numeric(19,4) 
Declare @PortfolioValue Numeric(19,4) 
Declare @CadanganValue Numeric(19,4)  
Declare @MarginValue Numeric(19,4) 
Declare @Amount numeric(19,4) 
Declare @PrevMarketValue numeric(19,4) 
Declare @TrxAmount numeric(19,4) 
Declare @SellVolume numeric(19,4) 
Declare @SellAmount numeric(19,4) 
Declare @Sell int
Declare @Buy int
                        
create table #ReferenceTemp
(Reference nvarchar(50))

Declare @JourHeader int  
set @JourHeader = 0    
Declare @JournalPK int 
Declare @PeriodPK int 
Declare @Reference nvarchar(50)    
Select @PeriodPK = PeriodPK From Period Where DateFrom <= @Date and Dateto >= @Date and Status = 2  
Select @JournalPK = isnull(Max(JournalPK),0) from Journal    


insert into #ReferenceTemp (Reference)
exec getJournalReference @Date,'ADJ',@Reference out  
 
set @JournalPK = @JournalPK + 1   
INSERT INTO [Journal]  
([JournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate]  
,[TrxNo],[TrxName],[Reference],[Type],[Description],[Posted],[PostedBy]  
,[PostedTime],[EntryUsersID],[EntryTime]  
,[ApprovedUsersID],[ApprovedTime],[DBUserID],LastUpdate)      
SELECT @JournalPK,1,2,'Portfolio Revaluation',@PeriodPK, @Date
,0,'',@Reference,1,'Portfolio Revaluation',1,@UsersID
,@TimeNow,@UsersID,@TimeNow,@UsersID,@TimeNow,@UsersID,@TimeNow 

Declare @AutoNo int 
set @AutoNo = 0   
DECLARE A CURSOR FOR 
Select InstrumentPK,LastVolume ,InstrumentTypePK,Buy,Sell
from (
Select A.InstrumentPK,isnull(sum(A.BuyVolume) - sum(A.SellVolume),0) LastVolume ,A.InstrumentTypePK,sum(Buy) Buy, sum(Sell) Sell    
from (
select InstrumentPK,sum(Volume) BuyVolume,0 SellVolume,InstrumentTypePK,0 Buy,0 Sell from trxPortfolio 
where ValueDate < @Date and Posted = 1 and trxType = 1  and Revised = 0 and InstrumentTypePK <> 2
Group By InstrumentPK,InstrumentTypePK  
UNION ALL   
select InstrumentPK,sum(Volume) BuyVolume,0 SellVolume,InstrumentTypePK,1 Buy,0 Sell from trxPortfolio 
where ValueDate = @Date and Posted = 1 and trxType = 1  and Revised = 0 and InstrumentTypePK <> 2
Group By InstrumentPK,InstrumentTypePK  
UNION ALL 
select InstrumentPK,0 BuyVolume,sum(Volume) SellVolume,InstrumentTypePK,0 Buy,0 Sell from trxPortfolio 
where ValueDate < @Date and Posted = 1  and trxType = 2  and Revised = 0 and InstrumentTypePK <> 2
Group By InstrumentPK,InstrumentTypePK  
UNION ALL   
select InstrumentPK,0 BuyVolume,sum(Volume) SellVolume,InstrumentTypePK,0 Buy,1 Sell from trxPortfolio 
where ValueDate = @Date and Posted = 1  and trxType = 2  and Revised = 0 and InstrumentTypePK <> 2
Group By InstrumentPK,InstrumentTypePK  


-- BOND
UNION ALL
select InstrumentPK,sum(Volume) BuyVolume,0 SellVolume,InstrumentTypePK,0 Buy,0 Sell from trxPortfolio 
where SettledDate < @Date and Posted = 1 and trxType = 1  and Revised = 0 and InstrumentTypePK = 2
Group By InstrumentPK,InstrumentTypePK  
UNION ALL   
select InstrumentPK,sum(Volume) BuyVolume,0 SellVolume,InstrumentTypePK,1 Buy,0 Sell from trxPortfolio 
where dbo.fworkingday(SettledDate,1) = @Date and Posted = 1 and trxType = 1  and Revised = 0 and InstrumentTypePK = 2
Group By InstrumentPK,InstrumentTypePK  
UNION ALL 
select InstrumentPK,0 BuyVolume,sum(Volume) SellVolume,InstrumentTypePK,0 Buy,0 Sell from trxPortfolio 
where SettledDate < @Date and Posted = 1  and trxType = 2  and Revised = 0 and InstrumentTypePK = 2
Group By InstrumentPK,InstrumentTypePK  
UNION ALL   
select InstrumentPK,0 BuyVolume,sum(Volume) SellVolume,InstrumentTypePK,0 Buy,1 Sell from trxPortfolio 
where SettledDate = @Date and Posted = 1  and trxType = 2  and Revised = 0 and InstrumentTypePK = 2
Group By InstrumentPK,InstrumentTypePK  
UNION ALL   
select A.InstrumentPK,sum(Balance) BuyVolume,0 SellVolume,1 InstrumentTypePK,0 Buy,0 Sell from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
where Date = @Date and FundPK = 9999 
Group By A.InstrumentPK

)A 
Group By A.InstrumentPK,A.InstrumentTypePK
)B
where (LastVolume <> 0) or (LastVolume = 0 and Sell = 1)

OPEN A 
FETCH NEXT FROM A 
INTO @InstrumentPk,@LastVolume,@InstrumentTypePK,@Buy,@Sell  
WHILE @@FETCH_STATUS = 0  
BEGIN 
set @MarketValue = 0 
If @InstrumentTypePK in (1,2,4) 
BEGIN 
IF (@InstrumentTypePK = 1)
BEGIN
IF (@InstrumentPK in (378,1079)) --BMTR,MNCN
BEGIN
	Select @CadanganAccountPK = CadanganEquity, @UnrealisedAccountPK = 252  From AccountingSetup Where Status = 2
END
ELSE
BEGIN
	Select @CadanganAccountPK = CadanganEquity ,@UnrealisedAccountPK = UnrealisedEquity From AccountingSetup Where Status = 2
END
    

    IF (@Buy = 1) -- (LastPrice - PrevPrice) * VolumeYesterday
    BEGIN
	    set @MarketValue =  dbo.FGetLastVolumeAcc(dbo.Fworkingday(@Date,-1),@InstrumentPK)   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)            
	    set @PrevMarketValue = dbo.FGetLastVolumeAcc(dbo.Fworkingday(@Date,-1),@InstrumentPK) * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) 
	    select @Amount = @MarketValue - @PrevMarketValue  
    END
    ELSE
    BEGIN
        IF NOT EXISTS(select * from CorporateActionResult where FundPK = 9999 and Date = @Date and InstrumentPK = @InstrumentPK)
        BEGIN
            set @MarketValue =  dbo.FGetLastVolumeAcc(@Date,@InstrumentPK)   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)            
            set @PrevMarketValue = dbo.FGetLastVolumeAcc(@Date,@InstrumentPK) * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) 
            select @Amount = @MarketValue - @PrevMarketValue  
        END
        ELSE
        BEGIN
            set @MarketValue =  @LastVolume   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)            
            set @PrevMarketValue = dbo.FGetLastVolumeAcc(dbo.Fworkingday(@Date,-1),@InstrumentPK) * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) 
            select @Amount = @MarketValue - @PrevMarketValue  
        END
    END

END
ELSE IF (@InstrumentTypePK = 2)
BEGIN
Select @CadanganAccountPK = CadanganBond ,@UnrealisedAccountPK = UnrealisedBond From AccountingSetup 
Where Status = 2


    IF (@Buy = 1) -- (LastPrice - PrevPrice) * VolumeYesterday
    BEGIN
	    set @MarketValue =  dbo.FGetLastVolumeAcc(dbo.Fworkingday(@Date,-1),@InstrumentPK)   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)/100         
	    set @PrevMarketValue = dbo.FGetLastVolumeAcc(dbo.Fworkingday(@Date,-1),@InstrumentPK) * dbo.FGetLastAvgFromInvestment_Acc(@Date,@InstrumentPK)/100
	    select @Amount = @MarketValue - @PrevMarketValue  
    END
    ELSE
    BEGIN
	    set @MarketValue =  dbo.FGetLastVolumeAcc(@Date,@InstrumentPK)   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)/100            
	    set @PrevMarketValue = dbo.FGetLastVolumeAcc(@Date,@InstrumentPK) * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK)/100 
	    select @Amount = @MarketValue - @PrevMarketValue  
    END

END
ELSE IF (@InstrumentTypePK = 4)
BEGIN
Select @CadanganAccountPK = CadanganReksadana ,@UnrealisedAccountPK = UnrealisedReksadana From AccountingSetup 
Where Status = 2



    IF (@Buy = 1) -- (LastPrice - PrevPrice) * VolumeYesterday
    BEGIN
	    set @MarketValue =  dbo.FGetLastVolumeAcc(dbo.Fworkingday(@Date,-1),@InstrumentPK)   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)            
	    set @PrevMarketValue = dbo.FGetLastVolumeAcc(dbo.Fworkingday(@Date,-1),@InstrumentPK) * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) 
	    select @Amount = @MarketValue - @PrevMarketValue  
    END
    ELSE
    BEGIN
	    set @MarketValue =  dbo.FGetLastVolumeAcc(@Date,@InstrumentPK)   * dbo.FGetLastClosePriceForFundPosition(@Date,@InstrumentPK)            
	    set @PrevMarketValue = dbo.FGetLastVolumeAcc(@Date,@InstrumentPK) * dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@Date,-1),@InstrumentPK) 
	    select @Amount = @MarketValue - @PrevMarketValue  
    END




END
			             
 
Declare @AllocDepartmentPK int 
Declare @AllocPercent numeric(18,8) 
declare @AfterAllocateAmount numeric(18,4) 
Declare @CounterAmount numeric(18,4) 
Declare @Count Int 
Declare @Inc int 
set @Inc = 0 set @CounterAmount = 0 
set @AfterAllocateAmount = 0   
Declare @RoundAmount numeric(19,4) 
Declare @RoundingDepartmentPK int 
Declare @LastAmount Numeric(19,4)  
Declare @FinalAmountAfterRounding numeric(19,4)  
If @Amount < 0 BEGIN       
--Mulai dari sini
Select @Count = isnull(Count(DepartmentPK) ,0) From AccountAllocateByCostCenterSetup 
where AccountPK =  @UnrealisedAccountPK and status = 2  
if @Count = 0 
begin 
Set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate)  
Select @JournalPK,@AutoNo,1,2,@UnrealisedAccountPK,1,0,isnull(@AllocDepartmentPk,3),0,0,@InstrumentPK,0,'','','D',Abs(@Amount),Abs(@Amount),0,1,Abs(@Amount),0,@UsersID,@TimeNow 
end   
else 
begin 
Declare B Cursor For 
Select departmentPK,AllocationPercentage From AccountAllocateByCostCenterSetup 
where AccountPK =  @UnrealisedAccountPK and status = 2 
Open B   
Fetch Next From B 
Into @AllocDepartmentPk,@AllocPercent  
While @@Fetch_Status  = 0 
Begin 	
Set @AfterAllocateAmount = abs(@amount) * @AllocPercent/100  
Set @CounterAmount =  @CounterAmount + @AfterAllocateAmount 
set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate) 
Select @JournalPK,@AutoNo,1,2,@UnrealisedAccountPK,1,0,isnull(@AllocDepartmentPk,3),0,0,@InstrumentPK,0,'','','D',isnull(@AfterAllocateAmount,0),   
isnull(@AfterAllocateAmount,0),0,1,isnull(@AfterAllocateAmount,0),0,@UsersID,@TimeNow  
set @Inc = @Inc + 1 
IF @Inc = @count 
begin Set @RoundAmount = @CounterAmount - abs(@Amount) 
if  @RoundAmount <> 0 
begin 
select top 1 @roundingDepartmentPK = DepartmentPK From AccountAllocateByCostCenterSetup  
where AccountPK = @UnrealisedAccountPK and status = 2 and BitRounding = 1  
Select @LastAmount =  Amount From JournalDetail 
where JournalPK = @JournalPK and AccountPK = @UnrealisedAccountPK and DepartmentPK = @RoundingDepartmentPK and status = 2 
set @FinalAmountAfterRounding = @lastAmount +  @RoundAmount  
Update JournalDetail Set Amount = @FinalAmountAfterRounding,Debit = @FinalAmountAfterRounding,baseDebit = @FinalAmountAfterRounding * CurrencyRate 
where JournalPK = @JournalPK and AccountPK = @UnrealisedAccountPK and DepartmentPK = @RoundingDepartmentPK and status = 2  end   end  
FETCH NEXT FROM B 
INTO  @AllocDepartmentPk,@AllocPercent  
End  
Close B 
DEALLOCATE  B  
end   
set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate) 
Select @JournalPK,@AutoNo,1,2,@CadanganAccountPK,1,0,3,0,0,@InstrumentPK,0,'','','C',abs(@amount), 0,abs(@amount),1,0,abs(@amount),@UsersID,@TimeNow 
END   
If @Amount > 0 
Begin   
set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate) 
Select @JournalPK,@AutoNo,1,2,@CadanganAccountPK,1,0,3,0,0,@InstrumentPK,0,'','','D',abs(@amount),abs(@amount),0,1,abs(@amount),0,@UsersID,@TimeNow   
set @AutoNo = @AutoNo + 1   

Select @Count = isnull(Count(DepartmentPK) ,0) From AccountAllocateByCostCenterSetup 
where AccountPK =  @UnrealisedAccountPK and status = 2  
if @Count = 0 
begin   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate)   
Select @JournalPK,@AutoNo,1,2,@UnrealisedAccountPK,1,0,3,0,0,@InstrumentPK,0,'','','C',abs(@amount), 0,abs(@amount),1,0,abs(@amount),@UsersID,@TimeNow 
end  
else 
begin 
Declare C Cursor For 
Select departmentPK,AllocationPercentage From AccountAllocateByCostCenterSetup 
where AccountPK =  @UnrealisedAccountPK and status = 2 
Open C   
Fetch Next From C 
Into @AllocDepartmentPk,@AllocPercent  
While @@Fetch_Status  = 0 
Begin 	
Set @AfterAllocateAmount = abs(@amount) * @AllocPercent/100  
Set @CounterAmount =  @CounterAmount + @AfterAllocateAmount 
set @AutoNo = @AutoNo + 1   

INSERT INTO [JournalDetail]  
([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK]  
,[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],[DetailDescription]  
,[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit]  
,[BaseCredit],[LastUsersID],LastUpdate) 
Select @JournalPK,@AutoNo,1,2,@UnrealisedAccountPK,1,0,isnull(@AllocDepartmentPk,3),0,0,@InstrumentPK,0,'','','C',isnull(@AfterAllocateAmount,0),   
0,isnull(@AfterAllocateAmount,0),1,0,isnull(@AfterAllocateAmount,0),@UsersID,@TimeNow  
set @Inc = @Inc + 1 
IF @Inc = @count 
begin 
Set @RoundAmount = @CounterAmount - abs(@Amount) 
if  @RoundAmount <> 0 
begin 
select top 1 @roundingDepartmentPK = DepartmentPK From AccountAllocateByCostCenterSetup  
where AccountPK = @UnrealisedAccountPK and status = 2 and BitRounding = 1  
Select @LastAmount =  Amount From JournalDetail 
where JournalPK = @JournalPK and AccountPK = @UnrealisedAccountPK and DepartmentPK = @RoundingDepartmentPK and status = 2 
set @FinalAmountAfterRounding = @lastAmount  + @RoundAmount  
Update JournalDetail Set Amount = @FinalAmountAfterRounding,Debit = @FinalAmountAfterRounding,baseDebit = @FinalAmountAfterRounding * CurrencyRate 
where JournalPK = @JournalPK and AccountPK = @UnrealisedAccountPK and DepartmentPK = @RoundingDepartmentPK and status = 2  end   
end  
FETCH NEXT FROM C 
INTO  @AllocDepartmentPk,@AllocPercent  
End  
Close C 
DEALLOCATE  C  
end end end   

FETCH NEXT FROM A 
INTO @InstrumentPk,@LastVolume,@InstrumentTypePK,@Buy,@Sell 
END 
CLOSE A  
DEALLOCATE A

DECLARE @combinedString VARCHAR(MAX)
SELECT @combinedString = COALESCE(@combinedString + ', ', '') + Reference
FROM #ReferenceTemp
IF (@combinedString is null)
BEGIN
    SELECT 'No Data Revaluation, Please Check Close Price' as Result
END
ELSE
BEGIN
    SELECT 'Portfolio Revaluation Success ! Reference is : ' + @combinedString as Result
END
                    
                        
                        ";

                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@TimeNow", _dateTimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToString(dr["Result"]);

                            }
                            return "";
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public TrxPortfolioForNetAmount Get_NetAmount(TrxPortfolioForNetAmount _trxPortfolio)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    TrxPortfolioForNetAmount M_TrxPortfolio = new TrxPortfolioForNetAmount();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        if (_trxPortfolio.InstrumentTypePK == 2)
                        {
                            cmd.CommandText = @"
                            Declare @TaxExpensePercent numeric(8,4)

                            Declare @Days int
                            Declare @DivDays int
                            Declare @InterestDays int

                            Declare @CurrencyID nvarchar(20)
                            Declare @CouponRate numeric(8,4)
                            Declare @InterestType int
                            Declare @InterestDaysType int
                            Declare @InterestPaymentType int


                            Select 
                            @TaxExpensePercent = A.TaxExpensePercent,
                            @CurrencyID = C.ID,@CouponRate = A.InterestPercent,@InterestType = A.InterestType, 
                            @InterestDaysType = A.InterestDaysType,@InterestPaymentType = 12/D.Priority
                            From Instrument A
                            left join Currency C on A.CurrencyPK = C.CurrencyPK and C.status = 2
                            left join MasterValue D on A.InterestPaymentType = D.Code and D.Status = 2 and D.ID = 'InterestPaymentType'
                            where InstrumentPK = @InstrumentPK and A.status = 2


                            Declare @AccuredInterestAmount numeric(22,4)
                            Declare @GrossAmount numeric(22,4)
                            Declare @NetAmount numeric(22,4)
                            Declare @ValuePerUnit int

                            Declare		@DaysAcq_2					int,
			                            @DaysAcq1_2					int,
			                            @DaysAcq2_2					int,
			                            @DaysAcq3_2					int,
			                            @DaysAcq4_2					int,
			                            @DaysAcq5_2					int,
			                            @CapGainAcq					decimal(22,4),
			                            @CapGainAcq1				decimal(22,4),
			                            @CapGainAcq2				decimal(22,4),
			                            @CapGainAcq3				decimal(22,4),
			                            @CapGainAcq4				decimal(22,4),
			                            @CapGainAcq5				decimal(22,4),
			                            @TaxCapGainAcq				decimal(22,4),
			                            @TaxCapGainAcq1				decimal(22,4),
			                            @TaxCapGainAcq2				decimal(22,4),
			                            @TaxCapGainAcq3				decimal(22,4),
			                            @TaxCapGainAcq4				decimal(22,4),
			                            @TaxCapGainAcq5				decimal(22,4),
			                            @AIAcq					decimal(22,4),
			                            @AIAcq1					decimal(22,4),
			                            @AIAcq2					decimal(22,4),
			                            @AIAcq3					decimal(22,4),
			                            @AIAcq4					decimal(22,4),
			                            @AIAcq5					decimal(22,4),
			                            @TaxAIAcq				decimal(22,4),
			                            @TaxAIAcq1				decimal(22,4),
			                            @TaxAIAcq2				decimal(22,4),
			                            @TaxAIAcq3				decimal(22,4),
			                            @TaxAIAcq4				decimal(22,4),
			                            @TaxAIAcq5				decimal(22,4),
			                            @TotalCapGain			decimal(22,4),
			                            @TotalAI				decimal(22,4),
			                            @TotalTaxCapGain		decimal(22,4),
			                            @TotalTaxAI				decimal(22,4)

                            if @CurrencyID = 'IDR'
                            begin	
	                            if @InterestType = 3 --ZERO COUPONT
	                            BEGIN
		                            set @AccuredInterestAmount = 0
		                            set @GrossAmount = @Volume * @price/100
	
		                            if @InterestDaysType in (2,3,4) -- [Govt Bond] <-> ACT/ACT , ACT/360 (3), ACT/365
		                            begin
			                            set @ValuePerUnit = 1000000
			                            set @DivDays = 0

			                            set @Days = 0

			                            set @InterestDays	= case when @InterestDaysType in (3) 
			                            then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end -- pembagi hari

			                            set @CapGainAcq	= case when @TrxType = 2 then ((@Price - @AcqPrice) * case when isnull(@AcqVolume, 0) <> 0 then @AcqVolume else @Volume end / 100) 
			                            when @TrxType = 1 then ((@Price - @AcqPrice) * case when isnull(@AcqVolume, 0) <> 0 then @AcqVolume else @Volume end / 100)  else 0 end

			                            set @CapGainAcq1 = case when @TrxType = 2 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100) 
			                            when @TrxType = 1 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100)  else 0 end

			                            set @CapGainAcq2 = case when @TrxType = 2 then ((@Price - @AcqPrice2) * @AcqVolume2 / 100) 
			                            when @TrxType = 1 then((@Price - @AcqPrice2) * @AcqVolume2 / 100) else 0 end

			                            set @CapGainAcq3 = case when @TrxType = 2 then ((@Price - @AcqPrice3) * @AcqVolume3 / 100) 
			                            when @TrxType = 1 then  ((@Price - @AcqPrice3) * @AcqVolume3 / 100) else 0 end

			                            set @CapGainAcq4 = case when @TrxType = 2 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) 
			                            when @TrxType = 1 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) else 0 end

			                            set @CapGainAcq5 = case when @TrxType = 2 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) 
			                            when @TrxType = 1 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) else 0 end

			                            set @TaxCapGainAcq	= @CapGainAcq * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq1	= @CapGainAcq1 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq2	= @CapGainAcq2 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq3	= @CapGainAcq3 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq4	= @CapGainAcq4 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq5	= @CapGainAcq5 * @TaxCapitaGainPercent / 100

		                            end
	
		                            if @InterestDaysType in (1,5,6,7,8,9) -- [Corp Bond] <-> 30/360 (US/NASD), 30/360 (EUROPEAN), 30/360, 30/360 NON-EOM, ISMA-30/360, ISMA-30/360 NONEOM
		                            begin
		
			                            set @ValuePerUnit = 1
			                            set @DivDays = 0
			
			                            set @Days = 0
		
			                            set @InterestDays = case when @InterestDaysType in (6) then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate,					@SettledDate)) end -- pembagi hari

			                            set @CapGainAcq	= case when @TrxType = 2 then ((@Price - @AcqPrice) * @AcqVolume / 100) when @TrxType = 1then  ((@Price - @AcqPrice) * @AcqVolume / 100)  else 0 end
			                            set @CapGainAcq1 = case when @TrxType = 2 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100) when @TrxType = 1then  ((@Price - @AcqPrice1) * @AcqVolume1 / 100)  else 0 end
			                            set @CapGainAcq2 = case when @TrxType = 2 then ((@Price - @AcqPrice2) * @AcqVolume2 / 100) when @TrxType = 1then  ((@Price - @AcqPrice2) * @AcqVolume2 / 100)  else 0 end
			                            set @CapGainAcq3 = case when @TrxType = 2 then ((@Price - @AcqPrice3) * @AcqVolume3 / 100) when @TrxType = 1then  ((@Price - @AcqPrice3) * @AcqVolume3 / 100)  else 0 end
			                            set @CapGainAcq4 = case when @TrxType = 2 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) when @TrxType = 1then ((@Price - @AcqPrice4) * @AcqVolume4 / 100)  else 0 end
			                            set @CapGainAcq5 = case when @TrxType = 2 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) when @TrxType = 1then ((@Price - @AcqPrice5) * @AcqVolume5 / 100)  else 0 end

			                            set @TaxCapGainAcq	= @CapGainAcq * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq1	= @CapGainAcq1 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq2	= @CapGainAcq2 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq3	= @CapGainAcq3 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq4	= @CapGainAcq4 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq5	= @CapGainAcq5 * @TaxCapitaGainPercent / 100
		
		                            end
	
	                            END
	                            ELSE
	                            BEGIN
		                            if @InterestDaysType in (2,3,4) -- [Govt Bond] <-> ACT/ACT , ACT/360 (3), ACT/365
		                            begin
			                            set @ValuePerUnit = 1000000
			                            set @DivDays = case when @InterestDaysType in (3) 
			                            then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @NextCouponDate)) 
				                            else abs(datediff(day, @NextCouponDate, @LastCouponDate)) end -- pembagi hari

			                            set @Days = case when @InterestDaysType in (3) 
			                            then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) 
				                            else abs(datediff(day, @SettledDate, @LastCouponDate)) end -- pembagi hari

			                            set @InterestDays	= case when @InterestDaysType in (3) 
			                            then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end -- pembagi hari

			                            set @DaysAcq_2 = case when @InterestDaysType in (3) then case when @AcqDate <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) end else case when @AcqDate <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end end -- total hari [acq date > prev coupon date]

			                            set @DaysAcq1_2	= case when @InterestDaysType in (3) then case when @AcqDate1 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate1, @SettledDate)) end else case when @AcqDate1 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate1)) end end -- total hari [acq date 1 > prev coupon date]

			                            set @DaysAcq2_2	= case when @InterestDaysType in (3) then case when @AcqDate2 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate2, @SettledDate)) end else case when @AcqDate2 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate2)) end end -- total hari [acq date 2 > prev coupon date]

			                            set @DaysAcq3_2	= case when @InterestDaysType in (3) then case when @AcqDate3 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate3, @SettledDate)) end else case when @AcqDate3 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate3)) end end -- total hari [acq date 3 > prev coupon date]

			                            set @DaysAcq4_2	= case when @InterestDaysType in (3) then case when @AcqDate4 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate4, @SettledDate)) end else case when @AcqDate4 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate4)) end end -- total hari [acq date 4 > prev coupon date]

			                            set @DaysAcq5_2	= case when @InterestDaysType in (3) then case when @AcqDate5 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate5, @SettledDate)) end else case when @AcqDate5 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate5)) end end -- total hari [acq date 5 > prev coupon date]
						
		

			                            set @DaysAcq_2		= case when (isnull(@AcqDate, '') = '' or year(@AcqDate) = 1900) then 0 else @DaysAcq_2 end
			                            set @DaysAcq1_2		= case when (isnull(@AcqDate1, '') = '' or year(@AcqDate1) = 1900) then 0 else @DaysAcq1_2 end
			                            set @DaysAcq2_2		= case when (isnull(@AcqDate2, '') = '' or year(@AcqDate2) = 1900) then 0 else @DaysAcq2_2 end
			                            set @DaysAcq3_2		= case when (isnull(@AcqDate3, '') = '' or year(@AcqDate3) = 1900) then 0 else @DaysAcq3_2 end
			                            set @DaysAcq4_2		= case when (isnull(@AcqDate4, '') = '' or year(@AcqDate4) = 1900) then 0 else @DaysAcq4_2 end
			                            set @DaysAcq5_2		= case when (isnull(@AcqDate5, '') = '' or year(@AcqDate5) = 1900) then 0 else @DaysAcq5_2 end
		
		

			                            set @CapGainAcq	= case when @TrxType = 2 then ((@Price - @AcqPrice) * case when isnull(@AcqVolume, 0) <> 0 then @AcqVolume else @Volume end / 100) 
			                            when @TrxType = 1 then ((@Price - @AcqPrice) * case when isnull(@AcqVolume, 0) <> 0 then @AcqVolume else @Volume end / 100)  else 0 end

			                            set @CapGainAcq1 = case when @TrxType = 2 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100) 
			                            when @TrxType = 1 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100)  else 0 end

			                            set @CapGainAcq2 = case when @TrxType = 2 then ((@Price - @AcqPrice2) * @AcqVolume2 / 100) 
			                            when @TrxType = 1 then((@Price - @AcqPrice2) * @AcqVolume2 / 100) else 0 end

			                            set @CapGainAcq3 = case when @TrxType = 2 then ((@Price - @AcqPrice3) * @AcqVolume3 / 100) 
			                            when @TrxType = 1 then  ((@Price - @AcqPrice3) * @AcqVolume3 / 100) else 0 end

			                            set @CapGainAcq4 = case when @TrxType = 2 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) 
			                            when @TrxType = 1 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) else 0 end

			                            set @CapGainAcq5 = case when @TrxType = 2 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) 
			                            when @TrxType = 1 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) else 0 end

			                            set @TaxCapGainAcq	= @CapGainAcq * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq1	= @CapGainAcq1 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq2	= @CapGainAcq2 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq3	= @CapGainAcq3 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq4	= @CapGainAcq4 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq5	= @CapGainAcq5 * @TaxCapitaGainPercent / 100

			                            set @AIAcq = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
			                            when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

			                            set @AIAcq1 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume1 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq1_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
			                            when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume1 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq1_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

			                            set @AIAcq2 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq2_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
			                            when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq2_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

			                            set @AIAcq3 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume3 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq3_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
			                            when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume3 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq3_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

			                            set @AIAcq4 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume4 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq4_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
			                            when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume4 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq4_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

			                            set @AIAcq5 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume5 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq5_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
			                            when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume5 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq5_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end


			                            set @TaxAIAcq	= @AIAcq * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq1	= @AIAcq1 * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq2	= @AIAcq2 * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq3	= @AIAcq3 * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq4	= @AIAcq4 * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq5	= @AIAcq5 * @IncomeTaxInterestPercent / 100

		                            end
		
		                            if @InterestDaysType in (1,5,6,7,8,9) -- [Corp Bond] <-> 30/360 (US/NASD), 30/360 (EUROPEAN), 30/360, 30/360 NON-EOM, ISMA-30/360, ISMA-30/360 NONEOM
		                            begin
		
			                            set @ValuePerUnit = 1
			                            set @DivDays = case when @InterestDaysType in (6) 
			                            then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @NextCouponDate)) else abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @NextCouponDate)) end -- pembagi hari
			
			                            set @Days = case when @InterestDaysType in (6) 
			                            then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) end -- pembagi hari
		
			                            set @InterestDays = case when @InterestDaysType in (6) then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate,					@SettledDate)) end -- pembagi hari


			                            set @DaysAcq_2 = case when @InterestDaysType in (6) then case when @AcqDate <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) end else case when @AcqDate <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate, @SettledDate)) end end -- total hari [acq date > prev coupon date]
			                            set @DaysAcq1_2 = case when @InterestDaysType in (6) then case when @AcqDate1 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate1, @SettledDate)) end else case when @AcqDate1 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate1, @SettledDate)) end end -- total hari [acq date 1 > prev coupon date]
			                            set @DaysAcq2_2 = case when @InterestDaysType in (6) then case when @AcqDate2 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate2, @SettledDate)) end else case when @AcqDate2 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate2, @SettledDate)) end end -- total hari [acq date 2 > prev coupon date]
			                            set @DaysAcq3_2 = case when @InterestDaysType in (6) then case when @AcqDate3 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate3, @SettledDate)) end else case when @AcqDate3 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate3, @SettledDate)) end end -- total hari [acq date 3 > prev coupon date]
			                            set @DaysAcq4_2 = case when @InterestDaysType in (6) then case when @AcqDate4 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate4, @SettledDate)) end else case when @AcqDate4 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate4, @SettledDate)) end end -- total hari [acq date 4 > prev coupon date]
			                            set @DaysAcq5_2 = case when @InterestDaysType in (6) then case when @AcqDate5 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate5, @SettledDate)) end else case when @AcqDate5 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate5, @SettledDate)) end end -- total hari [acq date 5 > prev coupon date]

			                            set @DaysAcq_2		= case when (isnull(@AcqDate, '') = '' or year(@AcqDate) = 1900) then 0 else @DaysAcq_2 end
			                            set @DaysAcq1_2		= case when (isnull(@AcqDate1, '') = '' or year(@AcqDate1) = 1900) then 0 else @DaysAcq1_2 end
			                            set @DaysAcq2_2		= case when (isnull(@AcqDate2, '') = '' or year(@AcqDate2) = 1900) then 0 else @DaysAcq2_2 end
			                            set @DaysAcq3_2		= case when (isnull(@AcqDate3, '') = '' or year(@AcqDate3) = 1900) then 0 else @DaysAcq3_2 end
			                            set @DaysAcq4_2		= case when (isnull(@AcqDate4, '') = '' or year(@AcqDate4) = 1900) then 0 else @DaysAcq4_2 end
			                            set @DaysAcq5_2		= case when (isnull(@AcqDate5, '') = '' or year(@AcqDate5) = 1900) then 0 else @DaysAcq5_2 end

			                            set @CapGainAcq	= case when @TrxType = 2 then ((@Price - @AcqPrice) * @AcqVolume / 100) when @TrxType = 1then  ((@Price - @AcqPrice) * @AcqVolume / 100)  else 0 end
			                            set @CapGainAcq1 = case when @TrxType = 2 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100) when @TrxType = 1then  ((@Price - @AcqPrice1) * @AcqVolume1 / 100)  else 0 end
			                            set @CapGainAcq2 = case when @TrxType = 2 then ((@Price - @AcqPrice2) * @AcqVolume2 / 100) when @TrxType = 1then  ((@Price - @AcqPrice2) * @AcqVolume2 / 100)  else 0 end
			                            set @CapGainAcq3 = case when @TrxType = 2 then ((@Price - @AcqPrice3) * @AcqVolume3 / 100) when @TrxType = 1then  ((@Price - @AcqPrice3) * @AcqVolume3 / 100)  else 0 end
			                            set @CapGainAcq4 = case when @TrxType = 2 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) when @TrxType = 1then ((@Price - @AcqPrice4) * @AcqVolume4 / 100)  else 0 end
			                            set @CapGainAcq5 = case when @TrxType = 2 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) when @TrxType = 1then ((@Price - @AcqPrice5) * @AcqVolume5 / 100)  else 0 end

			                            set @TaxCapGainAcq	= @CapGainAcq * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq1	= @CapGainAcq1 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq2	= @CapGainAcq2 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq3	= @CapGainAcq3 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq4	= @CapGainAcq4 * @TaxCapitaGainPercent / 100
			                            set @TaxCapGainAcq5	= @CapGainAcq5 * @TaxCapitaGainPercent / 100

			                            set @AIAcq = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume * @CouponRate / 100 * @DaysAcq_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume * @CouponRate / 100 * @DaysAcq_2 / @DivDays / @InterestPaymentType) end else 0 end
			                            set @AIAcq1 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume1 * @CouponRate / 100 * @DaysAcq1_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume1 * @CouponRate / 100 * @DaysAcq1_2 / @DivDays / @InterestPaymentType) end else 0 end
			                            set @AIAcq2 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 * @CouponRate / 100 * @DaysAcq2_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 * @CouponRate / 100 * @DaysAcq2_2 / @DivDays / @InterestPaymentType) end else 0 end
			                            set @AIAcq3 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume3 * @CouponRate / 100 * @DaysAcq3_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume3 * @CouponRate / 100 * @DaysAcq3_2 / @DivDays / @InterestPaymentType) end else 0 end
			                            set @AIAcq4 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume4 * @CouponRate / 100 * @DaysAcq4_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume4 * @CouponRate / 100 * @DaysAcq4_2 / @DivDays / @InterestPaymentType) end else 0 end
			                            set @AIAcq5 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume5 * @CouponRate / 100 * @DaysAcq5_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume5 * @CouponRate / 100 * @DaysAcq5_2 / @DivDays / @InterestPaymentType) end else 0 end


			                            set @TaxAIAcq	= @AIAcq * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq1	= @AIAcq1 * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq2	= @AIAcq2 * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq3	= @AIAcq3 * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq4	= @AIAcq4 * @IncomeTaxInterestPercent / 100
			                            set @TaxAIAcq5	= @AIAcq5 * @IncomeTaxInterestPercent / 100

		
			
		
		                            end
	                            end
                            end

                            if @CurrencyID = 'USD' -- USD
                            begin
	                            if @InterestType = 3 -- ZERO COUPONT
	                            BEGIN
		                            set @AccuredInterestAmount = 0
		                            set @GrossAmount = @Volume * @price/100
		
	                            END
	                            ELSE
	                            BEGIN
		                            if @InstrumentTypePK in (2) -- [Govt Bond]
		                            BEGIN	
				                            set @ValuePerUnit = 1
				                            set @DivDays = abs([dbo].[FGetDateDIffGovermentBond](@LastCouponDate, @NextCouponDate))
				                            set @Days = abs([dbo].[FGetDateDIffGovermentBond](@LastCouponDate, @SettledDate))
				                            set @InterestDays	= abs([dbo].[FGetDateDIffGovermentBond](@AcqDate, @SettledDate)) -- total hari Interest

			
		                            END
		                            Else if @InstrumentTypePK in (3) -- Corp Bond
		                            BEGIN
				                            set @ValuePerUnit = 1
				                            set @DivDays = abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @NextCouponDate)) -- pembagi hari
				                            set @Days = abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) -- total hari

			
		                            END
	                            END
                            end

                            Declare @TotalTax Numeric(22,4)

                            if @InterestType <> 3 --ZERO COUPON
                            BEGIN
	                            if @InstrumentTypePK in (3,8,9,13,15)
	                            BEGIN
		                            set @AccuredInterestAmount = @Volume * (@CouponRate / 100) * @Days / @DivDays / @InterestPaymentType
		                            set @GrossAmount = (@Volume * @price/100) + @AccuredInterestAmount
	                            END
	                            ELSE IF @InstrumentTypePK in (2)
	                            BEGIN
		                            --IF @BitIsRounding = 1
		                            --BEGIN
			                            set @AccuredInterestAmount = @Volume / @ValuePerUnit * (round(@CouponRate / 100 
			                            * @Days / @DivDays / @InterestPaymentType * @ValuePerUnit, 0))
			                            set @GrossAmount = round((@Volume * @price/100),0) + @AccuredInterestAmount
		                            --END
		                            --ELSE
		                            --BEGIN
			                        --    set @AccuredInterestAmount = @Volume / @ValuePerUnit * (@CouponRate / 100 
			                        --    * @Days / @DivDays / @InterestPaymentType * @ValuePerUnit)
			                        --    set @GrossAmount = (@Volume * @price/100) + @AccuredInterestAmount
		                            --END
	                            END
                            END

                            set @TotalTaxCapGain = case when isnull(@TaxCapGainAcq,0) > 0 then  isnull(@TaxCapGainAcq,0) else 0 end 
                            + case when isnull(@TaxCapGainAcq1,0) > 0 then isnull(@TaxCapGainAcq1,0) else 0 end 
                            + case when isnull(@TaxCapGainAcq2,0) > 0 then isnull(@TaxCapGainAcq2,0) else 0 end
                            + case when isnull(@TaxCapGainAcq3,0) > 0 then isnull(@TaxCapGainAcq3,0) else 0 end
                            + case when isnull(@TaxCapGainAcq4,0) > 0 then isnull(@TaxCapGainAcq4,0) else 0 end 
                            + case when isnull(@TaxCapGainAcq5,0) > 0 then isnull(@TaxCapGainAcq5,0) else 0 end 

                            set @TotalTaxAI = case when isnull(@TaxAIAcq,0) > 0 then isnull(@TaxAIAcq,0) else 0 end 
                            + case when isnull(@TaxAIAcq1,0) > 0 then isnull(@TaxAIAcq1,0) else 0 end 
                            + case when isnull(@TaxAIAcq2,0) > 0 then isnull(@TaxAIAcq2,0) else 0 end 
                            + case when isnull(@TaxAIAcq3,0) > 0 then isnull(@TaxAIAcq3,0) else 0 end 
                            + case when isnull(@TaxAIAcq4,0) > 0 then isnull(@TaxAIAcq4,0) else 0 end  
                            + case when isnull(@TaxAIAcq5,0) > 0 then isnull(@TaxAIAcq5,0) else 0 end 

                            set @TotalCapGain = isnull(@CapGainAcq,0) + isnull(@CapGainAcq1,0) + isnull(@CapGainAcq2,0) + isnull(@CapGainAcq3,0) + isnull(@CapGainAcq4,0) + isnull(@CapGainAcq5,0)
                            set @TotalAI = isnull(@AIAcq,0) + isnull(@AIAcq1,0) + isnull(@AIAcq2,0) + isnull(@AIAcq3,0) + isnull(@AIAcq4,0) + isnull(@AIAcq5,0)


                            set @TotalTax = (@TotalTaxCapGain + @TotalTaxAI)
                            set @NetAmount = isnull(@GrossAmount,0) - isnull(@TotalTax,0)


                            declare @TrxAmount numeric (22,4)
                            declare @InvestmentAcc int

                            select @TrxAmount = dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@ValueDate,-1),@InstrumentPK)/100 * @Volume

                            --select @InvestmentAcc = InvInBond From AccountingSetup where status = 2

                            --select @TrxAmount =  sum(BaseDebit - BaseCredit) from JournalDetail A 
                            --left join Journal B on A.JournalPK = B.JournalPK and B.status = 2 and B.Posted = 1 and B.Reversed = 0
                            --where AccountPK = @InvestmentAcc and ValueDate <= @ValueDate 
                            --and InstrumentPK = @InstrumentPK 

                            Select isnull(@AccuredInterestAmount,0) InterestAmount, isnull(@TotalTaxAI,0) IncomeTaxInterestAmount,isnull(@TotalTaxCapGain,0) IncomeTaxGainAmount,
                            isnull(@GrossAmount,0) GrossAmount, isnull(@NetAmount,0) NetAmount,isnull(sum(@Amount - @TrxAmount),0) RealisedAmount
                             ";

                            cmd.Parameters.AddWithValue("@TaxCapitaGainPercent", 15);
                            cmd.Parameters.AddWithValue("@IncomeTaxInterestPercent", 5);
                            cmd.Parameters.AddWithValue("@BitIsRounding", 0);
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _trxPortfolio.InstrumentTypePK);
                            cmd.Parameters.AddWithValue("@Amount", _trxPortfolio.Amount);



                        }
                        else if (_trxPortfolio.InstrumentTypePK == 4)
                        {
                            cmd.CommandText =
                            @"
                          
                            Declare @BoardType int
                            set @BoardType = 1
                            Create Table #TrxPortfolio
                            (
                            TrxType int,
                            DoneAmount numeric (22,4),
                            CounterpartPK int,
                            )
                        
                            Insert Into #TrxPortfolio (TrxType,DoneAmount)
                            select @TrxType,@Price * @Volume

                            declare @TrxAmount numeric (22,4)
                            declare @InvestmentAcc int

                            select @TrxAmount = dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@ValueDate,-1),@InstrumentPK) * @Volume
                           

                            Select 
                            DoneAmount NetAmount,isnull(sum(DoneAmount - @TrxAmount),0) RealisedAmount    
                            from #TrxPortfolio 
                            Group By DoneAmount,TrxType


 
                             ";


                            cmd.Parameters.AddWithValue("@CounterpartPK", _trxPortfolio.CounterpartPK);

                        }
                        else
                        {
                            cmd.CommandText =
                            @"
                            Declare @BoardType int
                            set @BoardType = 1
                            Create Table #TrxPortfolio
                            (
	                            TrxType int,
	                            DoneAmount numeric (22,4),
	                            CounterpartPK int,
	                            BoardType int
                            )
                        
                            Insert Into #TrxPortfolio (TrxType,DoneAmount,CounterpartPK,BoardType)
                            select @TrxType,@Price * @Volume,@CounterpartPK,@BoardType



                            declare @CommissionPercent numeric (22,4)
                            declare @LevyPercent numeric (22,4)
                            declare @KPEIPercent numeric (22,4)
                            declare @VATPercent numeric (22,4)
                            declare @WHTPercent numeric (22,4)
                            declare @OTCPercent numeric (22,4)
                            declare @IncomeTaxInterestPercent numeric (22,4)
                            declare @IncomeTaxGainPercent numeric (22,4)
                            declare @IncomeTaxSellPercent numeric (22,4)

                            declare @Comm numeric (22,4)
                            declare @Levy numeric (22,4)
                            declare @KPEI numeric (22,4)
                            declare @VAT numeric (22,4)
                            declare @WHT numeric (22,4)
                            declare @OTC numeric (22,4)
                            declare @TaxInterest numeric (22,4)
                            declare @TaxGain numeric (22,4)
                            declare @TaxSell numeric (22,4)
                            declare @TotalAmount numeric (22,4)


                            declare @RoundingModeCommission int
                            declare @DecimalPlacesCommission int
                            declare @RoundingModeVAT int
                            declare @DecimalPlacesVAT int
                            declare @RoundingModeLevy int
                            declare @DecimalPlacesLevy int
                            declare @RoundingModeKPEI int
                            declare @DecimalPlacesKPEI int
                            declare @RoundingModeWHT int
                            declare @DecimalPlacesWHT int
                            declare @RoundingModeOTC int
                            declare @DecimalPlacesOTC int
                            declare @RoundingModeTaxInterest int
                            declare @DecimalPlacesTaxInterest int
                            declare @RoundingModeTaxGain int
                            declare @DecimalPlacesTaxGain int
                            declare @RoundingModeTaxSell int
                            declare @DecimalPlacesTaxSell int

                            declare @TrxAmount numeric (22,4)
                            declare @InvestmentAcc int

                            
                            select @TrxAmount = dbo.FGetLastClosePriceForFundPosition(dbo.Fworkingday(@ValueDate,-1),@InstrumentPK) * @Volume

                            --select @InvestmentAcc = InvInEquity From AccountingSetup where status = 2
                            --select @TrxAmount =  sum(BaseDebit - BaseCredit) from JournalDetail A 
                            --left join Journal B on A.JournalPK = B.JournalPK and B.status = 2 and B.Posted = 1 and B.Reversed = 0
                            --where AccountPK = @InvestmentAcc and ValueDate <= @ValueDate 
                            --and InstrumentPK = @InstrumentPK 


                            select @RoundingModeCommission = RoundingCommission,@DecimalPlacesCommission = DecimalCommission,
                            @RoundingModeVAT = RoundingVAT,@DecimalPlacesVAT = DecimalVAT,
                            @RoundingModeLevy = RoundingLevy,@DecimalPlacesLevy = DecimalLevy,
                            @RoundingModeKPEI = RoundingKPEI,@DecimalPlacesKPEI = DecimalKPEI,
                            @RoundingModeWHT = RoundingWHT,@DecimalPlacesOTC = DecimalOTC,
                            @RoundingModeTaxInterest = RoundingTaxInterest,@DecimalPlacesTaxInterest = DecimalTaxInterest,
                            @RoundingModeTaxGain = RoundingTaxGain,@DecimalPlacesTaxGain = DecimalTaxGain,
                            @RoundingModeTaxSell = RoundingTaxSell,@DecimalPlacesTaxSell = DecimalTaxSell,@BoardType = A.BoardType
                            from CounterpartCommission B left join #TrxPortfolio A
                            on A.CounterpartPK = B.CounterpartPK 
                            where B.status  = 2 and B.BoardType = @BoardType and B.CounterpartPK = @CounterpartPK



                            Select 
                            C.Comm CommissionAmount,C.Levy LevyAmount,C.KPEI KPEIAmount,C.VAT VATAmount,C.WHT WHTAmount,C.OTC OTCAmount,C.TaxInterest IncomeTaxInterestAmount,C.TaxGain IncomeTaxGainAmount,0 InterestAmount,C.TaxSell IncomeTaxSellAmount,case when C.TrxType = 1 then sum(C.DoneAmount + C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT) Else sum(C.DoneAmount - C.Comm - C.Levy - C.KPEI - C.OTC - C.VAT - C.TaxSell) End GrossAmount,case when C.TrxType = 1 then sum(C.DoneAmount + C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT - C.WHT) Else sum(C.DoneAmount - C.Comm - C.Levy - C.KPEI - C.OTC - C.VAT - C.TaxSell + C.WHT) End NetAmount,isnull(sum(DoneAmount - @TrxAmount),0) RealisedAmount    
                            from (
                            select A.TrxType,A.DoneAmount,
                            B.CommissionPercent ,B.LevyPercent,B.KPEIPercent,B.VATPercent,
                            B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,
                            --Comm
                            Case when @RoundingModeCommission = 1 and B.DecimalCommission = @DecimalPlacesCommission then Sum(isnull(round(A.DoneAmount * (B.CommissionPercent/100),@DecimalPlacesCommission),0))
                            else Case when @RoundingModeCommission = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.CommissionPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.CommissionPercent/100),0),0)) End End  Comm,
                            Case when @RoundingModeLevy = 1 and B.DecimalLevy = @DecimalPlacesLevy then Sum(isnull(round(A.DoneAmount * (B.LevyPercent/100),@DecimalPlacesLevy),0))
                            else Case when @RoundingModeLevy = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.LevyPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.LevyPercent/100),0),0)) End End  Levy,
                            Case when @RoundingModeKPEI = 1 and B.DecimalKPEI = @DecimalPlacesKPEI then Sum(isnull(round(A.DoneAmount * (B.KPEIPercent/100),@DecimalPlacesKPEI),0))
                            else Case when @RoundingModeKPEI = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.KPEIPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.KPEIPercent/100),0),0)) End End  KPEI,
                            Case when @RoundingModeVAT = 1 and B.DecimalVAT = @DecimalPlacesVAT then Sum(isnull(round(A.DoneAmount * (B.VATPercent/100),@DecimalPlacesVAT),0))
                            else Case when @RoundingModeVAT = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.VATPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.VATPercent/100),0),0)) End End  VAT,
                            Case when @RoundingModeWHT = 1 and B.DecimalWHT = @DecimalPlacesWHT then Sum(isnull(round(A.DoneAmount * (B.WHTPercent/100),@DecimalPlacesWHT),0))
                            else Case when @RoundingModeWHT = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.WHTPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.WHTPercent/100),0),0)) End End  WHT,
                            Case when @RoundingModeOTC = 1 and B.DecimalOTC = @DecimalPlacesOTC then Sum(isnull(round(A.DoneAmount * (B.OTCPercent/100),@DecimalPlacesOTC),0))
                            else Case when @RoundingModeOTC = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.OTCPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.OTCPercent/100),0),0)) End End  OTC,
                            Case when @RoundingModeTaxInterest = 1 and B.DecimalTaxInterest = @DecimalPlacesTaxInterest then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxInterestPercent/100),@DecimalPlacesTaxInterest),0))
                            else Case when @RoundingModeTaxInterest = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxInterestPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxInterestPercent/100),0),0)) End End  TaxInterest,
                            Case when @RoundingModeTaxGain = 1 and B.DecimalTaxGain = @DecimalPlacesTaxGain then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxGainPercent/100),@DecimalPlacesTaxGain),0))
                            else Case when @RoundingModeTaxGain = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxGainPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxGainPercent/100),0),0)) End End  TaxGain,
                            Case when A.TrxType = 1 then 0 else Case when @RoundingModeTaxSell = 1 and B.DecimalTaxSell = @DecimalPlacesTaxSell then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxSellPercent/100),@DecimalPlacesTaxSell),0))
                            else Case when @RoundingModeTaxSell = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxSellPercent/100)),0)) 
                            else  Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxSellPercent/100),0),0)) End End End TaxSell
                            from #TrxPortfolio A
                            left join CounterpartCommission B on A.CounterpartPK = B.CounterpartPK and B.Status = 2 where B.BoardType = @BoardType and B.CounterpartPK = @CounterpartPK
                            Group By A.DoneAmount,A.TrxType,
                            B.CommissionPercent,B.LevyPercent,B.KPEIPercent,B.VATPercent,
                            B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,B.RoundingCommission,B.DecimalCommission,B.RoundingLevy,B.DecimalLevy,B.RoundingKPEI,B.DecimalKPEI,B.RoundingVAT,B.DecimalVAT,
                            B.RoundingWHT,B.DecimalWHT,B.RoundingOTC,B.DecimalOTC,B.RoundingTaxInterest,B.DecimalTaxInterest,B.RoundingTaxGain,B.DecimalTaxGain,B.RoundingTaxSell,B.DecimalTaxSell
                            ) C
                            Group By  C.TrxType,C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,C.DoneAmount,
                            C.CommissionPercent,C.LevyPercent,C.KPEIPercent,C.VATPercent,
                            C.WHTPercent,C.OTCPercent,C.IncomeTaxInterestPercent,C.IncomeTaxGainPercent,C.IncomeTaxSellPercent

 
                             ";


                            cmd.Parameters.AddWithValue("@CounterpartPK", _trxPortfolio.CounterpartPK);

                        }

                        cmd.Parameters.AddWithValue("@TrxType", _trxPortfolio.TrxType);
                        cmd.Parameters.AddWithValue("@ValueDate", _trxPortfolio.ValueDate);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _trxPortfolio.InstrumentPK);
                        cmd.Parameters.AddWithValue("@SettledDate", _trxPortfolio.SettledDate);
                        cmd.Parameters.AddWithValue("@NextCouponDate", _trxPortfolio.NextCouponDate);
                        cmd.Parameters.AddWithValue("@LastCouponDate", _trxPortfolio.LastCouponDate);
                        cmd.Parameters.AddWithValue("@Price", _trxPortfolio.Price);
                        cmd.Parameters.AddWithValue("@Volume", _trxPortfolio.Volume);
                        cmd.Parameters.AddWithValue("@AcqPrice", _trxPortfolio.AcqPrice);
                        if (_trxPortfolio.AcqDate == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate", _trxPortfolio.AcqDate);
                        }

                        if (_trxPortfolio.AcqDate1 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate1", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate1", _trxPortfolio.AcqDate1);
                        }

                        if (_trxPortfolio.AcqDate2 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate2", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate2", _trxPortfolio.AcqDate2);
                        }

                        if (_trxPortfolio.AcqDate3 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate3", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate3", _trxPortfolio.AcqDate3);
                        }

                        if (_trxPortfolio.AcqDate4 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate4", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate4", _trxPortfolio.AcqDate4);
                        }

                        if (_trxPortfolio.AcqDate5 == null)
                        {
                            cmd.Parameters.AddWithValue("@AcqDate5", "");
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@AcqDate5", _trxPortfolio.AcqDate5);
                        }

                        cmd.Parameters.AddWithValue("@AcqVolume", _trxPortfolio.AcqVolume);
                        cmd.Parameters.AddWithValue("@AcqPrice1", _trxPortfolio.AcqPrice1);
                        cmd.Parameters.AddWithValue("@AcqVolume1", _trxPortfolio.AcqVolume1);

                        cmd.Parameters.AddWithValue("@AcqPrice2", _trxPortfolio.AcqPrice2);
                        cmd.Parameters.AddWithValue("@AcqVolume2", _trxPortfolio.AcqVolume2);

                        cmd.Parameters.AddWithValue("@AcqPrice3", _trxPortfolio.AcqPrice3);
                        cmd.Parameters.AddWithValue("@AcqVolume3", _trxPortfolio.AcqVolume3);

                        cmd.Parameters.AddWithValue("@AcqPrice4", _trxPortfolio.AcqPrice4);
                        cmd.Parameters.AddWithValue("@AcqVolume4", _trxPortfolio.AcqVolume4);

                        cmd.Parameters.AddWithValue("@AcqPrice5", _trxPortfolio.AcqPrice5);
                        cmd.Parameters.AddWithValue("@AcqVolume5", _trxPortfolio.AcqVolume5);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    if (_trxPortfolio.InstrumentTypePK == 2)
                                    {
                                        M_TrxPortfolio.RealisedAmount = Convert.ToDecimal(dr["RealisedAmount"]);
                                        M_TrxPortfolio.InterestAmount = Convert.ToDecimal(dr["InterestAmount"]);
                                        M_TrxPortfolio.IncomeTaxInterestAmount = Convert.ToDecimal(dr["IncomeTaxInterestAmount"]);
                                        M_TrxPortfolio.IncomeTaxGainAmount = Convert.ToDecimal(dr["IncomeTaxGainAmount"]);
                                        M_TrxPortfolio.GrossAmount = Convert.ToDecimal(dr["GrossAmount"]);
                                        M_TrxPortfolio.NetAmount = Convert.ToDecimal(dr["NetAmount"]);
                                    }
                                    else if (_trxPortfolio.InstrumentTypePK == 4)
                                    {
                                        M_TrxPortfolio.RealisedAmount = Convert.ToDecimal(dr["RealisedAmount"]);
                                        M_TrxPortfolio.NetAmount = Convert.ToDecimal(dr["NetAmount"]);
                                    }
                                    else
                                    {
                                        M_TrxPortfolio.CommissionAmount = Convert.ToDecimal(dr["CommissionAmount"]);
                                        M_TrxPortfolio.LevyAmount = Convert.ToDecimal(dr["LevyAmount"]);
                                        M_TrxPortfolio.KPEIAmount = Convert.ToDecimal(dr["KPEIAmount"]);
                                        M_TrxPortfolio.VATAmount = Convert.ToDecimal(dr["VATAmount"]);
                                        M_TrxPortfolio.WHTAmount = Convert.ToDecimal(dr["WHTAmount"]);
                                        M_TrxPortfolio.OTCAmount = Convert.ToDecimal(dr["OTCAmount"]);
                                        M_TrxPortfolio.IncomeTaxSellAmount = Convert.ToDecimal(dr["IncomeTaxSellAmount"]);
                                        M_TrxPortfolio.RealisedAmount = Convert.ToDecimal(dr["RealisedAmount"]);
                                        M_TrxPortfolio.InterestAmount = Convert.ToDecimal(dr["InterestAmount"]);
                                        M_TrxPortfolio.IncomeTaxInterestAmount = Convert.ToDecimal(dr["IncomeTaxInterestAmount"]);
                                        M_TrxPortfolio.IncomeTaxGainAmount = Convert.ToDecimal(dr["IncomeTaxGainAmount"]);
                                        M_TrxPortfolio.GrossAmount = Convert.ToDecimal(dr["GrossAmount"]);
                                        M_TrxPortfolio.NetAmount = Convert.ToDecimal(dr["NetAmount"]);
                                    }



                                    return M_TrxPortfolio;
                                }

                            }
                            return null;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }


        }


        public string PTPDeposito_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, bool _param5)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                        BEGIN  
                        SET NOCOUNT ON         

                        create table #Text(      
                        [ResultText] [nvarchar](1000)  NULL          
                        )                        
        
                                
                        truncate table #Text  
insert into #Text     
select ''     
insert into #Text
Select  
'NEWM' -- 1.Transaction Status
+ '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
+ '|' + @CompanyID -- 3.IM Code
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
+ '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
+ '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
+ '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end  end -- 10.Investment.DoneAmount
+ '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end  end -- 11.Investment.InterestPercent
+ '|' + case when A.TrxType in (2,3)  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
+ '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
+ '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
+ '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
+ '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
+ '|' + case when A.InvestmentNotes = 'MATURE'  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) else case when A.InvestmentNotes = 'LIQUIDATE'  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end end -- 17.WithdrawalDate
+ '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),0)as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
+ '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar)  else '' end -- 19.Withdrawal Principle
+ '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),0)as nvarchar) end else '' end -- 20.Withdrawal Interest
+ '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),0)as nvarchar) else '' end -- 21.Total Withdrawal Amount
+ '|' + case when A.TrxType = 3  then case when A.CurrencyPK = 1  then '1' else '2' end  else '' end -- 22.Rollover Type
+ '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) else '' end -- 23.Investment.DoneAmount 
+ '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) else '' end -- 24.Investment.InterestPercent 
+ '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
+ '|' + case when A.TrxType = 2  then cast(isnull(cast(((A.TradeAmount + A.InterestAmount) * -1) as decimal(30,2)),'')as nvarchar) else case when A.TrxType in (1)  then cast(isnull(A.AmountTrf,0) as nvarchar) else cast(isnull(cast(A.InterestAmount * -1 as decimal(30,2)),0)as nvarchar) end end-- 26.Amount to be Transfer
+ '|' + -- 27.Statutory Type
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
+ '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,'')))) else '' end end -- 32.Investment.Reference
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
+ '|' + '' 
from (      
    select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
    A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, Z.TrxType TransactionType,
    A.TotalAmount, A.WHTAmount, Z.TrxTypeID InvestmentNotes, Z.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
    A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,F.PTPCode BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
    A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
    case when A.TrxType = 3 then cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) else cast(isnull(A.DoneAmount,0) as decimal(30,2)) end AmountTrf,case when Z.TrxTypeID = 'MATURE' then A.InterestPercent else A.BreakInterestPercent end BreakInterestPercent,Z.AcqDate,
    case when Z.TrxTypeID = 'MATURE' then (round(A.DoneAmount * (A.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.MaturityDate),0)*0.8) 
    else case when Z.TrxTypeID = 'LIQUIDATE' then (round(A.DoneAmount * (A.BreakInterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) 
    else case when Z.TrxTypeID = 'ROLLOVER' then (round(A.DoneAmount * (I.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) 
    else (round(A.DoneAmount * (A.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) end end end InterestAmount,Z.OldReference ParentReference,C.CurrencyPK
    from InvestmentMature Z
    left join investment A on Z.InvestmentPK = A.InvestmentPK and A.StatusSettlement in (1,2)
    left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
    left join Fund C on A.fundpk = C.fundpk and C.status = 2
    left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
    left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
    left join Bank F on A.BankPK = F.BankPK and F.status = 2
    left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
    left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
    left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
    where selected = 1 and A.InvestmentPK in (select InvestmentPK from Investment where StatusSettlement in (1,2))

    Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
    A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, Z.TrxType,
    A.TotalAmount, A.WHTAmount ,Z.TrxTypeID, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
    A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
    A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,Z.AcqDate,Z.OldReference,C.CurrencyPK,Z.TransactionType


)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.ParentReference,A.CurrencyPK 
order by A.ValueDate Asc
select * from #text 
END



                                    ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        //cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Deposito.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Deposito.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public string ImportDealingEquityTemp(string _fileSource, string _userID, string _valueDate)
        {
            string _msg = string.Empty;
            DateTime _now = DateTime.Now;
            try
            {
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = "truncate table dbo.DealingEquityImportTemp";
                        cmd2.ExecuteNonQuery();
                    }
                }

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.DealingEquityImportTemp";
                    bulkCopy.WriteToServer(CreateDataTableFromDealingEquityTempExcelFile(_fileSource));
                }

                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        // 1. Check ada investment yang approve apa engga
                        // 2. check master counterpart
                        // 3. check master instruments
                        // 4. 
                        cmd2.CommandText =
                            @"
                                declare @success	bit,
		                                @msg		nvarchar(max)

	                                set @success	= 1
	                                set @msg		= ''

                                if exists (select * from DealingEquityImportTemp where BuySell <> 'B/S' and InstrumentID  <> '')
                                begin
	                                -- Cek Data Import
	                                if exists (
		                                select *
		                                from Investment
		                                where StatusInvestment = 2 and StatusDealing = 1 and ValueDate = @ValueDate
			                                and InstrumentPK in (
				                                select distinct b.InstrumentPK
				                                from DealingEquityImportTemp a
					                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
				                                where a.BuySell <> 'B/S' and A.InstrumentID  <> ''
			                                )
	                                )
	                                begin
		                                -- Cek Master Counterpart
		                                if not exists (
			                                select distinct CounterpartID
			                                from DealingEquityImportTemp
			                                where BuySell <> 'B/S' and InstrumentID  <> ''
				                                and CounterpartID not in (select distinct ID from Counterpart where [Status] = 2 
				                                and CounterpartPK in (select distinct CounterpartPK from CounterpartCommission where [Status] = 2 and BoardType = 1))
		                                )
		                                begin
			                                -- Cek Master Counterpart & Instrument
			                                if not exists (
				                                select distinct InstrumentID
				                                from DealingEquityImportTemp
				                                where BuySell <> 'B/S' 
					                                and InstrumentID not in (select distinct ID from Instrument where [Status] = 2) and InstrumentID  <> ''
			                                )
			                                begin
				                                begin transaction

				                                begin try
					                                declare @InvestmentPK			int,
							                                @InstrumentPK			int,
							                                @CounterpartPK			int,
							                                @FundPK					int,
							                                @DealingPK				int,
							                                @MaxDealingPK			int,  
							                                @CCounterpartID			nvarchar(100),
							                                @CBuySell				nvarchar(20),
							                                @CInstrumentID			nvarchar(100),
							                                @CPrice					numeric(22,6),
							                                @CLot					numeric(22,4),
							                                @CAmount				numeric(22,4),
							                                @DonePrice				numeric(22,6),
							                                @DoneLot				numeric(22,4),
							                                @DoneAmount				numeric(22,4),
															@InstrumentTypePK		int,
															@BitCheckCounterpartExposure bit

					                                declare @Cp1 nvarchar(100), @Cp2 nvarchar(100), @Cp3 nvarchar(100), @Cp4 nvarchar(100), @Cp5 nvarchar(100),
							                                @Cp6 nvarchar(100), @Cp7 nvarchar(100), @Cp8 nvarchar(100), @Cp9 nvarchar(100), @Cp10 nvarchar(100),
							                                @Cp11 nvarchar(100), @Cp12 nvarchar(100), @Cp13 nvarchar(100), @Cp14 nvarchar(100), @Cp15 nvarchar(100), @Cp16 nvarchar(100)

					                                declare curImport cursor for
						                                select top 1 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16 
						                                from DealingEquityImportTemp 
						                                where BuySell = 'B/S' and InstrumentID  <> ''
					                                open curImport

					                                fetch next from curImport
					                                into @Cp1, @Cp2, @Cp3, @Cp4, @Cp5, @Cp6, @Cp7, @Cp8, @Cp9, @Cp10, @Cp11, @Cp12, @Cp13, @Cp14, @Cp15, @Cp16

					                                while @@fetch_status = 0  
					                                begin  
						                                if @Cp1 <> 'Spare Fund' and isnull(@Cp1, '') <> '' and len(@Cp1) <> 0
						                                begin
							                                declare curCp1 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F1, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F1, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp1 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F1 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp1

							                                fetch next from curCp1   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin


								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp1 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 
																select @InstrumentTypePK = InstrumentTypePK from Instrument where InstrumentPK = @InstrumentPK and status = 2

																--select 	@ValueDate,@ValueDate,@CounterpartPK,@InstrumentTypePK															
																--select @BitCheckCounterpartExposure = [dbo].[FCheckCounterpartExposure] (@ValueDate,@ValueDate,@CounterpartPK,@InstrumentTypePK)
											
																--if isnull(@BitCheckCounterpartExposure, 0) = 1
																--begin
																--set @success	= 0
																--set @msg		= 'Import Dealing Canceled, </br> Can Not Process This Data! ' + ' </br> Counterpart Exposure : ' + @CCounterpartID + ' more than 30% '
														
																--end

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp1   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp1
							                                deallocate curCp1
						                                end

						                                if @Cp2 <> 'Spare Fund' and isnull(@Cp2, '') <> '' and len(@Cp2) <> 0
						                                begin
							                                declare curCp2 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F2, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F2, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp2 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F2 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp2

							                                fetch next from curCp2   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp2 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp2   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp2
							                                deallocate curCp2
						                                end
						
						                                if @Cp3 <> 'Spare Fund' and isnull(@Cp3, '') <> '' and len(@Cp3) <> 0
						                                begin
							                                declare curCp3 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F3, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F3, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp3 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F3 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp3

							                                fetch next from curCp3   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp3 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp3   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp3
							                                deallocate curCp3
						                                end

						                                if @Cp4 <> 'Spare Fund' and isnull(@Cp4, '') <> '' and len(@Cp4) <> 0
						                                begin
							                                declare curCp4 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F4, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F4, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp4 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F4 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp4

							                                fetch next from curCp4   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp4 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp4   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp4
							                                deallocate curCp4
						                                end

						                                if @Cp5 <> 'Spare Fund' and isnull(@Cp5, '') <> '' and len(@Cp5) <> 0
						                                begin
							                                declare curCp5 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F5, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F5, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp5 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F5 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp5

							                                fetch next from curCp5   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp5 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp5   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp5
							                                deallocate curCp5
						                                end

						                                if @Cp6 <> 'Spare Fund' and isnull(@Cp6, '') <> '' and len(@Cp6) <> 0
						                                begin
							                                declare curCp6 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F6, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F6, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp6 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F6 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp6

							                                fetch next from curCp6   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp6 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp6   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp6
							                                deallocate curCp6
						                                end

						                                if @Cp7 <> 'Spare Fund' and isnull(@Cp7, '') <> '' and len(@Cp7) <> 0
						                                begin
							                                declare curCp7 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F7, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F7, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp7 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F7 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp7

							                                fetch next from curCp7   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp7 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp7   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp7
							                                deallocate curCp7
						                                end

						                                if @Cp8 <> 'Spare Fund' and isnull(@Cp8, '') <> '' and len(@Cp8) <> 0
						                                begin
							                                declare curCp8 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F8, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F8, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp8 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F8 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp8

							                                fetch next from curCp8   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp8 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if  @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp8   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp8
							                                deallocate curCp8
						                                end

						                                if @Cp9 <> 'Spare Fund' and isnull(@Cp9, '') <> '' and len(@Cp9) <> 0
						                                begin
							                                declare curCp9 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F9, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F9, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp9 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F9 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp9

							                                fetch next from curCp9   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp9 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp9   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp9
							                                deallocate curCp9
						                                end

						                                if @Cp10 <> 'Spare Fund' and isnull(@Cp10, '') <> '' and len(@Cp10) <> 0
						                                begin
							                                declare curCp10 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F10, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F10, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp10 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F10 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp10

							                                fetch next from curCp10   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp10 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp10   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp10
							                                deallocate curCp10
						                                end

						                                if @Cp11 <> 'Spare Fund' and isnull(@Cp11, '') <> '' and len(@Cp11) <> 0
						                                begin
							                                declare curCp11 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F11, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F11, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp11 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F11 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp11

							                                fetch next from curCp11   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp11 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if  @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp11   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp11
							                                deallocate curCp11
						                                end

						                                if @Cp12 <> 'Spare Fund' and isnull(@Cp12, '') <> '' and len(@Cp12) <> 0
						                                begin
							                                declare curCp12 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F12, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F12, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp12 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F12 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp12

							                                fetch next from curCp12   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp12 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp12   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp12
							                                deallocate curCp12
						                                end

						                                if @Cp13 <> 'Spare Fund' and isnull(@Cp13, '') <> '' and len(@Cp13) <> 0
						                                begin
							                                declare curCp13 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F13, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F13, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp13 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F13 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp13

							                                fetch next from curCp13   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp13 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                            if @CBuySell = 'S'
                                                            begin
	                                                            if @CLot <= @DoneLot
	                                                            begin
		                                                            --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                            --begin
			                                                            update Investment set 
				                                                            CounterpartPK = @CounterpartPK, 
				                                                            SettlementMode = 2, -- Default 'RVP'
				                                                            OrderStatus = 'O', -- Default 'OPEN'
				                                                            DonePrice = @CPrice, DoneLot = @CLot, 
				                                                            DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                            UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                            ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                            where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                            and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                            --end
		                                                            --else
		                                                            --begin
		                                                            --	-- Split Sell
		                                                            --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                            --	begin
		                                                            --		insert into [dbo].[Investment] (
		                                                            --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                            --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                            --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                            --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                            --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                            --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                            --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                            --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                            --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                            --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                            --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                            --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                            --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                            --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                            --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                            --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                            --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                            --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                            --		)
		                                                            --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                            --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                            --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                            --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                            --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                            --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                            --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                            --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                            --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                            --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                            --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                            --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                            --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                            --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                            --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                            --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                            --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                            --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                            --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                            --		from Investment 
		                                                            --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                            --	end

		                                                            --	if (@DoneLot - @CLot) = 0
		                                                            --	begin
		                                                            --		update Investment set 
		                                                            --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                            --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                            --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                            --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                            --	end
		                                                            --	else
		                                                            --	begin
		                                                            --		if @DoneLot > 0
		                                                            --		begin
		                                                            --			update Investment set 
		                                                            --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                            --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                            --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                            --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                            --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                            --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                            --		end                                 
		                                                            --	end
		                                                            --end
	                                                            end
                                                            end

								                                fetch next from curCp13   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp13
							                                deallocate curCp13
						                                end

						                                if @Cp14 <> 'Spare Fund' and isnull(@Cp14, '') <> '' and len(@Cp14) <> 0
						                                begin
							                                declare curCp14 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F14, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F14, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp14 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F14 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp14

							                                fetch next from curCp14   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp14 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp14   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp14
							                                deallocate curCp14
						                                end

						                                if @Cp15 <> 'Spare Fund' and isnull(@Cp15, '') <> '' and len(@Cp15) <> 0
						                                begin
							                                declare curCp15 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F15, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F15, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp15 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F15 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp15

							                                fetch next from curCp15   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp15 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if  @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
                                                                --		end
                                                                --		else
                                                                --		begin
                                                                --			-- Split Sell
                                                                --			if @CPrice >= @DonePrice and @CLot < @DoneLot
                                                                --			begin
                                                                --				insert into [dbo].[Investment] (
                                                                --					[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
                                                                --					[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
                                                                --					[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
                                                                --					[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
                                                                --					[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
                                                                --					[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
                                                                --					[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
                                                                --					[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
                                                                --					[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
                                                                --					[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
                                                                --					[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
                                                                --					[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
                                                                --					[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
                                                                --					[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
                                                                --					[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
                                                                --					[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
                                                                --					[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
                                                                --					[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
                                                                --				)
                                                                --				select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
                                                                --					[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
                                                                --					@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
                                                                --					[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
                                                                --					[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
                                                                --					@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
                                                                --					[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
                                                                --					[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
                                                                --					[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
                                                                --					[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
                                                                --					1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
                                                                --					[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
                                                                --					[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
                                                                --					@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
                                                                --					@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
                                                                --					[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
                                                                --					[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
                                                                --					[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
                                                                --					[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
                                                                --				from Investment 
                                                                --				where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
                                                                --			end

                                                                --			if (@DoneLot - @CLot) = 0
                                                                --			begin
                                                                --				update Investment set 
                                                                --					StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
                                                                --			end
                                                                --			else
                                                                --			begin
                                                                --				if @DoneLot > 0
                                                                --				begin
                                                                --					update Investment set 
                                                                --						DoneLot = @DoneLot - isnull(@CLot, 0), 
                                                                --						DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
                                                                --						DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
                                                                --						UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
                                                                --					where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
                                                                --						and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
                                                                --				end                                 
                                                                --			end
                                                                --		end
                                                                --	end
                                                                --endif @CBuySell = 'S'
                                                                --begin
                                                                --	if @CPrice >= @DonePrice and @CLot <= @DoneLot
                                                                --	begin
                                                                --		if @CPrice >= @DonePrice and @CLot = @DoneLot
                                                                --		begin
                                                                --			update Investment set 
                                                                --				CounterpartPK = @CounterpartPK, 
                                                                --				SettlementMode = 2, -- Default 'RVP'
                                                                --				OrderStatus = 'O', -- Default 'OPEN'
                                                                --				DonePrice = @CPrice, DoneLot = @CLot, 
                                                                --				DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
                                                                --				ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
                                                                --		end
                                                                --		else
                                                                --		begin
                                                                --			-- Split Sell
                                                                --			if @CPrice >= @DonePrice and @CLot < @DoneLot
                                                                --			begin
                                                                --				insert into [dbo].[Investment] (
                                                                --					[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
                                                                --					[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
                                                                --					[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
                                                                --					[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
                                                                --					[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
                                                                --					[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
                                                                --					[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
                                                                --					[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
                                                                --					[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
                                                                --					[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
                                                                --					[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
                                                                --					[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
                                                                --					[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
                                                                --					[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
                                                                --					[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
                                                                --					[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
                                                                --					[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
                                                                --					[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
                                                                --				)
                                                                --				select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
                                                                --					[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
                                                                --					@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
                                                                --					[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
                                                                --					[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
                                                                --					@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
                                                                --					[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
                                                                --					[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
                                                                --					[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
                                                                --					[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
                                                                --					1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
                                                                --					[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
                                                                --					[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
                                                                --					@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
                                                                --					@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
                                                                --					[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
                                                                --					[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
                                                                --					[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
                                                                --					[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
                                                                --				from Investment 
                                                                --				where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
                                                                --			end

                                                                --			if (@DoneLot - @CLot) = 0
                                                                --			begin
                                                                --				update Investment set 
                                                                --					StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
                                                                --			end
                                                                --			else
                                                                --			begin
                                                                --				if @DoneLot > 0
                                                                --				begin
                                                                --					update Investment set 
                                                                --						DoneLot = @DoneLot - isnull(@CLot, 0), 
                                                                --						DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
                                                                --						DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
                                                                --						UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
                                                                --					where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
                                                                --						and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
                                                                --				end                                 
                                                                --			end
                                                                --		end
	                                                                end
                                                                end

								                                fetch next from curCp15   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp15
							                                deallocate curCp15
						                                end

						                                if @Cp16 <> 'Spare Fund' and isnull(@Cp16, '') <> '' and len(@Cp16) <> 0
						                                begin
							                                declare curCp16 Cursor For
								                                select 
									                                a.CounterpartID as CCounterpartID, a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
									                                cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
									                                cast(isnull(a.F16, 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount
								                                from DealingEquityImportTemp a
									                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
									                                left join Fund c on c.ID = @Cp16 and c.[Status] = 2
								                                where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID  <> ''
							                                open curCp16

							                                fetch next from curCp16   
							                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount

							                                while @@fetch_status = 0  
							                                begin
								                                ---- Cek Data
								                                --select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot
								
								                                select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
								                                select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
								                                select @FundPK = FundPK from Fund where ID = @Cp16 and [Status] = 2
								                                select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

								                                select 
									                                @InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
									                                @DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
								                                from Investment 
								                                where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
									                                and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or Orderstatus = 'O' or OrderStatus = 'PARTIAL')									
		
								                                ---- Cek Data
								                                --select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK
								
								                                if @CBuySell = 'B'
                                                                begin
	                                                                --if @CPrice <= @DonePrice and @CLot <= @DoneLot
	                                                                --begin
	                                                                --	if @CPrice <= @DonePrice and @CLot = @DoneLot
	                                                                --	begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 1, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
	                                                                --	end
	                                                                --	else
	                                                                --	begin
	                                                                --		-- Split Buy
	                                                                --		if @CPrice <= @DonePrice and @CLot < @DoneLot
	                                                                --		begin
	                                                                --			insert into [dbo].[Investment] (
	                                                                --				[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
	                                                                --				[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
	                                                                --				[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
	                                                                --				[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
	                                                                --			)
	                                                                --			select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
	                                                                --				[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
	                                                                --				@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
	                                                                --				[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
	                                                                --				[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
	                                                                --				@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
	                                                                --				[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
	                                                                --				[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
	                                                                --				[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
	                                                                --				[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
	                                                                --				1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
	                                                                --				[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
	                                                                --				[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
	                                                                --				@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
	                                                                --				@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
	                                                                --				[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
	                                                                --				[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
	                                                                --				[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
	                                                                --				[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
	                                                                --			from Investment 
	                                                                --			where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
	                                                                --		end

	                                                                --		if (@DoneLot - @CLot) = 0
	                                                                --		begin
	                                                                --			update Investment set 
	                                                                --				StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
	                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --		end
	                                                                --		else
	                                                                --		begin
	                                                                --			if @DoneLot > 0
	                                                                --			begin
	                                                                --				update Investment set 
	                                                                --					DoneLot = @DoneLot - isnull(@CLot, 0), 
	                                                                --					DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
	                                                                --					DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
	                                                                --					UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
	                                                                --				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
	                                                                --					and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
	                                                                --			end                                 
	                                                                --		end
	                                                                --	end
	                                                                --end
                                                                end

								                                if @CBuySell = 'S'
                                                                begin
	                                                                if @CLot <= @DoneLot
	                                                                begin
		                                                                --if @CPrice >= @DonePrice and @CLot = @DoneLot
		                                                                --begin
			                                                                update Investment set 
				                                                                CounterpartPK = @CounterpartPK, 
				                                                                SettlementMode = 2, -- Default 'RVP'
				                                                                OrderStatus = 'O', -- Default 'OPEN'
				                                                                DonePrice = @CPrice, DoneLot = @CLot, 
				                                                                DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
				                                                                UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
				                                                                ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
			                                                                where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
				                                                                and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
		                                                                --end
		                                                                --else
		                                                                --begin
		                                                                --	-- Split Sell
		                                                                --	if @CPrice >= @DonePrice and @CLot < @DoneLot
		                                                                --	begin
		                                                                --		insert into [dbo].[Investment] (
		                                                                --			[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
		                                                                --			[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
		                                                                --			[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
		                                                                --			[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
		                                                                --		)
		                                                                --		select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
		                                                                --			[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
		                                                                --			@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
		                                                                --			[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
		                                                                --			[SettlementDate], [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
		                                                                --			@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
		                                                                --			[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
		                                                                --			[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
		                                                                --			[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
		                                                                --			[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
		                                                                --			1 as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
		                                                                --			[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
		                                                                --			[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
		                                                                --			@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
		                                                                --			@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
		                                                                --			[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
		                                                                --			[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
		                                                                --			[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
		                                                                --			[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
		                                                                --		from Investment 
		                                                                --		where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
		                                                                --	end

		                                                                --	if (@DoneLot - @CLot) = 0
		                                                                --	begin
		                                                                --		update Investment set 
		                                                                --			StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
		                                                                --			UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --		where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --			and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --	end
		                                                                --	else
		                                                                --	begin
		                                                                --		if @DoneLot > 0
		                                                                --		begin
		                                                                --			update Investment set 
		                                                                --				DoneLot = @DoneLot - isnull(@CLot, 0), 
		                                                                --				DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
		                                                                --				DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
		                                                                --				UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
		                                                                --			where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
		                                                                --				and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
		                                                                --		end                                 
		                                                                --	end
		                                                                --end
	                                                                end
                                                                end

								                                fetch next from curCp16   
								                                into @CCounterpartID, @CBuySell, @CInstrumentID, @CPrice, @CLot, @CAmount
							                                end   
							                                close curCp16
							                                deallocate curCp16
						                                end

						                                fetch next from curImport 
						                                into @Cp1, @Cp2, @Cp3, @Cp4, @Cp5, @Cp6, @Cp7, @Cp8, @Cp9, @Cp10, @Cp11, @Cp12, @Cp13, @Cp14, @Cp15, @Cp16
					                                end   
					                                close curImport
					                                deallocate curImport
				                                end try
				                                begin catch
					                                rollback transaction
					                                set @success	= 0
					                                set @msg		= cast(error_message() as nvarchar(max))
				                                end catch

				                                if(@success = 1)
				                                begin
					                                commit transaction
					                                set @msg = 'Import Dealing Equity Success'
				                                end
			                                end
			                                else
			                                begin
				                                set @msg = 'Import Dealing Equity Canceled, import data does not exist in master instrument!'
			                                end
		                                end
		                                else
		                                begin
			                                set @msg = 'Import Dealing Equity Canceled, import data does not exist in master counterpart!'
		                                end
	                                end
	                                else
	                                begin
		                                set @msg = 'Import Dealing Equity Canceled, import data or data pending not found!'
	                                end
                                end
                                else
                                begin
	                                set @msg = 'Import Dealing Equity Canceled, import data not found!'
                                end
								select @msg as ResultMsg

                            ";
                        cmd2.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd2.Parameters.AddWithValue("@UsersID", _userID);
                        cmd2.Parameters.AddWithValue("@LastUpdate", _now);
                        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                        {
                            if (!dr2.HasRows)
                            {
                                _msg = "Import Dealing Equity Canceled, import data not found!";
                            }
                            else
                            {
                                dr2.Read();
                                _msg = Convert.ToString(dr2["ResultMsg"]);
                            }
                        }
                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }



        public decimal OMSEquityGetNetAvailableCash(DateTime _date, int _fundPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                     
Declare @valueDateT4 datetime

create table #CashInvestmentProjection
(FundPK int,amount numeric(22,4), Description nvarchar(400))
Declare @MaxEndDayTrailsDate datetime
Declare @TrailsPK int


Select @MaxEndDayTrailsDate = max(ValueDate) from EndDayTrails where status = 2
and ValueDate < @ValueDate
	

	
Select @TrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio
where ValueDate =(
	Select Max(ValueDate) from EndDayTrailsFundPortfolio where status = 2 and ValueDate < @ValueDate  and FundPK = @FundPK
) and status = 2  and FundPK = @FundPK

if @FundPK = 0
BEGIN
	Set @ValueDateT4 = dbo.fworkingday(@ValueDate,4)
	BEGIN
	-- IMMEDIATE SUBS, CASH, AR JATOH TEMPO,BOND TD SETTLED, - AP >= ValueDate, REDEMPTION
	-- + jual Settled hari ini - Beli settled >= ValueDate

	-- CASH
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	select @FundPK, 
	[dbo].[FGetGroupAccountFundJournalBalance] (@ValueDate,2),'CASH AT BANK'

	--IMMEDIATE SUBS
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status <> 3 and BitImmediateTransaction = 1
	and ValueDate >= @MaxEndDayTrailsDate

	--IMMEDIATE REDEMPTION
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status <> 3 
	and ValueDate >= @MaxEndDayTrailsDate

	-- BOND AND TD Settled
	insert into #CashInvestmentProjection (FundPK,amount, Description)
	Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	where TrailsPK = @TrailsPK
	And MaturityDate = @ValueDate 


	-- AP TRANSAKSI DAN FEE 

    insert into #CashInvestmentProjection (FundPK,amount,Description)
    select @FundPK, 
    [dbo].[FGetGroupAccountFundJournalBalance] (@ValueDateT4,64) * -1,'ALL PAYABLE'


	-- AR TRANSAKSI DAN OTHERS AR
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	select @FundPK, 
	[dbo].[FGetGroupAccountFundJournalBalance] (@ValueDateT4,40),'ALL RECEIVABLE'


	-- AP TRANSAKSI HARI H
if 	@MaxEndDayTrailsDate > @ValueDate
BEGIN
        
    insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	from investment 
	where  SettlementDate > @MaxEndDayTrailsDate
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 1
END
ELSE
BEGIN
       insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	from investment 
	where  SettlementDate >= @ValueDate
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 1
END



	-- AR TRANSAKSI SETTLED PER VALUE DATE
	insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	from investment 
	where  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 2
	and OrderStatus = 'M'
	-- 

	END
	select sum(isnull(Amount,0)) Amount from #CashInvestmentProjection

END
ELSE 
BEGIN
	Set @ValueDateT4 = dbo.fworkingday(@ValueDate,4)
	BEGIN

	-- CASH
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	select @FundPK, 
	[dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDate,2,@FundPK),'CASH AT BANK'
		
	--IMMEDIATE SUBS
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status <> 3 and BitImmediateTransaction = 1
	and ValueDate >= @MaxEndDayTrailsDate
	and FundPK = @FundPK

	--IMMEDIATE REDEMPTION
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status <> 3 
	and ValueDate >= @MaxEndDayTrailsDate
	and FundPK = @FundPK

	-- BOND AND TD Settled
	insert into #CashInvestmentProjection (FundPK,amount, Description)
	Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	where TrailsPK = @TrailsPK
	And MaturityDate = @ValueDate 
	and FundPK = @fundPK

	-- AP TRANSAKSI DAN FEE 
    insert into #CashInvestmentProjection (FundPK,amount,Description)
    select @FundPK, 
    [dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDateT4,64,@FundPK) * -1,'ALL PAYABLE'

	-- AR TRANSAKSI DAN OTHERS AR
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	select @FundPK, 
	[dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDateT4,40,@FundPK),'ALL RECEIVABLE'


	-- AP TRANSAKSI HARI H
if 	@MaxEndDayTrailsDate > @ValueDate
BEGIN
        
    insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	from investment 
	where  SettlementDate > @MaxEndDayTrailsDate
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 1
    and FundPK = @FundPK
END
ELSE
BEGIN
       insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	from investment 
	where  SettlementDate >= @ValueDate
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 1
 and FundPK = @FundPK
END

	-- AR TRANSAKSI SETTLED PER VALUE DATE
	insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	from investment 
	where  fundpk  = @FundPK and  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 2
	and OrderStatus = 'M'
	-- 



	END
                        
	select sum(isnull(Amount,0)) Amount from #CashInvestmentProjection
END


                         ";
                        cmd.Parameters.AddWithValue("@ValueDate", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToDecimal(dr["Amount"]);
                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public List<OMSEquityCashProjection> OMSEquityGetNetAvailableCashDetail(DateTime _date, int _fundPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OMSEquityCashProjection> L_model = new List<OMSEquityCashProjection>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

Declare @valueDateT4 datetime

create table #CashInvestmentProjection
(FundPK int,amount numeric(22,4), Description nvarchar(400))
Declare @MaxEndDayTrailsDate datetime
Declare @TrailsPK int


Select @MaxEndDayTrailsDate = max(ValueDate) from EndDayTrails where status = 2
and ValueDate < @ValueDate
	

	
Select @TrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio 
where ValueDate =(
	Select Max(ValueDate) from EndDayTrailsFundPortfolio where status = 2 and ValueDate < @ValueDate  and FundPK = @FundPK
) and status = 2  and FundPK = @FundPK

if @FundPK = 0
BEGIN
	Set @ValueDateT4 = dbo.fworkingday(@ValueDate,4)
	BEGIN
	-- IMMEDIATE SUBS, CASH, AR JATOH TEMPO,BOND TD SETTLED, - AP >= ValueDate, REDEMPTION
	-- + jual Settled hari ini - Beli settled >= ValueDate

	-- CASH
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	select @FundPK, 
	[dbo].[FGetGroupAccountFundJournalBalance] (@ValueDate,2),'CASH AT BANK'

	--IMMEDIATE SUBS
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status <> 3 and BitImmediateTransaction = 1
	and ValueDate >= @MaxEndDayTrailsDate

	--IMMEDIATE REDEMPTION
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status <> 3 
	and ValueDate >= @MaxEndDayTrailsDate

	-- BOND AND TD Settled
	insert into #CashInvestmentProjection (FundPK,amount, Description)
	Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	where TrailsPK = @TrailsPK
	And MaturityDate = @ValueDate 


	-- AP TRANSAKSI DAN FEE 

    insert into #CashInvestmentProjection (FundPK,amount,Description)
    select @FundPK, 
    [dbo].[FGetGroupAccountFundJournalBalance] (@ValueDateT4,64) * -1,'ALL PAYABLE'





	-- AR TRANSAKSI DAN OTHERS AR
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	select @FundPK, 
	[dbo].[FGetGroupAccountFundJournalBalance] (@ValueDateT4,40),'ALL RECEIVABLE'


	-- AP TRANSAKSI HARI H
	insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	from investment 
	where   SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 1


	-- AR TRANSAKSI SETTLED PER VALUE DATE
	insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	from investment 
	where  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 2
	and OrderStatus = 'M'
	-- 

	END
	   select isnull(Amount,0) Amount, Description FSource from #CashInvestmentProjection
			                where amount <> 0

END
ELSE 
BEGIN
	Set @ValueDateT4 = dbo.fworkingday(@ValueDate,4)
	BEGIN

	-- CASH
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	select @FundPK, 
	[dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDate,2,@FundPK),'CASH AT BANK'
		
	--IMMEDIATE SUBS
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status <> 3 and BitImmediateTransaction = 1
	and ValueDate >= @MaxEndDayTrailsDate
	and FundPK = @FundPK

	--IMMEDIATE REDEMPTION
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status <> 3 
	and ValueDate >= @MaxEndDayTrailsDate
	and FundPK = @FundPK

	-- BOND AND TD Settled
	insert into #CashInvestmentProjection (FundPK,amount, Description)
	Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	where TrailsPK = @TrailsPK
	And MaturityDate = @ValueDate 
	and FundPK = @fundPK

	-- AP TRANSAKSI DAN FEE 
    insert into #CashInvestmentProjection (FundPK,amount,Description)
    select @FundPK, 
    [dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDateT4,64,@FundPK) * -1,'ALL PAYABLE'

	-- AR TRANSAKSI DAN OTHERS AR
	insert into #CashInvestmentProjection (FundPK,amount,Description)
	select @FundPK, 
	[dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDateT4,40,@FundPK),'ALL RECEIVABLE'


	-- AP TRANSAKSI HARI H

if 	@MaxEndDayTrailsDate > @ValueDate
BEGIN
        
    insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	from investment 
	where fundpk  = @FundPK and SettlementDate > @MaxEndDayTrailsDate
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 1
END
ELSE
BEGIN
       insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	from investment 
	where fundpk  = @FundPK and SettlementDate >= @ValueDate
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 1
END

	-- AR TRANSAKSI SETTLED PER VALUE DATE
	insert into #CashInvestmentProjection (FundPK,Amount,Description)
	select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	from investment 
	where  fundpk  = @FundPK and  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	and statusInvestment  <> 3 
	and statusDealing  <> 3
	and statusSettlement  <> 3
	and TrxType = 2
	and OrderStatus = 'M'
	-- 

	END
                        
	   select isnull(Amount,0) Amount, Description FSource from #CashInvestmentProjection
			                where amount <> 0
END


                        ";
                        cmd.Parameters.AddWithValue("@valueDate", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    OMSEquityCashProjection M_model = new OMSEquityCashProjection();
                                    M_model.FSource = Convert.ToString(dr["FSource"]);
                                    M_model.Amount = Convert.ToDecimal(dr["Amount"]);
                                    L_model.Add(M_model);
                                }
                            }
                            return L_model;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public Boolean Validate_CheckAvailableCash(decimal _amount, DateTime _valueDate, int _fundPK)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                            
                        declare @ValidateAmount numeric (18,4)
                      
                        Declare @ValueDateT4 datetime

                        create table #CashInvestmentProjection
                        (FundPK int,amount numeric(22,4), Description nvarchar(400))
                        Declare @MaxEndDayTrailsDate datetime
                        Declare @TrailsPK int


                        Select @MaxEndDayTrailsDate = max(ValueDate) from EndDayTrails where status = 2
                        and ValueDate < @ValueDate
	

	
                        Select @TrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio
                        where ValueDate =(
	                        Select Max(ValueDate) from EndDayTrailsFundPortfolio where status = 2 and ValueDate < @ValueDate  and FundPK = @FundPK
                        ) and status = 2  and FundPK = @FundPK

                        if @FundPK = 0
                        BEGIN
	                        Set @ValueDateT4 = dbo.fworkingday(@ValueDate,4)
	                        BEGIN
	                        -- IMMEDIATE SUBS, CASH, AR JATOH TEMPO,BOND TD SETTLED, - AP >= ValueDate, REDEMPTION
	                        -- + jual Settled hari ini - Beli settled >= ValueDate

	                        -- CASH
	                        insert into #CashInvestmentProjection (FundPK,amount,Description)
	                        select @FundPK, 
	                        [dbo].[FGetGroupAccountFundJournalBalance] (@ValueDate,2),'CASH AT BANK'

	                        --IMMEDIATE SUBS
	                        insert into #CashInvestmentProjection (FundPK,amount,Description)
	                        Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status <> 3 and BitImmediateTransaction = 1
	                        and ValueDate >= @MaxEndDayTrailsDate

	                        --IMMEDIATE REDEMPTION
	                        insert into #CashInvestmentProjection (FundPK,amount,Description)
	                        Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status <> 3 
	                        and ValueDate >= @MaxEndDayTrailsDate

	                        -- BOND AND TD Settled
	                        insert into #CashInvestmentProjection (FundPK,amount, Description)
	                        Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	                        where TrailsPK = @TrailsPK
	                        And MaturityDate = @ValueDate 


	                        -- AP TRANSAKSI DAN FEE 

                            insert into #CashInvestmentProjection (FundPK,amount,Description)
                            select @FundPK, 
                            [dbo].[FGetGroupAccountFundJournalBalance] (@ValueDateT4,64) * -1,'ALL PAYABLE'


	                        -- AR TRANSAKSI DAN OTHERS AR
	                        insert into #CashInvestmentProjection (FundPK,amount,Description)
	                        select @FundPK, 
	                        [dbo].[FGetGroupAccountFundJournalBalance] (@ValueDateT4,40),'ALL RECEIVABLE'


	                        -- AP TRANSAKSI HARI H
                        if 	@MaxEndDayTrailsDate > @ValueDate
                        BEGIN
        
                            insert into #CashInvestmentProjection (FundPK,Amount,Description)
	                        select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	                        from investment 
	                        where  SettlementDate > @MaxEndDayTrailsDate
	                        and statusInvestment  <> 3 
	                        and statusDealing  <> 3
	                        and statusSettlement  <> 3
	                        and TrxType = 1
                        END
                        ELSE
                        BEGIN
                               insert into #CashInvestmentProjection (FundPK,Amount,Description)
	                        select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	                        from investment 
	                        where  SettlementDate >= @ValueDate
	                        and statusInvestment  <> 3 
	                        and statusDealing  <> 3
	                        and statusSettlement  <> 3
	                        and TrxType = 1
                        END



	                        -- AR TRANSAKSI SETTLED PER VALUE DATE
	                        insert into #CashInvestmentProjection (FundPK,Amount,Description)
	                        select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	                        from investment 
	                        where  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	                        and statusInvestment  <> 3 
	                        and statusDealing  <> 3
	                        and statusSettlement  <> 3
	                        and TrxType = 2
	                        and OrderStatus = 'M'
	                        -- 

	                        END
	                        select sum(isnull(Amount,0)) Amount from #CashInvestmentProjection

                        END
                        ELSE 
                        BEGIN
	                        Set @ValueDateT4 = dbo.fworkingday(@ValueDate,4)
	                        BEGIN

	                        -- CASH
	                        insert into #CashInvestmentProjection (FundPK,amount,Description)
	                        select @FundPK, 
	                        [dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDate,2,@FundPK),'CASH AT BANK'
		
	                        --IMMEDIATE SUBS
	                        insert into #CashInvestmentProjection (FundPK,amount,Description)
	                        Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status <> 3 and BitImmediateTransaction = 1
	                        and ValueDate >= @MaxEndDayTrailsDate
	                        and FundPK = @FundPK

	                        --IMMEDIATE REDEMPTION
	                        insert into #CashInvestmentProjection (FundPK,amount,Description)
	                        Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status <> 3 
	                        and ValueDate >= @MaxEndDayTrailsDate
	                        and FundPK = @FundPK

	                        -- BOND AND TD Settled
	                        insert into #CashInvestmentProjection (FundPK,amount, Description)
	                        Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	                        where TrailsPK = @TrailsPK
	                        And MaturityDate = @ValueDate 
	                        and FundPK = @fundPK

	                        -- AP TRANSAKSI DAN FEE 
                            insert into #CashInvestmentProjection (FundPK,amount,Description)
                            select @FundPK, 
                            [dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDateT4,64,@FundPK) * -1,'ALL PAYABLE'

	                        -- AR TRANSAKSI DAN OTHERS AR
	                        insert into #CashInvestmentProjection (FundPK,amount,Description)
	                        select @FundPK, 
	                        [dbo].[FGetGroupAccountFundJournalBalanceByFundPK] (@ValueDateT4,40,@FundPK),'ALL RECEIVABLE'


	                        -- AP TRANSAKSI HARI H
                        if 	@MaxEndDayTrailsDate > @ValueDate
                        BEGIN
        
                            insert into #CashInvestmentProjection (FundPK,Amount,Description)
	                        select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	                        from investment 
	                        where  SettlementDate > @MaxEndDayTrailsDate
	                        and statusInvestment  <> 3 
	                        and statusDealing  <> 3
	                        and statusSettlement  <> 3
	                        and TrxType = 1
                            and FundPK = @FundPK
                        END
                        ELSE
                        BEGIN
                               insert into #CashInvestmentProjection (FundPK,Amount,Description)
	                        select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	                        from investment 
	                        where  SettlementDate >= @ValueDate
	                        and statusInvestment  <> 3 
	                        and statusDealing  <> 3
	                        and statusSettlement  <> 3
	                        and TrxType = 1
                         and FundPK = @FundPK
                        END

	                        -- AR TRANSAKSI SETTLED PER VALUE DATE
	                        insert into #CashInvestmentProjection (FundPK,Amount,Description)
	                        select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	                        from investment 
	                        where  fundpk  = @FundPK and  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	                        and statusInvestment  <> 3 
	                        and statusDealing  <> 3
	                        and statusSettlement  <> 3
	                        and TrxType = 2
	                        and OrderStatus = 'M'
	                        -- 

	                        END
                        
	  
                        END


                        select @ValidateAmount = sum(isnull(Amount,0)) from #CashInvestmentProjection

                        IF (@Amount > @ValidateAmount)
                        BEGIN
	                        select 1 Result
                        END
                        ELSE	
                        BEGIN
	                        select 0 Result
                        END 
                           ";

                        cmd.Parameters.AddWithValue("@Amount", _amount);
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToBoolean(dr["Result"]);

                            }
                            return false;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int EndDayTrails_Generate(string _usersID, DateTime _valueDate, EndDayTrails _edt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";

                        if (!_host.findString(_edt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_edt.FundFrom))
                        {
                            _paramFund = "And A.FundPK in ( " + _edt.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        Declare @XFundPK int
                        Declare @XFundID nvarchar(50)
                        Declare @TrailsPK int

                        DECLARE X CURSOR FOR     

                        select FundPK,ID from Fund A where status in (1,2)  " + _paramFund + @"

                        Open X
                        Fetch Next From X
                        Into @XFundPK,@XFundID

                        While @@FETCH_STATUS = 0
                        BEGIN  

                      -- VOID EDT DULU

                        
                        IF EXISTS(select * from EndDayTrails where ValueDate = @ValueDate and status = 2 and FundPK = @XFundPK)
                        BEGIN

                            update FundJournal set Posted = 0,Status = 3,VoidUsersID = @UsersID ,VoidTime= @lastUpdate, LastUpdate = @LastUpdate 			
                            where  Type not in (1,11) and Status = 2 and TrxName <> 'SUBSCRIPTION' and TrxNo =
                            (
                            Select EndDayTrailsPK from EndDayTrails where ValueDate = @ValueDate and FundPK = @XFundPK and status = 2
                            )

                        END

                        update EndDayTrails set status = 3,VoidUsersID = @UsersID,VoidTime = @lastUpdate,LastUpdate=@lastUpdate    
                        where ValueDate = @ValueDate and status = 2  and FundPK = @XFundPK  
                         
                        --Delete FundClientPosition where Date = dbo.FWorkingDay(@ValueDate,1) and FundPK = @XFundPK
                         

                      
                        --update CloseNav set status = 3,VoidUsersID = @UsersID ,VoidTime= @lastUpdate, LastUpdate = @LastUpdate 
                        --where Date = @ValueDate and status <> 3 and FundPK = @XFundPK


                        Fetch next From X   
                        Into @XFundPK,@XFundID                
                        End                  
                        Close X                  
                        Deallocate X 
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);
                        cmd.ExecuteNonQuery();

                        //using (SqlDataReader dr = cmd.ExecuteReader())
                        //{
                        //    if (dr.HasRows)
                        //    {
                        //        dr.Read();
                        //        return Convert.ToInt32(dr["LastPK"]);

                        //    }
                        //    return 0;
                        //}

                    }
                }


                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";

                        if (!_host.findString(_edt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_edt.FundFrom))
                        {
                            _paramFund = "And A.FundPK in ( " + _edt.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

Create Table #TempInterest
(
InstrumentID nvarchar(100),
InterestAmount numeric(22,4),
TaxAmount numeric(22,4),
FinalAmount numeric(22,4)
)

Create Table #Mature
(
InstrumentPK int,FundPK int,TrxAmount numeric(22,4),
MarketValue numeric(22,4),InstrumentTypePK int,CurrencyPK int,
InstrumentID nvarchar(50),NextCouponDate datetime,Balance numeric(22,4),
TaxExpensePercent numeric(22,4), AcqDate datetime, MaturityDate datetime
,PaymentModeOnMaturity int, InterestDaysType int, InterestPercent numeric(18,8)
, InterestPaymentType int
)

Create Table #RecCoupon
(
InstrumentPK int,FundPK int,TrxAmount numeric(22,4),
MarketValue numeric(22,4),InstrumentTypePK int,CurrencyPK int,
InstrumentID nvarchar(50),LastCouponDate datetime,NextCouponDate datetime,Balance numeric(22,4),
TaxExpensePercent numeric(22,4), AcqDate datetime, MaturityDate datetime
,PaymentModeOnMaturity int, InterestDaysType int, InterestPercent numeric(18,8)
, InterestPaymentType int, RecCouponDate datetime
)



Create Table #ZFundFee               
(                  
DateOfPayment int,  
FundPK int,                  
ManagementFeePercent numeric(18,8),
CustodiFeePercent numeric(18,8),
AuditFeeAmount numeric(18,4),
MovementFeeAmount numeric(18,4),
ManagementFeeDays int,
CustodiFeeDays int,
AuditFeeDays int,
SinvestFeeDays int,
FundType int,
BitSinvestFee bit,
OtherFeeOneAmount numeric(18,4),
OtherFeeTwoAmount numeric(18,4),
)   

Create Table #ZDividenSaham                  
(                  
InstrumentPK int,     
FundPK int,                  
LastVolume numeric(18,4),
PaymentDate datetime,
RecordingDate datetime,
Earn numeric(22,4),
Hold numeric(22,4)
)   
                        
                        Declare @XFundPK int
                        Declare @XFundID nvarchar(50)
                        Declare @TrailsPK int

                        DECLARE X CURSOR FOR     

                        select FundPK,ID from Fund A where status in (1,2)  " + _paramFund + @"

                        Open X
                        Fetch Next From X
                        Into @XFundPK,@XFundID

                        While @@FETCH_STATUS = 0
                        BEGIN  

       

---------------------------------



Declare @MSG nvarchar (Max)   
Declare @PeriodPK int                  
Declare @maxEndDayTrailsPK int    
Declare @DateYesterday datetime 
Declare @DefaultCashAtBankPK int


set @DefaultCashAtBankPK = 3

Select  @DateYesterday  = ValueDate From enddaytrails
where status = 2 and valuedate =(
Select Max(valueDate) From EnddayTrails where status = 2 and ValueDate < @ValueDate and FundPK = @XFundPK 
) and FundPK = @XFundPK


Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  and status = 2                
Select @maxEndDayTrailsPK = ISNULL(EndDayTrailsPK,0) + 1 from EndDayTrails     

set @maxEndDayTrailsPK = isnull(@maxEndDayTrailsPK,1)               



Insert into EndDayTrails(EndDayTrailsPK,HistoryPK,Status,ValueDate,FundPK,BitValidate,LogMessages
,EntryUsersID,EntryTime,LastUpdate)                    
Select @maxEndDayTrailsPK,1,2,@ValueDate,@XFundPK,0,'',@UsersID,@LastUpdate,@LastUpdate  

---- NEW -----
--if Not Exists(              
--Select * from CloseNAV where Status = 2 and date = @DateYesterday             
--)              
--BEGIN              
--Set @MSG = 'MISSING DATA: Close NAV Yesterday'              
--Update EndDayTrails set BitValidate = 0,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1               
--Select @maxEndDayTrailsPK LastPK                   
--RETURN;                   
--END         




-- REVAL SEMENTARA --

	IF NOT Exists(              
    Select * from ClosePrice where Status = 2 and date = @ValueDate              
    )  
    BEGIN
        Declare @RFundJournalPK int
        Declare @RRevaluationAcc    int                  
        Declare @RUnrealisedAcc    int   
        Declare @RDate    datetime  
        Declare @RFundPK    int   
        Declare @RInstrumentPK    int   
        Declare @RInstrumentTypePK    int  
        Declare @RInstrumentID    nvarchar(50)   
        Declare @RUnrealised    numeric(18,4)  

        DECLARE R CURSOR FOR

        select ValueDate,A.FundPK,A.InstrumentPK,A.InstrumentTypePK,C.ID InstrumentID,sum(DoneVolume *  ((AvgPrice - ClosePrice)/100))  Unrealised from Investment A
        left join FundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK and B.status = 2 and Date = dbo.Fworkingday(@ValueDate,-1)
        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2       
        where StatusSettlement = 2 and A.FundPK = @XFundPK and ValueDate = @ValueDate and A.InstrumentTypePK in (1,4,16)
        group by ValueDate,A.FundPK,A.InstrumentPK,A.InstrumentTypePK,C.ID
        union all
        select ValueDate,A.FundPK,A.InstrumentPK,A.InstrumentTypePK,C.ID InstrumentID,sum(DoneVolume *  ((AvgPrice - ClosePrice)/100)) Unrealised from Investment A
        left join FundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK and A.AcqDate = B.AcqDate and B.status = 2 and Date = dbo.Fworkingday(@ValueDate,-1)
        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2       
        where StatusSettlement = 2 and A.FundPK = @XFundPK and ValueDate = @ValueDate and A.InstrumentTypePK not in (1,4,5,16)
        group by ValueDate,A.FundPK,A.InstrumentPK,A.InstrumentTypePK,C.ID



        Open R
        Fetch Next From R
        Into @RDate,@RFundPK,@RInstrumentPK,@RInstrumentTypePK,@RInstrumentID,@RUnrealised

        While @@FETCH_STATUS = 0
        BEGIN

            IF @RInstrumentTypePK in (2,3,8,9,11,13,14,15) 
            BEGIN
                Select @RRevaluationAcc = RevaluationBond From FundAccountingSetup where Status = 2   and fundPK = @RFundPK 
                Select @RUnrealisedAcc = UnrealisedBond From FundAccountingSetup where Status = 2  and fundPK = @RFundPK  
            END
            ELSE
            BEGIN
                Select @RRevaluationAcc = RevaluationEquity From FundAccountingSetup where Status = 2   and fundPK = @RFundPK 
                Select @RUnrealisedAcc = UnrealisedEquity From FundAccountingSetup where Status = 2  and fundPK = @RFundPK  
            END

            IF isnull(@RUnrealised,0) > 0 --Nilai Revaluasi Acc di Debit    
            BEGIN    
            -- Setup Account kelar diatas, Next masukin ke Fund Journal  
            Select @RFundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal     
    
            set @RUnrealised = isnull(ABS(@RUnrealised),0)  


            INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]    
            ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])
        
            Select  @RFundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@RDate,5,@maxEndDayTrailsPK,'PORTFOLIO REVALUATION',    
            '','INSTRUMENT: ' + @RInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate    
           
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])        
            
            Select  @RFundJournalPK,1,1,2,@RRevaluationAcc,CurrencyPK,@RFundPK,@RInstrumentPK,0,'INSTRUMENT: ' + @RInstrumentID,'D',@RUnrealised,     
            @RUnrealised,0,1,@RUnrealised,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RRevaluationAcc and Status = 2     
    
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])     
    
            Select @RFundJournalPK,2,1,2,@RUnrealisedAcc,CurrencyPK,@RFundPK,@RInstrumentPK,0,'INSTRUMENT: ' + @RInstrumentID,'C',@RUnrealised,     
            0,@RUnrealised,1,0,@RUnrealised,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RUnrealisedAcc and Status = 2        
            END  


            IF isnull(@RUnrealised,0) < 0    
            BEGIN  
            -- Setup Account kelar diatas, Next masukin ke Fund Journal    
            Select @RFundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
    
            set @RUnrealised = isnull(ABS(@RUnrealised),0)    
        
            INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]    
            ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])    
        
            Select  @RFundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@RDate,5,@maxEndDayTrailsPK,'PORTFOLIO REVALUATION',    
            '','INSTRUMENT: ' + @RInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate    
           
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])        
            
            Select  @RFundJournalPK,1,1,2,@RUnrealisedAcc,CurrencyPK,@RFundPK,@RInstrumentPK,0,'INSTRUMENT: ' + @RInstrumentID,'D',@RUnrealised,     
            @RUnrealised,0,1,@RUnrealised,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RUnrealisedAcc and Status = 2     
    
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])     
        
            Select @RFundJournalPK,2,1,2,@RRevaluationAcc,CurrencyPK,@RFundPK,@RInstrumentPK,0,'INSTRUMENT: ' + @RInstrumentID,'C',@RUnrealised,     
            0,@RUnrealised,1,0,@RUnrealised,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RRevaluationAcc and Status = 2    
            END  


        Fetch next From R Into @RDate,@RFundPK,@RInstrumentPK,@RInstrumentTypePK,@RInstrumentID,@RUnrealised
        END
        Close R
        Deallocate R 


    END       
 

-- Parameter untuk masuk Ke Jurnal                  
Declare @InvestmentAcc   int                  
Declare @PayablePurchaseAcc  int                  
Declare @CashAtBankAcc   int                  
Declare @CommissionAcc   int                  
Declare @LevyAcc    int                  
Declare @VatAcc     int                  
Declare @WhtAcc     int                  
                
Declare @TaxExpenseAcc   int                  
Declare @WHTTaxPayableAccrInterest int     
Declare @InterestRecAcc int 
--BOND
Declare @InvestmentAccBond   int 
Declare @InterestRecBuySellAccBond int      
Declare @InterestRecAccBond   int 
Declare @RealisedAccBond int   
Declare @ReceivableSaleAccBond int 
Declare @TaxCapitalGainAccBond int 
Declare @TaxInterestAccBond int 

-- Sell              
Declare @ReceivableSaleAcc int              
Declare @RealisedAcc int              
Declare @IncomeSaleTaxAcc int                 
-- Untuk variabel Posting                  
Declare @PValueDate        datetime                  
Declare @PPeriodPK        int                  
Declare @PReference        nvarchar(50)                  
Declare @PTrxType        int                
Declare @PCounterpartPK       int                  
Declare @PInstrumentPK       int                  
Declare @PInstrumentTypePK      int                  
Declare @PFundPK        int                  
Declare @PFundCashRefPK       int                  
Declare @PDoneAccruedInterest  Numeric(18,6)                  
Declare @PSettlementDate      Datetime       
Declare @PAcqDate      Datetime            
Declare @PDoneVolume       numeric(18,0)   
Declare @PAmount       numeric(18,0)               
Declare @PDoneAmount       numeric(18,0)                  
Declare @PCommissionAmount      numeric(18,6)                  
Declare @PLevyAmount       numeric(18,6)                  
Declare @PKPEIAmount       numeric(18,6)                  
Declare @PVATAmount        numeric(18,6)                  
Declare @PWHTAmount        numeric(18,6)                  
Declare @POTCAmount        numeric(18,6)                   
Declare @PIncomeTaxSellAmount     numeric(18,6)                   
Declare @PIncomeTaxInterestAmount    numeric(18,6)                   
Declare @PIncomeTaxGainAmount     numeric(18,6) 
Declare @PTotalAmount       numeric(19,6)                   
Declare @PCurrencyRate       numeric(18,8)                  
Declare @InstrumentType int                  
Declare @FundJournalPK int                  
Declare @InstrumentID nvarchar(30)                  
Declare @FPayablePurchaseAmount numeric(19,6)                  
Declare @InstrumentCurrencyPK int     
Declare @BondDayAccrued int      
Declare @PInterestPercent Numeric(22,6)          

Declare @SellAvgPrice numeric(18,6)  
Declare @AvgAmount numeric(22,6)              
Declare @RealisedAmount numeric(22,6)
Declare @InvestmentShareAmount numeric(22,6)   
Declare @ReceivableSellBondAmount numeric(22,6)    

Declare @PTaxExpenseAmount numeric(22,6) 
Declare @PTaxExpensePercent numeric(22,6) 
Declare @PInterestAmount numeric(22,6) 
Declare @PFinalAmount numeric(22,6)
     
Declare @WHTDueDate int
               
-- A. Posting Investment   
-- 1. BUY EQUITY --  
-- 2. SELL EQUITY --
-- 3. BUY BOND -- 
-- 4. SELL BOND -- 
-- 5. PLACEMENT DEPOSITO -- 
-- 6. LIQUIDATE DEPOSITO -- 
-- 7. ROLLOVER DEPOSITO -- 


-- B. Daily Fee dan Payment Fee 	 	            
-- 1. GENERATE DAILY FEE --    
-- 2. PAYMENT FEE -- 
-- 3. BANK INTEREST --
	                       
-- C. Reval, Interest Accrued Bond, Interest Accrued Time Deposit, Mature Bond, Mature Time Deposit
-- 1. REVALUATION EQUITY & BOND --   
-- 2. GENERATE INTEREST ACCRUED BOND           
-- 3. MATURE TIME DEPOSIT YANG BELOM SAMPE UJUNG           
-- 4. MATURE BOND & TIME DEPOSIT
-- 5. REC COUPON BOND
	
-- D. Copy Fund Client Position 

-- E. Pending Subscription

-- A. POSTING INVESTMENT --        

Declare @PBreakInterestPercent numeric(8,4)
Declare @PSettlementPK int

Declare A Cursor For                  
Select ValueDate,PeriodPK,Reference,TrxType,CounterpartPK,InstrumentPK,                   
FundPK,FundCashRefPK,DoneAccruedInterest,SettlementDate,DoneVolume,Amount,DoneAmount,                  
CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,                  
IncomeTaxInterestAmount,IncomeTaxGainAmount,TotalAmount,InstrumentTypePK,CurrencyRate,BreakInterestPercent,SettlementPK,TaxExpensePercent,InterestPercent,AcqDate            
From Investment         
Where StatusSettlement = 2 and Posted = 0 and Valuedate in (
select valuedate from investment where valuedate between @DateYesterday and @valuedate and valuedate <> @DateYesterday and FundPK = @XFundPK) and FundPK = @XFundPK  
and InstrumentTypePK not in (6) 
union all
-- MUTUAL FUND
Select ValueDate,PeriodPK,Reference,TrxType,CounterpartPK,InstrumentPK,                   
FundPK,FundCashRefPK,DoneAccruedInterest,SettlementDate,DoneVolume,Amount,DoneAmount,                  
CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,                  
IncomeTaxInterestAmount,IncomeTaxGainAmount,TotalAmount,InstrumentTypePK,CurrencyRate,BreakInterestPercent,SettlementPK,TaxExpensePercent,InterestPercent,AcqDate            
From Investment         
Where StatusSettlement = 2 and Posted = 0 and Valuedate = dbo.FWorkingDay(@valuedate,2) and FundPK = @XFundPK  
and InstrumentTypePK in (6) 
           
Open A                  
Fetch Next From A                  
Into @PValueDate,@PPeriodPK,@PReference,@PTrxType,@PCounterpartPK,
@PInstrumentPK,@PFundPK,@PFundCashRefPK,                  
@PDoneAccruedInterest,@PSettlementDate,@PDoneVolume,@PAmount
,@PDoneAmount,@PCommissionAmount,@PLevyAmount,@PKPEIAmount,                  
@PVATAmount,@PWHTAmount,@POTCAmount,@PIncomeTaxSellAmount,@PIncomeTaxInterestAmount
,@PIncomeTaxGainAmount,@PTotalAmount,@PInstrumentTypePK,@PCurrencyRate,@PBreakInterestPercent,@PSettlementPK ,@PTaxExpensePercent,@PInterestPercent,@PAcqDate             
While @@FETCH_STATUS = 0                  
Begin                  
Select @InstrumentID = ID From Instrument where Status = 2 and InstrumentPK = @PInstrumentPK              
-- 1 = REGULER                  
-- 2 = G-BOND                  
-- 3 = C-BOND                  
-- 4 = RI                  
-- 5 = DEPOSITO                  
-- 6 = WARRANT 
                
-- A1. BUY EQUITY DAN MUTUAL FUND --                 
if @PTrxType = 1 and @PInstrumentTypePK = 1                  
BEGIN                  
Select @InstrumentType =  InstrumentTypePK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                  

IF @InstrumentType in (1,4,6,16)                  
BEGIN                  
Select @InvestmentAcc = InvestmentEquity,@PayablePurchaseAcc = PayablePurchaseEquity 
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK
END    
                            
Select @CommissionAcc = BrokerCommission,@LevyAcc = BrokerLevy,@VatAcc = BrokerVat,@WhtAcc = WithHoldingTaxPPH23 
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK                 
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                

-- Setup Account kelar diatas, Next masukin ke Fund Journal                  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   
set @FundJournalPK = isnull(@FundJournalPK,0)
-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference],[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2
,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK
,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',@PReference,'T0 EQUITY BUY: ' + @InstrumentID 
,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2                  


select @WHTDueDate = WHTDueDate from Fund where status = 2 and FundPK = @PFundPK

IF (@WHTDueDate = 1)
BEGIN
    set @FPayablePurchaseAmount = @PDoneAmount + isnull(@PCommissionAmount,0) + isnull(@PLevyAmount,0) + isnull(@PKPEIAmount,0) + isnull(@PVATAmount,0) - isnull(@PWHTAmount,0)  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,6,1,2,@WhtAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'C',@PWHTAmount,                   
    0,@PWHTAmount,1,0,@PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WhtAcc and Status = 2        

END
ELSE
BEGIN
    set @FPayablePurchaseAmount = @PDoneAmount + isnull(@PCommissionAmount,0) + isnull(@PLevyAmount,0) + isnull(@PKPEIAmount,0) + isnull(@PVATAmount,0)  --AURORA               
END


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'C',@FPayablePurchaseAmount,                   
0,@FPayablePurchaseAmount,1,0,@FPayablePurchaseAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,3,1,2,@CommissionAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'D',@PCommissionAmount,                   
@PCommissionAmount,0,1,@PCommissionAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CommissionAcc and Status = 2                  

set @PLevyAmount = @PLevyAmount + @PKPeIAmount                

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,4,1,2,@LevyAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'D',@PLevyAmount,                   
@PLevyAmount,0,1,@PLevyAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @LevyAcc and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,5,1,2,@VatAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'D',@PVATAmount,                   
@PVATAmount,0,1,@PVATAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @VatAcc and Status = 2                  

             

-- T Settled  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   
                
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-Settled EQUITY BUY: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,1,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY BUY: ' + @InstrumentID,'D',@FPayablePurchaseAmount,@FPayablePurchaseAmount,0,1,@FPayablePurchaseAmount,0,@LastUpdate   
From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  



IF (@WHTDueDate = 1)
BEGIN

   INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

    Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY BUY: ' + @InstrumentID,'C',@FPayablePurchaseAmount,                   
    0,@FPayablePurchaseAmount,1,0,@FPayablePurchaseAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                        

END
ELSE
BEGIN
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

    Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY BUY: ' + @InstrumentID,'C',@FPayablePurchaseAmount - @PWHTAmount,                   
    0,@FPayablePurchaseAmount - @PWHTAmount,1,0,@FPayablePurchaseAmount - @PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  


    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,3,1,2,@WhtAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY BUY: ' + @InstrumentID,'C',@PWHTAmount,                   
    0,@PWHTAmount,1,0,@PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WhtAcc and Status = 2        
END





END   
               
-- A2. SELL EQUITY DAN MUTUAL FUND--              
if @PTrxType = 2 and @PInstrumentTypePK = 1                  
BEGIN                  
Select @InstrumentType =  InstrumentTypePK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                  
IF @InstrumentType in (1,4,6,16)                  
BEGIN                 
Select @InvestmentAcc = InvestmentEquity,@ReceivableSaleAcc = AccountReceivableSaleEquity,@RealisedAcc = RealisedEquity From FundAccountingSetup where Status = 2 and FundPK = @PFundPK                  
END                  
        
Select @CommissionAcc = BrokerCommission,@LevyAcc = BrokerLevy,@VatAcc = BrokerVat,@WhtAcc = WithHoldingTaxPPH23 
,@IncomeSaleTaxAcc = BrokerSalesTax
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK    
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
Select @InstrumentID = ID From Instrument where Status = 2 and InstrumentPK = @PInstrumentPK                  

-- Setup Account kelar diatas, Next masukin ke Fund Journal                  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]         
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 EQUITY SELL: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@CommissionAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'D',@PCommissionAmount,                   
@PCommissionAmount,0,1,@PCommissionAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CommissionAcc and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,2,1,2,@LevyAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'D',@PLevyAmount + @PKPEIAmount,                   
@PLevyAmount + @PKPEIAmount,0,1,@PLevyAmount + @PKPEIAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @LevyAcc and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,3,1,2,@VatAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'D',@PVATAmount,                   
@PVATAmount,0,1,@PVATAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @VatAcc and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,4,1,2,@IncomeSaleTaxAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'D',@PIncomeTaxSellAmount,                   
@PIncomeTaxSellAmount,0,1,@PIncomeTaxSellAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @IncomeSaleTaxAcc and Status = 2                  

select @WHTDueDate = WHTDueDate from Fund where status = 2 and FundPK = @PFundPK             

Declare @SellArAmount numeric(22,6) 
    
IF (@WHTDueDate = 1)
BEGIN
    Set @SellArAmount = @PDoneAmount -  isnull(@PCommissionAmount,0) - isnull(@PLevyAmount,0)- isnull(@PKPEIAmount,0) - isnull(@PVATAmount,0) - isnull(@PIncomeTaxSellAmount,0) + isnull(@PWHTAmount,0)            

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,8,1,2,@WhtAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'C',@PWHTAmount,                   
    0,@PWHTAmount,1,0,@PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WhtAcc and Status = 2  

END
ELSE
BEGIN
    Set @SellArAmount = @PDoneAmount -  isnull(@PCommissionAmount,0) - isnull(@PLevyAmount,0)- isnull(@PKPEIAmount,0) - isnull(@PVATAmount,0) - isnull(@PIncomeTaxSellAmount,0) --AURORA                   
END


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,5,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'D',@SellArAmount,                   
@SellArAmount,0,1,@SellArAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                   

           
	
select @SellAvgPrice = dbo.FGetLastAvgFromInvestment(@PValueDate,@PInstrumentPK,@PFundPK)                            
set @AvgAmount = @SellAvgPrice * @PDoneVolume              
set @RealisedAmount = abs(@AvgAmount - @PDoneAmount)      

      

-- Gain Realised
if @AvgAmount <= @PDoneAmount              
Begin              
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,6,1,2,@RealisedAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'C',@RealisedAmount,                   
0,@RealisedAmount,1,0,@RealisedAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RealisedAcc and Status = 2                  

set  @InvestmentShareAmount = @PDoneAmount - @RealisedAmount              
set @InvestmentShareAmount = isnull(@InvestmentShareAmount,0)
End       
     
-- Loss Realised
if @AvgAmount > @PDoneAmount              
begin              
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,6,1,2,@RealisedAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'D',@RealisedAmount,                   
@RealisedAmount,0,1,@RealisedAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RealisedAcc and Status = 2                 
			 
set  @InvestmentShareAmount = @PDoneAmount + @RealisedAmount              
set @InvestmentShareAmount = isnull(@InvestmentShareAmount,0)
end              
set @InvestmentShareAmount = isnull(@InvestmentShareAmount,0)
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,7,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'C',@InvestmentShareAmount,                   
0,@InvestmentShareAmount,1,0,@InvestmentShareAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2               

-- T SETTLED              
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-SETTLED EQUITY SELL: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  


IF (@WHTDueDate = 1) -- VALUEDATE
BEGIN
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'D',@SellArAmount,                   
    @SellArAmount,0,1,@SellArAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'C',@SellArAmount,                   
    0,@SellArAmount,1,0,@SellArAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                      
            

END    
ELSE
BEGIN
   
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'D',@SellArAmount + @PWHTAmount,                   
    @SellArAmount + @PWHTAmount,0,1,@SellArAmount + @PWHTAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'C',@SellArAmount,                   
    0,@SellArAmount,1,0,@SellArAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                      
             

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,3,1,2,@WhtAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'C',@PWHTAmount,                   
    0,@PWHTAmount,1,0,@PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WhtAcc and Status = 2  

      
END  




END   



-- A3. BUY BOND --                  
if @PTrxType = 1 and @PInstrumentTypePK in (2,3,8,9,11,13,14,15)                 
BEGIN  
              
-- 2 = G-BOND                  
-- 3 = C-BOND                  
Select @InstrumentType =  InstrumentTypePK,@InstrumentCurrencyPK = CurrencyPK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                                           

if @InstrumentType in (2,3,8,9,11,13,14,15)          
BEGIN                  
Select @InvestmentAcc = InvestmentBond,@InterestRecAcc = InterestRecBond,@PayablePurchaseAcc = PayablePurRecBond, 
@WHTTaxPayableAccrInterest = WithHoldingTaxPPH23,@BondDayAccrued = InterestAccrBond
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK                   
END                  
                  
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
	
-- Setup Account kelar diatas, Next masukin ke Fund Journal 
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                

-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 BOND BUY: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,2,1,2,@InterestRecAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'D',@PDoneAccruedInterest,                   
@PDoneAccruedInterest,0,1,@PDoneAccruedInterest,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

              
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select @FundJournalPK,3,1,2,@WHTTaxPayableAccrInterest,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'C',@PIncomeTaxGainAmount + @PIncomeTaxInterestAmount,                
0,@PIncomeTaxGainAmount + @PIncomeTaxInterestAmount,1,0,@PIncomeTaxGainAmount + @PIncomeTaxInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WHTTaxPayableAccrInterest and Status = 2                  

set @FPayablePurchaseAmount = @PDoneAmount + isnull(@PDoneAccruedInterest,0) - isnull(@PIncomeTaxGainAmount,0) 

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select @FundJournalPK,4,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'C',@PTotalAmount,                   
0,@PTotalAmount,1,0,@PTotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  

-- T Settled                
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 
	
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-Settled BOND BUY: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,1,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'D',@PTotalAmount,                   
@PTotalAmount,0,1,@PTotalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'C',@PTotalAmount,                   
0,@PTotalAmount,1,0,@PTotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,3,1,2,@BondDayAccrued,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-Settled BOND BUY: ' + @InstrumentID,'D',@PDoneAccruedInterest,                   
@PDoneAccruedInterest,0,1,@PDoneAccruedInterest,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BondDayAccrued and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select @FundJournalPK,4,1,2,@InterestRecAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-Settled BOND BUY: ' + @InstrumentID,'C',@PDoneAccruedInterest,                   
0,@PDoneAccruedInterest,1,0,@PDoneAccruedInterest,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                  
END                  


-- A4.SELL BOND --
ELSE if @PTrxType = 2 and @PInstrumentTypePK in (2,3,8,9,11,13,14,15) 
BEGIN               
Select @InstrumentType =  InstrumentTypePK,@InstrumentCurrencyPK = CurrencyPK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                  
Select @InvestmentAccBond = InvestmentBond,@InterestRecBuySellAccBond = InterestRecBond,@InterestRecAccBond = InterestAccrBond,
@RealisedAccBond = RealisedBond, @ReceivableSaleAccBond = AccountReceivableSaleBond,
@TaxCapitalGainAccBond = TaxCapitalGainBond,@TaxInterestAccBond = WithHoldingTaxPPH23
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK      
                                  
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                

set @PTaxExpenseAmount = (@PTaxExpensePercent / 100) * @PDoneAccruedInterest                  
set @PFinalAmount = @PDoneAccruedInterest - @PTaxExpenseAmount   

-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                 
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 BOND SELL: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  


declare @BondSellAmount numeric (19,2)

set @BondSellAmount = dbo.FGetLastAvgFromInvestment(@PValueDate,@PInstrumentPK,@PFundPK)/100 * @PDoneVolume


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,1,1,2,@InvestmentAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'C',@BondSellAmount,                   
0,@BondSellAmount,1,0,@BondSellAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAccBond and Status = 2    



INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,2,1,2,@InterestRecBuySellAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'C',@PDoneAccruedInterest,                   
0,@PDoneAccruedInterest,1,0,@PDoneAccruedInterest,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecBuySellAccBond and Status = 2   


--INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
--,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
--Select @FundJournalPK,2,1,2,@InterestRecAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'C',@PDoneAccruedInterest,                   
--0,@PDoneAccruedInterest,1,0,@PDoneAccruedInterest,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAccBond and Status = 2                  



INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,3,1,2,@TaxCapitalGainAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'D',@PIncomeTaxGainAmount,                   
@PIncomeTaxGainAmount,0,1,@PIncomeTaxGainAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxCapitalGainAccBond and Status = 2        


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,4,1,2,@TaxInterestAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'D',@PIncomeTaxInterestAmount,                   
@PIncomeTaxInterestAmount,0,1,@PIncomeTaxInterestAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxInterestAccBond and Status = 2            

         
	
--Select @SellAvgPrice = AvgPrice From FundPosition where Date = @DateYesterday and Status =  2 and FundPK = @PFundPK and InstrumentPK = @PInstrumentPK                              
--set @AvgAmount = (@SellAvgPrice/100) * @PDoneVolume              
--set @RealisedAmount = abs(@PDoneAmount - @AvgAmount)
set @RealisedAmount = abs(@PDoneAmount - @BondSellAmount)



-- Gain Realised
if @BondSellAmount > @PDoneAmount              
Begin              
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

		Select @FundJournalPK,5,1,2,@RealisedAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'D',@RealisedAmount,                   
		@RealisedAmount,0,1,@RealisedAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RealisedAccBond and Status = 2                  

	set  @ReceivableSellBondAmount = @BondSellAmount - @RealisedAmount +@PDoneAccruedInterest  - @PIncomeTaxGainAmount -  @PIncomeTaxInterestAmount               
	set @ReceivableSellBondAmount = isnull(@ReceivableSellBondAmount,0)
End       
     
-- Loss Realised
if @BondSellAmount <= @PDoneAmount              
begin              
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

		Select  @FundJournalPK,5,1,2,@RealisedAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'C',@RealisedAmount,                   
		0,@RealisedAmount,1,0,@RealisedAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RealisedAccBond and Status = 2                 
			 
	set  @ReceivableSellBondAmount = @BondSellAmount + @RealisedAmount + @PDoneAccruedInterest  - @PIncomeTaxGainAmount -  @PIncomeTaxInterestAmount              
	set @ReceivableSellBondAmount = isnull(@ReceivableSellBondAmount,0)
end     

                        

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,6,1,2,@ReceivableSaleAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'D',@ReceivableSellBondAmount,                   
@ReceivableSellBondAmount,0,1,@ReceivableSellBondAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAccBond and Status = 2                  

select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                  

-- T Settled       
         
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-Settled BOND SELL: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,1,1,2,@InterestRecBuySellAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'D',@PDoneAccruedInterest,                   
@PDoneAccruedInterest,0,1,@PDoneAccruedInterest,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecBuySellAccBond and Status = 2   


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,2,1,2,@ReceivableSaleAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'C',@ReceivableSellBondAmount,                   
0,@ReceivableSellBondAmount,1,0,@ReceivableSellBondAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAccBond and Status = 2                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,3,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'D',@ReceivableSellBondAmount,                   
@ReceivableSellBondAmount,0,1,@ReceivableSellBondAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,4,1,2,@InterestRecAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'C',@PDoneAccruedInterest - (@PIncomeTaxInterestAmount + @PIncomeTaxGainAmount),                   
0,@PDoneAccruedInterest - (@PIncomeTaxInterestAmount + @PIncomeTaxGainAmount) ,1,0,@PDoneAccruedInterest - (@PIncomeTaxInterestAmount + @PIncomeTaxGainAmount),@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAccBond and Status = 2                


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,5,1,2,@TaxInterestAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'C',@PIncomeTaxInterestAmount + @PIncomeTaxGainAmount,                   
0,@PIncomeTaxInterestAmount + @PIncomeTaxGainAmount,1,0,@PIncomeTaxInterestAmount + @PIncomeTaxGainAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxInterestAccBond and Status = 2                



END 

-- A5.PLACEMENT DEPOSITO & ROLLOVER DEPOSITO          
if @PTrxType in (1,3) and @PInstrumentTypePK in (5,10) -- 5 Deposito biasa 10 NCD
BEGIN                  
Select @InstrumentType =  InstrumentTypePK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                           

if @InstrumentType in (5,10)                  
BEGIN                  
Select @InvestmentAcc = InvestmentTimeDeposit From FundAccountingSetup where Status = 2  and FundPK = @PFundPK                
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
END                                    

-- Setup Account kelar diatas, Next masukin ke Fund Journal 
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                 

IF dbo.CheckTodayIsHoliday (@PValueDate) = 1
BEGIN
    select @PValueDate = dbo.Fworkingday(@PValueDate, 1)
END


-- T0                
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                   

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 DEPOSIT BUY: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                 

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                          

Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 DEPOSIT BUY: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                          

Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 DEPOSIT BUY: ' + @InstrumentID,'C',@PDoneAmount,                   
0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
END                  

-- A6. LIQUIDATE DEPOSITO --            
if @PTrxType = 2 and @PInstrumentTypePK in (5,10)                  
BEGIN                  
Select @InstrumentType =  InstrumentTypePK,@InstrumentCurrencyPK = CurrencyPK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                  
	
if @InstrumentType in (5,10)
BEGIN                  
Select @InvestmentAcc = InvestmentTimeDeposit From FundAccountingSetup where Status = 2  and FundPK = @PFundPK                
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
END                  

-- Setup Account kelar diatas, Next masukin ke Fund Journal 
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                  

-- T0              
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                      

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 DEPOSIT LIQUIDATE: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 DEPOSIT LIQUIDATE: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                        

Select @FundJournalPK,2,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 DEPOSIT LIQUIDATE: ' + @InstrumentID,'C',@PDoneAmount,                   
0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2               
	
	
-- LOGIK BREAK INTEREST DISINI
	
Declare @IncomeDeposito int
Declare @ARInterestDeposito int
Declare @TaxDeposito int
    
Select @ARInterestDeposito = InterestAccrTimeDeposit,@IncomeDeposito = IncomeInterestTimeDeposit, 
@TaxDeposito = TaxExpenseInterestIncomeTimeDeposit
From FundAccountingSetup where Status = 2  and FundPK = @PFundPK                
	
Declare @ARInterestDepositoAmount numeric(22,4)
Declare @IncomeDepositoAmount numeric(22,4)
Declare @TaxDepositoAmount numeric(22,4)


set @IncomeDepositoAmount = [dbo].FGetDepositoInterestAccruedForPayment (@ValueDate,@PInstrumentPK,@PDoneVolume,4,@PInterestPercent,DateAdd(day,1,@PAcqDate),1,@ValueDate,1)
set @ARInterestDepositoAmount = 0.8 * @IncomeDepositoAmount
set @TaxDepositoAmount = 0.2 * @IncomeDepositoAmount

--set @ARInterestDepositoAmount = [dbo].[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK] (@ValueDate,@ARInterestDeposito,@PInstrumentPK,@PFundPK)
--set @IncomeDepositoAmount = [dbo].[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK] (@ValueDate,@IncomeDeposito,@PInstrumentPK,@PFundPK)
--set @TaxDepositoAmount = [dbo].[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK] (@ValueDate,@TaxDeposito,@PInstrumentPK,@PFundPK)
	

if @PBreakInterestPercent > 0


BEGIN
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal   
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                      

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'LIQUIDATE BREAK INTEREST: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate  

if @IncomeDepositoAmount > 0
BEGIN
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,1,1,2,@IncomeDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE BREAK INTEREST: ' + @InstrumentID,'D',@IncomeDepositoAmount,                   
	@IncomeDepositoAmount,0,1,@IncomeDepositoAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @IncomeDeposito and Status = 2    
END

if @ARInterestDepositoAmount > 0
BEGIN

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,2,1,2,@ARInterestDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE BREAK INTEREST: ' + @InstrumentID,'C',@ARInterestDepositoAmount,                   
	0,@ARInterestDepositoAmount,1,0,@ARInterestDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ARInterestDeposito and Status = 2    
END
IF (@IncomeDeposito <> @TaxDeposito)
BEGIN
    if @TaxDepositoAmount > 0
    BEGIN
	    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	    Select  @FundJournalPK,3,1,2,@TaxDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE BREAK INTEREST: ' + @InstrumentID,'C',@TaxDepositoAmount,                   
	    0,@TaxDepositoAmount,1,0,@TaxDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxDeposito and Status = 2    
    END


END
ELSE
BEGIN
        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,3,1,2,@IncomeDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE BREAK INTEREST: ' + @InstrumentID,'C',@TaxDepositoAmount,                   
	0,@TaxDepositoAmount,1,0,@TaxDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @IncomeDeposito and Status = 2    
END

Declare @BDNewInterestAmount numeric(22,4)
Declare @BDBalance numeric(22,4)
Declare @BDInterestDaysType int
Declare @BDInterestPercent numeric(8,4)
Declare @BDAcqDate datetime
Declare @BDInterestPaymentType int
Declare @BDMaturityDate datetime
Declare @BDPaymentModeOnMaturity int
Declare @BDTaxPercent numeric(8,4)

Select @BDBalance = Balance,@BDInterestDaysType = InterestDaysType
,@BDInterestPercent = InterestPercent
,@BDAcqDate = AcqDate
,@BDInterestPaymentType = InterestPaymentType
,@BDMaturityDate = MaturityDate
,@BDPaymentModeOnMaturity = PaymentModeOnMaturity
,@BDTaxPercent = TaxExpensePercent
From FundPosition where Date = @DateYesterday and InstrumentPK = @PInstrumentPK


set @BDNewInterestAmount = dbo.[FGetDepositoInterestAccruedForPayment](@ValueDate,@PInstrumentPK,@BDBalance,@BDInterestDaysType,@PBreakInterestPercent,@BDAcqDate,@BDInterestPaymentType,@ValueDate,@BDPaymentModeOnMaturity)
		
if @BDNewInterestAmount > 0
BEGIN
	Declare @BDTaxAmount numeric(22,4)
	Declare @BDIncomeAmount numeric(22,4)
	set @BDTaxAmount = @BDNewInterestAmount * @BDTaxPercent/100
	set @BDIncomeAmount = @BDNewInterestAmount - @BDTaxAmount
					
	select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal   
				
	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                      

		Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
		@PReference,'LIQUIDATE NEW INTEREST: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate  

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE NEW INTEREST: ' + @InstrumentID,'D',@BDIncomeAmount,                   
	@BDIncomeAmount,0,1,@BDIncomeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2        
				
		INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

		Select  @FundJournalPK,2,1,2,@IncomeDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE NEW INTEREST: ' + @InstrumentID,'C',@BDNewInterestAmount,0,@BDNewInterestAmount,1,0,@BDNewInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @IncomeDeposito and Status = 2    

		INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

		Select  @FundJournalPK,3,1,2,@TaxDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE NEW INTEREST: ' + @InstrumentID,'D',@BDTaxAmount,@BDTaxAmount,0,1,@BDTaxAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxDeposito and Status = 2    

END
END
ELSE
BEGIN

set @IncomeDepositoAmount = dbo.FGetDepositoInterestAccruedPerFundPK(@ValueDate,@PFundPK,@PInstrumentPK,@PDoneVolume,4,@PInterestPercent,@ValueDate)
set @TaxDepositoAmount = 0.2 * @IncomeDepositoAmount


select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal   
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                      

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'LIQUIDATE: ' + @InstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate  

if @ARInterestDepositoAmount > 0
BEGIN
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

    Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'EARLY LIQUIDATE INTEREST: ' + @InstrumentID,'D',@ARInterestDepositoAmount + @IncomeDepositoAmount - @TaxDepositoAmount,                   
	@ARInterestDepositoAmount + @IncomeDepositoAmount - @TaxDepositoAmount ,0,1,@ARInterestDepositoAmount + @IncomeDepositoAmount - @TaxDepositoAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2             

		INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

		Select  @FundJournalPK,2,1,2,@ARInterestDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'EARLY LIQUIDATE INTEREST: ' + @InstrumentID,'C',@ARInterestDepositoAmount,
    0,@ARInterestDepositoAmount,1,0,@ARInterestDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ARInterestDeposito and Status = 2    

    
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,3,1,2,@TaxDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'EARLY LIQUIDATE INTEREST: ' + @InstrumentID,'D',@TaxDepositoAmount,                   
	@TaxDepositoAmount,0,1,@TaxDepositoAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxDeposito and Status = 2             

 		INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
 	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

 		Select  @FundJournalPK,4,1,2,@IncomeDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'EARLY LIQUIDATE INTEREST: ' + @InstrumentID,'C',@IncomeDepositoAmount,
    0,@IncomeDepositoAmount,1,0,@IncomeDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @IncomeDeposito and Status = 2    



   


END
END
	

END  



-- A8. BUY MUTUAL FUND --                  
if @PTrxType = 1 and @PInstrumentTypePK in (6)                 
BEGIN  
                                            
	Select @InvestmentAcc = InvestmentMutualFund,@PayablePurchaseAcc = PayablePurchaseMutualFund
	From FundAccountingSetup where Status = 2 and FundPK = @PFundPK                   
             
                  
	Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
	
	-- Setup Account kelar diatas, Next masukin ke Fund Journal 
	select @FundJournalPK = isnull(max(FundJournalPK),0) + 2 From FundJournal                

	-- T0                  
	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

	Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@ValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
	@PReference,'T0 MUTUAL FUND BUY: ' + @InstrumentID ,0,@UsersID,@LastUpdate,@LastUpdate                  

	
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

	Select  @FundJournalPK,1,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED MUTUAL FUND BUY: ' + @InstrumentID,'D',@PDoneAmount,                   
	@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

	Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED MUTUAL FUND BUY: ' + @InstrumentID,'C',@PDoneAmount,                   
	0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                


	-- T Settled                
	select @FundJournalPK = isnull(max(FundJournalPK),0) + 2 From FundJournal 
	
	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

	Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
	@PReference,'T-Settled MUTUAL FUND BUY: ' + @InstrumentID ,0,@UsersID,@LastUpdate,@LastUpdate                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

	Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 MUTUAL FUND BUY: ' + @InstrumentID,'D',@PDoneAmount,                   
	@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2                   

  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

	Select @FundJournalPK,2,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 MUTUAL FUND BUY: ' + @InstrumentID,'C',@PDoneAmount,                   
	0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  



	
            
END                  

-- A9.SELL MUTUAL FUND --
ELSE if @PTrxType = 2 and @PInstrumentTypePK in (6) 
BEGIN                             
Select @InvestmentAcc = InvestmentMutualFund,@ReceivableSaleAcc = AccountReceivableSaleMutualFund
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK      
                                  
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                


-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                 
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 MUTAL FUND SELL: ' + @InstrumentID ,0,@UsersID,@LastUpdate,@LastUpdate                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 MUTAL FUND SELL: ' + @InstrumentID,'C',@PDoneAmount,                   
0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2    
                

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,2,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 MUTAL FUND SELL: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                  

-- T Settled       
         
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-Settled MUTUAL FUND SELL: ' + @InstrumentID ,0,@UsersID,@LastUpdate,@LastUpdate                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,1,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED MUTUAL FUND SELL: ' + @InstrumentID,'C',@PDoneAmount,                   
0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED MUTUAL FUND SELL: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                



END 




	           
Fetch next From A Into                  
@PValueDate,@PPeriodPK,@PReference,@PTrxType,@PCounterpartPK,@PInstrumentPK,@PFundPK,@PFundCashRefPK,                  
@PDoneAccruedInterest,@PSettlementDate,@PDoneVolume,@PAmount,@PDoneAmount,@PCommissionAmount,@PLevyAmount,@PKPEIAmount,                  
@PVATAmount,@PWHTAmount,@POTCAmount,@PIncomeTaxSellAmount,@PIncomeTaxInterestAmount,@PIncomeTaxGainAmount,@PTotalAmount,@PInstrumentTypePK,@PCurrencyRate,
@PBreakInterestPercent,@PSettlementPK,@PTaxExpensePercent,@PInterestPercent,@PAcqDate       
END                  
Close A                  
Deallocate A                
-------------------------------------------------------------------------------------------------------------------

-- B. DAILY FEE & PAYMENT FEE --

Declare @DecimalPlaces   int                  
Declare @RoundingMode   int                  
Declare @FundID     nvarchar(50)       
Declare @LastEndDayTrailsDate datetime       

Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  and status = 2                

Declare @ManagementFeeExpAcc    int                  
Declare @CustodianFeeExpAcc     int                  
Declare @AuditFeeExpAcc      int    
Declare @SinvestFeeExpAcc      int   
Declare @MovementFeeExpAcc    int                
Declare @PayableManagementFeeAcc   int                  
Declare @PayableCustodianFeeAcc    int                  
Declare @PayableAuditFeeAcc     int      
Declare @PayableSinvestFeeAcc     int
Declare @PayableMovementFeeAcc     int                
               
Declare @feeDays  int          
Declare @PayableSubscriptionFee int,@PayableRedemptionFee int
declare @BPayableSwitchingFee int
    

Select @feeDays =  DateDiff(day,ValueDate,@ValueDate),@LastEndDayTrailsDate = ValueDate From EndDayTrails              
Where ValueDate = 
(
Select Max(ValueDate) From EndDayTrails Where ValueDate < @ValueDate and status = 2 and FundPK = @XFundPK
)  and FundPK = @XFundPK           

set @feeDays = isnull(@feeDays,0)         

Declare @BFundPK int                  
Declare @BManagementFeePercent numeric(18,6)                  
Declare @BCustodiFeePercent  numeric(18,6)                  
Declare @BAuditFeePercent  numeric(18,6) 


Declare @BSinvestFeePercent  numeric(18,8) 

Declare @BManagementFeeDays  int                  
Declare @BCustodiFeeDays  int                  
Declare @BAuditFeeDays   int   
Declare @BSinvestFeeDays  int   
Declare @BFundType  int    
Declare @BBitSinvestFee  bit         

     

Declare @BDateOfPayment  int                  
Declare @BAum     numeric(22,8)                  
Declare @BManagementFeeAmount numeric(18,6)                  
Declare @BCustodiFeeAmount  numeric(18,6)                  
Declare @BAuditFeeAmount  numeric(18,6)   
Declare @BMovementFeeAmount  numeric(18,6)      

Declare @BSinvestFeeAmount  numeric(18,8)                  

Declare @BPayableSubscriptionFeeAmount numeric(18,6)
Declare @BPayableRedemptionFeeAmount numeric(18,6)
Declare @BPayableSwitchingFeeAmount numeric(18,6)

Declare @BOtherFeeOneAmount  numeric(18,6) 
Declare @BOtherFeeTwoAmount  numeric(18,6) 

Declare @BPayableOtherFeeOne  int    
Declare @BPayableOtherFeeTwo  int   
Declare @BOtherFeeOneExpense  int    
Declare @BOtherFeeTwoExpense  int 



insert into #ZFundFee
Select DateOfPayment,A.FundPK,A.ManagementFeePercent,CustodiFeePercent,
AuditFeeAmount,MovementFeeAmount, ManagementFeeDays,CustodiFeeDays,AuditFeeDays,SInvestFeeDays,Type,B.BitSinvestFee,OtherFeeOneAmount,OtherFeeTwoAmount                  
From FundFee A
left join Fund B on A.FundPK = B.FundPK and B.Status = 2
Where A.status = 2 and A.Date = (
Select max(date) from FundFee where date	<= @ValueDate     and status = 2 and FundPK = @XFundPK
) and A.FundPK = @XFundPK


Declare B Cursor For                  
Select FundPK,ManagementFeePercent ,CustodiFeePercent ,
 AuditFeeAmount,MovementFeeAmount, ManagementFeeDays ,CustodiFeeDays,AuditFeeDays,SInvestFeeDays,DateOfPayment,FundType,BitSinvestFee,OtherFeeOneAmount,OtherFeeTwoAmount   from #ZFundFee where FundPK = @XFundPK
Open B                  
Fetch Next From B                  
Into @BFundPK,@BManagementFeePercent,@BCustodiFeePercent,
@BAuditFeeAmount,@BMovementFeeAmount, @BManagementFeeDays,@BCustodiFeeDays,@BAuditFeeDays,@BSInvestFeeDays,@BDateOfPayment,@BFundType,@BBitSinvestFee,@BOtherFeeOneAmount,@BOtherFeeTwoAmount                   
While @@FETCH_STATUS = 0                  
Begin                  
Select @ManagementFeeExpAcc = ManagementFeeExpense, @CustodianFeeExpAcc =CustodianFeeExpense , @AuditFeeExpAcc = AuditFeeExpense,@MovementFeeExpAcc = MovementFeeExpense,                  
@PayableManagementFeeAcc = PayableManagementFee,@PayableCustodianFeeAcc = PayableCustodianFee,@PayableAuditFeeAcc = PayableAuditFee,@PayableMovementFeeAcc = PayableMovementFee    
,@PayableSubscriptionFee = PayableSubscriptionFee,@PayableRedemptionFee = PayableRedemptionFee 
,@BPayableSwitchingFee = PayableSwitchingFee,@PayableSinvestFeeAcc = PayableSInvestFee, @SinvestFeeExpAcc = SInvestFee
,@BPayableOtherFeeOne = PayableOtherFeeOne, @BPayableOtherFeeTwo = PayableOtherFeeTwo,@BOtherFeeOneExpense = OtherFeeOneExpense, @BOtherFeeTwoExpense = OtherFeeTwoExpense             
From FundAccountingSetup Where Status = 2    and FundPK = @BFundPK    

-- B1. GENERATE DAILY FEE                  
set @BAum = 0


Select @BAum =  AUM From CloseNAV where Date = @DateYesterday and Status =  2 and FundPK = @BFundPK                  
Select @DecimalPlaces = JournalDecimalPlaces, @RoundingMode = JournalRoundingMode, @FundID = A.ID From Fund A 
left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2
left join Bank C on B.BankPK = C.BankPK and C.status = 2
where A.Status = 2 and A.FundPK = @BFundPK             


--1	STRUCTURED FUND : GUARANTEED FUND ok
--2	FIXED INCOME FUND ok
--3	MONEY MARKET FUND ok
--4	STRUCTURED FUND : CAPITAL PROTECTED FUND ok
--5	EQUITY FUND ok
--6	STRUCTURED FUND : INDEX FUND ok
--7	CIC ASSET BACKED SECURITIES ok
--8	DISCETIONARY FUND ok
--9	MIXED ASSET FUND ok
--10 EXCHANGE TRADED FUND ok
--11 REAL ESTATE INVESTMENT TRUST ok
--12 PRIVATE EQUITY FUND ok

Select @BSinvestFeeDays = SinvestDays from SInvestSetup where status = 2

IF (@BFundType in (1,3,4,6,8,11,12))
BEGIN
	Select @BSinvestFeePercent = SinvestMoneyMarketFeePercent from SInvestSetup where status = 2
END
ELSE IF (@BFundType in (2,7,9))
BEGIN
	Select @BSinvestFeePercent = SinvestBondFeePercent from SInvestSetup where status = 2
END
ELSE
BEGIN
	Select @BSinvestFeePercent = SinvestEquityFeePercent from SInvestSetup where status = 2
END



-- 1 = UP, 2 = DOWN , 3 = NONE                  	
If @RoundingMode = 1                      
BEGIN                    
IF @BAum > 0 and ((@BManagementFeePercent > 0 and @BManagementFeeDays >0) or (@BCustodiFeePercent > 0 and @BCustodiFeeDays >0) or (@BSinvestFeePercent > 0 and @BSinvestFeeDays >0))
BEGIN
Set @BManagementFeeAmount = isnull(CEILING([dbo].[FGetManagementFeeFromFundFeeSetup](@ValueDate, @BFundPK)),0) * @FeeDays                    
Set @BCustodiFeeAmount = isnull(CEILING((@BAum * (@BCustodiFeePercent/100))/ @BCustodiFeeDays),0)  * @FeeDays  
Set @BSinvestFeeAmount = isnull(CEILING((@BAum * (@BSinvestFeePercent/100))/ @BSinvestFeeDays),0)  * @FeeDays
END
Set @BAuditFeeAmount = isnull(CEILING(@BAuditFeeAmount),0)  * @FeeDays  
Set @BMovementFeeAmount = isnull(CEILING(@BMovementFeeAmount),0)  * @FeeDays   
Set @BOtherFeeOneAmount = isnull(CEILING(@BOtherFeeOneAmount),0)  * @FeeDays  
Set @BOtherFeeTwoAmount = isnull(CEILING(@BOtherFeeTwoAmount),0)  * @FeeDays                
END                  

If @RoundingMode = 2                      
BEGIN                    
IF @BAum > 0 and ((@BManagementFeePercent > 0 and @BManagementFeeDays >0) or (@BCustodiFeePercent > 0 and @BCustodiFeeDays >0) or (@BSinvestFeePercent > 0 and @BSinvestFeeDays >0))
BEGIN
Set @BManagementFeeAmount = isnull(FLOOR([dbo].[FGetManagementFeeFromFundFeeSetup](@ValueDate, @BFundPK)),0)  * @FeeDays                    
Set @BCustodiFeeAmount = isnull(FLOOR((@BAum * (@BCustodiFeePercent/100))/ @BCustodiFeeDays),0) * @FeeDays 
Set @BSinvestFeeAmount = isnull(FLOOR((@BAum * (@BSinvestFeePercent/100))/ @BSinvestFeeDays),0)  * @FeeDays  
END
Set @BAuditFeeAmount = isnull(FLOOR(@BAuditFeeAmount),0)  * @FeeDays 
Set @BMovementFeeAmount = isnull(FLOOR(@BMovementFeeAmount),0)  * @FeeDays  
Set @BOtherFeeOneAmount = isnull(FLOOR(@BOtherFeeOneAmount),0)  * @FeeDays  
Set @BOtherFeeTwoAmount = isnull(FLOOR(@BOtherFeeTwoAmount),0)  * @FeeDays               
END                  

If @RoundingMode = 3                      
BEGIN                    
IF @BAum > 0 and ((@BManagementFeePercent > 0 and @BManagementFeeDays >0) or (@BCustodiFeePercent > 0 and @BCustodiFeeDays >0) or (@BSinvestFeePercent > 0 and @BSinvestFeeDays >0))
BEGIN
Set @BManagementFeeAmount = isnull(ROUND([dbo].[FGetManagementFeeFromFundFeeSetup](@ValueDate, @BFundPK),@DecimalPlaces),0)  * @FeeDays                 
Set @BCustodiFeeAmount = isnull(ROUND((@BAum * (@BCustodiFeePercent/100))/@BCustodiFeeDays,@DecimalPlaces),0)    * @FeeDays   
Set @BSinvestFeeAmount = isnull(ROUND((@BAum * (@BSinvestFeePercent/100))/@BSinvestFeeDays,@DecimalPlaces),0)  * @FeeDays
END
Set @BAuditFeeAmount = isnull(@BAuditFeeAmount,0)  * @FeeDays    
Set @BMovementFeeAmount = isnull(@BMovementFeeAmount,0)  * @FeeDays      
Set @BOtherFeeOneAmount = isnull(@BOtherFeeOneAmount,0)  * @FeeDays  
Set @BOtherFeeTwoAmount = isnull(@BOtherFeeTwoAmount,0)  * @FeeDays       
END                  





if isnull(@BAum,0) = 0
begin
set @BManagementFeeAmount = 0
set @BCustodiFeeAmount = 0
set @BAuditFeeAmount = 0
set @BMovementFeeAmount = 0
set @BSinvestFeeAmount = 0
set @BOtherFeeOneAmount = 0
set @BOtherFeeTwoAmount = 0
end




-- Setup Account kelar diatas, Next masukin ke Fund Journal  
if @BManagementFeeAmount > 0 or @BCustodiFeeAmount > 0 or @BAuditFeeAmount > 0
BEGIN
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                 

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,6,@maxEndDayTrailsPK,'DAILY FEE',                  
'','FUND ID: ' + @FundID ,1,@UsersID,@LastUpdate,@LastUpdate                  
END    

if @BManagementFeeAmount > 0
BEGIN
		
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@ManagementFeeExpAcc,CurrencyPK,@BFundPK,0,0,'MANAGEMENT FEE FUND ID: ' + @FundID,'D',@BManagementFeeAmount,                   
@BManagementFeeAmount,0,1,@BManagementFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ManagementFeeExpAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@PayableManagementFeeAcc,CurrencyPK,@BFundPK,0,0,'MANAGEMENT FEE FUND ID: ' + @FundID,'C',@BManagementFeeAmount,                   
0,@BManagementFeeAmount,1,0,@BManagementFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableManagementFeeAcc and Status = 2                  

END

if @BCustodiFeeAmount > 0
BEGIN

	
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,3,1,2,@CustodianFeeExpAcc,CurrencyPK,@BFundPK,0,0,'CUSTODI FEE FUND ID: ' + @FundID,'D',@BCustodiFeeAmount,                   
@BCustodiFeeAmount,0,1,@BCustodiFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CustodianFeeExpAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,4,1,2,@PayableCustodianFeeAcc,CurrencyPK,@BFundPK,0,0,'CUSTODI FEE FUND ID: ' + @FundID,'C',@BCustodiFeeAmount,                   
0,@BCustodiFeeAmount,1,0,@BCustodiFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableCustodianFeeAcc and Status = 2       

END
  
if @BAuditFeeAmount > 0
BEGIN         
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,5,1,2,@AuditFeeExpAcc,CurrencyPK,@BFundPK,0,0,'AUDIT FEE FUND ID: ' + @FundID,'D',@BAuditFeeAmount,                   
@BAuditFeeAmount,0,1,@BAuditFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @AuditFeeExpAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,6,1,2,@PayableAuditFeeAcc,CurrencyPK,@BFundPK,0,0,'AUDIT FEE FUND ID: ' + @FundID,'C',@BAuditFeeAmount,                   
0,@BAuditFeeAmount,1,0,@BAuditFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableAuditFeeAcc and Status = 2                  
		
END

IF (@BBitSInvestFee = 1)
BEGIN

    if @BSinvestFeeAmount > 0
    BEGIN

	
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
    ,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,7,1,2,@SinvestFeeExpAcc,CurrencyPK,@BFundPK,0,0,'SINVEST FEE FUND ID: ' + @FundID,'D',@BSinvestFeeAmount,                   
    @BSinvestFeeAmount,0,1,@BSinvestFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SinvestFeeExpAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
    ,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,8,1,2,@PayableSinvestFeeAcc,CurrencyPK,@BFundPK,0,0,'SINVEST FEE FUND ID: ' + @FundID,'C',@BSinvestFeeAmount,                   
    0,@BSinvestFeeAmount,1,0,@BSinvestFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableSinvestFeeAcc and Status = 2       

    END
END


if @BMovementFeeAmount > 0
BEGIN         
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,9,1,2,@MovementFeeExpAcc,CurrencyPK,@BFundPK,0,0,'MOVEMENT FEE FUND ID: ' + @FundID,'D',@BMovementFeeAmount,                   
@BMovementFeeAmount,0,1,@BMovementFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @MovementFeeExpAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,10,1,2,@PayableMovementFeeAcc,CurrencyPK,@BFundPK,0,0,'MOVEMENT FEE FUND ID: ' + @FundID,'C',@BMovementFeeAmount,                   
0,@BMovementFeeAmount,1,0,@BMovementFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableMovementFeeAcc and Status = 2                  
		
END


if @BOtherFeeOneAmount > 0
BEGIN         
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,9,1,2,@BOtherFeeOneExpense,CurrencyPK,@BFundPK,0,0,'OTHER FEE FUND ID: ' + @FundID,'D',@BOtherFeeOneAmount,                   
@BOtherFeeOneAmount,0,1,@BOtherFeeOneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BOtherFeeOneExpense and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,10,1,2,@BPayableOtherFeeOne,CurrencyPK,@BFundPK,0,0,'OTHER FEE FUND ID: ' + @FundID,'C',@BOtherFeeOneAmount,                   
0,@BOtherFeeOneAmount,1,0,@BOtherFeeOneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BPayableOtherFeeOne and Status = 2                  
		
END


if @BOtherFeeTwoAmount > 0
BEGIN         
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,9,1,2,@BOtherFeeTwoExpense,CurrencyPK,@BFundPK,0,0,'OTHER FEE FUND ID: ' + @FundID,'D',@BOtherFeeTwoAmount,                   
@BOtherFeeTwoAmount,0,1,@BOtherFeeTwoAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BOtherFeeTwoExpense and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,10,1,2,@BPayableOtherFeeTwo,CurrencyPK,@BFundPK,0,0,'OTHER FEE FUND ID: ' + @FundID,'C',@BOtherFeeTwoAmount,                   
0,@BOtherFeeTwoAmount,1,0,@BOtherFeeTwoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BPayableOtherFeeTwo and Status = 2                  
		
END


               

---------------- TINGGAL TEST SUDAH TAMBAH PAYABLE SUBS DAN REDEMPT FEE
-- B2. GENERATE PAYMENT FEE

Declare @EOMonthForFee datetime
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @BFundPK
if(@BDateOfPayment = day(@ValueDate) or (@BDateOfPayment >= day(@LastEndDayTrailsDate) and @BDateOfPayment <= day(@ValueDate)))
BEGIN
Declare @BManagementFeeAmountCheck numeric(22,4)
Declare @BCustodiFeeAmountCheck numeric(22,4)
Declare @BSinvestFeeAmountCheck numeric(22,4)
Declare @BPayableRedemptionFeeAmountCheck numeric(22,4)
Declare @BPayableSubscriptionFeeAmountCheck numeric(22,4)
Declare @BPayableSwitchingFeeAmountCheck numeric(22,4)

set @EOMonthForFee = dateadd(month,-1,@ValueDate)
set @EOMonthForFee = EOMONTH (@EOMonthForFee)
	
set @BManagementFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableManagementFeeAcc,@BFundPK)
set @BCustodiFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableCustodianFeeAcc,@BFundPK)
set @BSinvestFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableSinvestFeeAcc,@BFundPK)

set @BPayableRedemptionFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableRedemptionFee,@BFundPK)
set @BPayableSubscriptionFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableSubscriptionFee,@BFundPK)
set @BPayableSwitchingFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@BPayableSwitchingFee,@BFundPK)

set @BManagementFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableManagementFeeAcc,@BFundPK)
set @BCustodiFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableCustodianFeeAcc,@BFundPK)
set @BSinvestFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableSinvestFeeAcc,@BFundPK)

set @BPayableRedemptionFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableRedemptionFee,@BFundPK)
set @BPayableSubscriptionFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableSubscriptionFee,@BFundPK)
set @BPayableSwitchingFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@BPayableSwitchingFee,@BFundPK)

Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 
			                    
if @BManagementFeeAmount > 0  or @BCustodiFeeAmount > 0 or @BSinvestFeeAmount > 0 or @BPayableRedemptionFeeAmount > 0   or  
@BPayableSubscriptionFeeAmount > 0  or 
@BPayableSwitchingFeeAmount > 0   
Begin                                    
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
                      
Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,6,@maxEndDayTrailsPK,'PAYMENT FEE',                  
'','FUND ID: ' + @FundID ,1,@UsersID,@LastUpdate,@LastUpdate                  
                        
if @BManagementFeeAmount > 0  and @BManagementFeeAmount < @BManagementFeeAmountCheck                
Begin                       
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,1,1,2,@PayableManagementFeeAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT MANAGEMENT FEE FUND ID: ' + @FundID,'D',@BManagementFeeAmount,                   
		@BManagementFeeAmount,0,1,@BManagementFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableManagementFeeAcc and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT MANAGEMENT FEE FUND ID: ' + @FundID,'C',@BManagementFeeAmount,                   
		0,@BManagementFeeAmount,1,0,@BManagementFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
end                  
if @BCustodiFeeAmount > 0  and @BCustodiFeeAmount < @BCustodiFeeAmountCheck                
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,3,1,2,@PayableCustodianFeeAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT CUSTODIAN FEE FUND ID: ' + @FundID,'D',@BCustodiFeeAmount,                   
		@BCustodiFeeAmount,0,1,@BCustodiFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableCustodianFeeAcc and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,4,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT CUSTODIAN FEE FUND ID: ' + @FundID,'C',@BCustodiFeeAmount,                   
		0,@BCustodiFeeAmount,1,0,@BCustodiFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

IF (@BBitSInvestFee = 1)
BEGIN
    if @BSinvestFeeAmount > 0  and @BSinvestFeeAmount < @BSinvestFeeAmountCheck                
    Begin                            
	    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	    ,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		    Select  @FundJournalPK,5,1,2,@PayableSinvestFeeAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT SINVEST FEE FUND ID: ' + @FundID,'D',@BSinvestFeeAmount,                   
		    @BSinvestFeeAmount,0,1,@BSinvestFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableSinvestFeeAcc and Status = 2                   
                  
	    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	    ,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		    Select @FundJournalPK,6,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT CUSTODIAN FEE FUND ID: ' + @FundID,'C',@BSinvestFeeAmount,                   
		    0,@BSinvestFeeAmount,1,0,@BSinvestFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
    End 
END

if @BPayableRedemptionFeeAmount > 0   and @BPayableRedemptionFeeAmount < @BPayableRedemptionFeeAmountCheck               
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,7,1,2,@PayableRedemptionFee,CurrencyPK,@BFundPK,0,0,'PAYMENT AP REDEMPTION FEE FUND ID: ' + @FundID,'D',@BPayableRedemptionFeeAmount,                   
		@BPayableRedemptionFeeAmount,0,1,@BPayableRedemptionFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableRedemptionFee and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,8,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT AP REDEMPTION FEE FUND ID: ' + @FundID,'C',@BPayableRedemptionFeeAmount,                   
		0,@BPayableRedemptionFeeAmount,1,0,@BPayableRedemptionFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

if @BPayableSubscriptionFeeAmount > 0        and @BPayableSubscriptionFeeAmount < @BPayableSubscriptionFeeAmountCheck           
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,9,1,2,@PayableSubscriptionFee,CurrencyPK,@BFundPK,0,0,'PAYMENT AP SUBSCRIPTION FEE FUND ID: ' + @FundID,'D',@BPayableSubscriptionFeeAmount,                					@BPayableSubscriptionFeeAmount,0,1,@BPayableSubscriptionFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableSubscriptionFee and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,10,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT AP SUBSCRIPTION FEE FUND ID: ' + @FundID,'C',@BPayableSubscriptionFeeAmount,                   
		0,@BPayableSubscriptionFeeAmount,1,0,@BPayableSubscriptionFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

if @BPayableSwitchingFeeAmount > 0    and @BPayableSwitchingFeeAmount < @BPayableSwitchingFeeAmountCheck              
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,11,1,2,@BPayableSwitchingFee,CurrencyPK,@BFundPK,0,0,'PAYMENT AP SUBSCRIPTION FEE FUND ID: ' + @FundID,'D',@BPayableSwitchingFeeAmount,                					@BPayableSwitchingFeeAmount,0,1,@BPayableSwitchingFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BPayableSwitchingFee and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,12,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT AP SUBSCRIPTION FEE FUND ID: ' + @FundID,'C',@BPayableSwitchingFeeAmount,                   
		0,@BPayableSwitchingFeeAmount,1,0,@BPayableSwitchingFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

End

END

Fetch next From B   
Into @BFundPK,@BManagementFeePercent,@BCustodiFeePercent,
@BAuditFeeAmount,@BMovementFeeAmount, @BManagementFeeDays,@BCustodiFeeDays,@BAuditFeeDays,@BSInvestFeeDays,@BDateOfPayment,@BFundType,@BBitSinvestFee,@BOtherFeeOneAmount,@BOtherFeeTwoAmount
                                  
End                  
Close B                  
Deallocate B      
---------------------------------------------------------------------------------------------------------------------------
 -- B3. BANK INTEREST

declare @ECashAcc int
declare @EInterestPercent numeric (18,6)
declare @EInterestDays numeric (22,6)
declare @EBalance numeric (22,6)
declare @EMinimumBalance numeric (18,6)
declare @EBankInterestAmount numeric (22,6)
declare @EBankInterestAcc int
declare @EBankInterestIncomeAcc int

--declare @DateYesterDay datetime
--set @DateYesterDay = dbo.FWorkingDay(@ValueDate, - 1)

    set @EBankInterestAmount = 0

    IF EXISTS(select * from BankInterestSetup A left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
    where A.status in (1,2) and B.FundPK = @XFundPK)
    BEGIN
        DECLARE F CURSOR FOR 
        select MinimumBalance,InterestPercent,InterestDays from BankInterestSetup A 
		left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
        where A.status in (1,2) and B.FundPK = @XFundPK and Date = (
        Select max(date) from BankInterestSetup A 
		left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
        where A.status in (1,2) and B.FundPK = @XFundPK and Date <= @ValueDate
        )
        	
        Open F
        Fetch Next From F
        Into @EMinimumBalance,@EInterestPercent,@EInterestDays
        
        While @@FETCH_STATUS = 0
        BEGIN  
			select @ECashAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @XFundPK and Type = 3
			select @EBalance = dbo.FGetAccountFundJournalBalanceByFundPK(@DateYesterday,@ECashAcc,@XFundPK)

			IF(@EBalance >= @EMinimumBalance)
			BEGIN
			    set @EBankInterestAmount =  isnull((@EBalance * (@EInterestPercent/100))/ @EInterestDays * @FeeDays,0) 
			END
			ELSE
			BEGIN 
				set @EBankInterestAmount = 0
			END

		Fetch next From F Into @EMinimumBalance,@EInterestPercent,@EInterestDays
		END
		Close F
		Deallocate F 
	END
	ELSE
	BEGIN
		DECLARE F CURSOR FOR 
        select MinimumBalance,InterestPercent,InterestDays from BankInterestSetup A 
		left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
        where A.status in (1,2) and A.BankBranchPK = 0 and Date = (
        Select max(date) from BankInterestSetup A 
		left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
        where A.status in (1,2) and A.BankBranchPK = 0 and Date <= @ValueDate
        )

        	
        Open F
        Fetch Next From F
        Into @EMinimumBalance,@EInterestPercent,@EInterestDays
        
        While @@FETCH_STATUS = 0
        BEGIN  
			select @ECashAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @XFundPK and Type = 3
			select @EBalance = dbo.FGetAccountFundJournalBalanceByFundPK(@DateYesterday,@ECashAcc,@XFundPK)

			IF(@EBalance >= @EMinimumBalance)
			BEGIN
				set @EBankInterestAmount =  isnull((@EBalance * (@EInterestPercent/100))/ @EInterestDays * @FeeDays,0) 
			END
			ELSE
			BEGIN 
				set @EBankInterestAmount = 0
			END
				
			--select @EFundPK,@EBalance,@EInterestPercent,@EInterestDays

		Fetch next From F Into @EMinimumBalance,@EInterestPercent,@EInterestDays
		END
		Close F
		Deallocate F 
	END


	
	-- Setup Account kelar diatas, Next masukin ke Fund Journal  
	if @EBankInterestAmount > 0
	BEGIN
	select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                 

	Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,6,@maxEndDayTrailsPK,'BANK DAILY INTEREST',                  
	'','FUND ID: ' + @XFundID,1,@UsersID,@LastUpdate,@LastUpdate                  
	END    

	if @EBankInterestAmount > 0
	BEGIN
		
		select @EBankInterestAcc = InterestAccrGiro,@EBankInterestIncomeAcc = IncomeInterestGiro from FundAccountingSetup where FundPK = @XFundPK and status in (1,2)

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	Select  @FundJournalPK,1,1,2,@EBankInterestAcc,CurrencyPK,@XFundPK,0,0,'BANK DAILY INTEREST FUND ID: ' + @XFundID,'D',@EBankInterestAmount,                   
	@EBankInterestAmount,0,1,@EBankInterestAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @EBankInterestAcc and Status = 2                   

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	Select @FundJournalPK,2,1,2,@EBankInterestIncomeAcc,CurrencyPK,@XFundPK,0,0,'BANK DAILY INTEREST FUND ID: ' + @XFundID,'C',@EBankInterestAmount,                   
	0,@EBankInterestAmount,1,0,@EBankInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @EBankInterestIncomeAcc and Status = 2                  

	END



---------------------------------------------------------------------------------------------------------------------------

-- C. REVAL,GENERATE BOND,DEPOSITO ACCRUED  --             


declare @RevalMutualFund int
declare @InvestMutualFund int
declare @RevalEquity int
declare @InvestEquity int
declare @RevalBond int
declare @InvestBond int
declare @MarketValue numeric(22,6)   
declare @PrevMarketValue numeric(22,6) 

Declare @RevaluationAcc    int                  
Declare @UnrealisedAcc    int                  
Declare @FInstrumentPK    int         
Declare @FInstrumentID    nvarchar(100)                  
Declare @FFundPK     int                  
Declare @FTrxAmount     numeric(22,6)                  
Declare @FMarketValue    numeric(22,6)                  
Declare @FInstrumentTypePK   int                  
Declare @FCurrencyPK    int                  
Declare @FPrevRevaluationAmount  numeric(22,6)                  
Declare @FFinalAmount    numeric(22,6)                  
Declare @FLastCouponDate   datetime                  
Declare @FInterestAmount   numeric(18,6)                  
Declare @FBalance     numeric(18,0)                  
Declare @FTaxExpenseAmount   numeric(18,6)                  
Declare @FTaxExpensePercent   numeric(18,8)                  
Declare @FAcqDate   datetime                                  
Declare @FMaturityDate  datetime  
Declare @FSell   int 
Declare @FBuy   int 
Declare @FDoneAmount    numeric(22,6) 
Declare @FInterestDaysType int
Declare @FInterestPaymentType int
Declare @FInterestPercent numeric(18,8)
Declare @FPaymentModeOnMaturity int


--Select TaxExpensePercent,* from instrument where instrumentTYpePK in(2,3,15)
--update instrument set TaxExpensePercent = 5 where instrumentTYpePK in(2,3,15)

Declare D Cursor For   

    
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) CostValue -- isnull(C.CostValueSell,0)
,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
,B.TaxExpensePercent, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

where A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate  and FundPK = @XFundPK
) 
and B.InstrumentTypePK in (1,2,3,4,6,8,9,13,14,15,16) and A.FundPK = @XFundPK
and NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and C.statussettlement  = 2 and valuedate = @valuedate and C.FundPK = @XFundPK)
group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity 


UNION ALL

Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) CostValue -- isnull(C.CostValueSell,0)
,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
,B.TaxExpensePercent, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,1              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

where A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate  and FundPK = @XFundPK
) 
and B.InstrumentTypePK in (1,2,3,4,6,8,9,13,14,15,16)   and A.FundPK = @XFundPK
and  EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and statussettlement  = 2 and valuedate = @valuedate  and C.FundPK = @XFundPK)
group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity 


UNION ALL
Select A.InstrumentPK,A.FundPK,sum(A.CostValue) CostValue,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
,B.TaxExpensePercent, A.MaturityDate,1 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  
where A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and 
ValueDate =  (select max(ValueDate) From EndDayTrailsFundPortfolio where ValueDate < @ValueDate and status = 2 and FundPK = @XFundPK) and FundPK = @XFundPK
) 

and NOT EXISTS 
(  SELECT * FROM FundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and status  = 2 and date = @ValueDate  and C.FundPK = @XFundPK)

and B.InstrumentTypePK in (1,2,3,4,6,8,9,13,14,15,16)  and A.FundPK = @XFundPK
group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity 

Open D                  
Fetch Next From D                  
Into @FInstrumentPK,@FFundPK,@FTrxAmount,@FMarketValue,@FInstrumentTypePK,@FCurrencyPK,@FInstrumentID,@FLastCouponDate,@FBalance
,@FTaxExpensePercent,@FMaturityDate,@FSell,@FInterestDaysType,@FInterestPaymentType,@FInterestPercent ,@FPaymentModeOnMaturity,@FBuy     
While @@FETCH_STATUS = 0                  
Begin                  
    -- C1. REVALUATION EQUITY & BOND --

    select @RevalEquity = RevaluationEquity,@InvestEquity = InvestmentEquity,@RevalBond = RevaluationBond,@InvestBond = InvestmentBond from FundAccountingSetup where status = 2 and fundPK = @FFundPK
    IF(@RevalEquity = @InvestEquity) OR (@RevalBond = @InvestBond)
    BEGIN
	    IF @FInstrumentTypePK in (2,3,8,9,11,13,14,15) -- GBOND,CBOND,SUKUK
        BEGIN     
            Select @RevaluationAcc = RevaluationBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @UnrealisedAcc = UnrealisedBond From FundAccountingSetup where Status = 2  and fundPK = @FFundPK  
            Select @InterestRecAcc = InterestAccrBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @TaxExpenseAcc = TaxExpenseInterestIncomeBond From FundAccountingSetup where Status = 2  and fundPK = @FFundPK   


            IF (@FBuy = 1)
            BEGIN

                --select @MarketValue =  dbo.FGetLastVolumeInv(@valuedate,@FFundPK,@FInstrumentPK)   * (dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)/100)           
                --select @PrevMarketValue = dbo.FGetLastVolumeInv(dbo.FWorkingDay(@valuedate,-1),@FFundPK,@FInstrumentPK) * (dbo.FGetLastClosePriceFromFundPosition(dbo.FWorkingDay(@valuedate,-1),@FInstrumentPK,@FFundPK)/100)     
                --select @FDoneAmount = dbo.FGetDoneAmountInv(@valuedate,@FFundPK,@FInstrumentPK)
                --set @FFinalAmount = @MarketValue - (@PrevMarketValue + @FDoneAmount) 
                
                
                select @MarketValue =  dbo.FGetUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)
                select @PrevMarketValue = dbo.FGetPrevUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)

                set @FFinalAmount = @MarketValue -@PrevMarketValue 


            END
            ELSE IF (@FSell  = 1)
            BEGIN
                select @FPrevRevaluationAmount = isnull(sum(@FMarketValue - @FTrxAmount),0)
                Set @FFinalAmount = isnull(@FPrevRevaluationAmount * -1,0)

            END
            ELSE
            BEGIN
                select @MarketValue =  dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK)   * (dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)/100)           
                select @PrevMarketValue = dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK) * (dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK)/100) 
                set @FFinalAmount = @MarketValue - @PrevMarketValue  
				   
            END
        END    
   
        ELSE IF @FInstrumentTypePK in (1,4,16)    
        BEGIN    
            Select @RevaluationAcc = RevaluationEquity From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @UnrealisedAcc = UnrealisedEquity From FundAccountingSetup where Status = 2  and fundPK = @FFundPK

            IF (@FBuy = 1)
            BEGIN
                select @MarketValue =  dbo.FGetUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)
                select @PrevMarketValue = dbo.FGetPrevUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)

                set @FFinalAmount = @MarketValue -@PrevMarketValue 
            END
            ELSE IF (@FSell  = 1)
            BEGIN
                select @FPrevRevaluationAmount = isnull(sum(@FMarketValue - @FTrxAmount),0)
                Set @FFinalAmount = isnull(@FPrevRevaluationAmount * -1,0)

            END
            ELSE
            BEGIN
                select @MarketValue =  dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK)   * dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)           
                select @PrevMarketValue = dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK) * dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK) 
                set @FFinalAmount = @MarketValue - @PrevMarketValue 
				    
            END  
        END   

        ELSE IF @FInstrumentTypePK in (6)    
        BEGIN    
            Select @RevaluationAcc = RevaluationMutualFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @UnrealisedAcc = UnrealisedMutualFund From FundAccountingSetup where Status = 2  and fundPK = @FFundPK

            IF (@FBuy = 1)
            BEGIN
                select @MarketValue =  dbo.FGetUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)
                select @PrevMarketValue = dbo.FGetPrevUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)

                set @FFinalAmount = @MarketValue -@PrevMarketValue 
            END
            ELSE IF (@FSell  = 1)
            BEGIN
                select @FPrevRevaluationAmount = isnull(sum(@FMarketValue - @FTrxAmount),0)
                Set @FFinalAmount = isnull(@FPrevRevaluationAmount * -1,0)

            END
            ELSE
            BEGIN
                select @MarketValue =  dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK)   * dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)           
                select @PrevMarketValue = dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK) * dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK) 
                set @FFinalAmount = @MarketValue - @PrevMarketValue 
				    
            END  
        END  


    END
    ELSE
    BEGIN
        IF @FInstrumentTypePK in (2,3,8,9,11,13,14,15) -- GBOND,CBOND,SUKUK
        BEGIN     
            Select @RevaluationAcc = RevaluationBond From FundAccountingSetup where Status = 2    and fundPK = @FFundPK
            Select @UnrealisedAcc = UnrealisedBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @InterestRecAcc = InterestAccrBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @TaxExpenseAcc = TaxExpenseInterestIncomeBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK      
        END    
   
        ELSE IF @FInstrumentTypePK in (1,4,16)    
        BEGIN    
            Select @RevaluationAcc = RevaluationEquity From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @UnrealisedAcc = UnrealisedEquity From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
        END    
        ELSE IF @FInstrumentTypePK in (6)    
        BEGIN    
            Select @RevaluationAcc = RevaluationMutualFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @UnrealisedAcc = UnrealisedMutualFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
        END    

        IF @FInstrumentTypePK in(1,2,3,4,6,8,9,13,14,15,16)    
        BEGIN  
            IF (@FSell  = 1)
            BEGIN
                select @FPrevRevaluationAmount = isnull(dbo.[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK](@ValueDate,@RevaluationAcc,@FInstrumentPK,@FFundPK),0)    
                Set @FFinalAmount = isnull(@FPrevRevaluationAmount * -1,0)
				set @FFinalAmount = CONVERT(decimal(18,0),@FFinalAmount)
            END
            ELSE
            BEGIN

                select @FPrevRevaluationAmount = isnull(dbo.[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK](@ValueDate,@RevaluationAcc,@FInstrumentPK,@FFundPK),0)    
                Set @FFinalAmount = isnull(@FMarketValue,0) - isnull(@FTrxAmount,0) - @FPrevRevaluationAmount 
			    set @FFinalAmount = CONVERT(decimal(18,0),@FFinalAmount)
            END
        END
   
    END






	IF Exists(              
    Select * from ClosePrice where Status = 2 and date = @ValueDate              
    )  
    BEGIN
        IF isnull(@FFinalAmount,0) > 0 --Nilai Revaluasi Acc di Debit    
        BEGIN    
        -- Setup Account kelar diatas, Next masukin ke Fund Journal  
        Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal     
    
        set @FFinalAmount = isnull(ABS(@FFinalAmount),0)  


        INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]    
        ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])    
        
        Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,5,@maxEndDayTrailsPK,'PORTFOLIO REVALUATION',    
        '','INSTRUMENT: ' + @FInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate    
           
        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])        
            
        Select  @FundJournalPK,1,1,2,@RevaluationAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'INSTRUMENT: ' + @FInstrumentID,'D',@FFinalAmount,     
        @FFinalAmount,0,1,@FFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RevaluationAcc and Status = 2     
    
        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])     
    
        Select @FundJournalPK,2,1,2,@UnrealisedAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'INSTRUMENT: ' + @FInstrumentID,'C',@FFinalAmount,     
        0,@FFinalAmount,1,0,@FFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @UnrealisedAcc and Status = 2        
        END  
        --CEK DISINI YA AZIZ
        IF isnull(@FFinalAmount,0) < 0    
        BEGIN  
        -- Setup Account kelar diatas, Next masukin ke Fund Journal    
        Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
    
        set @FFinalAmount = isnull(ABS(@FFinalAmount),0)    
        
        INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]    
        ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])    
        
        Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,5,@maxEndDayTrailsPK,'PORTFOLIO REVALUATION',    
        '','INSTRUMENT: ' + @FInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate    
           
        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])        
            
        Select  @FundJournalPK,1,1,2,@UnrealisedAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'INSTRUMENT: ' + @FInstrumentID,'D',@FFinalAmount,     
        @FFinalAmount,0,1,@FFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @UnrealisedAcc and Status = 2     
    
        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])     
        
        Select @FundJournalPK,2,1,2,@RevaluationAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'INSTRUMENT: ' + @FInstrumentID,'C',@FFinalAmount,     
        0,@FFinalAmount,1,0,@FFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RevaluationAcc and Status = 2    
        END  
    END  	







	    
Fetch next From D                   
Into @FInstrumentPK,@FFundPK,@FTrxAmount,@FMarketValue,@FInstrumentTypePK,@FCurrencyPK,@FInstrumentID,@FLastCouponDate,@FBalance,@FTaxExpensePercent,@FMaturityDate,@FSell    
,@FInterestDaysType,@FInterestPaymentType,@FInterestPercent,@FPaymentModeOnMaturity,@FBuy  
END        
Close D                  
Deallocate D

--AAAAAAAA


Declare @IncDays int            
Declare @CInstrumentPK    int         
Declare @CInstrumentID    nvarchar(100)                  
Declare @CFundPK     int                  
Declare @CTrxAmount     numeric(22,6)                  
Declare @CMarketValue    numeric(22,6)                  
Declare @CInstrumentTypePK   int                  
Declare @CCurrencyPK    int                  
Declare @CPrevRevaluationAmount  numeric(22,6)                  
Declare @CFinalAmount    numeric(22,6)                  
Declare @CLastCouponDate   datetime                  
Declare @CInterestAmount   numeric(18,6)                  
Declare @CBalance     numeric(18,0)                  
Declare @CTaxExpenseAmount   numeric(18,6)                  
Declare @CTaxExpensePercent   numeric(18,8)                  
Declare @CAcqDate   datetime                  
Declare @InterestIncometAcc   int                  
Declare @CMaturityDate  datetime  
Declare @CSell   int
Declare @CRoll   int  
Declare @FundTypeInternal int
Declare @KPDTaxPercent numeric(18,2)


declare @CPaymentDays int
declare @CHoldDays int
declare @CPrevHoldDays int
declare @CGrossInterestAmountRound numeric(19,2)
declare @CPrevGrossInterestAmountRound numeric(19,2)
declare @CLastGrossInterestAmountRound numeric(19,2)
declare @CLastPrevGrossInterestAmountRound numeric(19,2)
declare @CGrossInterestAmount numeric(19,2)
declare @CPrevGrossInterestAmount numeric(19,2)
declare @CTaxGrossInterestAmount numeric(19,2)
declare @CPrevTaxGrossInterestAmount numeric(19,2)
declare @CGrossInterestAmountA numeric(19,2)


declare @CNetInterestAmount numeric(19,2)
declare @CPrevNetInterestAmount numeric(19,2)
declare @CTaxNetInterestAmount numeric(19,2)
declare @CPrevTaxNetInterestAmount numeric(19,2)

declare @CGrossDaily numeric(19,2)
declare @CTaxDaily numeric(19,2)
declare @CDivDays int
declare @CLastAcqDays int
declare @CLastPrevAcqDays int
declare @CAcqDays int
declare @CPrevAcqDays int
declare @CDivGrossInterestAmount numeric(19,2)
declare @CPrevDivGrossInterestAmount numeric(19,2)
declare @CInterestDays int

Declare @CInterestDaysType int
Declare @CInterestPaymentType int
Declare @CInterestPercent numeric(18,8)
Declare @CPaymentModeOnMaturity int
declare @ZValueDate datetime

--Select TaxExpensePercent,* from instrument where instrumentTYpePK in(2,3,15)
--update instrument set TaxExpensePercent = 5 where instrumentTYpePK in(2,3,15)


Declare C Cursor For   
 
  Select A.InstrumentPK,A.FundPK
,sum(A.CostValue)-- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,A.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

where A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate  and FundPK = @XFundPK
)
and B.InstrumentTypePK <> 5 and A.FundPK = @XFundPK

and NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate and C.StatusSettlement  = 2 and @ValueDate <= SettlementDate)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,A.TaxExpensePercent, A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity
 
UNION ALL

--JUAL BOND MASIH BELUM SETTLED

Select A.InstrumentPK,A.FundPK
,sum(A.CostValue)-- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,A.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

where A.status = 2 and B.InstrumentTypePK <> 5  and A.FundPK = @XFundPK
and EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and StatusSettlement  = 2 and TrxType = 2 and @ValueDate between ValueDate and SettlementDate  and FundPK = @XFundPK and A.[Identity] = C.TrxBuy)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,A.TaxExpensePercent, A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity

 
UNION ALL

-- MATURE DIHITUNG

Select A.InstrumentPK,A.FundPK
,sum(A.CostValue)-- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,A.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

where A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = dbo.FWorkingDay(@ValueDate,-1) and FundPK = @XFundPK
)
and B.InstrumentTypePK not in (1,5)  and A.FundPK = @XFundPK
and   EXISTS 
(  SELECT * FROM FundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK  and Status  = 2 and MaturityDate = @ValueDate  and FundPK = @XFundPK)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,A.TaxExpensePercent, A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity

 
UNION ALL
              
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) -- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,A.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      
where  A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate  and FundPK = @XFundPK
)
and A.MaturityDate > @ValueDate and B.InstrumentTypePK = 5  and A.FundPK = @XFundPK
and A.AcqDate not in (
select valuedate from investment where valuedate between @DateYesterday and @valuedate and valuedate <> @DateYesterday  and FundPK = @XFundPK and statussettlement = 2)
and NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate and StatusSettlement  = 2 and ValueDate = @ValueDate  and C.FundPK = @XFundPK)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,A.TaxExpensePercent,A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity





--MATURE INTEREST WEEKEND
UNION ALL       
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) -- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,A.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,1 Roll              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      
where  A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = dbo.FWorkingDay(@valuedate,-1)  and FundPK = @XFundPK
)
and A.MaturityDate <= @valuedate and B.InstrumentTypePK = 5  and A.FundPK = @XFundPK

and  NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate and StatusSettlement  = 2 and ValueDate = @ValueDate  and C.FundPK = @XFundPK)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,A.TaxExpensePercent,A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity


--ROLLOVER INTEREST WEEKEND
UNION ALL
              
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) -- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,A.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,1 Roll              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      
where  A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate and FundPK = @XFundPK
)
and A.MaturityDate > @ValueDate and B.InstrumentTypePK = 5 and A.FundPK = @XFundPK
and A.AcqDate  in (
select valuedate from investment where valuedate between @DateYesterday and @valuedate and valuedate <> @DateYesterday  and FundPK = @XFundPK)
and NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate and StatusSettlement  = 2 and ValueDate = @ValueDate  and C.FundPK = @XFundPK)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,A.TaxExpensePercent,A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity

UNION ALL

-- JUAL H+1 HARI LIBUR
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) -- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,A.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,1 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0 Roll             
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      
where  A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = dbo.FWorkingDay(@valuedate,-1)  and FundPK = @XFundPK
)
and A.MaturityDate > @ValueDate and B.InstrumentTypePK = 5 and A.FundPK = @XFundPK
and exists (
select * from investment C where TrxType = 2 and valuedate = @valuedate and A.InstrumentPK = C.InstrumentPK and A.AcqDate = C.AcqDate  and C.FundPK = @XFundPK  and C.statussettlement = 2)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,A.TaxExpensePercent,A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity




Open C                  
Fetch Next From C                  
Into @CInstrumentPK,@CFundPK,@CTrxAmount,@CMarketValue,@CInstrumentTypePK,@CCurrencyPK,@CInstrumentID,@CLastCouponDate,@CBalance
,@CTaxExpensePercent,@CAcqDate,@CMaturityDate,@CSell,@CInterestDaysType,@CInterestPaymentType,@CInterestPercent ,@CPaymentModeOnMaturity,@CRoll     
While @@FETCH_STATUS = 0                  
Begin              

  
-- C2. GENERATE INTEREST ACCRUED BOND                  

IF @CInstrumentTypePK in (2,3,8,9,11,13,14,15)             
BEGIN                  
Select @InterestRecAcc = InterestAccrBond
,@TaxExpenseAcc = TaxExpenseInterestIncomeBond,@InterestIncometAcc = IncomeInterestBond
From FundAccountingSetup where Status = 2  and FundPK = @CFundPK                  
END                  

IF @CInstrumentTypePK = 5 -- NCD INTEREST BLOM TAU GIMANA PAS MATURED
BEGIN                  
Select @InterestRecAcc = InterestAccrTimeDeposit,@TaxExpenseAcc = TaxExpenseInterestIncomeTimeDeposit 
,@InterestIncometAcc = IncomeInterestTimeDeposit
From FundAccountingSetup 
where Status = 2  and FundPK = @CFundPK
END              

-- KPD TAX
select @FundTypeInternal = FundTypeInternal from Fund where status = 2 and FundPK = @CFundPK 
select @KPDTaxPercent = KPDTaxExpenseForBond from SettlementSetup where status = 2

IF(@FundTypeInternal = 2)
BEGIN
   set @CTaxExpensePercent = @KPDTaxPercent
END
    
IF @CInstrumentTypePK in (2,3,8,9,11,13,14,15)     -- and  @CLastCouponDate < @ValueDate        
BEGIN       
if @CAcqDate < @Valuedate
BEGIN

        --IF (@CMarketValue = 0)
        --BEGIN
        --    set @CInterestAmount  = 0
        --    set @CTaxExpenseAmount = 0 
        --    set @CFinalAmount = 0 
        --END
        --ELSE
        --BEGIN
        --    Select @CInterestAmount = dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@ValueDate,@CFundPK,@CInstrumentPK,@CBalance)            
		--    set @CTaxExpenseAmount = (@CTaxExpensePercent / 100) * @CInterestAmount                  
		--    set @CFinalAmount = (@CInterestAmount - @CTaxExpenseAmount)  
        --END

        --IF (@CMarketValue = 0)
        --BEGIN
        --    set @CInterestAmount  = 0
        --    set @CTaxExpenseAmount = 0 
        --    set @CFinalAmount = 0 
        --END
        --ELSE
        BEGIN

            IF (@CInstrumentTypePK in (2,13)) -- BOND DAN SUKUK
            BEGIN

            select @CPaymentDays = 12 / [priority] FROM instrument A
            LEFT JOIN mastervalue B ON A.interestpaymenttype = B.code AND B.id = 'InterestPaymentType' AND B.status = 2 
            where A.InstrumentPK = @CInstrumentPK and A.status = 2


            truncate table #TempInterest

            DECLARE ZZ CURSOR FOR

            SELECT  TOP (DATEDIFF(DAY, dbo.FworkingDay(@ValueDate,-1), @ValueDate)) Dates = DATEADD(DAY, ROW_NUMBER() OVER(ORDER BY a.object_id), dbo.FworkingDay(@ValueDate,-1))
            FROM sys.all_objects a CROSS JOIN sys.all_objects b

            Open ZZ
            Fetch Next From ZZ
            Into @ZValueDate

            While @@FETCH_STATUS = 0
            BEGIN


            set @CDivDays = datediff(day,@CLastCouponDate,dbo.FGetNextCouponDate(@valuedate,@CInstrumentPK)) 

            set @CHoldDays = datediff(day,@CLastCouponDate,@ZValueDate)  
            set @CPrevHoldDays = datediff(day,@CLastCouponDate,@ZValueDate - 1) 

			set @CLastAcqDays = datediff(day,@CLastCouponDate,@CAcqDate) 
            set @CLastPrevAcqDays = datediff(day,@CAcqDate,@ZValueDate - 1)

            set @CAcqDays = datediff(day,@CAcqDate,@ZValueDate) 
            set @CPrevAcqDays = datediff(day,@CAcqDate,@ZValueDate - 1)




IF (@CAcqDate <= @CLastCouponDate)
BEGIN

set @CGrossInterestAmountRound =  @CBalance /1000000 * round(@CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CHoldDays * 1000000,0)
set @CPrevGrossInterestAmountRound =  @CBalance /1000000 * round(@CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CPrevHoldDays * 1000000,0)

--Untuk Tax

set @CTaxGrossInterestAmount =  (@CTaxExpensePercent/100) * @CBalance /1000000 * round(@CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CHoldDays * 1000000,0)
set @CPrevTaxGrossInterestAmount = (@CTaxExpensePercent/100) * @CBalance /1000000 * round(@CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CPrevHoldDays * 1000000,0)


--set @CTaxGrossInterestAmount =  round((@CTaxExpensePercent/100) * @CBalance * @CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CHoldDays/500,0)*500
--set @CPrevTaxGrossInterestAmount = round((@CTaxExpensePercent/100) * @CBalance * @CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CPrevHoldDays/500,0)*500
END
ELSE
BEGIN



--Last Coupon ke AcqDate
set @CGrossInterestAmountRound =  @CBalance /1000000 * round(@CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CHoldDays * 1000000,0)
set @CPrevGrossInterestAmountRound =  @CBalance /1000000 * round(@CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CPrevHoldDays * 1000000,0)


--Untuk Tax
set @CTaxGrossInterestAmount =  (@CTaxExpensePercent/100) *@CBalance /1000000 * round(@CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CAcqDays * 1000000,0)
set @CPrevTaxGrossInterestAmount =  (@CTaxExpensePercent/100) *@CBalance /1000000 * round(@CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CPrevAcqDays * 1000000,0)


--set @CTaxGrossInterestAmount =  round((@CTaxExpensePercent/100) * @CBalance * @CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CAcqDays/500,0)*500
--set @CPrevTaxGrossInterestAmount = round((@CTaxExpensePercent/100) * @CBalance * @CInterestPercent / 100 / @CDivDays /@CPaymentDays * @CPrevAcqDays/500,0)*500

				
END

set @CInterestAmount = (@CGrossInterestAmountRound) - (@CPrevGrossInterestAmountRound)

set @CTaxExpenseAmount =  @CTaxGrossInterestAmount - @CPrevTaxGrossInterestAmount


set @CFinalAmount = (@CInterestAmount - @CTaxExpenseAmount)

insert into #TempInterest(InterestAmount,TaxAmount,FinalAmount)
select @CInterestAmount,@CTaxExpenseAmount,@CFinalAmount
--insert into #A(CInstrumentID,CGrossInterestAmountRound,CPrevGrossInterestAmountRound,CTaxGrossInterestAmount,CPrevTaxGrossInterestAmount)
--select @CInstrumentID,@CGrossInterestAmountRound,@CPrevGrossInterestAmountRound,@CTaxGrossInterestAmount,@CPrevTaxGrossInterestAmount

                

                Fetch next From ZZ Into @ZValueDate
                END
                Close ZZ
                Deallocate ZZ

                    select @CInterestAmount = sum(InterestAmount) from #TempInterest
                    select @CTaxExpenseAmount = sum(TaxAmount) from #TempInterest
                    select @CFinalAmount = sum(FinalAmount) from #TempInterest
            END
            ELSE
            BEGIN
                Select @CInterestAmount = dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@ValueDate,@CFundPK,@CInstrumentPK,@CBalance)            
	            set @CTaxExpenseAmount = (@CTaxExpensePercent / 100) * @CInterestAmount                  
	            set @CFinalAmount = (@CInterestAmount - @CTaxExpenseAmount)  
            END
        END



      
		IF @CInstrumentTypePK in (2,3,8,9,11,13,14,15)                    
		BEGIN                 	         
		-- Setup Account kelar diatas, Next masukin ke Fund Journal   
		select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  

		IF @CInterestAmount > 0                  
		BEGIN           
		select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

        IF((day(@valuedate) <> 31 AND @CInterestDaysType in (1,3,5,6,7)) OR (@CInterestDaysType not in (1,3,5,6,7)))
        BEGIN
            IF (@CFundPK <> 43)
            BEGIN
                INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
                ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

                Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,9,@maxEndDayTrailsPK,'INTEREST BOND',                  
                '','INSTRUMENT: ' + @CInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

                INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

                Select  @FundJournalPK,1,1,2,@InterestRecAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CFinalAmount,                   
                @CFinalAmount,0,1,@CFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

                INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

                Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CInterestAmount,                   
                0,@CInterestAmount,1,0,@CInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2                  

                INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

                Select  @FundJournalPK,3,1,2,@TaxExpenseAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CTaxExpenseAmount,                   
                @CTaxExpenseAmount,0,1,@CTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxExpenseAcc and Status = 2   
        
            END
            ELSE
            BEGIN
                INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
                ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

                Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,9,@maxEndDayTrailsPK,'INTEREST BOND',                  
                '','INSTRUMENT: ' + @CInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

                INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

                Select  @FundJournalPK,1,1,2,@InterestRecAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CInterestAmount,                   
                @CInterestAmount,0,1,@CInterestAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

                INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

                Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CFinalAmount,                   
                0,@CFinalAmount,1,0,@CFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2                  

                INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

                Select  @FundJournalPK,3,1,2,@TaxExpenseAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CTaxExpenseAmount,                   
                0,@CTaxExpenseAmount,1,0,@CTaxExpenseAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxExpenseAcc and Status = 2   
        
            END

        END

            --IF(@CInterestDaysType not in (3,5,6,7))
            --BEGIN
            --INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
            --,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

            --Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,9,@maxEndDayTrailsPK,'INTEREST BOND',                  
            --'','INSTRUMENT: ' + @CInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

            --INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            --,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            --Select  @FundJournalPK,1,1,2,@InterestRecAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CFinalAmount,                   
            --@CFinalAmount,0,1,@CFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

            --INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            --,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            --Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CInterestAmount,                   
            --0,@CInterestAmount,1,0,@CInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2                  

            --INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            --,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            --Select  @FundJournalPK,3,1,2,@TaxExpenseAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CTaxExpenseAmount,                   
            --@CTaxExpenseAmount,0,1,@CTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxExpenseAcc and Status = 2   
            --END
	                              
		END
		END            
END
END        

IF @CInstrumentTypePK = 5  
BEGIN   
--IF NOT EXISTS(
--Select * from investment
--where ValueDate = @ValueDate and StatusSettlement = 2 and TrxType = 2 and InstrumentPK = @CInstrumentPK
--)
BEGIN
	
    IF (@CRoll = 0 AND @CSell = 0)
    BEGIN
        IF  @CMaturityDate > @DateYesterday and @CMaturityDate <= @ValueDate
        BEGIN
            Declare @RealMaturedDate datetime
            if @CPaymentModeOnMaturity = 1
            begin
            set @RealMaturedDate = @CMaturityDate
            end
            if @CPaymentModeOnMaturity = 2
            begin
            set @RealMaturedDate = @ValueDate
            end
            Select @CInterestAmount = dbo.[FGetDepositoInterestAccruedPerFundPK] (@RealMaturedDate,@CFundPK,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate)           

            if @CPaymentModeOnMaturity = 3
            begin
            set @CInterestAmount = 0
            end

        END
        ELSE
        BEGIN
	
            if (@ValueDate = @CAcqDate)
            BEGIN
                Select @CInterestAmount = 0
            END
            ELSE
            BEGIN
                Select @CInterestAmount = dbo.[FGetDepositoInterestAccruedPerFundPK] (@ValueDate,@CFundPK,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate)        
            END
	
		 
        END
    END
    ELSE IF (@CRoll = 1 and @CMaturityDate > @ValueDate)
    BEGIN
        Select @CInterestAmount = dbo.[FGetDepositoInterestAccruedPerFundPK] (@CAcqDate,@CFundPK,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate) * DateDiff(Day,@CAcqDate,@ValueDate)

    END
    ELSE IF (@CSell = 1 and @CMaturityDate > @ValueDate)
    BEGIN
        Select @CInterestAmount = dbo.[FGetDepositoInterestAccruedPerFundPK] (@CAcqDate,@CFundPK,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate) *  DateDiff(Day,dbo.Fworkingday(@ValueDate,-1),dateadd(day,-1,@valuedate))

    END
    ELSE
    BEGIN
        Select @CInterestAmount = dbo.[FGetDepositoInterestAccruedPerFundPK] (@CAcqDate,@CFundPK,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate) * DateDiff(Day,dbo.Fworkingday(@ValueDate,-1),@CMaturityDate)
    END


--       select @ValueDate,@CAcqDate,@CInterestAmount,@CInstrumentPK,@CInterestPercent,@CFundPK
-- where @CInstrumentPK in 
-- (
	--select A.instrumentPK from fundposition A
	--left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2

	--where fundpk = 2 and trailsPK = 2 and B.InstrumentTypePK = 5		   
-- )
-- CEK LOGIK PAYMENT INTEREST TYPE DISINI

-- Setup Account kelar diatas, Next masukin ke Fund Journal   
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  

IF @CInterestAmount > 0                  
BEGIN                  
set @CTaxExpenseAmount = (@CTaxExpensePercent / 100) * @CInterestAmount                  
set @CFinalAmount = @CInterestAmount - @CTaxExpenseAmount       

        IF((day(@valuedate) <> 31 AND @CInterestDaysType in (1,3,5,6,7)) OR (@CInterestDaysType not in (1,3,5,6,7)))
        BEGIN

        INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
        ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

        Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,7,@maxEndDayTrailsPK,'INTEREST DEPOSIT',                  
        '','INSTRUMENT: ' + @CInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

        Select  @FundJournalPK,1,1,2,@InterestRecAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CFinalAmount,                   
        @CFinalAmount,0,1,@CFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

        -- INI KHUSUS BANK MEGA
        IF (@CFundPK not in (40,23,33,30,21,25,27,32,34,37,35,42,44,43))
        BEGIN

        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

        Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CInterestAmount,                   
        0,@CInterestAmount,1,0,@CInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2                  


        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

        Select  @FundJournalPK,3,1,2,@TaxExpenseAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CTaxExpenseAmount,                   
        @CTaxExpenseAmount,0,1,@CTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxExpenseAcc and Status = 2 
        END
        else
        BEGIN
        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

        Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CFinalAmount,                   
        0,@CFinalAmount,1,0,@CFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2 
        END

        END



                  
END        
END

	          
END

                                              
	
 

 
Fetch next From C                   
Into @CInstrumentPK,@CFundPK,@CTrxAmount,@CMarketValue,@CInstrumentTypePK,@CCurrencyPK,@CInstrumentID,@CLastCouponDate,@CBalance,@CTaxExpensePercent,@CAcqDate,@CMaturityDate,@CSell    
,@CInterestDaysType,@CInterestPaymentType,@CInterestPercent,@CPaymentModeOnMaturity,@CRoll
END        
Close C                  
Deallocate C

                          
-- C4. MATURE BOND & TIME DEPOSIT & DEPOSITO BELUM SAMPE UJUNG   
Declare @DInstrumentPK    int  
Declare @DRealisedAccBond    int      
Declare @DRevaluationAccBond    int         
Declare @DInstrumentID    nvarchar(100)                  
Declare @DFundPK     int                  
Declare @DTrxAmount     numeric(22,6)                  
Declare @DMarketValue    numeric(22,6)                  
Declare @DInstrumentTypePK   int                  
Declare @DCurrencyPK    int                                   
Declare @DFinalAmount    numeric(22,6)                  
Declare @DNextCouponDate   datetime                  
Declare @DInterestAmount   numeric(18,6)                  
Declare @DBalance     numeric(18,0)                  
Declare @DTaxExpenseAmount   numeric(18,6)                  
Declare @DTaxExpensePercent   numeric(18,8)                  
Declare @DAcqDate   datetime                                  
Declare @DMaturityDate  datetime  
Declare @PrevInterestAmount numeric(22,6)
Declare @PrevFinalAmount numeric(22,6)
Declare @PrevTaxExpenseAmount numeric(22,6)
declare @divdays int
declare @intdays int

Declare @DInterestRecAcc int
Declare @DTaxExpenseAcc int
Declare @DInterestIncometAcc int
Declare @DCashAtBankAcc   int  
Declare @DInvestmentBond int
Declare @DInvestmentTimeDeposit int
Declare @DInterestPaymentType int


Declare @DPaymentModeOnMaturity int
Declare @DInterestDaysType int
Declare @DInterestPercent numeric(18,4)


--DISINI

insert into #Mature(InstrumentPK,FundPK,TrxAmount,MarketValue,InstrumentTypePK,CurrencyPK,InstrumentID,NextCouponDate,Balance,
TaxExpensePercent, AcqDate, MaturityDate,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType)

Select A.InstrumentPK,A.FundPK,A.CostValue,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetNextCouponDate(@ValueDate,A.InstrumentPK),A.Balance                   
,B.TaxExpensePercent, A.AcqDate, A.MaturityDate, A.PaymentModeOnMaturity,A.InterestDaysType,A.InterestPercent,A.InterestPaymentType            
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  
where  A.status = 2 and TrailsPK = (              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @DateYesterday and FundPK = @XFundPK
) 
and A.MaturityDate >= @DateYesterday and A.MaturityDate <= @valuedate and B.InstrumentTypePK in (5,10) and A.FundPK = @XFundPK
and A.[Identity] not in(
Select isnull(TrxBuy,0) from Investment where Valuedate between @DateYesterday and  @ValueDate and StatusSettlement = 2 and TrxType in (2) and FundPK = @XFundPK
)


-- INI UNTUK KASUS TERIMA KUPON BULANAN, PAKAI INTERESTPAYMENTTYPE = 7 (MONTHLY)
union all

Select A.InstrumentPK,A.FundPK,A.CostValue,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetNextCouponDate(@ValueDate,A.InstrumentPK),A.Balance                   
,B.TaxExpensePercent, cast(cast(DATEPART(mm, DATEADD(mm,-1, @valuedate)) as nvarchar(2)) + '/' + cast(DATEPART(DAY,A.MaturityDate) as nvarchar(2)) + '/' + cast(DATEPART(YEAR,@valuedate) as nvarchar(4)) as datetime) AcqDate, cast(cast(DATEPART(MONTH, @valuedate) as nvarchar(2)) + '/' + cast(DATEPART(DAY,A.MaturityDate) as nvarchar(2)) + '/' + cast(DATEPART(YEAR,@valuedate) as nvarchar(4)) as datetime)  MaturityDate, A.PaymentModeOnMaturity,A.InterestDaysType,A.InterestPercent,A.InterestPaymentType            
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  
where  A.status = 2 and TrailsPK = (              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @DateYesterday and FundPK = @XFundPK
) 
and A.MaturityDate >= @valuedate and A.InterestPaymentType = 7 and DATEPART(DAY,A.MaturityDate) >= DATEPART(DAY,@DateYesterday) and DATEPART(DAY,A.MaturityDate) <= DATEPART(DAY,@valuedate) and B.InstrumentTypePK in (5,10) and A.FundPK = @XFundPK


union all

Select A.InstrumentPK,A.FundPK,A.CostValue,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),A.Balance                   
,B.TaxExpensePercent, A.AcqDate, A.MaturityDate, A.PaymentModeOnMaturity,A.InterestDaysType,A.InterestPercent,A.InterestPaymentType                       
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  
where  A.status = 2 and TrailsPK = (              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @DateYesterday and FundPK = @XFundPK
) 
and B.InstrumentTypePK in (2,3,8,9,11,13,14,15) and A.FundPK = @XFundPK
--and dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) > @DateYesterday 
--and dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) <= @valuedate 
and AcqDate < @valuedate       


DECLARE D CURSOR FOR 
select InstrumentPK,FundPK,TrxAmount,MarketValue,InstrumentTypePK, CurrencyPK,InstrumentID,NextCouponDate,Balance                   
,TaxExpensePercent, AcqDate, MaturityDate,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType
from #Mature where MaturityDate >= @DateYesterday and MaturityDate <= @valuedate and InstrumentTypePK in(5,10)	and FundPK = @XFundPK
union all
select InstrumentPK,FundPK,TrxAmount,MarketValue,InstrumentTypePK, CurrencyPK,InstrumentID,NextCouponDate,Balance                   
,TaxExpensePercent, AcqDate, MaturityDate 
,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType
from #Mature where MaturityDate >= @DateYesterday and MaturityDate <= @valuedate and InstrumentTypePK in (2,3,8,9,11,13,14,15) and FundPK = @XFundPK
Open D
Fetch Next From D
Into @DInstrumentPK,@DFundPK,@DTrxAmount,@DMarketValue,@DInstrumentTypePK,@DCurrencyPK,@DInstrumentID,@DNextCouponDate,@DBalance,@DTaxExpensePercent,@DAcqDate,@DMaturityDate   
,@DPaymentModeOnMaturity,@DInterestDaysType, @DInterestPercent ,@DInterestPaymentType         
While @@FETCH_STATUS = 0
BEGIN       
  

IF @DInstrumentTypePK in (2,3,8,9,11,13,14,15)            
BEGIN                  
Select @DInterestRecAcc = InterestAccrBond
,@DTaxExpenseAcc = TaxExpenseInterestIncomeBond,@DInterestIncometAcc = IncomeInterestBond,@DInvestmentBond = InvestmentBond,
@DRealisedAccBond = RealisedBond,@DRevaluationAccBond = RevaluationBond
From FundAccountingSetup where Status = 2  and FundPK = @DFundPK  

Select @DCashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @DFundPK

               

Begin           
Select @intdays =  DateDiff(day,@DateYesterday,@valuedate) 
IF(@DInterestPaymentType in (10,11,12)) 
BEGIN
	select @divdays = 90
END
ELSE
IF(@DInterestPaymentType in (16,17,18)) 
BEGIN
	select @divdays = 180
END
ELSE
IF(@DInterestPaymentType in (7,8,9)) 
BEGIN
	select @divdays = 30
END
ELSE
BEGIN
	select @divdays = datediff(day,@DAcqDate,@DMaturityDate)   
END       
Select @DInterestAmount = dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@valuedate,@DFundPK,@DInstrumentPK,@DBalance) / @intdays *  @divdays                                                 
End               

set @DTaxExpenseAmount = (@DTaxExpensePercent / 100) * dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@valuedate,@DFundPK,@DInstrumentPK,@DBalance) * (datediff(day,@DAcqDate,@DMaturityDate) - 1)                  
set @DFinalAmount = @DInterestAmount - @DTaxExpenseAmount

  

IF @DInterestAmount > 0                  
BEGIN    
	
IF (@DMaturityDate <= @valuedate)
BEGIN
    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@valuedate,8,@maxEndDayTrailsPK,'MATURE TO BANK',                  
    '','INSTRUMENT: ' + @DInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@DCashAtBankAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @DInstrumentID,'D',@DBalance,                   
    @DBalance,0,1,@DBalance,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DCashAtBankAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@DInvestmentBond,CurrencyPK,@DFundPK,@DInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @DInstrumentID,'C',@DBalance,                   
    0,@DBalance,1,0,@DBalance,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInvestmentBond and Status = 2  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,3,1,2,@DRealisedAccBond,CurrencyPK,@DFundPK,@DInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @DInstrumentID,'D',@DTrxAmount - @DBalance,                   
    @DTrxAmount - @DBalance,0,1,@DTrxAmount - @DBalance,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DRealisedAccBond and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,4,1,2,@DInvestmentBond,CurrencyPK,@DFundPK,@DInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @DInstrumentID,'C',@DTrxAmount - @DBalance,                   
    0,@DTrxAmount - @DBalance,1,0,@DTrxAmount - @DBalance,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInvestmentBond and Status = 2  

END

ELSE
BEGIN
-- Setup Account kelar diatas, Next masukin ke Fund Journal 
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal           
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@valuedate,8,@maxEndDayTrailsPK,'AR TO BANK',                  
'','INSTRUMENT: ' + @DInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@DCashAtBankAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @DInstrumentID,'D',@DFinalAmount,                   
@DFinalAmount,0,1,@DFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DCashAtBankAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@DInterestRecAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @DInstrumentID,'C',@DFinalAmount,                   
0,@DFinalAmount,1,0,@DFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInterestRecAcc and Status = 2                  
END
END               
END                  

ELSE IF @DInstrumentTypePK in (5,10)                
BEGIN   


Select @DInterestRecAcc = InterestAccrTimeDeposit,@DTaxExpenseAcc = TaxExpenseInterestIncomeTimeDeposit 
,@DInterestIncometAcc = IncomeInterestTimeDeposit, @DInvestmentTimeDeposit = InvestmentTimeDeposit
From FundAccountingSetup 
where Status = 2  and FundPK = @DFundPK

Select @DCashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @DFundPK

select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

Begin         
	
Select @DInterestAmount = dbo.[FGetDepositoInterestAccruedForPayment]  (@DMaturityDate,@DInstrumentPK,@DBalance,@DInterestDaysType,@DInterestPercent,@DAcqDate,@DInterestPaymentType,@DMaturityDate,@DPaymentModeOnMaturity)  End              

set @DTaxExpenseAmount = (@DTaxExpensePercent / 100) * @DInterestAmount                  
set @DFinalAmount = @DInterestAmount - @DTaxExpenseAmount

IF @DInterestAmount > 0                  
BEGIN    

--BALIKIN NILAI INTEREST KE BANK
             
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@valuedate,8,@maxEndDayTrailsPK,'AR INTEREST TO BANK',                  
'','INSTRUMENT: ' + @DInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@DCashAtBankAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'AR INTEREST TO BANK INSTRUMENT: ' + @DInstrumentID,'D',@DFinalAmount,                   
@DFinalAmount,0,1,@DFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInterestRecAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@DInterestRecAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'AR INTEREST TO BANK INSTRUMENT: ' + @DInstrumentID,'C',@DFinalAmount,                   
0,@DFinalAmount,1,0,@DFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInterestIncometAcc and Status = 2                  
END


IF @DInterestPaymentType not in (7) 
BEGIN


    if @DPaymentModeOnMaturity = 2 -- ACQ TO MATURITY DATE NWD
    begin
    set @DMaturityDate = dbo.fworkingDay(@DMaturityDate,1)
    end
    else if @DPaymentModeOnMaturity = 3 -- ACQ TO MATURITY DATE BWD
    begin
    set @DMaturityDate = dbo.fworkingDay(@DMaturityDate,1)
    end else
    BEGIN
    set @DMaturityDate = @DMaturityDate
    END

    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal          
       
    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@valuedate,8,@maxEndDayTrailsPK,'INV DEPOSIT TO BANK',                  
    '','INSTRUMENT: ' + @DInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@DCashAtBankAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'INV DEPOSIT TO BANK INSTRUMENT: ' + @DInstrumentID,'D',@DBalance,                   
    @DBalance,0,1,@DBalance,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DCashAtBankAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@DInvestmentTimeDeposit,CurrencyPK,@DFundPK,@DInstrumentPK,0,'INV DEPOSIT TO BANK INSTRUMENT: ' + @DInstrumentID,'C',@DBalance,                   
    0,@DBalance,1,0,@DBalance,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInvestmentTimeDeposit and Status = 2                 



    END       

        

END

		
Fetch next From D Into @DInstrumentPK,@DFundPK,@DTrxAmount,@DMarketValue,@DInstrumentTypePK,@DCurrencyPK,@DInstrumentID,@DNextCouponDate,@DBalance,@DTaxExpensePercent,@DAcqDate,@DMaturityDate      
,@DPaymentModeOnMaturity,@DInterestDaysType, @DInterestPercent     ,@DInterestPaymentType                  
END
Close D
Deallocate D    
-------------------------------------------------------------------
-- C5. REC COUPON BOND

Declare @GInstrumentPK    int       
Declare @GInstrumentID    nvarchar(100)                  
Declare @GFundPK     int                  
Declare @GTrxAmount     numeric(22,6)                  
Declare @GMarketValue    numeric(22,6)                  
Declare @GInstrumentTypePK   int                  
Declare @GCurrencyPK    int                                   
Declare @GFinalAmount    numeric(22,6)   
Declare @GLastCouponDate   datetime                  
Declare @GNextCouponDate   datetime                  
Declare @GInterestAmount   numeric(18,6)                  
Declare @GBalance     numeric(18,0)                  
Declare @GTaxExpenseAmount   numeric(18,6)                  
Declare @GTaxExpensePercent   numeric(18,8)                  
Declare @GAcqDate   datetime                                  
Declare @GMaturityDate  datetime  
Declare @GPrevInterestAmount numeric(22,6)
Declare @GPrevFinalAmount numeric(22,6)
Declare @GPrevTaxExpenseAmount numeric(22,6)
declare @Gdivdays int
declare @Gintdays int

Declare @GInterestRecAcc int
Declare @GTaxExpenseAcc int
Declare @GInterestIncometAcc int
Declare @GCashAtBankAcc   int  
Declare @GInterestAccrBond int
Declare @GInvestmentTimeDeposit int
Declare @GInterestPaymentType int


Declare @GPaymentModeOnMaturity int
Declare @GInterestDaysType int
Declare @GInterestPercent numeric(18,4)
Declare @GRecCouponDate   datetime   


--DISINI

insert into #RecCoupon(InstrumentPK,FundPK,TrxAmount,MarketValue,InstrumentTypePK,CurrencyPK,InstrumentID,LastCouponDate,NextCouponDate,Balance,
TaxExpensePercent, AcqDate, MaturityDate,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType,RecCouponDate)


Select A.InstrumentPK,A.FundPK,A.TrxAmount,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,
case when A.InterestPaymentType in (10,11,12,13) then dateadd(month,-3,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) else case when A.InterestPaymentType in (16,17,18) then dateadd(month,-6,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
else case when A.InterestPaymentType in (7,8,9) then dateadd(month,-1,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) end end end
,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),A.Balance                   
,B.TaxExpensePercent, A.AcqDate, A.MaturityDate, A.PaymentModeOnMaturity,A.InterestDaysType,A.InterestPercent,A.InterestPaymentType,case when C.SettlementDate is null then dbo.FgetLastCouponDate(A.Date,A.InstrumentPK) else C.SettlementDate end RecCouponDate                       
From FundPosition A                 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2  
left join 
(
select InstrumentPK,FundPK,SettlementDate,sum(DoneVolume) DoneVolume from 
Investment  where  StatusSettlement = 2 and TrxType = 1 
group by InstrumentPK,FundPK,SettlementDate
)C on A.InstrumentPK = C.InstrumentPK and A.FundPK = C.FundPK and A.AcqDate = C.SettlementDate            
where  A.status = 2 and TrailsPK = (              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio D where D.status = 2 and D.ValueDate = @DateYesterday and D.FundPK = @XFundPK
) 
and B.InstrumentTypePK in (2,3,8,9,11,13,14,15)
and dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) > @DateYesterday 
and dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) <= @valuedate 
and A.AcqDate  < @valuedate and A.FundPK = @XFundPK


DECLARE G CURSOR FOR 
select InstrumentPK,FundPK,TrxAmount,MarketValue,InstrumentTypePK, CurrencyPK,InstrumentID,LastCouponDate,NextCouponDate,Balance                   
,TaxExpensePercent, AcqDate, MaturityDate 
,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType,RecCouponDate
from #RecCoupon where (NextCouponDate >= @DateYesterday and NextCouponDate <= @valuedate) and InstrumentTypePK in (2,3,8,9,11,13,14,15) and FundPK = @XFundPK
Open G
Fetch Next From G
Into @GInstrumentPK,@GFundPK,@GTrxAmount,@GMarketValue,@GInstrumentTypePK,@GCurrencyPK,@GInstrumentID,@GLastCouponDate,@GNextCouponDate,@GBalance,@GTaxExpensePercent,@GAcqDate,@GMaturityDate   
,@GPaymentModeOnMaturity,@GInterestDaysType, @GInterestPercent ,@GInterestPaymentType,@GRecCouponDate         
While @@FETCH_STATUS = 0
BEGIN      
  
  

IF @GInstrumentTypePK in (2,3,8,9,11,13,14,15)            
BEGIN                  
Select @GInterestRecAcc = InterestAccrBond
,@GTaxExpenseAcc = WHTTaxPayableAccrInterestBond,@GInterestIncometAcc = IncomeInterestBond,@GInterestAccrBond = InterestAccrBond
From FundAccountingSetup where Status = 2  and FundPK = @GFundPK  

Select @GCashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @GFundPK


---- TERIMA KUPON 
IF(datediff(day,@GNextCouponDate,@GMaturityDate)) > 15
BEGIN        
		
    
		IF (@GInstrumentTypePK in (2))
		BEGIN       
			select @Gdivdays = datediff(day,@GLastCouponDate,@GNextCouponDate)   
		END
		ELSE
		BEGIN
			IF(@GInterestPaymentType in (10,11,12,13)) 
			BEGIN
				select @Gdivdays = 90
			END
			ELSE IF(@GInterestPaymentType in (16,17,18)) 
			BEGIN
				select @Gdivdays = 180
			END
			ELSE IF(@GInterestPaymentType in (7,8,9)) 
			BEGIN
				select @Gdivdays = 30
			END
			ELSE
			BEGIN
				select @Gdivdays = datediff(day,@GAcqDate,@GNextCouponDate)   
			END   
		END
		Select @Gintdays =  DateDiff(day,@DateYesterday,@valuedate) 
		Select @GInterestAmount = dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@valuedate,@GFundPK,@GInstrumentPK,@GBalance) / @Gintdays *  (@Gdivdays)
                                                  
	 
	              
	IF (@GRecCouponDate > @GLastCouponDate)
	BEGIN
        if @GInstrumentTypePK in (2,9,13,15)
        BEGIN
        set @GTaxExpenseAmount = (((dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@valuedate,@GFundPK,@GInstrumentPK,@GBalance)) / @Gintdays   * @GTaxExpensePercent/100)  * dbo.[FGetDateDIffGovermentBond](@GRecCouponDate,@GNextCouponDate)) 
        END
        ELSE
        BEGIN
        set @GTaxExpenseAmount = (((dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@valuedate,@GFundPK,@GInstrumentPK,@GBalance)) / @Gintdays   * @GTaxExpensePercent/100)  * dbo.[FgetDateDiffCorporateBond](@GRecCouponDate,@GNextCouponDate)) 
        END
	END
	ELSE
	BEGIN
		set @GTaxExpenseAmount = (@GTaxExpensePercent / 100) * @GInterestAmount
	END

	set @GFinalAmount = @GInterestAmount - @GTaxExpenseAmount
	

	
IF @GInterestAmount > 0                  
	BEGIN    
	
		IF (@GNextCouponDate <= @valuedate)
		BEGIN
			select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
			INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
			,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
			Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@valuedate,8,@maxEndDayTrailsPK,'REC COUPON',                  
			'','INSTRUMENT: ' + @GInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  
			INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
			,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
			Select  @FundJournalPK,1,1,2,@GCashAtBankAcc,CurrencyPK,@GFundPK,@GInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @GInstrumentID,'D',@GFinalAmount,                   
			@GFinalAmount,0,1,@GFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GCashAtBankAcc and Status = 2                   
			INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
			,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
			Select @FundJournalPK,2,1,2,@GInterestAccrBond,CurrencyPK,@GFundPK,@GInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @GInstrumentID,'C',@GFinalAmount,                   
			0,@GFinalAmount,1,0,@GFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GInterestAccrBond and Status = 2  
  
			INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
			,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
			Select  @FundJournalPK,3,1,2,@GTaxExpenseAcc,CurrencyPK,@GFundPK,@GInstrumentPK,0,'TAX AR TO BANK INSTRUMENT: ' + @GInstrumentID,'D',@GTaxExpenseAmount,                   
			@GTaxExpenseAmount,0,1,@GTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GTaxExpenseAcc and Status = 2                   
			INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
			,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
			Select @FundJournalPK,4,1,2,@GInterestIncometAcc,CurrencyPK,@GFundPK,@GInstrumentPK,0,'TAX AR TO BANK INSTRUMENT: ' + @GInstrumentID,'C',@GTaxExpenseAmount,                   
			0,@GTaxExpenseAmount,1,0,@GTaxExpenseAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GInterestIncometAcc and Status = 2  
		END
	END

END
ELSE
BEGIN
  
   
	IF(@GInterestPaymentType in (10,11,12,13)) 
	BEGIN
		select @Gdivdays = 90 + dbo.FgetDateDiffCorporateBond(@GNextCouponDate,@GMaturityDate)

	END
	ELSE
	IF(@GInterestPaymentType in (16,17,18)) 
	BEGIN
		select @Gdivdays = 180 + dbo.FgetDateDiffCorporateBond(@GNextCouponDate,@GMaturityDate)
	END
	ELSE
	IF(@GInterestPaymentType in (7,8,9)) 
	BEGIN
		select @Gdivdays = 30 + dbo.FgetDateDiffCorporateBond(@GNextCouponDate,@GMaturityDate)
	END
	ELSE
	BEGIN
		select @Gdivdays = dbo.FgetDateDiffCorporateBond(@GNextCouponDate,@GMaturityDate)  
	END    
	    Select @Gintdays =  DateDiff(day,@DateYesterday,@valuedate)   
		Select @GInterestAmount = dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@valuedate,@GFundPK,@GInstrumentPK,@GBalance)/ @Gintdays *  @Gdivdays

                                                  
           

	IF (@GRecCouponDate > @GLastCouponDate)
	BEGIN

        if @GInstrumentTypePK in (2,9,13,15)
        BEGIN
        set @GTaxExpenseAmount = (((dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@valuedate,@GFundPK,@GInstrumentPK,@GBalance)) / @Gintdays   * @GTaxExpensePercent/100)  * dbo.[FGetDateDIffGovermentBond](@GRecCouponDate,@GMaturityDate)) 
        END
        ELSE
        BEGIN
        set @GTaxExpenseAmount = (((dbo.[FGetBondInterestAccrued_ForFundJournalPerFundPK] (@valuedate,@GFundPK,@GInstrumentPK,@GBalance)) / @Gintdays   * @GTaxExpensePercent/100)  * dbo.[FgetDateDiffCorporateBond](@GRecCouponDate,@GMaturityDate)) 
        END                
	END
	ELSE
	BEGIN
		set @GTaxExpenseAmount = (@GTaxExpensePercent / 100) * @GInterestAmount
	END

	set @GFinalAmount = @GInterestAmount - @GTaxExpenseAmount



  
	IF @GInterestAmount > 0                  
	BEGIN    
	
		IF (@GNextCouponDate <= @valuedate)
		BEGIN
			select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
			INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
			,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

			Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@GMaturityDate,8,@maxEndDayTrailsPK,'REC COUPON',                  
			'','INSTRUMENT: ' + @GInstrumentID ,1,@UsersID,@LastUpdate,@LastUpdate                  

			INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
			,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

			Select  @FundJournalPK,1,1,2,@GCashAtBankAcc,CurrencyPK,@GFundPK,@GInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @GInstrumentID,'D',@GFinalAmount,                   
			@GFinalAmount,0,1,@GFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GCashAtBankAcc and Status = 2                   

			INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
			,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

			Select @FundJournalPK,2,1,2,@GInterestAccrBond,CurrencyPK,@GFundPK,@GInstrumentPK,0,'AR TO BANK INSTRUMENT: ' + @GInstrumentID,'C',@GFinalAmount,                   
			0,@GFinalAmount,1,0,@GFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GInterestAccrBond and Status = 2  

  
			INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
			,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

			Select  @FundJournalPK,3,1,2,@GTaxExpenseAcc,CurrencyPK,@GFundPK,@GInstrumentPK,0,'TAX AR TO BANK INSTRUMENT: ' + @GInstrumentID,'D',@GTaxExpenseAmount,                   
			@GTaxExpenseAmount,0,1,@GTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GTaxExpenseAcc and Status = 2                   

			INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
			,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

			Select @FundJournalPK,4,1,2,@GInterestIncometAcc,CurrencyPK,@GFundPK,@GInstrumentPK,0,'TAX AR TO BANK INSTRUMENT: ' + @GInstrumentID,'C',@GTaxExpenseAmount,                   
			0,@GTaxExpenseAmount,1,0,@GTaxExpenseAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GInterestIncometAcc and Status = 2  



		END

	END    

END
           
END                  

		
Fetch next From G Into @GInstrumentPK,@GFundPK,@GTrxAmount,@GMarketValue,@GInstrumentTypePK,@GCurrencyPK,@GInstrumentID,@GLastCouponDate,@GNextCouponDate,@GBalance,@GTaxExpensePercent,@GAcqDate,@GMaturityDate      
,@GPaymentModeOnMaturity,@GInterestDaysType, @GInterestPercent,@GInterestPaymentType,@GRecCouponDate                  
END
Close G
Deallocate G  








-----------------------------------------------------------------------------------------------------------

-- D. COPY FUND CLIENT POSITION --    
    
         
--Insert into FundClientPosition(Date,FundClientPk,FundPK,CashAmount,UnitAmount,LastUpdate)              
--Select dbo.FWorkingDay(@ValueDate, 1),FundClientPK,FundPK,CashAmount,UnitAmount,@LastUpdate              
--From FundClientPosition where Date = @ValueDate and FundPK = @XFundPK           

---- E. PENDING UNIT REGISTRY
---- 1. SUBSCRIPTION & SWITCHING
--Declare @SValueDate Datetime,@SFundPK int,@SCashRefPK int,@SFundClientPK int,@SFundClientName nvarchar(100),@STotalCashAmount numeric(22,4),@SCurrencyPK int ,@SType nvarchar(5)  
--Declare @SPendingSubscription int,@SSubscription int,@SCashAtBankAcc int , @SPendingSwitching int  
--Declare @SPendingRedemption int,@SRedemption int
--Declare @SCashAmount numeric(22,4), @SFeeAmount numeric(22,4)
--Declare @SPayableSubsAcc int                 
--DECLARE @BitPendingSubscription bit	
--DECLARE @SUBS numeric(22,8), @SWI numeric(22,8)						 

--Declare A Cursor For                  
--select Date,FundPK,isnull(sum(SUBAmount),0) SUBS,isnull(sum(SWIINAmount),0) SWI from RetrieveFromBridge A
--left join Fund B on A.FundID = B.ID and B.Status = 2
--where A.Date = @ValueDate  and B.FundPK = @XFundPK
--group by Date,B.FundPK
	            
--Open A                  
--Fetch Next From A                  
--Into @SValueDate,@SFundPK,@SUBS,@SWI

--While @@FETCH_STATUS = 0                  
--Begin 



--SELECT @BitPendingSubscription = ISNULL(BitPendingSubscription,1) FROM dbo.FundFee WHERE fundPK = @SFundPK
--AND date = 
--(
--SELECT MAX(Date) FROM dbo.FundFee WHERE Date <= @SValueDate AND FundPK = @SFundPK
--AND status = 2
--) and STATUS = 2

--set @BitPendingSubscription = isnull(@BitPendingSubscription,0)

--set @SCashAtBankAcc = NULL
--select @SCashRefPK = FundCashRefPK from FundCashRef where FundPK = @SFundPK and status = 2

--Select @SCashAtBankAcc = isnull(FundJournalAccountPK,3) From FundCashRef where Status = 2 and FundCashRefPK = @SCashRefPK
--if (@SCashAtBankAcc is null or @SCashAtBankAcc  = '')
--BEGIN
--set @SCashAtBankAcc = 3
--END



--IF(@BitPendingSubscription = 1)
--BEGIN
--	Select @SPendingSubscription = PendingSubscription,@SSubscription = Subscription
--	,@SPayableSubsAcc = payablesubscriptionfee,@SPendingSwitching = PendingSwitching
--	From FundAccountingSetup 
--	where Status = 2  and FundPK = @SFundPK

--    set @SFundClientPK = 1

--    IF (@SUBS> 0)
--    BEGIN 
--	    -- T0
--	    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  

--	    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
--	    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

--	    Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@SValueDate,2,@maxEndDayTrailsPK,'PENDING SUBSCRIPTION',                  
--	    '','Retrieve From Bridge',1,@UsersID,@LastUpdate,@LastUpdate                  

--	    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
--	    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

--	    Select  @FundJournalPK,1,1,2,@SCashAtBankAcc,1,@SFundPK,0,@SFundClientPK,'Subscription Fund Client : MNC','D',@SUBS,                   
--	    @SUBS,0,1,@SUBS,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SCashAtBankAcc and Status = 2                   

--	    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
--	    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

--	    Select @FundJournalPK,2,1,2,@SPendingSubscription,1,@SFundPK,0,@SFundClientPK,'Subscription Fund Client : MNC','C',@SUBS,                   
--	    0,@SUBS,1,0,@SUBS,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SPendingSubscription and Status = 2   


--	END

                                
--    --IF (@SWI > 0)
--    --BEGIN 
--    --	-- T0
--    --	select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  

--    --	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
--    --	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

--    --	Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@SValueDate,2,@maxEndDayTrailsPK,'PENDING SWITCHING',                  
--    --	'','Retrieve From Bridge',0,@UsersID,@LastUpdate,@LastUpdate                  

--    --	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
--    --	,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

--    --	Select  @FundJournalPK,1,1,2,@SPendingSwitching,1,@SFundPK,0,@SFundClientPK,'Switching Fund Client : MNC','D',@SWI,                   
--    --	@SWI,0,1,@SWI,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SPendingSwitching and Status = 2                   

--    --	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
--    --	,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

--    --	Select @FundJournalPK,2,1,2,@SSubscription,1,@SFundPK,0,@SFundClientPK,'Switching Fund Client : MNC','C',@SWI,                   
--    --	0,@SWI,1,0,@SWI,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SSubscription and Status = 2   


--    --END


--END

--Fetch next From A                   
--Into @SValueDate,@SFundPK,@SUBS,@SWI
--END                  
--Close A                  
--Deallocate A


-------------------------------------------
-- JOURNAL CORPORATE ACTION




--DIVIDEN SAHAM
-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume,PaymentDate,RecordingDate,Hold,Earn)
Select  B.FundPK,B.InstrumentPK,B.Balance + ISNULL(C.BalanceFromInv,0) LastBalance,
A.PaymentDate,A.RecordingDate,A.Hold,A.Earn
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK = @XFundPK
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 1 and A.Status = 2 and A.ExDate = @ValueDate and B.FundPK = @XFundPK



Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume,PaymentDate,RecordingDate,Hold,Earn)
Select B.FundPK,B.InstrumentPK,isnull(B.BalanceFromInv,0),A.PaymentDate,A.RecordingDate,A.Hold,A.Earn
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @XFundPK
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 1 and A.Status = 2 and A.ExDate = @ValueDate and B.FundPK = @XFundPK
and C.FundPK is null and C.InstrumentPK is null

Declare @TIncomeDividend int
Declare @TARDividend int
Declare @TotalAmount numeric(22,4)
Declare @TWithHoldingTaxPPH23 int


Declare @TInstrumentPK int
declare @TFundPK int
declare @TLastVolume numeric(22,4)
declare @TPaymentDate datetime
declare @TRecordingDate datetime
declare @TEarn numeric(22,4)
declare @THold numeric(22,4)

Declare @TTaxPercentage numeric(8,4)

Declare A Cursor For   
Select * From #ZDividenSaham
Open A                  
Fetch Next From A                  
Into @TInstrumentPK,@TFundPK,@TLastVolume,@TPaymentDate,@TRecordingDate,@TEarn,@THold
While @@FETCH_STATUS = 0                  
Begin 

Select @TIncomeDividend = IncomeDividend,@TARDividend = ARDividend,@TWithHoldingTaxPPH23 = prepaidTaxDividend 
,@TTaxPercentage = TaxPercentageDividend
From FundAccountingSetup where Status = 2  and FundPK = @TFundPK
set @TotalAmount = 0
set @TotalAmount = @TLastVolume/@THold * @TEarn
   
if @TotalAmount > 0
BEGIN
	
----------- TO
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,12,@maxEndDayTrailsPK,'DIVIDEND',                  
'','DIVIDEND CASH CUM DATE' ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@TARDividend,CurrencyPK,@TFundPK,0,0,'AR DIVIDEND','D',@TotalAmount,                   
@TotalAmount,0,1,@TotalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TARDividend and Status = 2                   


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@TIncomeDividend,CurrencyPK,@TFundPK,0,0,'INCOME DIVIDEND','C',@TotalAmount,                   
0,@TotalAmount,1,0,@TotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TIncomeDividend and Status = 2   

--------------- PAYMENT DATE

declare @pph23Amount numeric(22,4)
set @pph23Amount = @TotalAmount * @TTaxPercentage/100

select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@TPaymentDate,12,@maxEndDayTrailsPK,'DIVIDEND',                  
'','DIVIDEND CASH PAYMENT DATE' ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@DefaultCashAtBankPK,CurrencyPK,@TFundPK,0,0,'DIVIDEND','D',@TotalAmount - @pph23Amount,                   
@TotalAmount - @pph23Amount,0,1,@TotalAmount - @pph23Amount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DefaultCashAtBankPK and Status = 2                   


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,2,1,2,@TWithHoldingTaxPPH23,CurrencyPK,@TFundPK,0,0,'TAX DIVIDEND','D',@pph23Amount,                   
@pph23Amount,0,1,@pph23Amount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TWithHoldingTaxPPH23 and Status = 2     

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,3,1,2,@TARDividend,CurrencyPK,@TFundPK,0,0,'AR DIVIDEND','C',@TotalAmount,                   
0,@TotalAmount,1,0,@TotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TARDividend and Status = 2   

END
   
Fetch next From A                   
Into @TInstrumentPK,@TFundPK,@TLastVolume,@TPaymentDate,@TRecordingDate,@TEarn,@THold
END                  
Close A                  
Deallocate A



---BOND AMORTIZE
TRUNCATE TABLE #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume,PaymentDate,Earn,Hold)
Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance,A.PaymentDate,A.Earn,A.Hold
--B.Balance + C.BalanceFromInv LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK  in (2,3,9,15)
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
--and C.ValueDate >= A.ValueDate
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate and B.FundPK = @XFundPK


Declare @TInvestmentInBond int
Declare @TBondAmortized int


Declare A Cursor For   
Select InstrumentPK,FundPK,LastVolume,PaymentDate,PaymentDate,Earn,Hold From #ZDividenSaham  where FundPK = @XFundPK
Open A                  
Fetch Next From A                  
Into @TInstrumentPK,@TFundPK,@TLastVolume,@TPaymentDate,@TRecordingDate,@TEarn,@THold
While @@FETCH_STATUS = 0                  
Begin 

Select @TInvestmentInBond = InvestmentBond,@TBondAmortized = BondAmortization
From FundAccountingSetup where Status = 2  and FundPK = @TFundPK
set @TotalAmount = 0
set @TotalAmount = @TLastVolume *  @TEarn / @THold * -1
   
if @TotalAmount < 0
BEGIN
SET @TotalAmount = ABS(@TotalAmount)
----------- TO
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,12,@maxEndDayTrailsPK,'BOND AMORTIZE',                  
'','CORPORATE ACTION BOND AMORTIZE' ,1,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@TBondAmortized,CurrencyPK,@TFundPK,0,0,'CORPORATE ACTION BOND AMORTIZE','D',@TotalAmount,                   
@TotalAmount,0,1,@TotalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TBondAmortized and Status = 2                   


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@TInvestmentInBond,CurrencyPK,@TFundPK,0,0,'CORPORATE ACTION BOND AMORTIZE','C',@TotalAmount,                   
0,@TotalAmount,1,0,@TotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TInvestmentInBond and Status = 2   

END
   
Fetch next From A                   
Into @TInstrumentPK,@TFundPK,@TLastVolume,@TPaymentDate,@TRecordingDate,@TEarn,@THold
END                  
Close A                  
Deallocate A


-------------------------------------------
                        
                        Update A set BitValidate = 1, LogMessages = B.ID + ' - ' + B.Name from EndDayTrails A  
                        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                        where A.FundPK = @XFundPK and A.Status = 2 and ValueDate = @ValueDate       



Fetch next From X   
Into @XFundPK,@XFundID                
End                  
Close X                  
Deallocate X 

Select @maxEndDayTrailsPK LastPK     
                             
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }


                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public Boolean Payment_Voucher(string _userID, Cashier _cashier)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText =
                         @" 
                            
                        Select lower(C.EntryUsersID) CheckedBy,lower(C.EntryUsersID) ApprovedBy,  C.Reference ,C.CashierID,      
                        valuedate,A.ID AccountID, A.Name AccountName, C.Description,     
                        DebitCredit,(Case When DebitCredit ='D' then BaseDebit else 0 end) Debit,(Case When DebitCredit ='D' then 0 else BaseCredit end) Credit,F.ID DepartmentID,Case When DebitCredit ='D' then 1 else 2 end Row       
                        from Cashier C       
                        left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2       
                        left join Office E on C.OfficePK = E.OfficePK and E.status = 2       
                        left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2       
                        left join Agent G on C.AgentPK = G.AgentPK and G.status = 2       
                        left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                        left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2       
                        Where C.CashierID = @CashierID and C.Type = 'CP' and C.PeriodPK = @PeriodPK and C.Status in (1,2)         
                        UNION ALL       
                        Select lower(C.EntryUsersID) CheckedBy,lower(C.EntryUsersID) ApprovedBy, C.Reference , C.CashierID,     
                        valuedate,A.ID AccountID, A.Name AccountName, '' Description,         
                        'C', 0 Debit,SUM(Case When DebitCredit ='D' then BaseDebit else BaseCredit * -1 end)Credit,'' DepartmentID ,3 Row          
                        from Cashier C       
                        left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2       
                        left join Office E on C.OfficePK = E.OfficePK and E.status = 2       
                        left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2       
                        left join Agent G on C.AgentPK = G.AgentPK and G.status = 2       
                        left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                        left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2       
                        Where C.CashierID = @CashierID  and C.Type = 'CP' and C.PeriodPK = @PeriodPK and C.Status in (1,2)    
                        group by C.EntryUsersID, Valuedate,A.ID, A.Name, C.Reference , C.CashierID    
                        Order By row,AccountID asc ";

                        cmd.Parameters.AddWithValue("@CashierID", _cashier.CashierID);
                        cmd.Parameters.AddWithValue("@PeriodPK", _cashier.PeriodPK);
                        //cmd.Parameters.AddWithValue("@Status", _cashier.Status);

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "PaymentVoucher" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "PaymentVoucher" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "FinanceReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Payment Voucher");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<CashierVoucher> rList = new List<CashierVoucher>();
                                    while (dr0.Read())
                                    {
                                        CashierVoucher rSingle = new CashierVoucher();
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                        rSingle.CashierID = Convert.ToString(dr0["CashierID"]);
                                        rSingle.Description = Convert.ToString(dr0["Description"]);
                                        rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                        rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                        rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                        rSingle.Debit = Convert.ToDecimal(dr0["Debit"]);
                                        rSingle.Credit = Convert.ToDecimal(dr0["Credit"]);
                                        rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                        rSingle.CheckedBy = Convert.ToString(dr0["CheckedBy"]);
                                        rSingle.ApprovedBy = Convert.ToString(dr0["ApprovedBy"]);
                                        rList.Add(rSingle);

                                    }

                                    var GroupByReference =
                                                 from r in rList
                                                 orderby r.DebitCredit descending
                                                 group r by new { r.Reference, r.ValueDate, r.CheckedBy, r.CashierID } into rGroup
                                                 select rGroup;

                                    int incRowExcel = 0;

                                    foreach (var rsHeader in GroupByReference)
                                    {
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "No Voucher";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CashierID;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Entry Date";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ValueDate;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Value date";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ValueDate;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "No Cek";
                                        //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CashierID;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 2;

                                        //Row B = 3
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Value = "ACCOUNT ID";
                                        worksheet.Cells[incRowExcel, 3].Value = "NAME";
                                        worksheet.Cells[incRowExcel, 4].Value = "DESCRIPTION";
                                        worksheet.Cells[incRowExcel, 5].Value = "DEBIT";
                                        worksheet.Cells[incRowExcel, 6].Value = "CREDIT";
                                        worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                        string _range = "A" + incRowExcel + ":G" + incRowExcel;

                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 11;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                        }

                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;


                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {



                                            //ThickBox Border HEADER

                                            worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccountID;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccountName;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Description;
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";;
                                            //worksheet.Cells[incRowExcel, 6].Value = rsDetail.Amount;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00"; ;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Debit;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00"; ;
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.Credit;
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 10].Value = rsDetail.Rate;
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";;
                                            //worksheet.Cells[incRowExcel, 11].Value = rsDetail.BaseDebit;
                                            //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";;
                                            //worksheet.Cells[incRowExcel, 12].Value = rsDetail.BaseCredit;
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.DepartmentID;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            _endRowDetail = incRowExcel;

                                            _no++;
                                            incRowExcel++;





                                        }

                                        int RowF = incRowExcel - 1;
                                        worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        //worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        //worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        //worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        //worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        //worksheet.Cells["M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["M" + RowB + ":M" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["M" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                        //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";;
                                        //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00"; ;
                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00"; ;
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00"; ;
                                        worksheet.Cells[incRowExcel, 5].Value = worksheet.Cells[incRowExcel - 1, 5].Value;
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00"; ;
                                        worksheet.Cells[incRowExcel, 6].Value = worksheet.Cells[incRowExcel - 1, 6].Value;
                                        worksheet.Cells[incRowExcel - 1, 5].Value = "";
                                        worksheet.Cells[incRowExcel - 1, 6].Value = "";
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 2].Value = "Prepared By";
                                        worksheet.Cells[incRowExcel, 4].Value = "Checked By";
                                        worksheet.Cells[incRowExcel, 6].Value = "Approved By";
                                        incRowExcel = incRowExcel + 5;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "(";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CheckedBy;
                                        worksheet.Cells[incRowExcel, 3].Value = "      )                                     (  ";
                                        worksheet.Cells[incRowExcel, 4].Value = "                                         )";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "(";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = ")";
                                        worksheet.Row(incRowExcel).PageBreak = true;

                                    }

                                    string _rangeDetail = "A:G";

                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        r.Style.Font.Size = 11;
                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                    worksheet.Column(3).Width = 30;
                                    worksheet.Column(4).Width = 30;
                                    worksheet.Column(1).Width = 5;
                                    worksheet.Column(8).Width = 1;
                                    worksheet.Column(2).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 PAYMENT / JOURNAL VOUCHER";
                                    worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();

                                }
                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                return true;
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }


        public Boolean Receipt_Voucher(string _userID, Cashier _cashier)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText =
                            @" 
                            Select lower(C.EntryUsersID) CheckedBy,lower(C.EntryUsersID) ApprovedBy,C.Reference , C.CashierID,      
                            valuedate,A.ID AccountID, A.Name AccountName, C.Description,       
                            DebitCredit,(Case When DebitCredit ='C' then 0 else BaseCredit end) Debit,(Case When DebitCredit ='C' then BaseDebit else 0 end) Credit,F.ID DepartmentID , case when DebitCredit ='D' then 2 else 3 end Row    
                            from Cashier C         
                            left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2         
                            left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                            left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2         
                            left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                            left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                            left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2         
                            Where 
							C.CashierID = @CashierID  and 
							C.Type = 'CR' and 
							C.PeriodPK = @PeriodPK and 
							C.Status in (1,2)         
                            UNION ALL         
                            Select lower(C.EntryUsersID) CheckedBy,lower(C.EntryUsersID) ApprovedBy, C.Reference ,  C.CashierID,       
                            valuedate,A.ID AccountID, A.Name AccountName, '' Description,       
                            'D', SUM(Case When DebitCredit ='C' then BaseDebit else BaseCredit * -1 end) Debit,0 Credit,'' DepartmentID, 1 Row             
                            from Cashier C         
                            left join Account A on C.DebitAccountPK =A.Accountpk and A.status = 2         
                            left join Office E on C.OfficePK = E.OfficePK and E.status = 2         
                            left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2         
                            left join Agent G on C.AgentPK = G.AgentPK and G.status = 2         
                            left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                            left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2        
                            Where 
							C.CashierID = @CashierID  and 
							C.Type = 'CR' and 
							C.PeriodPK = @PeriodPK and 
							C.Status in (1,2)       
                            group by C.EntryUsersID , Valuedate,A.ID, A.Name,C.Reference, C.CashierID   
                            Order By Row,AccountID asc ";

                        cmd.Parameters.AddWithValue("@CashierID", _cashier.CashierID);
                        cmd.Parameters.AddWithValue("@PeriodPK", _cashier.PeriodPK);
                        //cmd.Parameters.AddWithValue("@Status", _cashier.Status);
                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "ReceiptVoucher" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "ReceiptVoucher" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "FinanceReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Receipt Voucher");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<CashierVoucher> rList = new List<CashierVoucher>();
                                    while (dr0.Read())
                                    {
                                        CashierVoucher rSingle = new CashierVoucher();
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                        rSingle.CashierID = Convert.ToString(dr0["CashierID"]);
                                        rSingle.Description = Convert.ToString(dr0["Description"]);
                                        rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                        rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                        rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                        rSingle.Debit = Convert.ToDecimal(dr0["Debit"]);
                                        rSingle.Credit = Convert.ToDecimal(dr0["Credit"]);
                                        rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                        rSingle.CheckedBy = Convert.ToString(dr0["CheckedBy"]);
                                        rSingle.ApprovedBy = Convert.ToString(dr0["ApprovedBy"]);
                                        rList.Add(rSingle);

                                    }

                                    var GroupByReference =
                                                 from r in rList
                                                 orderby r.DebitCredit descending
                                                 group r by new { r.Reference, r.ValueDate, r.CheckedBy, r.CashierID } into rGroup
                                                 select rGroup;

                                    int incRowExcel = 0;

                                    foreach (var rsHeader in GroupByReference)
                                    {
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "No Voucher";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CashierID;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Entry Date";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ValueDate;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Value date";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ValueDate;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "No Cek";
                                        //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CashierID;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 2;

                                        //Row B = 3
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Value = "ACCOUNT ID";
                                        worksheet.Cells[incRowExcel, 3].Value = "NAME";
                                        worksheet.Cells[incRowExcel, 4].Value = "DESCRIPTION";
                                        worksheet.Cells[incRowExcel, 5].Value = "DEBIT";
                                        worksheet.Cells[incRowExcel, 6].Value = "CREDIT";
                                        worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                        string _range = "A" + incRowExcel + ":G" + incRowExcel;

                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 11;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                        }

                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;


                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {



                                            //ThickBox Border HEADER

                                            worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccountID;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccountName;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Description;
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";;
                                            //worksheet.Cells[incRowExcel, 6].Value = rsDetail.Amount;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00"; ;
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Debit;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00"; ;
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.Credit;

                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.DepartmentID;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            _endRowDetail = incRowExcel;

                                            _no++;
                                            incRowExcel++;





                                        }

                                        int RowF = incRowExcel - 1;
                                        worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;





                                        //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";;
                                        //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00"; ;
                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00"; ;
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00"; ;
                                        worksheet.Cells[incRowExcel, 5].Value = worksheet.Cells[incRowExcel - 1, 5].Value;
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00"; ;
                                        worksheet.Cells[incRowExcel, 6].Value = worksheet.Cells[incRowExcel - 1, 6].Value;
                                        worksheet.Cells[incRowExcel - 1, 5].Value = "";
                                        worksheet.Cells[incRowExcel - 1, 6].Value = "";
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 2].Value = "Prepared By";
                                        worksheet.Cells[incRowExcel, 4].Value = "Checked By";
                                        worksheet.Cells[incRowExcel, 6].Value = "Approved By";
                                        incRowExcel = incRowExcel + 5;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "(";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CheckedBy;
                                        worksheet.Cells[incRowExcel, 3].Value = "      )                                     (  ";
                                        worksheet.Cells[incRowExcel, 4].Value = "                                         )";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "(";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = ")";
                                        worksheet.Row(incRowExcel).PageBreak = true;


                                    }

                                    string _rangeDetail = "A:G";

                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        r.Style.Font.Size = 11;
                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                    worksheet.Column(3).Width = 30;
                                    worksheet.Column(4).Width = 30;
                                    worksheet.Column(1).Width = 5;
                                    worksheet.Column(8).Width = 1;
                                    worksheet.Column(2).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 Receipt VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 RECEIPT / JOURNAL VOUCHER";
                                    worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();

                                }
                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                return true;
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }



        //        public int EndDayTrailsFundPortfolio_Generate(string _usersID, DateTime _valueDate, EndDayTrailsFundPortfolio _edt)
        //        {
        //            try
        //            {
        //                DateTime _datetimeNow = DateTime.Now;
        //                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
        //                {
        //                    DbCon.Open();
        //                    using (SqlCommand cmd = DbCon.CreateCommand())
        //                    {

        //                        string _paramFund = "";

        //                        if (!_host.findString(_edt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_edt.FundFrom))
        //                        {
        //                            _paramFund = "And FundPK in ( " + _edt.FundFrom + " ) ";
        //                        }
        //                        else
        //                        {
        //                            _paramFund = "";
        //                        }
        //                        cmd.CommandTimeout = 0;
        //                        cmd.CommandText = @"
        //
        //                        Declare @CFundPK int
        //
        //                        Create Table #ZFundPosition                  
        //                        (                  
        //                        InstrumentPK int,     
        //                        InstrumentTypePK int,                  
        //                        InstrumentID nvarchar(100),                  
        //                        FundPK int,                  
        //                        FundID nvarchar(100),                  
        //                        AvgPrice numeric(38,12),                  
        //                        LastVolume numeric(38,4),                  
        //                        ClosePrice numeric(38,12),                  
        //                        TrxAmount numeric(38,6),              
        //                        AcqDate datetime,              
        //                        MaturityDate datetime,              
        //                        InterestPercent numeric(38,8),
        //                        CurrencyPK int,
        //                        Category nvarchar(200),
        //                        TaxExpensePercent numeric(19, 8),
        //                        MarketPK int,
        //                        InterestDaysType int,
        //                        InterestPaymentType int,
        //                        PaymentModeOnMaturity   int,
        //                        PaymentInterestSpecificDate datetime,
        //                        BankPK int,
        //                        BankBranchPK int,
        //                        PriceMode int,
        //                        BitIsAmortized bit,
        //                        BitBreakable bit
        //                        )                  
        //    
        //                        Create Table #ZLogicFundPosition              
        //                        (              
        //                        BuyVolume numeric(38,4),              
        //                        SellVolume numeric(38,4),              
        //                        BuyAmount numeric(38,4),       
        //                        SellAmount numeric(38,4),            
        //                        FundPK int,              
        //                        InstrumentPK int,              
        //                        SettlementDate datetime,              
        //                        MaturityDate datetime,              
        //                        InterestPercent numeric(38,8),
        //                        CurrencyPK int,
        //                        Category nvarchar(200) ,
        //                        TaxExpensePercent numeric(19, 8),
        //                        MarketPK int,
        //                        InterestDaysType int,
        //                        InterestPaymentType int,
        //                        PaymentModeOnMaturity   int,
        //                        PaymentInterestSpecificDate datetime,
        //                        BankPK int,
        //                        BankBranchPK int,
        //                        PriceMode int,
        //                        BitIsAmortized bit,
        //                        AcqDate datetime,
        //                        BitBreakable bit
        //                        )    
        //
        //
        //                        -- CORPORATE ACTION DIVIDEN SAHAM
        //
        //                        Create Table #ZDividenSaham                  
        //                        (                  
        //                        InstrumentPK int,     
        //                        FundPK int,                  
        //                        LastVolume numeric(18,4)     
        //                        )   
        //
        //                        DECLARE A CURSOR FOR     
        //
        //                        select FundPK from Fund where status in (1,2)  " + _paramFund + @"
        //
        //                        Open A
        //                        Fetch Next From A
        //                        Into @CFundPK
        //
        //                        While @@FETCH_STATUS = 0
        //                        BEGIN  
        //
        //                        update FundPosition set status = 3,LastUpdate=@lastUpdate where Date = @ValueDate and status = 2 and FundPK = @CFundPK
        //                        update EndDayTrailsFundPortfolio set status = 3,VoidUsersID = @UsersID,VoidTime = @lastUpdate,LastUpdate=@lastUpdate
        //                        where ValueDate = @ValueDate and status = 2 and FundPK = @CFundPK
        //                                                
        //
        //                        UPDATE Investment set PriceMode = 1 where InstrumentTypePK  in (1,4,16) and ValueDate = @ValueDate
        //                        update Investment set MarketPK = 1 where ValueDate = @ValueDate
        //                        update Investment set Category = null where InstrumentTypePK  <> 5 and ValueDate = @ValueDate
        //                        
        //                        update Investment set InterestDaysType = 2,InterestPaymentType = 1,PaymentModeOnMaturity = 1,lotinshare = 0,PriceMode = 0,BitBreakable = 1
        //                        where InstrumentTypePK = 5 and ValueDate = @ValueDate
        //
        //
        //                        Declare @PeriodPK    int                  
        //                        Declare @maxEndDayTrailsFundPortfolioPK int                    
        //
        //                        Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo                  
        //                        Select @maxEndDayTrailsFundPortfolioPK = max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio    
        //                        set @maxEndDayTrailsFundPortfolioPK = isnull(@maxEndDayTrailsFundPortfolioPK,1)               
        //
        //                        Insert into EndDayTrailsFundPortfolio  (EndDayTrailsFundPortfolioPK,HistoryPK,Status,ValueDate,FundPK,BitValidate
        //                        ,LogMessages,EntryUsersID,EntryTime,LastUpdate)                    
        //                        Select @maxEndDayTrailsFundPortfolioPK,1,2,@ValueDate,@CFundPK,0
        //                        ,'',@UsersID,@LastUpdate,@LastUpdate                    
        //      
        //                                  
        //
        //                        -- TARIK JUAL BELI DARI INVESTMENT              
        //                        Insert into #ZLogicFundPosition	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,
        //                        InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
        //                        ,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable)               
        //
        //                        Select SUM(BuyVolume) BuyVolume,SUM(SellVolume) SellVolume,SUM(BuyAmount) BuyAmount,SUM(SellAmount) SellAmount,B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,
        //                        B.InterestPercent,B.CurrencyPK,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate
        //                        ,B.BankPK,B.BankBranchPK,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable
        //                        From               
        //                        (               
        //	                        Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
        //	                        ,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
        //	                        isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,isnull(A.InterestPercent,0) InterestPercent,
        //	                        isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.TaxExpensePercent,0) TaxExpensePercent,isnull(A.MarketPK,0) MarketPK,
        //	                        isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
        //	                        ,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
        //	                        A.AcqDate,A.BitBreakable
        //	                        from (                 
        //	
        //		                        select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
        //		                        Case when C.Type = 1 then null else AcqDate end SettlementDate,              
        //		                        Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
        //		                        Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
        //		                        B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
        //		                        ,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
        //		                        ,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
        //		                        ,A.PaymentModeOnMaturity
        //		                        ,A.PaymentInterestSpecificDate
        //		                        ,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
        //		                        from Investment A 
        //		                        Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
        //		                        left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
        //		                        where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate) and A.FundPK = @CFundPK              
        //		                        Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
        //	                        ,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
        //		                        ,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
        //  
        //		                        UNION ALL                  
        //
        //		                        select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
        //	                            Case when C.Type = 1 then null else AcqDate end SettlementDate,              
        //		                        Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
        //		                        Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
        //		                        B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
        //		                        ,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
        //		                        ,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
        //		                        ,A.PaymentModeOnMaturity
        //		                        ,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
        //		                        ,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
        //		                        from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
        //		                        left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
        //		                        where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)    and A.FundPK = @CFundPK             
        //		                        Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
        //		                        ,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
        //		                        ,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
        //			
        //		                        UNION ALL
        //
        //		                        select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
        //		                        Case when C.Type = 1 then null else SettlementDate end SettlementDate,              
        //		                        Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
        //		                        Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
        //		                        B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
        //			                        ,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
        //		                        ,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
        //		                        ,A.PaymentModeOnMaturity
        //		                        ,A.PaymentInterestSpecificDate
        //		                        ,A.BankPK,A.BankBranchPK
        //		                        ,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
        //		                        from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
        //		                        left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                       
        //		                        where ValueDate <= @ValueDate and trxType = 3 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate) and A.FundPK = @CFundPK          
        //		                        Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
        //		                        ,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
        //		                        ,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
        //
        //	                        )A                
        //	                        Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent
        //	                        ,A.ValueDate,A.CurrencyPK ,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
        //	                        ,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable
        //                        )B     
        //                        Group By B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.InterestPercent,B.CurrencyPK
        //                        ,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate,B.BankPK,B.BankBranchPK
        //                        ,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable
        //
        //
        //
        //                         --INSERT INVESTMENT + BEG BALANCE SELAIN DEPOSITO ( INVESTMENT + BEG BALANCE )
        //                        Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
        //                        ,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType
        //                        ,PriceMode,BitIsAmortized)                  
        //                        Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
        //                        isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
        //                        isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
        //                        dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,             
        //                        isnull(A.BuyAmount,0) - (isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) 
        //                        * isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0)	TrxAmount
        //                        ,A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
        //                        ,A.PriceMode,A.BitIsAmortized
        //                        From #ZLogicFundPosition A              
        //                        Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
        //                        Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
        //                        Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
        //                        left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
        //                        and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
        //                        and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
        //                        and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
        //                        and B.PeriodPK = @PeriodPK where E.Type in (1,2,5,14,9)
        //
        //
        //
        //                        -- INSERT INVESTMENT + BEG BALANCE DEPOSITO ONLY ( INVESTMENT + BEG BALANCE )              
        //                        Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
        //                        ,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
        //                        ,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
        //                        select InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,avg(AvgPrice)
        //                        ,sum(LastVolume),avg(ClosePrice),TrxAmount,AcqDate,MaturityDate,InterestPercent
        //                        ,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable
        //                        from (
        //	                        Select  A.InstrumentPK,D.InstrumentTypePK,D.ID InstrumentID,A.FundPK,C.ID FundID, 
        //	                        1 AvgPrice,              
        //	                        isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
        //	                        1 ClosePrice,                  
        //	                        isnull(A.BuyAmount,0) - (1 * isnull(A.SellVolume,0))  + isnull		(B.TrxAmount,0) TrxAmount,              
        //	                        A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
        //	                        ,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when D.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
        //	                        From #ZLogicFundPosition A              
        //	                        LEft join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2     
        //	                        Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
        //	                        Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
        //	                        left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK 
        //	                        and isnull(A.Maturitydate,'01/01/1900') = isnull(B.MaturityDate,'01/01/1900')    
        //	                        and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
        //	                        and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
        //	                        and B.PeriodPK = @PeriodPK where E.Type in (3)
        //                        )A  
        //                        group by InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,TrxAmount,AcqDate
        //                        ,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
        //                        ,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable
        //
        //
        //
        //
        //                        -- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT SELAIN DEPOSITO
        //                        Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
        //                        ,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,PriceMode,BitIsAmortized
        //                        ,InterestDaysType,InterestPaymentType,BitBreakable)                  
        //                        Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
        //                        isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
        //                        isnull(A.Volume,0) LastVolume,                  
        //                        dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,                  
        //                        isnull(A.TrxAmount,0) TrxAmount,              
        //                        isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),isnull(A.InterestPercent,0),C.CurrencyPK, A.Category,isnull(A.TaxExpensePercent,0),A.MarketPK
        //                        ,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
        //                        From FundEndYearPortfolio A              
        //                        left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
        //                        Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
        //                        left join Fund D on A.FundPK = D.FundPK and D.status = 2              
        //                        where FundEndYearPortfolioPK not in              
        //                        (              
        //	                        Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
        //	                        inner join #ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
        //	                        and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')              
        //	                        where A.PeriodPK = @PeriodPK  and A.FundPK = @CFundPK            
        //                        ) and E.Type in (1,2,5,14,9) and A.periodPK = @PeriodPK  and A.FundPK = @CFundPK           
        //
        //                        -- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT DEPOSITO ONLY             
        //                        Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
        //                        ,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
        //                        ,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
        //                        Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 1 AvgPrice,isnull(A.Volume,0) LastVolume,                  
        //                        1 ClosePrice, isnull(A.TrxAmount,0) TrxAmount,              
        //                        A.AcqDate,A.MaturityDate,A.InterestPercent,C.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
        //                        ,A.InterestDaysType,A.InterestPaymentType,A.paymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
        //                        From FundEndYearPortfolio A              
        //                        left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2     
        //                        Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2             
        //                        left join Fund D on A.FundPK = D.FundPK and D.status = 2              
        //                        where FundEndYearPortfolioPK not in              
        //                        (              
        //	                        Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
        //	                        inner join #ZLogicFundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK  and A.MaturityDate = B.MaturityDate         
        //	                        where A.PeriodPK = @PeriodPK  and A.FundPK = @CFundPK             
        //                        ) and E.Type in (3) and A.periodPK = @PeriodPK  and A.FundPK = @CFundPK           
        //
        //
        //
        //                        -- CORPORATE ACTION STOCK SPLIT / REVERSE STOCK SPLIT
        //	                    
        //			            delete CorporateActionResult where Date = @ValueDate and FundPK = @CFundPK 
        //
        //                        Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
        //                        Select A.CorporateActionPK,2,A.ValueDate,isnull(B.FundPK,0),isnull(B.InstrumentPK,0), isnull((B.LastVolume/A.Hold * A.Earn) - B.LastVolume,0),0
        //                        From CorporateAction A 
        //                        left join  #ZFundPosition B on A.InstrumentPK = B.InstrumentPK
        //                        where A.Type = 4 and B.FundPK = @CFundPK and
        //                        ValueDate = @ValueDate and A.status = 2
        //
        //
        //
        //
        //
        //
        //                        -- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
        //                        Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
        //                        Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
        //                        From CorporateAction A 
        //                        left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
        //                        and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
        //                        Left join (
        //	                        select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
        //	                        , SettlementDate, ValueDate 
        //	                        from Investment where statusSettlement = 2
        //	                        and InstrumentTypePK = 1  and FundPK = @CFundPK 
        //	                        Group by InstrumentPK,FundPK,SettlementDate,ValueDate
        //                        )C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
        //                        and C.ValueDate >= A.ValueDate
        //                        where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
        //
        //                        Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
        //                        Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
        //                        from CorporateAction A
        //                        Left join (
        //	                        select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
        //	                        , SettlementDate, ValueDate 
        //	                        from Investment where statusSettlement = 2
        //	                        and InstrumentTypePK = 1  and FundPK = @CFundPK 
        //	                        Group by InstrumentPK,FundPK,SettlementDate,ValueDate
        //                        )B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
        //                        and B.ValueDate >= A.ValueDate
        //                        left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
        //                        where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
        //                        and C.FundPK is null and C.InstrumentPK is null
        //	
        //                        Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
        //                        Select A.CorporateActionPK,2,A.ValueDate,B.FundPK,A.InstrumentPK,B.LastVolume / A.Hold * A.Earn DividenSaham,A.Price
        //                        from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
        //                        where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
        //
        //
        //                        -- CORPORATE ACTION DIVIDEN RIGHTS
        //                        truncate table #ZDividenSaham
        //                        Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
        //                        Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
        //                        From CorporateAction A 
        //                        left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
        //                        and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
        //                        Left join (
        //	                        select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
        //	                        , SettlementDate, ValueDate 
        //	                        from Investment where statusSettlement = 2
        //	                        and InstrumentTypePK = 1  and FundPK = @CFundPK 
        //	                        Group by InstrumentPK,FundPK,SettlementDate,ValueDate
        //                        )C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
        //                        and C.ValueDate >= A.ValueDate
        //                        where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
        //
        //                        Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
        //                        Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
        //                        from CorporateAction A
        //                        Left join (
        //	                        select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
        //	                        , SettlementDate, ValueDate 
        //	                        from Investment where statusSettlement = 2
        //	                        and InstrumentTypePK = 1  and FundPK = @CFundPK 
        //	                        Group by InstrumentPK,FundPK,SettlementDate,ValueDate
        //                        )B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
        //                        and B.ValueDate >= A.ValueDate
        //                        left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
        //                        where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
        //                        and C.FundPK is null and C.InstrumentPK is null
        //
        //                        Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
        //                        Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price
        //                        from CorporateAction A 
        //                        left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
        //                        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
        //                        left join Instrument D on D.ID = C.ID + '-R' and D.status = 2
        //                        where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
        //
        //
        //                        -- CORPORATE ACTION DIVIDEN WARRANT
        //                        truncate table #ZDividenSaham
        //                        Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
        //                        Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
        //                        From CorporateAction A 
        //                        left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
        //                        and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
        //                        Left join (
        //	                        select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
        //	                        , SettlementDate, ValueDate 
        //	                        from Investment where statusSettlement = 2
        //	                        and InstrumentTypePK = 1  and FundPK = @CFundPK 
        //	                        Group by InstrumentPK,FundPK,SettlementDate,ValueDate
        //                        )C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
        //                        and C.ValueDate >= A.ValueDate
        //                        where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
        //
        //                        Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
        //                        Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
        //                        from CorporateAction A
        //                        Left join (
        //	                        select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
        //	                        , SettlementDate, ValueDate 
        //	                        from Investment where statusSettlement = 2
        //	                        and InstrumentTypePK = 1  and FundPK = @CFundPK 
        //	                        Group by InstrumentPK,FundPK,SettlementDate,ValueDate
        //                        )B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
        //                        and B.ValueDate >= A.ValueDate
        //                        left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
        //                        where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
        //                        and C.FundPK is null and C.InstrumentPK is null
        //
        //                        Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
        //                        Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price
        //                        from CorporateAction A 
        //                        left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
        //                        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
        //                        left join Instrument D on D.ID = C.ID + '-W' and D.status = 2
        //                        where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
        //
        //
        //                        -- PROSES EXERCISE YANG DAH DI DISTRIBUTION DATE
        //                        Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
        //                        Select ExercisePK,2,@ValueDate,FundPK,InstrumentPK,BalanceExercise,Price from Exercise 
        //                        where DistributionDate  = @ValueDate and status = 2
        //
        //
        //                        -- CORPORATE ACTION BOND AMORTIZEN
        //TRUNCATE TABLE #ZDividenSaham
        //Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
        //Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance
        //--B.Balance + C.BalanceFromInv LastBalance
        //From CorporateAction A 
        //left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
        //and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
        //--Left join (
        //--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
        //--	, SettlementDate, ValueDate 
        //--	from Investment where statusSettlement = 2
        //--	and InstrumentTypePK  in (2,3,9,15)
        //--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
        //--)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
        //--and C.ValueDate >= A.ValueDate
        //where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate
        //
        //
        //	
        //Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
        //Select A.CorporateActionPK,2,A.PaymentDate,B.FundPK,A.InstrumentPK,B.LastVolume * A.Earn / A.Hold * -1,0
        //from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
        //where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate
        //
        //
        //
        //
        //
        //-- UPDATE POSISI ZFUNDPOSITION + CORPORATE ACTION	
        //update A set 
        //A.LastVolume = A.LastVolume + isnull(B.Balance,0),
        //A.AvgPrice = [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
        //A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
        //from #ZFundPosition A
        //left join 
        //(
        //select FundPK,A.InstrumentPK,Price, sum(Balance) Balance,A.status
        //from CorporateActionResult A
        //left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //and B.ID not like '%-W' and B.ID not like '%-R'
        //
        //Group By FundPK,A.InstrumentPK,Price,A.status
        //) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
        //left join instrumentType C on A.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
        //where C.Type in (1,9,2,5,14)
        //--AND A.LastVolume > 0 
        //and A.FundPK = @CFundPK 
        //
        //
        //                        --INSERT INSTRUMENT YANG ADA DI CORPORATE ACTION RESULT TAPI GA ADA IN ZFUNDPOSITION
        //                        Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
        //                        ,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
        //                        Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
        //                        [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
        //                        A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
        //                        Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
        //                        from CorporateActionResult A
        //                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //                        left join Fund C on A.FundPK = C.FundPK and C.status = 2
        //
        //                        where A.status = 2 and B.ID like '%-W'  and A.FundPK = @CFundPK 
        //
        //                        Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
        //                        ,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
        //                        Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
        //                        [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
        //                        A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
        //                        Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
        //                        from CorporateActionResult A
        //                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //                        left join Fund C on A.FundPK = C.FundPK and C.status = 2
        // 
        //                        where A.status = 2 and B.ID like '%-R'  and A.FundPK = @CFundPK 
        //
        //
        //                       
        //                        -- UPDATE POSISI ZFUNDPOSITION + FUND POSITION ADJUSTMENT
        //                        update A set 
        //                        A.LastVolume = A.LastVolume + isnull(B.Balance,0),
        //                        A.AvgPrice = [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
        //                        A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
        //                        from #ZFundPosition A
        //                        left join 
        //                        (
        //                        SELECT FundPK,A.InstrumentPK,sum(Price*Balance) / SUM(balance) Price, sum(Balance) Balance,A.status,
        //                        case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  THEN A.AcqDate ELSE NULL END AcqDate
        //                        from dbo.FundPositionAdjustment A
        //                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //                        WHERE A.status = 2 AND A.Date <= @ValueDate 
        //                        Group By FundPK,A.InstrumentPK,A.status,B.InstrumentTypePK,A.AcqDate
        //                        ) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
        //                        AND A.AcqDate = B.AcqDate and A.FundPK = @CFundPK 
        //
        //
        //                        --INSERT INSTRUMENT YANG ADA DI FUND POSITION ADJUSTMENT TAPI GA ADA IN ZFUNDPOSITION
        //                        Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
        //                        ,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
        //
        //                        SELECT A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID, 
        //                        [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
        //                        SUM(A.Balance),dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
        //                        SUM(Balance*Price),
        //                        case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  then  A.AcqDate else null End ,
        //                        B.MaturityDate,B.InterestPercent,B.CurrencyPK,NULL,B.TaxExpensePercent,B.MarketPK
        //                        from dbo.FundPositionAdjustment A
        //                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //                        left join Fund C on A.FundPK = C.FundPK and C.status = 2
        //                        where A.status = 2 AND A.AcqDate <= @ValueDate and A.FundPK = @CFundPK 
        //                        and NOT EXISTS 
        //                        (SELECT * FROM #ZFundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate)
        //                        GROUP BY A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,
        //                        B.MaturityDate,B.InterestPercent,B.CurrencyPK,B.TaxExpensePercent,B.MarketPK,A.AcqDate
        //
        //
        //
        //                        -- DELETE RIGHTS AND WARRANT YANG EXPIRED
        //                        Delete A From #ZFundPosition A
        //                        Inner join 
        //                        (
        //	                        Select C.InstrumentPK from CorporateAction A
        //	                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //	                        left join Instrument C on C.ID = B.ID + '-R' and C.status = 2
        //	                        where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 3
        //                        )B on A.InstrumentPK = B.InstrumentPK
        //
        //                        Delete A From #ZFundPosition A
        //                        Inner join 
        //                        (
        //	                        Select C.InstrumentPK from CorporateAction A
        //	                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //	                        left join Instrument C on C.ID = B.ID + '-W' and C.status = 2
        //	                        where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 5
        //                        )B on A.InstrumentPK = B.InstrumentPK
        //
        //                        -- KURANGIN BALANCE WARRANT AND RIGHTS YANG ADA DI EXERCISE
        //
        //                        Update A set A.LastVolume = A.LastVolume - isnull(B.BalanceExercise,0) from #ZFundPosition A
        //                        left join Exercise B on A.InstrumentPK = B.InstrumentRightsPK and B.status = 2
        //                        where Date = @ValueDate  and A.FundPK = @CFundPK 
        //
        //
        //
        //
        //                        Insert into FundPosition(FundPositionPK,TrailsPK,HistoryPK,Status,Notes,Date,FundPK,FundID,                  
        //                        InstrumentPK,InstrumentID,AvgPrice,Balance,CostValue,ClosePrice,TrxAmount,MarketValue
        //                        ,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
        //                        ,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK
        //                        ,EntryUsersID,EntryTime,LastUpdate,PriceMode,BitIsAmortized,BitBreakable)                  
        //                        Select @maxEndDayTrailsFundPortfolioPK,@maxEndDayTrailsFundPortfolioPK,1,2,'',@ValueDate,A.FundPK, FundID,                  
        //                        A.InstrumentPK,InstrumentID,CONVERT(decimal(18,12),AvgPrice),LastVolume
        //                        ,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then CONVERT(decimal(18,12),AvgPrice)/100 else CONVERT(decimal(18,12),AvgPrice) End * LastVolume CostValue
        //                        , ClosePrice,TrxAmount
        //                        ,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then ClosePrice/100 else ClosePrice End * LastVolume MarketValue,                  
        //                        AcqDate,A.MaturityDate,InterestPercent,A.CurrencyPK, Category,TaxExpensePercent,A.MarketPK
        //                        ,isnull(InterestDaysType,0),isnull(InterestPaymentType,0),isnull(PaymentModeOnMaturity,0),PaymentInterestSpecificDate,isnull(A.BankPK,0),isnull(A.BankBranchPK,0)
        //                        ,@UsersID,@LastUpdate,@LastUpdate,isnull(PriceMode,0),isnull(BitIsAmortized,0),isnull(BitBreakable,0)
        //                        From #ZFundPosition  A
        //                        left join Fund B on A.FundPK = B.FundPK
        //                        where A.LastVolume > 0 and B.status in (1,2)  and A.FundPK = @CFundPK 
        //    
        //
        //                        Delete FP From FundPosition FP Left Join Instrument I on FP.InstrumentPK = I.InstrumentPK
        //                        Where FundPositionPK = @maxEndDayTrailsFundPortfolioPK and I.InstrumentTypePK not in (1,4,16)
        //                        and FP.MaturityDate <= @ValueDate and FP.MaturityDate Is Not Null  and FP.FundPK = @CFundPK  
        //
        //
        //                        ---------PROSES AMORTIZED DAN PRICE MODE------------------------------
        //                        update A set A.ClosePrice =  Case when A.BitIsAmortized = 0 
        //                        then Case when A.PriceMode = 1 then ClosePriceValue 
        //			                        when A.PriceMode = 2 then LowPriceValue
        //				                        when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
        //		                        else  
        //			                        dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
        //			 
        //		                        end 
        //                        , A.MarketValue = A.Balance * Case when A.BitIsAmortized = 0 
        //                        then Case when A.PriceMode = 1 then ClosePriceValue 
        //			                        when A.PriceMode = 2 then LowPriceValue
        //				                        when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
        //		                        else  
        //			                        dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
        //			  
        //		                        end / Case when D.InstrumentTypePK in (2,3,8,14,13,9,15)  then 100 else 1 end
        //                        from FundPosition A 
        //                        left join 
        //                        (
        //	                        select InstrumentPK,LowPriceValue,ClosePriceValue,HighPriceValue From ClosePrice where Date =
        //	                        (
        //		                        Select max(Date) From ClosePrice where date <= @ValueDate and status = 2
        //	                        ) and status = 2
        //                        )B on A.InstrumentPK = B.InstrumentPK 
        //                        left join instrument C on A.InstrumentPK = C.instrumentPK and C.Status = 2
        //                        left join InstrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
        //                        where A.FundPK = @CFundPK and Date = @ValueDate and A.status = 2
        //
        //                        -- STATIC CLOSEPRICE
        //
        //                        Declare @StaticClosePrice table
        //                        (
        //	                        InstrumentPK int,
        //	                        InstrumentTypePK int,
        //	                        ClosePrice numeric(18,8),
        //	                        FundPK int
        //                        )
        //			
        //
        //		                        Declare @CInstrumentPK int
        //
        //		                        Declare B cursor For
        //			                        Select distinct InstrumentPK from updateclosePrice where status = 2 and FundPK = @CFundPK
        //		                        Open B
        //		                        Fetch Next From B
        //		                        Into @CInstrumentPK
        //		                        While @@Fetch_Status = 0
        //		                        BEGIN
        //                                    IF EXISTS(select * from UpdateClosePrice where status = 2 and InstrumentPK = @CInstrumentPK and FundPK = @CFundPK and Date = @ValueDate)
        //                                    BEGIN
        //			                            insert into @StaticClosePrice
        //			                            Select A.InstrumentPK,InstrumentTypePK,A.ClosePriceValue,@CFundPK from UpdateClosePrice A
        //                                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
        //                                        where A.status = 2 and A.InstrumentPK = @CInstrumentPK 
        //			                            and Date = (
        //				                            Select Max(Date) From UpdateClosePrice where status = 2 and InstrumentPK = @CInstrumentPK
        //				                            and Date <= @ValueDate and FundPK = @CFundPK
        //			                            )  and FundPK = @CFundPK
        //			                            --AND Date >= 
        //				                        --    (
        //					                    --        SELECT MAX(Date) FROM closePrice WHERE instrumentPK = @CInstrumentPK AND status = 2
        //					                    --        AND Date <= @ValueDate
        //				                        --    )
        //                                    END
        //			                        FETCH NEXT FROM B INTO @CInstrumentPK  
        //		                        END
        //		                        Close B
        //		                        Deallocate B
        //
        //
        //		
        //		                        Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
        //		                        left join @StaticClosePrice B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
        //		                        where A.Date = @ValueDate and A.TrailsPK = @maxEndDayTrailsFundPortfolioPK
        //		                        and A.InstrumentPK in(
        //			                        select instrumentPK From @StaticClosePrice where FundPK = @CFundPK
        //		                        ) and A.FundPK = @CFundPK and A.status = 2
        //
        //	
        //                        Update A set BitValidate = 1, LogMessages = B.ID + ' - ' + B.Name from EndDayTrailsFundPortfolio A  
        //                        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
        //                        where A.FundPK = @CFundPK and A.Status = 2 and ValueDate = @ValueDate       
        //
        //                        Fetch next From A Into @CFundPK
        //                        END
        //                        Close A
        //                        Deallocate A
        //
        //
        //                        Select @maxEndDayTrailsFundPortfolioPK LastPK
        //                        ";
        //                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
        //                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
        //                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

        //                        using (SqlDataReader dr = cmd.ExecuteReader())
        //                        {
        //                            if (dr.HasRows)
        //                            {
        //                                dr.Read();
        //                                return Convert.ToInt32(dr["LastPK"]);

        //                            }
        //                            return 0;
        //                        }

        //                    }
        //                }
        //            }
        //            catch (Exception err)
        //            {
        //                throw err;
        //            }
        //        }


        public int EndDayTrailsFundPortfolio_Generate(string _usersID, DateTime _valueDate, EndDayTrailsFundPortfolio _edt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";

                        if (!_host.findString(_edt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_edt.FundFrom))
                        {
                            _paramFund = "And FundPK in ( " + _edt.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

                    
Declare @CFundPK int

Declare @ZFundPosition Table                  
(                  
InstrumentPK int,     
InstrumentTypePK int,                  
InstrumentID nvarchar(100),                  
FundPK int,                  
FundID nvarchar(100),                  
AvgPrice numeric(38,12),                  
LastVolume numeric(38,4),                  
ClosePrice numeric(38,12),                  
TrxAmount numeric(38,6),              
AcqDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200),
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
BitBreakable bit
)

Declare @ZLogicFundPosition Table
(              
BuyVolume numeric(38,4),              
SellVolume numeric(38,4),              
BuyAmount numeric(38,4),       
SellAmount numeric(38,4),            
FundPK int,              
InstrumentPK int,              
SettlementDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) ,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
AcqDate datetime,
BitBreakable bit
)    


Declare @ZDividenSaham Table
(                  
InstrumentPK int,     
FundPK int,                  
LastVolume numeric(18,4)     
) 

DECLARE @AvgAndLastPrice TABLE
(
InstrumentPK INT,
AvgPrice NUMERIC(26,12),
FundPK INT,
LastPrice NUMERIC(19,12)

)

DECLARE @ZLFPInstrument TABLE
(
InstrumentPK INT,
AcqDate datetime
)

Declare @StaticClosePrice table
(
InstrumentPK int,
InstrumentTypePK int,
ClosePrice numeric(18,8),
FundPK int
)

DECLARE A CURSOR FOR     

SELECT FundPK from Fund where status in (1,2)  " + _paramFund + @"

Open A
Fetch Next From A
Into @CFundPK

While @@FETCH_STATUS = 0
BEGIN 
DELETE @ZFundPosition
DELETE @ZLogicFundPosition
DELETE @ZDividenSaham
DELETE @AvgAndLastPrice
DELETE @ZLFPInstrument 
Delete @StaticClosePrice
UPDATE FundPosition set status = 3,LastUpdate=@lastUpdate where Date = @ValueDate and status = 2 and FundPK = @CFundPK
	
UPDATE EndDayTrailsFundPortfolio set status = 3,VoidUsersID = @UsersID,VoidTime = @lastUpdate,LastUpdate=@lastUpdate
WHERE ValueDate = @ValueDate and status = 2 and FundPK = @CFundPK

UPDATE Investment set PriceMode = 1 where InstrumentTypePK  in (1,4,16) and ValueDate = @ValueDate AND FundPK = @CFundPK
	
UPDATE Investment set MarketPK = 1 where ValueDate = @ValueDate AND FundPK = @CFundPK
	
UPDATE Investment set Category = null where InstrumentTypePK  <> 5 and ValueDate = @ValueDate AND FundPK = @CFundPK

UPDATE A set A.InterestPercent = B.InterestPercent from Investment A left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
WHERE A.InstrumentTypePK  not in (1,5,6) AND FundPK = @CFundPK
                        
UPDATE Investment set InterestPaymentType = 1,PaymentModeOnMaturity = 1,lotinshare = 0,PriceMode = 0,BitBreakable = 1,PaymentInterestSpecificDate = null
WHERE InstrumentTypePK = 5 AND FundPK = @CFundPK

Declare @PeriodPK    int                  
Declare @maxEndDayTrailsFundPortfolioPK int                    

Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo                  
Select @maxEndDayTrailsFundPortfolioPK = max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio    
set @maxEndDayTrailsFundPortfolioPK = isnull(@maxEndDayTrailsFundPortfolioPK,1)               

Insert into EndDayTrailsFundPortfolio  (EndDayTrailsFundPortfolioPK,HistoryPK,Status,ValueDate,FundPK,BitValidate
,LogMessages,EntryUsersID,EntryTime,LastUpdate)                    
Select @maxEndDayTrailsFundPortfolioPK,1,2,@ValueDate,@CFundPK,0
,'',@UsersID,@LastUpdate,@LastUpdate                    


-- TARIK JUAL BELI DARI INVESTMENT              
Insert into @ZLogicFundPosition	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,
InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable)               

Select SUM(BuyVolume) BuyVolume,SUM(SellVolume) SellVolume,SUM(BuyAmount) BuyAmount,SUM(SellAmount) SellAmount,B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,
B.InterestPercent,B.CurrencyPK,B.Category,B.TaxExpensePercent,1,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate
,B.BankPK,B.BankBranchPK,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable
From               
(               
Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
case when C.InstrumentTypePK not in (1,5) then '' else isnull(A.SettlementDate,'') end SettlementDate,isnull(A.MaturityDate,'') MaturityDate,isnull(A.InterestPercent,0) InterestPercent,
isnull(A.CurrencyPK,'') CurrencyPK, case when C.InstrumentTypePK not in (1,5) then null else A.Category end Category, isnull(A.TaxExpensePercent,0) TaxExpensePercent,isnull(A.MarketPK,0) MarketPK,
isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
A.AcqDate,A.BitBreakable
from (                 
	
select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type = 1 then null else AcqDate end SettlementDate,              
Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.SettlementDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
from Investment A 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate) and A.FundPK = @CFundPK              
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
  
UNION ALL                  

select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
Case when C.Type = 1 then null else AcqDate end SettlementDate,              
Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)    and A.FundPK = @CFundPK             
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			
UNION ALL

select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type = 1 then null else SettlementDate end SettlementDate,              
Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK
,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                       
where ValueDate <= @ValueDate and trxType = 3 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate) and A.FundPK = @CFundPK          
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK


	
)A   
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2             
Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent
,A.ValueDate,A.CurrencyPK ,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable,C.InstrumentTypePK
)B     
Group By B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.InterestPercent,B.CurrencyPK
,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate,B.BankPK,B.BankBranchPK
,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable




INSERT INTO @AvgAndLastPrice
( InstrumentPK, AvgPrice, FundPK,LastPrice )
SELECT InstrumentPK,dbo.[FGetLastAvgFromInvestment](@ValueDate,InstrumentPK,@CFundPK),@CFundPK 
,dbo.FGetLastClosePriceForFundPosition(@ValueDate,InstrumentPK)
FROM @ZLFPInstrument
	
--INSERT INVESTMENT + BEG BALANCE SELAIN DEPOSITO ( INVESTMENT + BEG BALANCE )
Insert into @ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType
,PriceMode,BitIsAmortized)                  
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
isnull(F.AvgPrice,0) AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
ISNULL(F.LastPrice,0) ClosePrice,             
isnull(A.BuyAmount,0) - (isnull(F.AvgPrice,0)
* isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0)	TrxAmount
,A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
,A.PriceMode,A.BitIsAmortized
From @ZLogicFundPosition A              
Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK 
LEFT JOIN @AvgAndLastPrice F ON A.InstrumentPK = F.InstrumentPK AND A.FundPK = F.FundPK 
WHERE E.Type in (1,2,4,5,14,9)




-- INSERT INVESTMENT + BEG BALANCE DEPOSITO ONLY ( INVESTMENT + BEG BALANCE )              
Insert into @ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
select InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,avg(AvgPrice)
,sum(LastVolume),avg(ClosePrice),TrxAmount,AcqDate,MaturityDate,InterestPercent
,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable
from (
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID InstrumentID,A.FundPK,C.ID FundID, 
1 AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
1 ClosePrice,                  
isnull(A.BuyAmount,0) - (1 * isnull(A.SellVolume,0))  + isnull		(B.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when D.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From @ZLogicFundPosition A              
LEft join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2     
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK 
and isnull(A.Maturitydate,'01/01/1900') = isnull(B.MaturityDate,'01/01/1900')    
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (3)
)A  
group by InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,TrxAmount,AcqDate
,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable




-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT SELAIN DEPOSITO
Insert into @ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,PriceMode,BitIsAmortized
,InterestDaysType,InterestPaymentType,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
isnull(F.AvgPrice,0) AvgPrice,              
isnull(A.Volume,0) LastVolume,                  
isnull(F.LastPrice,0) ClosePrice,                  
isnull(A.TrxAmount,0) TrxAmount,              
isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),isnull(A.InterestPercent,0),C.CurrencyPK, A.Category,isnull(A.TaxExpensePercent,0),A.MarketPK
,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
left join Fund D on A.FundPK = D.FundPK and D.status = 2       
LEFT JOIN @AvgAndLastPrice F ON A.FundPK = F.FundPK AND A.InstrumentPK = F.InstrumentPK       
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join @ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')              
where A.PeriodPK = @PeriodPK  and A.FundPK = @CFundPK            
) and E.Type in (1,2,4,5,14,9) and A.periodPK = @PeriodPK  and A.FundPK = @CFundPK         




-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT DEPOSITO ONLY             
Insert into @ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 1 AvgPrice,isnull(A.Volume,0) LastVolume,                  
1 ClosePrice, isnull(A.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,C.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.paymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2     
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2             
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join @ZLogicFundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK  and A.MaturityDate = B.MaturityDate         
where A.PeriodPK = @PeriodPK  and A.FundPK = @CFundPK             
) and E.Type in (3) and A.periodPK = @PeriodPK  and A.FundPK = @CFundPK           



-- CORPORATE ACTION STOCK SPLIT / REVERSE STOCK SPLIT
	                    
delete CorporateActionResult where Date = @ValueDate and FundPK = @CFundPK 

-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.ExDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate

Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.ExDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join @ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.ExDate,B.FundPK,A.InstrumentPK,isnull((B.LastVolume/A.Hold * A.Earn) - B.LastVolume,0) DividenSaham,A.Price
from CorporateAction A left join @ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate and B.FundPK = @CFundPK


-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.ExDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 7 and A.Status = 2 and A.ExDate = @ValueDate

Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.ExDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join @ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 7 and A.Status = 2 and A.ExDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.ExDate,B.FundPK,A.InstrumentPK,isnull((B.LastVolume/A.Hold * A.Earn) - B.LastVolume,0) DividenSaham,A.Price
from CorporateAction A left join @ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 7 and A.Status = 2 and A.ExDate = @ValueDate  and B.FundPK = @CFundPK

	
-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate

Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join @ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.ValueDate,B.FundPK,A.InstrumentPK,B.LastVolume / A.Hold * A.Earn DividenSaham,A.Price
from CorporateAction A left join @ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate and B.FundPK = @CFundPK


	
-- CORPORATE ACTION DIVIDEN RIGHTS
DELETE @ZDividenSaham
Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate

Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join @ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price
from CorporateAction A 
left join @ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-R' and D.status = 2
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate and B.FundPK = @CFundPK


-- CORPORATE ACTION DIVIDEN WARRANT
delete @ZDividenSaham
Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate

Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK = @CFundPK 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join @ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price
from CorporateAction A 
left join @ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-W' and D.status = 2
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate and B.FundPK = @CFundPK

-- PROSES EXERCISE YANG DAH DI DISTRIBUTION DATE
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select ExercisePK,2,@ValueDate,FundPK,InstrumentPK,BalanceExercise,Price from Exercise 
where DistributionDate  = @ValueDate and status = 2 and FundPK = @CFundPK


-- CORPORATE ACTION BOND AMORTIZEN
DELETE @ZDividenSaham
Insert into @ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate

	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,B.FundPK,A.InstrumentPK,B.LastVolume * A.Earn / A.Hold * -1,0
from CorporateAction A left join @ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate and B.FundPK = @CFundPK



-- UPDATE POSISI ZFUNDPOSITION + CORPORATE ACTION	
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = ISNULL(D.AvgPrice,0),
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from @ZFundPosition A
left join 
(
select FundPK,A.InstrumentPK,Price, sum(Balance) Balance,A.status
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
and B.ID not like '%-W' and B.ID not like '%-R' where PeriodPK = @PeriodPK

Group By FundPK,A.InstrumentPK,Price,A.status
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
left join instrumentType C on A.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
LEFT JOIN @AvgAndLastPrice D ON A.FundPK = D.FundPK AND A.InstrumentPK = D.InstrumentPK
where C.Type in (1,9,2,5,14)
and A.FundPK = @CFundPK 


--INSERT INSTRUMENT YANG ADA DI CORPORATE ACTION RESULT TAPI GA ADA IN ZFUNDPOSITION
Insert into @ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
ISNULL(D.AvgPrice,0),
A.Balance,ISNULL(D.LastPrice,0),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
LEFT JOIN @AvgAndLastPrice D ON A.FundPK = D.FundPK AND A.InstrumentPK = D.InstrumentPK
where A.status = 2 and B.ID like '%-W'  and A.FundPK = @CFundPK 

	

Insert into @ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
ISNULL(D.AvgPrice,0),
A.Balance,ISNULL(D.LastPrice,0),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
LEFT JOIN @AvgAndLastPrice D ON A.InstrumentPK = D.InstrumentPK AND A.FundPK = D.FundPK
where A.status = 2 and B.ID like '%-R'  and A.FundPK = @CFundPK 



                       
-- UPDATE POSISI ZFUNDPOSITION + FUND POSITION ADJUSTMENT
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = ISNULL(C.AvgPrice,0),
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from @ZFundPosition A
left join 
(
SELECT FundPK,A.InstrumentPK,sum(Price*Balance) / SUM(balance) Price, sum(Balance) Balance,A.status,
case when B.InstrumentTypePK in (2,3,6,8,14,13,9,15)  THEN A.AcqDate ELSE NULL END AcqDate
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
WHERE A.status = 2 AND A.Date <= @ValueDate and PeriodPK = @PeriodPK
Group By FundPK,A.InstrumentPK,A.status,B.InstrumentTypePK,A.AcqDate
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
AND A.AcqDate = B.AcqDate and A.FundPK = @CFundPK 
LEFT JOIN @AvgAndLastPrice C ON A.FundPK = C.FundPK AND A.InstrumentPK = C.InstrumentPK





--INSERT INSTRUMENT YANG ADA DI FUND POSITION ADJUSTMENT TAPI GA ADA IN ZFUNDPOSITION
Insert into @ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  

SELECT A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID, 
ISNULL(D.AvgPrice,0),
SUM(A.Balance),ISNULL(D.LastPrice,0),
SUM(Balance*Price),
case when B.InstrumentTypePK in (2,3,6,8,14,13,9,15)  then  A.AcqDate else null End ,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,NULL,B.TaxExpensePercent,B.MarketPK
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
LEFT JOIN @AvgAndLastPrice D ON A.FundPK = D.FundPK AND A.InstrumentPK = D.InstrumentPK
where A.status = 2 AND A.AcqDate <= @ValueDate and A.FundPK = @CFundPK and PeriodPK = @PeriodPK
and NOT EXISTS 
(SELECT * FROM @ZFundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate)
GROUP BY A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,B.TaxExpensePercent,B.MarketPK,A.AcqDate,D.AvgPrice,D.LastPrice



-- DELETE RIGHTS AND WARRANT YANG EXPIRED
Delete A From @ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-R' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 3
)B on A.InstrumentPK = B.InstrumentPK

Delete A From @ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-W' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 5
)B on A.InstrumentPK = B.InstrumentPK

-- KURANGIN BALANCE WARRANT AND RIGHTS YANG ADA DI EXERCISE

Update A set A.LastVolume = A.LastVolume - isnull(B.BalanceExercise,0) from @ZFundPosition A
left join Exercise B on A.InstrumentPK = B.InstrumentRightsPK and B.status = 2
where Date = @ValueDate  and A.FundPK = @CFundPK 




DELETE @ZLFPInstrument
DELETE @AvgAndLastPrice
INSERT INTO @ZLFPInstrument
( InstrumentPK )
SELECT DISTINCT InstrumentPK FROM @ZFundPosition


INSERT INTO @AvgAndLastPrice
( InstrumentPK, AvgPrice, FundPK,LastPrice )
SELECT InstrumentPK,dbo.[FGetLastAvgFromInvestment](@ValueDate,InstrumentPK,@CFundPK),@CFundPK 
,dbo.FGetLastClosePriceForFundPosition(@ValueDate,InstrumentPK)
FROM @ZLFPInstrument

UPDATE A SET A.AvgPrice = ISNULL(B.AvgPrice,0) 
,
A.ClosePrice = ISNULL(B.LastPrice,0)
FROM @ZFundPosition A
LEFT JOIN @AvgAndLastPrice B ON A.FundPK = B.FundPK AND A.InstrumentPK = B.InstrumentPK

	
Insert into FundPosition(FundPositionPK,TrailsPK,HistoryPK,Status,Notes,Date,FundPK,FundID,                  
InstrumentPK,InstrumentID,AvgPrice,Balance,CostValue,ClosePrice,TrxAmount,MarketValue
,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK
,EntryUsersID,EntryTime,LastUpdate,PriceMode,BitIsAmortized,BitBreakable)                  
Select @maxEndDayTrailsFundPortfolioPK,@maxEndDayTrailsFundPortfolioPK,1,2,'',@ValueDate,A.FundPK, FundID,                  
A.InstrumentPK,InstrumentID,CONVERT(decimal(18,12),AvgPrice),LastVolume
,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then CONVERT(decimal(18,12),AvgPrice)/100 else CONVERT(decimal(18,12),AvgPrice) End * LastVolume CostValue
, ClosePrice,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then CONVERT(decimal(18,12),AvgPrice)/100 else CONVERT(decimal(18,12),AvgPrice) End * LastVolume
,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then ClosePrice/100 else ClosePrice End * LastVolume MarketValue,                  
AcqDate,A.MaturityDate,InterestPercent,A.CurrencyPK, Category,TaxExpensePercent,A.MarketPK
,isnull(InterestDaysType,0),isnull(InterestPaymentType,0),isnull(PaymentModeOnMaturity,0),PaymentInterestSpecificDate,isnull(A.BankPK,0),isnull(A.BankBranchPK,0)
,@UsersID,@LastUpdate,@LastUpdate,isnull(PriceMode,0),isnull(BitIsAmortized,0),isnull(BitBreakable,0)
From @ZFundPosition  A
left join Fund B on A.FundPK = B.FundPK
where A.LastVolume > 0 and B.status in (1,2)  and A.FundPK = @CFundPK 
  

Delete FP From FundPosition FP Left Join Instrument I on FP.InstrumentPK = I.InstrumentPK
Where FundPositionPK = @maxEndDayTrailsFundPortfolioPK and I.InstrumentTypePK not in (1,4,6,16)
and FP.MaturityDate <= @ValueDate and FP.MaturityDate Is Not Null  and FP.FundPK = @CFundPK  


	
---------PROSES AMORTIZED DAN PRICE MODE------------------------------
update A set A.ClosePrice =  Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
when A.PriceMode = 2 then LowPriceValue
when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
else  
dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			 
end 
, A.MarketValue = A.Balance * Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
when A.PriceMode = 2 then LowPriceValue
when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
else  
dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			  
end / Case when D.InstrumentTypePK in (2,3,8,14,13,9,15)  then 100 else 1 end
from FundPosition A 
left join 
(
select InstrumentPK,LowPriceValue,ClosePriceValue,HighPriceValue From ClosePrice where Date =
(
Select max(Date) From ClosePrice where date <= @ValueDate and status = 2
) and status = 2
)B on A.InstrumentPK = B.InstrumentPK 
left join instrument C on A.InstrumentPK = C.instrumentPK and C.Status = 2
left join InstrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
where A.FundPK = @CFundPK and Date = @ValueDate and A.status = 2

-- STATIC CLOSEPRICE


			

Declare @CInstrumentPK int

Declare B cursor For
Select distinct InstrumentPK from updateclosePrice where status = 2 and FundPK = @CFundPK
Open B
Fetch Next From B
Into @CInstrumentPK
While @@Fetch_Status = 0
BEGIN
IF EXISTS(select * from UpdateClosePrice where status = 2 and InstrumentPK = @CInstrumentPK and FundPK = @CFundPK and Date = @ValueDate)
BEGIN
insert into @StaticClosePrice
Select A.InstrumentPK,InstrumentTypePK,A.ClosePriceValue,@CFundPK from UpdateClosePrice A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
where A.status = 2 and A.InstrumentPK = @CInstrumentPK 
and Date = (
Select Max(Date) From UpdateClosePrice where status = 2 and InstrumentPK = @CInstrumentPK
and Date <= @ValueDate and FundPK = @CFundPK
)  and FundPK = @CFundPK
--AND Date >= 
--    (
--        SELECT MAX(Date) FROM closePrice WHERE instrumentPK = @CInstrumentPK AND status = 2
--        AND Date <= @ValueDate
--    )
END
FETCH NEXT FROM B INTO @CInstrumentPK  
END
Close B
Deallocate B


		
Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
left join @StaticClosePrice B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
where A.Date = @ValueDate and A.TrailsPK = @maxEndDayTrailsFundPortfolioPK
and A.InstrumentPK in(
select instrumentPK From @StaticClosePrice where FundPK = @CFundPK
) and A.FundPK = @CFundPK and A.status = 2

	
Update A set BitValidate = 1, LogMessages = B.ID + ' - ' + B.Name from EndDayTrailsFundPortfolio A  
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
where A.FundPK = @CFundPK and A.Status = 2 and ValueDate = @ValueDate      

FETCH next From A Into @CFundPK
END
Close A
Deallocate A 

Select @maxEndDayTrailsFundPortfolioPK LastPK
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public void CloseNav_ApproveBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, CloseNav _closeNAV)
        {
            try
            {
                string paramCloseNAVSelected = "";
                paramCloseNAVSelected = "CloseNAVPK in (" + _closeNAV.CloseNavSelected + ") ";

                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2
                        Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate)
                        Select @Time,@PermissionID,'CloseNav',CloseNavPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from CloseNav where Date between @DateFrom and @DateTo and Status = 1 and  " + paramCloseNAVSelected + @"
                       

                        -----------------POSTING RETRIEVE FROM BRIDGE---------------------------

                        -- LOGIC FUND CLIENT POSITION

                        Declare @CFundPK int
                        Declare @Date datetime
                        Declare @UnitAmount numeric(18,8)

                        DECLARE @Description nvarchar(100)
                        DECLARE @BitPendingSubscription bit,@SubscriptionAcc int,@PendingSubscription int,@PayableSubsAcc int,@RedemptionAcc int,@PayableRedemptionAcc int,@PayableRedemptionFee int, @Switching int , @PendingSwitching int   
                        DECLARE @FundPK int,@SUBS numeric(22,8),@RED numeric(22,8),@RedPaymentDate datetime,@SWIOUT numeric(22,8),@SWIIN numeric(22,8),@SWIOutPaymentDate datetime
                        DECLARE @FundJournalPK int,@PeriodPK int, @FundID nvarchar(50)


                        CREATE TABLE #A (FundPK int,SUBS numeric(22,8),SWIIN numeric(22,8),RED numeric(22,8),SWIOUT numeric(22,8),RedPaymentDate datetime,SWIOutPaymentDate datetime)


                        DECLARE B CURSOR FOR
                    
                        select distinct FundPK,Date from CloseNAV where CloseNavPK in ( Select CloseNavPK from CloseNav where Date between @DateFrom and @DateTo and Status = 1 and " + paramCloseNAVSelected + @" ) 


                        Open B
                        Fetch Next From B
                        Into @CFundPK,@Date

                        While @@FETCH_STATUS = 0
                        Begin

                            -- UNIT
                       
                            set @UnitAmount = 0
                            select @UnitAmount = 
                            case when B.BitNavRounded = 0 then
                            round(cast(sum(SUBAmount - REDAmount - SWIOutAmount + SWIInAmount)/cast(case when dbo.fgetlastclosenav(@date,fundpk) = 0 then 1 else dbo.fgetlastclosenav(@date,fundpk) end as numeric(19,6)) as numeric(19,6)),6)
                            else round(cast(sum(SUBAmount - REDAmount - SWIOutAmount + SWIInAmount)/cast(case when dbo.fgetlastclosenavRounded(@date,fundpk) = 0 then 1 else dbo.fgetlastclosenavRounded(@date,fundpk) end as numeric(19,6)) as numeric(19,6)),6) end
                            from retrievefrombridge A
                            left join Fund B on A.FundID = B.ID and B.Status = 2
                            where fundpk = @CFundPK and date = @date
                            group by BitNavRounded,FundPK
 

	                        Update FundClientPosition set     
	                        UnitAmount = UnitAmount + isnull(@UnitAmount,0) where Date = @date and FundClientPK = 1    
	                        and FundPK = @CFundPK    


                        Fetch next From B 
                        Into @CFundPK,@Date
                        end
                        Close B
                        Deallocate B


                            -- JOURNAL

                            insert into #A (FundPK,SUBS,SWIIN,RED,SWIOUT,RedPaymentDate,SWIOutPaymentDate)
                            select B.FundPK,isnull(sum(SUBAmount),0) SUBS,isnull(sum(SWIInAmount),0) SWIIN,isnull(sum(REDAmount),0) * -1 RED,isnull(sum(SWIOutAmount),0) *-1 SWIOUT,REDPaymentDate,SWIOutPaymentDate from RetrieveFromBridge A
                            left join Fund B on A.FundID = B.ID and B.Status in (1,2)
                            left join CloseNAV C on B.FundPK = C.FundPK and C.Date = @Date and C.status in (1,2)
                            where A.Date = @Date and CloseNavPK in ( Select CloseNavPK from CloseNav where Date between @DateFrom and @DateTo and Status = 1 and " + paramCloseNAVSelected + @" ) 
                            group by B.FundPK,A.REDPaymentDate, A.SWIOutPaymentDate

                            DECLARE A CURSOR FOR 
                            select FundPK,SUBS,SWIIN,RED,SWIOUT,RedPaymentDate,SWIOutPaymentDate from #A A
                            Open A
                            Fetch Next From A
                            Into @FundPK,@SUBS,@SWIIN,@RED,@SWIOUT,@RedPaymentDate,@SWIOutPaymentDate

                            While @@FETCH_STATUS = 0
                            Begin

                            select @FundID  = ID from Fund where FundPK = @FundPK and status = 2
                            select @Description = 'RFB' + REPLACE(CONVERT(VARCHAR(10), @date, 103), '/', '')

                            -- FUND JOURNAL

                            SELECT @BitPendingSubscription = ISNULL(BitPendingSubscription,1) FROM dbo.FundFee WHERE fundPK = @FundPK
                            AND date = 
                            (
                            SELECT MAX(Date) FROM dbo.FundFee WHERE Date <= @date AND FundPK = @FundPK
                            AND status = 2
                            ) and STATUS = 2
                            IF(@BitPendingSubscription = 1)
                            BEGIN
                            Select @SubscriptionAcc = Subscription,@PendingSubscription = PendingSubscription,@PayableSubsAcc = payablesubscriptionfee,@Switching = Switching,@PendingSwitching = PendingSwitching 
                            From Fundaccountingsetup where status = 2 and FundPK = @FundPK
                            END
                            ELSE
                            BEGIN
                            Select @SubscriptionAcc = Subscription,@PendingSubscription = 3,@PayableSubsAcc = payablesubscriptionfee,@Switching = Switching,@PendingSwitching = PendingSwitching  From Fundaccountingsetup where status = 2   
                            and FundPK = @FundPK
                            END

                            Select @RedemptionAcc = Redemption,@PayableRedemptionAcc = PendingRedemption,@PayableRedemptionFee = payableRedemptionfee    
                            From Fundaccountingsetup 
                            where status = 2  and FundPK = @FundPK
		        
                            Select @PeriodPK = PeriodPK From Period Where @date Between DateFrom and DateTo and Status = 2

                            IF (@SUBS > 0)
                            BEGIN 
     
	                            Select @FundJournalPK = isnull(MAX(FundJournalPK) +  1,1) From FundJournal
	 		
	                            INSERT INTO [dbo].[FundJournal] ([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference] ,[Description],[Posted],[PostedBy],[PostedTime],[EntryUsersID],[EntryTime],[LastUpdate]) 
	                            Select	   @FundJournalPK, 1,2,'Posting From Subscription',@PeriodPK,dbo.fworkingday(@date,1),2,0,'SUBSCRIPTION FOR ' + @FundID,'',@Description,1,@PostedBy,@PostedTime,@PostedBy,@PostedTime,@PostedTime
	                            INSERT INTO [dbo].[FundJournalDetail]  ([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[DetailDescription] ,[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate]) 
	                            Select		@FundJournalPK,1,1,2,@PendingSubscription,1,@FundPK,1,'Subscription Client: MNC','D',@SUBS,@SUBS,0,1,@SUBS,0,@PostedTime 
	                            INSERT INTO [dbo].[FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])
	                            Select		@FundJournalPK,2,1,2,@SubscriptionAcc,1,@FundPK,1,'Subscription Client: MNC','C',@SUBS,	0,@SUBS,1,0,@SUBS,@PostedTime 

                            END


                            IF (abs(@SWIIN) > 0)
                            BEGIN

                            select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

                            INSERT INTO [dbo].[FundJournal] ([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference] ,[Description],[Posted],[PostedBy],[PostedTime],[EntryUsersID],[EntryTime],[LastUpdate]) 
                            Select	   @FundJournalPK, 1,2,'Posting Client Switching In',@PeriodPK,dbo.fworkingday(@date,1),13,0,'SWITCHING FOR ' + @FundID, '',@Description,1,@PostedBy,@PostedTime,@PostedBy,@PostedTime,@PostedTime
                            INSERT INTO [dbo].[FundJournalDetail]  ([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription] ,[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])	    
                            Select	   @FundJournalPK,1,1,2,@Switching,1,@FundPK,1,0,'Retrieve From Bridge','D',abs(@SWIIN),abs(@SWIIN),0,1,abs(@SWIIN),0,@PostedTime   
                            INSERT INTO [dbo].[FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])
                            Select	   @FundJournalPK,2,1,2,@SubscriptionAcc,1,@FundPK,1,0,'Retrieve From Bridge','C',abs(@SWIIN),0,abs(@SWIIN),1,0,abs(@SWIIN),@PostedTime 


                            END    

                            IF (abs(@RED) > 0)
                            BEGIN  

	                            select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 
	    		
	                            INSERT INTO [dbo].[FundJournal] ([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference] ,[Description],[Posted],[PostedBy],[PostedTime],[EntryUsersID],[EntryTime],[LastUpdate]) 
	                            Select	   @FundJournalPK, 1,2,'Posting Redemption',@PeriodPK,dbo.fworkingday(@date,1),3,0,'REDEMPTION FOR ' + @FundID, '',@Description,1,@PostedBy,@PostedTime,@PostedBy,@PostedTime,@PostedTime 
	                            INSERT INTO [dbo].[FundJournalDetail]  ([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription] ,[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])	    
	                            Select	   @FundJournalPK,1,1,2,@RedemptionAcc,1,@FundPK,1,0,'Retrieve From Bridge Value Date','D',abs(@RED),abs(@RED),0,1,abs(@RED),0,@PostedTime   
	                            INSERT INTO [dbo].[FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])
	                            Select	   @FundJournalPK,2,1,2,@PayableRedemptionAcc,1,@FundPK,1,0,'Retrieve From Bridge Value Date','C',abs(@RED),0,abs(@RED),1,0,abs(@RED),@PostedTime 

	                            select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

                                INSERT INTO [dbo].[FundJournal] ([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference] ,[Description],[Posted],[PostedBy],[PostedTime],[EntryUsersID],[EntryTime],[LastUpdate]) 
                                Select	   @FundJournalPK, 1,2,'Posting Redemption Payment Date',@PeriodPK,@RedPaymentDate,3,0,'REDEMPTION FOR ' + @FundID, '',@Description,1,@PostedBy,@PostedTime,@PostedBy,@PostedTime,@PostedTime 
	                            INSERT INTO [dbo].[FundJournalDetail]  ([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription] ,[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])    
                                Select	   @FundJournalPK,1,1,2,@PayableRedemptionAcc,1,@FundPK,1,0,'Retrieve From Bridge Payment Date','D',abs(@RED),abs(@RED),0,1,abs(@RED),0,@PostedTime 
                                INSERT INTO [dbo].[FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])
                                Select	   @FundJournalPK,2,1,2,3,1,@FundPK,1,0,'Retrieve From Bridge Payment Date','C',abs(@RED),0,abs(@RED),1,0,abs(@RED),@PostedTime 
	
                            END

                            IF (abs(@SWIOUT) > 0)
                            BEGIN


                            select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

                            INSERT INTO [dbo].[FundJournal] ([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference] ,[Description],[Posted],[PostedBy],[PostedTime],[EntryUsersID],[EntryTime],[LastUpdate]) 
                            Select	   @FundJournalPK, 1,2,'Posting Switching Out',@PeriodPK,dbo.fworkingday(@date,1),13,0,'SWITCHING FOR ' + @FundID, '',@Description,1,@PostedBy,@PostedTime,@PostedBy,@PostedTime,@PostedTime 
                            INSERT INTO [dbo].[FundJournalDetail]  ([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription] ,[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])	    
                            Select	   @FundJournalPK,1,1,2,@RedemptionAcc,1,@FundPK,1,0,'Retrieve From Bridge Value Date','D',abs(@SWIOUT),abs(@SWIOUT),0,1,abs(@SWIOUT),0,@PostedTime 	
                            INSERT INTO [dbo].[FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])
                            Select	   @FundJournalPK,2,1,2,@PayableRedemptionAcc,1,@FundPK,1,0,'Retrieve From Bridge Value Date','C',abs(@SWIOUT),0,abs(@SWIOUT),1,0,abs(@SWIOUT),@PostedTime 

                            select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

                            INSERT INTO [dbo].[FundJournal] ([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference] ,[Description],[Posted],[PostedBy],[PostedTime],[EntryUsersID],[EntryTime],[LastUpdate]) 
                            Select	   @FundJournalPK, 1,2,'Posting Switching Out Payment Date',@PeriodPK,@SWIOutPaymentDate,13,0,'SWITCHING FOR ' + @FundID, '',@Description,1,@PostedBy,@PostedTime,@PostedBy,@PostedTime,@PostedTime
                            INSERT INTO [dbo].[FundJournalDetail]  ([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription] ,[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])	    
                            Select	   @FundJournalPK,1,1,2,@PayableRedemptionAcc,1,@FundPK,1,0,'Retrieve From Bridge Payment Date','D',abs(@SWIOUT),abs(@SWIOUT),0,1,abs(@SWIOUT),0,@PostedTime   
                            INSERT INTO [dbo].[FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK],[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])
                            Select	   @FundJournalPK,2,1,2,3,1,@FundPK,1,0,'Retrieve From Bridge Payment Date','C',abs(@SWIOUT),0,abs(@SWIOUT),1,0,abs(@SWIOUT),@PostedTime 

                            END

       

                            Fetch next From A 
                            Into @FundPK,@SUBS,@SWIIN,@RED,@SWIOUT,@RedPaymentDate,@SWIOutPaymentDate
                            end
                            Close A
                            Deallocate A

                        update CloseNav set status = 2,ApprovedUsersID = @UsersID,ApprovedTime = @Time,LastUpdate=@Time 
                        where status = 1 and CloseNavPK in ( Select CloseNavPK from CloseNav where Date between @DateFrom and @DateTo and Status = 1 and " + paramCloseNAVSelected + @" ) 
                        
                        Update CloseNav set status= 3,VoidUsersID=@UsersID,VoidTime=@Time,LastUpdate=@Time  
                        where status = 4 and CloseNavPK in (Select CloseNavPK from CloseNav where Date between @DateFrom and @DateTo and Status = 4 and " + paramCloseNAVSelected + @")   

                        ";
                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@PostedBy", _usersID);
                        cmd.Parameters.AddWithValue("@PostedTime", _datetimeNow);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public string ImportClosePriceBond(string _fileSource, string _userID, string _date)
        {
            string _msg = "";
            try
            {
                DateTime _now = DateTime.Now;

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //Validasi
                        cmd.CommandText = "select * from ClosePrice CP left join Instrument I on CP.InstrumentPK = I.InstrumentPK where I.status = 2 and Date = @Date and I.InstrumentTypePK in (2,3) and CP.status in (1,2) ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                return "Import Cancel, Already Import Close Price Bond For this Day, Void / Reject First!";
                            }
                            else
                            {
                                //delete data yang lama
                                using (SqlConnection conn = new SqlConnection(Tools.conString))
                                {
                                    conn.Open();
                                    using (SqlCommand cmd1 = conn.CreateCommand())
                                    {
                                        cmd1.CommandText = "truncate table ClosePriceBondTemp";
                                        cmd1.ExecuteNonQuery();
                                    }
                                }

                                // import data ke temp dulu
                                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                                {
                                    bulkCopy.DestinationTableName = "dbo.ClosePriceBondTemp";
                                    bulkCopy.WriteToServer(CreateDataTableFromClosePriceBondTempExcelFile(_fileSource));
                                    _msg = "Import Close Price Bond Success";
                                }

                                // logic kalo Reconcile success
                                using (SqlConnection conn = new SqlConnection(Tools.conString))
                                {
                                    conn.Open();
                                    using (SqlCommand cmd1 = conn.CreateCommand())
                                    {
                                        cmd1.CommandText =

                                        @"Declare @ClosePricePK bigint 
                                        Select @ClosePricePK  = isnull(max(ClosePricePk),0) from ClosePrice   
                                        Insert Into ClosePrice (ClosePricePK,historyPK,status,Date,InstrumentPK,ClosePriceValue,LowPriceValue,HighPriceValue ) 
                                        select Row_number() over(order by I.InstrumentPK) + @ClosePricePK,1,1,@Date,I.InstrumentPK,Amount,0,0 from ClosePriceBondTemp C 
                                        Left Join Instrument I on C.InstrumentID = I.ID and I.status = 2 
                                        where C.InstrumentID is not null and I.InstrumentPK is not null ";

                                        cmd1.Parameters.AddWithValue("@Date", _date);
                                        cmd1.Parameters.AddWithValue("@UsersID", _userID);
                                        cmd1.Parameters.AddWithValue("@LastUpdate", _now);
                                        cmd1.ExecuteNonQuery();

                                    }
                                    _msg = "Import Close Price Bond Done";

                                }

                            }
                        }
                    }
                }



                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }
        private DataTable CreateDataTableFromClosePriceBondTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Int32");
                    dc.ColumnName = "ClosePriceBondPK";
                    dc.Unique = false;
                    dc.AutoIncrement = true;
                    dc.AutoIncrementSeed = 1;
                    dc.AutoIncrementStep = 1;
                    dt.Columns.Add(dc);

                    //dc = new DataColumn();
                    //dc.DataType = System.Type.GetType("System.String");
                    //dc.ColumnName = "Date";
                    //dc.Unique = false;
                    //dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "ClosePriceValue";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    //dc = new DataColumn();
                    //dc.DataType = System.Type.GetType("System.Decimal");
                    //dc.ColumnName = "LowPriceValue";
                    //dc.Unique = false;
                    //dt.Columns.Add(dc);

                    //dc = new DataColumn();
                    //dc.DataType = System.Type.GetType("System.Decimal");
                    //dc.ColumnName = "HighPriceValue";
                    //dc.Unique = false;
                    //dt.Columns.Add(dc);



                    using (OleDbConnection odConnection = new OleDbConnection(Tools.ConStringExcel2007(_path)))
                    {
                        odConnection.Open();
                        using (OleDbCommand odCmd = odConnection.CreateCommand())
                        {
                            // _oldfilename = nama sheet yang ada di file excel yang diimport
                            odCmd.CommandText = "SELECT * FROM [Sheet1$]";
                            using (OleDbDataReader odRdr = odCmd.ExecuteReader())
                            {
                                // start counting from index = 1 --> skipping the header (index=0)
                                for (int i = 1; i <= 1; i++)
                                {
                                    odRdr.Read();
                                }
                                do
                                {
                                    dr = dt.NewRow();

                                    //dr["Date"] = odRdr[0];
                                    dr["InstrumentID"] = odRdr[0];
                                    dr["ClosePriceValue"] = odRdr[1];

                                    //dr["ClosePriceValue"] = (odRdr[1].ToString().Replace(",", ""));
                                    //dr["LowPriceValue"] = (odRdr[2].ToString().Replace(",", ""));
                                    //dr["HighPriceValue"] = (odRdr[3].ToString().Replace(",", ""));

                                    if (dr["ClosePriceBondPK"].Equals(DBNull.Value) != true) { dt.Rows.Add(dr); }
                                } while (odRdr.Read());
                            }
                        }
                        odConnection.Close();
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }




        // DIBUAT ACQ DATE LEBIH DARI 1
        public string PTPBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                                BEGIN  
                                SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                                truncate table #Text      
                                insert into #Text     
                                select 'Transaction Status|TA Reference ID|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|TA Reference No.|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'      
        
                                insert into #Text
                                Select  
                                'NEWM' --1
                                + '|' + ''
                                + '|' + '1'
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
                                + '|' + @CompanyID
                                + '|' + isnull(A.BrokerCode,'')
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
                                + '|' + cast(isnull(A.TrxType,'') as nvarchar)
                                + '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
                                + '|' + case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
                                + '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) 
                                + '|' + case when A.InterestAmount = 0 then '' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
                                + '|' + ''
                                + '|' + case when A.CapitalGainAmount = 0 then '' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end 
                                + '|' + case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
                                + '|' +  cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,2)) as nvarchar)
                                + '|' + case when A.TotalAmount = 0 then '' else cast(isnull(cast(isnull(A.TotalAmount,0) as decimal(30,2)),'')as nvarchar) end 
                                + '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end             
                                + '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankAccountNo,'')))) end              
                                + '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end 
                                + '|' + case when A.StatutoryType = 0 then '2' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.StatutoryType,'2')))) end
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Notes,''))))
                                + '|' + '' 
                                + case when A.TrxType = 1 then '' else  
                                + '|' + case when A.TrxType = 1 then '' else '2' end  
                                + '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) end 
                                + '|' + case when A.TrxType = 1 then '' else case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end end  
                                + '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), AcqDate, 112),'')))) end    
                                + '|' + case when A.TrxType = 1 then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(A.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
                                + '|' + case when A.TrxType = 1 then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(sum(A.AcqPrice * A.AcqVolume)/100 as decimal(30,2)), '')as nvarchar) end end     
                                + '|' + case when A.TrxType = 1 then '' else cast(isnull(cast(isnull(sum(A.DonePrice* A.Quantity)/100 - sum(A.AcqPrice * A.AcqVolume)/100,0) as decimal(30,2)),'')as nvarchar)  end 
                                + '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), case when A.InstrumentTypePK = 3 then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else  dbo.FGetDateDIffGovermentBond(A.LastCouponDate,A.SettlementDate) end, 112),''))))   end 
                                + '|' + case when A.TrxType = 1 then '' else  cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
                                + '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(sum(A.CapitalGainAmount + A.TaxInterestAmount) as decimal(30,2)),'')as nvarchar) end  end 
                                + '|' + case when A.TrxType = 1 then '' else case when A.TaxExpensePercent = 0 then '0' else cast(isnull(cast(isnull(A.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end 
                                + '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(sum(A.CapitalGainAmount + A.TaxInterestAmount) as decimal(30,2)),'')as nvarchar) end  end 
                                End
                                from (      
                                select A.InstrumentTypePK,A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                                round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                                round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK = 3 then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
                                round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,F.BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InterestPercent,A.InvestmentTrType from investment A
                                left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                                left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
                                left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
                                where    
                                A.ValueDate =  @valuedate and A.InstrumentTypePK in (2,3,9,13,15)
                                " + _paramSettlementPK + @" and A.statusdealing = 2

                                )A    
                                Group by A.InstrumentTypePK,A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                                A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.Notes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                                A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentTrType
                                order by A.ValueDate Asc


                                select * from #text 
                                END";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Bond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Bond.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public void CloseNav_GetCloseNavByDate(string _usersID, DateTime _date, CloseNav _CloseNav)
        {

            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";

                        if (!_host.findString(_CloseNav.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CloseNav.FundFrom))
                        {
                            _paramFund = "And A.FundPK in ( " + _CloseNav.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

                        declare @CFundPK int
                        DECLARE @Description nvarchar(100)

                        Create Table #GetDailyNav    
                        (             
                        Date datetime,                            
                        UsersID nvarchar(100),                   
                        LastUpdate datetime                       
                        )              
  
                          insert into #GetDailyNav (Date,UsersID,LastUpdate) Values (@Date,@UsersID,@LastUpdate)        
                            
                        --BEGIN      
                        Declare @CloseNAVPK int        
                        Declare @DateUnit datetime

                        Select @DateUnit = Max(Date) From FundClientPosition
 


                        where date =
                        (
                        Select max(date) from FundClientPosition where date < @date 
                        ) 
                        select @CloseNAVPK = isnull(max(CloseNAVPK),0) From closeNav        
                        Insert into CloseNAV(CloseNavPK,HistoryPK,Status,Notes,Date,FundPK,AUM,NAV,EntryUsersID,EntryTime,LastUpdate)        
                        Select ROW_NUMBER() over(order by FundPK) + @CloseNAVPK,1,1,'',@Date,FundPK        
                        ,

                        -- AUM
                        CASE WHEN ISNULL(IssueDate,'') <> '' AND ISNULL(IssueDate,'') = @Date THEN ISNULL(B.TotalSubs,0) ELSE CASE when  ([dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,1,FundPK) 
                        - [dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,63,FundPK)) = 0 
                        THEN [dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,1,FundPK) - [dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,85,FundPK)
                        else
                        ([dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,1,FundPK) 
                        - [dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,63,FundPK)) end END,

                        -- NAV
                        CASE WHEN ISNULL(IssueDate,'') <> '' AND ISNULL(IssueDate,'') = @Date THEN 
                        CASE WHEN A.CurrencyPK = 1 THEN 
                        1000 ELSE 1 END
                        ELSE  CASE when cast([dbo].[FGetTotalUnitByFundPK](@DateUnit,FundPK) as float) = 0 then 1000  else      
                        Case when  (cast([dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,1,FundPK) as float)
                        - cast([dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,63,FundPK) as float)) = 0 and cast([dbo].[FGetTotalUnitByFundPK](@DateUnit,FundPK) as float) = 0 then
                        1000 else

                        (cast([dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,1,FundPK) as float) - cast([dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@date,63,FundPK) as float))  / 
                        cast([dbo].[FGetTotalUnitByFundPK](@DateUnit,FundPK) as float) end END END

                        ,

                        @UsersID,@LastUpdate,@LastUpdate  
                        From Fund A
                        LEFT JOIN 
                        (
	                        SELECT SUM(CashAmount) TotalSubs,FundPK FundPKSubQuery FROM dbo.ClientSubscription WHERE status <> 3 AND ValueDate = @Date
	                        GROUP BY FundPK
                        )B ON A.FundPK = B.FundPKSubQuery
                        WHERE A.status = 2 " + _paramFund + @"


                        ---------------------------------
                        --INSERT FUND CLIENT POSITION 


                        select @Description = 'RFB' + REPLACE(CONVERT(VARCHAR(10), @date, 103), '/', '')

                        DECLARE A CURSOR FOR
                    
                        select A.FundPK from Fund A where A.status = 2 " + _paramFund + @"

                        Open A
                        Fetch Next From A
                        Into @CFundPK

                        While @@FETCH_STATUS = 0
                        Begin

                            -- UNIT
                            Delete FundClientPosition where Date >= @Date and FundPK = @CFundPK

                            Insert into FundClientPosition(Date,FundClientPk,FundPK,CashAmount,UnitAmount,LastUpdate)              
                            Select @Date,FundClientPK,FundPK,CashAmount,UnitAmount,@LastUpdate              
                            From FundClientPosition where Date = dbo.fworkingday(@date,-1) and FundPK = @CFundPK 



                            -- JOURNAL


                            update  A set status = 3,VoidUsersID = @UsersID, VoidTime = @LastUpdate from FundJournal A
                            left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK and B.status = 2
                            where Description = @Description and A.Posted = 1 and A.Reversed = 0 and A.status = 2 and B.FundPK = @CFundPK




                        Fetch next From A 
                        Into @CFundPK
                        end
                        Close A
                        Deallocate A


                     




                        ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }

                //Insert Fund Daily Fee
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";

                        if (!_host.findString(_CloseNav.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CloseNav.FundFrom))
                        {
                            _paramFund = "And FundPK in ( " + _CloseNav.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }


                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                           
                            
                        --declare @date datetime
                        --set @date = '09/29/2020'


                        Declare @PayableManagementFee int, @CustodiFeeExpense int, @SInvestFeeExpense int
                        Declare @FundPK int 
                        Declare @Amount numeric(22,4)

                        DECLARE A CURSOR FOR 

                        select FundPK,@Date from Fund where status = 2 --and FundPK = 1
                        " + _paramFund + @"

                        Open A
                        Fetch Next From A
                        Into @FundPK,@Date

                        While @@FETCH_STATUS = 0
                        BEGIN  

                        select @PayableManagementFee = ManagementFeeExpense, 
                        @CustodiFeeExpense = CustodianFeeExpense, @SInvestFeeExpense = SInvestFee 
                        From FundAccountingSetup where FundPK = @FundPK and status = 2




                        set @Amount = 0 

                        delete FundDailyFee where Date = @Date and FundPK = @FundPK       

                        -- TAMBAH LOGIK KLO 0
                        INSERT INTO FundDailyFee(Date,FundPK,ManagementFeeAmount,CustodiFeeAmount,SInvestFeeAmount,LastUpdateDB)  

                        select A.Date,A.FundPK,sum(MFee),sum(CustodiFee),sum(SinvestFee),getdate() from (
                        -- MFEE
                        select @Date Date ,FundPK,case when C.Type in (1,4) then isnull(sum(BaseDebit-BaseCredit),0) else isnull(sum(BaseDebit-BaseCredit),0) * -1 end MFee,0 CustodiFee,0 SinvestFee from FundJournalDetail A
                        left join FundJournal B on A.FundJournalPK = B.FundJournalPK
                        left join FundJournalAccount C on A.FundJournalAccountPK = C.FundJournalAccountPK and C.status in (1,2)
                        where A.FundJournalAccountPK = @PayableManagementFee and A.status = 2 
                        and B.Posted = 1 and B.Reversed = 0 and B.ValueDate  = @Date and FundPK = @FundPK and B.Status = 2 and B.TrxName <> 'TB Reconcile'
                        group by C.Type,B.ValueDate,A.FundPK

                        union all
                        select @Date Date ,FundPK,case when C.Type in (1,4) then isnull(sum(BaseDebit-BaseCredit),0) else isnull(sum(BaseDebit-BaseCredit),0) * -1 end MFee,0 CustodiFee,0 SinvestFee from FundJournalDetail A
                        left join FundJournal B on A.FundJournalPK = B.FundJournalPK
                        left join FundJournalAccount C on A.FundJournalAccountPK = C.FundJournalAccountPK and C.status in (1,2)
                        where A.FundJournalAccountPK = @PayableManagementFee and A.status = 2 
                        and B.Posted = 1 and B.Reversed = 0 and B.ValueDate  = @Date and FundPK = @FundPK and B.Status = 2 and B.TrxName = 'TB Reconcile' and A.Amount between -100000 and 100000 -- sementara pake ini
                        group by C.Type,B.ValueDate,A.FundPK

                        union all

                        -- CUST FEE
                        select @Date Date ,FundPK,0 MFee,case when C.Type in (1,4) then isnull(sum(BaseDebit-BaseCredit),0) else isnull(sum(BaseDebit-BaseCredit),0) * -1 end  CustodiFee,0 SinvestFee from FundJournalDetail A
                        left join FundJournal B on A.FundJournalPK = B.FundJournalPK
                        left join FundJournalAccount C on A.FundJournalAccountPK = C.FundJournalAccountPK and C.status in (1,2)
                        where A.FundJournalAccountPK = @CustodiFeeExpense and A.status = 2 
                        and B.Posted = 1 and B.Reversed = 0 and B.ValueDate  = @Date and FundPK = @FundPK and B.Status = 2 and B.TrxName <> 'TB Reconcile'
                        group by C.Type,B.ValueDate,A.FundPK

                        union all
                        select @Date Date ,FundPK,0 MFee,case when C.Type in (1,4) then isnull(sum(BaseDebit-BaseCredit),0) else isnull(sum(BaseDebit-BaseCredit),0) * -1 end CustodiFee,0 SinvestFee from FundJournalDetail A
                        left join FundJournal B on A.FundJournalPK = B.FundJournalPK
                        left join FundJournalAccount C on A.FundJournalAccountPK = C.FundJournalAccountPK and C.status in (1,2)
                        where A.FundJournalAccountPK = @CustodiFeeExpense and A.status = 2 
                        and B.Posted = 1 and B.Reversed = 0 and B.ValueDate  = @Date and FundPK = @FundPK and B.Status = 2 and B.TrxName = 'TB Reconcile' and A.Amount between -100000 and 100000 -- sementara pake ini
                        group by C.Type,B.ValueDate,A.FundPK

                        union all

                        -- SINVEST FEE
                        select @Date Date ,FundPK,0 MFee,0 CustodiFee,case when C.Type in (1,4) then isnull(sum(BaseDebit-BaseCredit),0) else isnull(sum(BaseDebit-BaseCredit),0) * -1 end SinvestFee from FundJournalDetail A
                        left join FundJournal B on A.FundJournalPK = B.FundJournalPK
                        left join FundJournalAccount C on A.FundJournalAccountPK = C.FundJournalAccountPK and C.status in (1,2)
                        where A.FundJournalAccountPK = @SInvestFeeExpense and A.status = 2 
                        and B.Posted = 1 and B.Reversed = 0 and B.ValueDate  = @Date and FundPK = @FundPK and B.Status = 2 and B.TrxName <> 'TB Reconcile'
                        group by C.Type,B.ValueDate,A.FundPK

                        union all
                        select @Date Date ,FundPK,0 MFee,0 CustodiFee,case when C.Type in (1,4) then isnull(sum(BaseDebit-BaseCredit),0) else isnull(sum(BaseDebit-BaseCredit),0) * -1 end  SinvestFee from FundJournalDetail A
                        left join FundJournal B on A.FundJournalPK = B.FundJournalPK
                        left join FundJournalAccount C on A.FundJournalAccountPK = C.FundJournalAccountPK and C.status in (1,2)
                        where A.FundJournalAccountPK = @SInvestFeeExpense and A.status = 2 
                        and B.Posted = 1 and B.Reversed = 0 and B.ValueDate  = @Date and FundPK = @FundPK and B.Status = 2 and B.TrxName = 'TB Reconcile' and A.Amount between -100000 and 100000 -- sementara pake ini
                        group by C.Type,B.ValueDate,A.FundPK
                        ) A 
                        group by A.Date, A.FundPK


                        Fetch next From A Into @FundPK,@Date
                        END
                        Close A
                        Deallocate A



                        ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.ExecuteNonQuery();
                    }
                }



                //Insert STG_TProductManagementFee
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";

                        if (!_host.findString(_CloseNav.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CloseNav.FundFrom))
                        {
                            _paramFund = "And FundPK in ( " + _CloseNav.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
               
                        declare @FundPK int

                        DECLARE A CURSOR FOR 

                        select FundPK,@Date from Fund where status = 2 " + _paramFund + @"

                        Open A
                        Fetch Next From A
                        Into @FundPK,@Date

                        While @@FETCH_STATUS = 0
                        BEGIN  

                            
                        delete A from BRIDGE.dbo.STG_TProductManagementFee A left join Fund B on A.ProductCode  = B.ID and B.status = 2
                        where B.FundPK = @FundPK and A.Date = @Date

                        Insert into BRIDGE.dbo.STG_TProductManagementFee(Date,ProductCode,Amount,Amount_PPN,Amount_PPH,Amount_Total,AsOfDate0,AsOfDate1,IDProduct,DateProcessed,RecNotes)
                        
                        select @Date,B.ID,case when C.ID = 'USD' then ManagementFeeAmount * RateValue /1.1 else ManagementFeeAmount /1.1 end,
                        case when C.ID = 'USD' then ManagementFeeAmount * RateValue / 1.1 * 0.1 else  ManagementFeeAmount / 1.1 * 0.1 end,0,
                        case when C.ID = 'USD' then ManagementFeeAmount * RateValue else ManagementFeeAmount end,case when dbo.[CheckIsYesterdayHoliday](@date) = 1 then dbo.FWorkingDay(@Date,-1) + 1 else @date end,@Date,0,null,null 
                        from FundDailyFee A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join Currency C on B.CurrencyPK = C.CurrencyPK and C.Status = 2
                        left join BRIDGE.dbo.STG_CurrencyRate D on C.ID = D.CurrCode  and CurrDate = @Date
                        where Date = @Date and A.FundPK = @FundPK

                        Fetch next From A Into @FundPK,@Date
                        END
                        Close A
                        Deallocate A



                        ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.ExecuteNonQuery();
                    }
                }


                // UPDATE ROUNDING NAV
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";

                        if (!_host.findString(_CloseNav.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CloseNav.FundFrom))
                        {
                            _paramFund = "And A.FundPK in ( " + _CloseNav.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        
                        Declare @NAVRoundingMode int
                        Declare @NAVDecimalPlaces int
                        Declare @FundPK int
                        Declare @NAV numeric(22,12)

                        DECLARE A CURSOR FOR 
                        Select NAVRoundingMode, NAVDecimalPlaces,A.FundPK,A.Nav
                        From CloseNAV  A left join Fund B on A.FundPK = B.FundPK Where A.Date = @Date and A.status = 1
                        and B.Status = 2 " + _paramFund + @"

                        Open A
                        Fetch Next From A
                        Into @NAVRoundingMode,@NAVDecimalPlaces,@FundPK,@NAV

                    
                        WHILE @@FETCH_STATUS = 0  
                        BEGIN 

                        If @NAVRoundingMode = 1 BEGIN Set  @NAV = ROUND(@NAV,@NAVDecimalPlaces) 
	                        IF @NAVDecimalPlaces = 0 BEGIN
		                        set @NAV = @NAV + 1
	                        END 
	                        IF @NAVDecimalPlaces = 2 BEGIN
		                        set @NAV = @NAV + 0.01
	                        END 
	                        IF @NAVDecimalPlaces = 4 BEGIN
		                        set @NAV = @NAV + 0.0001
	                        END 
	                        IF @NAVDecimalPlaces = 6 BEGIN
		                        set @NAV = @NAV + 0.000001
	                        END 
	                        IF @NAVDecimalPlaces = 8 BEGIN
		                        set @NAV = @NAV + 0.00000001
	                        END 


                        END 

                        If @NAVRoundingMode = 2 BEGIN Set  @NAV = ROUND(@NAV,@NAVDecimalPlaces,1)   END 
                        If @NAVRoundingMode = 3 BEGIN Set  @NAV = ROUND(@NAV,@NAVDecimalPlaces)  END 

                        --Update CloseNav set NavRounded = @Nav where status = 1 and Date = @Date and FundPK = @FundPK
                        Update CloseNav set Nav = @Nav where status = 1 and Date = @Date and FundPK = @FundPK

                        Fetch next From A Into  @NAVRoundingMode,@NAVDecimalPlaces,@FundPK,@NAV
                        END
                        Close A
                        Deallocate A

                        ";

                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";

                        if (!_host.findString(_CloseNav.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CloseNav.FundFrom))
                        {
                            _paramFund = "And A.FundPK in ( " + _CloseNav.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        
                        declare @FundID nvarchar(100)
                        declare @FundName nvarchar(100)
                        declare @Nav numeric(24,8)
                        declare @Unit numeric(24,8)
                        declare @AUM numeric(24,2)
                        declare @NavRounded numeric(24,8)


                        DELETE B from BRIDGE.dbo.STG_TNAV B 
                        left join Fund A on B.ProductCode = A.ID and A.status in (1,2) 
                        where NAVDate = @date " + _paramFund + @" 

                        DECLARE A CURSOR FOR

                        select Date,B.ID,B.Name,isnull(A.Nav,0),isnull([dbo].[FGetTotalUnitByFundPK](dbo.fworkingday(@date,-1),A.FundPK),0) ,isnull(AUM,0),isnull(A.Nav,0) from Closenav A
                        left join Fund B on A.FundPK = B.FundPK and B.status = 2
                        where Date = @Date and A.status in (1,2) " + _paramFund + @"

                        Open A
                        Fetch Next From A
                        Into @Date,@FundID,@FundName,@Nav,@Unit,@AUM,@NavRounded

                        While @@FETCH_STATUS = 0
                        BEGIN  

                        insert into BRIDGE.dbo.STG_TNAV(NAVDate,IDProduct,ProductCode,ProductName,NAVPrice,OutstandingUnit,TotalNetAsset,NAVType,NavPriceRounded)
                        select @Date,0,@FundID,@FundName,@Nav,@Unit,@AUM,0,@NavRounded


                        Fetch next From A Into @Date,@FundID,@FundName,@Nav,@Unit,@AUM,@NavRounded
                        END
                        Close A
                        Deallocate A
                        ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _dateTimeNow);
                        cmd.ExecuteNonQuery();


                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public decimal Get_LastCashProjectionByBankIDByFundName(DateTime _date, string _bankID, string _fundName)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 
                       
                        select isnull(sum(Amount),0) Total from CashProjection A
                        left join Bank B on A.BankPK = B.BankPK and B.status = 2
                        left join Fund C on A.FundPK = C.FundPk and C.status = 2
                        where B.ID = @BankID and C.Name = @FundName and ValueDate = dbo.FWorkingDay(@date,-1) and A.status = 2";

                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundName", _fundName);
                        cmd.Parameters.AddWithValue("@BankID", _bankID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public List<Investment> Get_DataInvestmentByDateByFundFromToAndInstrumentTypeSellOnly(int _status, DateTime _dateFrom, DateTime _dateTo, int _instrumentType, string _fundID)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Investment> L_Investment = new List<Investment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInstrumentType = "";
                        if (_fundID != "0")
                        {
                            _paramFund = "And CR.FundPK  = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_instrumentType == 2)
                        {
                            _paramInstrumentType = "and TP.InstrumentTypePK in (2,3,9,13,15)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "and TP.InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_status == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, " +
                            " case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  " +
                            " cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
                            " CP.Name CounterpartName, " +
                            " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID," +
                            " TP.* from Investment TP left join     " +
                            " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
                            " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
                            " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
                            " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
                            " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
                            " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
                            " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'    left join  " +
                            " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   " +
                            " Market M on TP.MarketPK = M.MarketPK and M.status = 2 " +
                            " where  TP.TrxType = 2 and  TP.ValueDate between @DateFrom and @DateTo " + _paramFund + _paramInstrumentType + " and TP.statusInvestment = 1  and (TP.StatusDealing = 0 and TP.InvestmentPK <> 0) order by RefNo ";
                        }
                        else if (_status == 2)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = " select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, " +
                            " case when TP.OrderStatus  = 'O' then 'OPEN' else case when TP.OrderStatus  = 'P' then 'PARTIAL' else case when TP.OrderStatus  = 'M' then 'MATCH' else case when TP.OrderStatus  = 'R' then 'REJECT' else case when TP.StatusInvestment  = 2 then 'APPROVED' else 'PENDING' END END END END END OrderStatusDesc,  " +
                            " cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID, " +
                            " CP.Name CounterpartName, " +
                            " TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID," +
                            " TP.* from Investment TP left join     " +
                            " Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join     " +
                            " Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join     " +
                            " Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join     " +
                            " Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join " +
                            " FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join " +
                            " MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join     " +
                            " MasterValue MV on TP.InstrumentTypePK = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'   left join  " +
                            " MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType'  left join  " +
                            " Market M on TP.MarketPK = M.MarketPK and M.status = 2 " +
                            " where TP.TrxType = 2 and TP.ValueDate between @DateFrom and @DateTo " + _paramFund + _paramInstrumentType + " and TP.statusInvestment = 2  and (TP.StatusDealing not in (3,4)) and (TP.StatusSettlement not in (3,4)) and TP.InvestmentPK <> 0 order by RefNo ";

                        }


                        else
                        {
                            if (_instrumentType == 5)
                            {


                                if (_paramFund == "")
                                {
                                    cmd.CommandTimeout = 0;
                                    cmd.CommandText = @"




                                      Declare @EndDayTrailsPK int
Declare @MaxDateEndDayFP datetime

--Select @EndDayTrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where ValueDate = dbo.FWorkingDay(@DateFrom,-1)
--and status = 2

select @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
where ValueDate = 
(
select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @DateFrom
)
and status = 2
 
 
 
select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,
CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,    
CP.Name CounterpartName,    
TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,
MV2.DescOne BoardTypeDesc
,InvestmentPK,DealingPK,SettlementPK,SelectedInvestment,SelectedDealing,SelectedSettlement,TP.HistoryPK,StatusInvestment,StatusDealing,StatusSettlement,TP.Notes,ValueDate
,TP.PeriodPK,TP.Category,InstructionDate,Reference,TP.InstrumentTypePK,TrxType,TrxTypeID,TP.CounterpartPK,TP.InstrumentPK,TP.FundPK	
,TP.FundCashRefPK,OrderPrice,Lot,TP.LotInShare,RangePrice,AcqPrice,Volume,Amount,TP.InterestPercent,BreakInterestPercent
,AccruedInterest,DoneAccruedInterest,TP.LastCouponDate,TP.NextCouponDate,TP.MaturityDate,SettlementDate,AcqDate,InvestmentNotes,DoneLot,DoneVolume
,DonePrice,DoneAmount,Tenor,CommissionPercent,LevyPercent,KPEIPercent,VATPercent,WHTPercent,OTCPercent,IncomeTaxSellPercent
,IncomeTaxInterestPercent,IncomeTaxGainPercent,CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,IncomeTaxInterestAmount
,IncomeTaxGainAmount,TotalAmount,CurrencyRate,AcqPrice1,AcqDate1,AcqPrice2,AcqDate2,AcqPrice3,AcqDate3,AcqPrice4
,AcqDate4,AcqPrice5,AcqDate5,SettlementMode,BoardType,OrderStatus,Posted,PostedBy,PostedTime,Revised,RevisedBy,RevisedTime	
,TP.EntryUsersID,TP.EntryTime,TP.UpdateUsersID,TP.UpdateTime,TP.ApprovedUsersID,TP.ApprovedTime,TP.VoidUsersID,TP.VoidTime
,EntryDealingID,EntryDealingTime,UpdateDealingID,UpdateDealingTime,ApprovedDealingID,ApprovedDealingTime,VoidDealingID,VoidDealingTime
,EntrySettlementID,EntrySettlementTime,UpdateSettlementID,UpdateSettlementTime,ApprovedSettlementID,ApprovedSettlementTime,VoidSettlementID,VoidSettlementTime
,TP.DBUserID,TP.DBTerminalID,TP.LastUpdate,TP.LastUpdateDB,I.BankPK,AcqVolume,AcqVolume1,AcqVolume2,AcqVolume3,AcqVolume4,AcqVolume5,AcqPrice6,AcqDate6,AcqVolume6
,AcqPrice7,AcqDate7,AcqVolume7,AcqPrice8,AcqDate8,AcqVolume8,AcqPrice9,AcqDate9,AcqVolume9,TP.TaxExpensePercent,1 MarketPK, M.ID MarketID
,Tp.BankBranchPK,Tp.InterestDaysType,Tp.InterestPaymentType,Tp.PaymentModeOnMaturity,Tp.YieldPercent,Tp.BitIsRounding,Tp.AccruedHoldingAmount,TP.TrxBuy, Tp.BitBreakable, Tp.CrossFundFromPK,Z.ID CrossFundFromID,TP.BitForeignTrx

 
from Investment TP left join        
Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join        
Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join        
Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join        
Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join    
FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join    
InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join     
MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join
Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join 
Market M on TP.MarketPK = M.MarketPK and M.status = 2      
where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo  and IT.Type = 3
and TP.InvestmentNotes  <> 'Reject By Amend' 
and TP.InvestmentPK <> 0 
  
UNION ALL

Select 'VIEW ONLY','','',A.FundID,'','',A.InstrumentID,B.name,'','','','','','','',''
,0,0,0,0,0,0,0,0,0,0,'',@DateFrom
,0,'',@datefrom,'',	3,0,'',0,A.InstrumentPK,A.FundPK
,0,0,0,0,'',0,A.Balance,A.Balance,B.InterestPercent,0
,0,0,'','','',A.AcqDate SettlementDate,'','',0,0
,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,'',0,'',0,'',0
,'',0,'',0,0,'',0,'','',0,'',''
,'','','','','','','','','','','','','','','','','',''
,'','','','','','','','','','',0,0,0,0,0,0,0
,0,'',0,0,'',0,0,'',0,0,'',0,A.TaxExpensePercent,1,MR.ID
,0,0,0,0,0,0,0,0,0,0,'',0

from FundPosition A
left join instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
left join Fund CR on A.FundPK = CR.FundPK and CR.status = 2
left join Market MR on A.MarketPK = MR.MarketPK and MR.Status = 2
where Date = @MaxDateEndDayFP
and A.MaturityDate = @DateFrom and C.Type = 3 and A.status = 2
order by OrderStatusDesc
                                        ";
                                }
                                else
                                {
                                    cmd.CommandTimeout = 0;
                                    cmd.CommandText = @"
                                        Declare @EndDayTrailsPK int
                                        Declare @MaxDateEndDayFP datetime

                                        --Select @EndDayTrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where ValueDate = dbo.FWorkingDay(@DateFrom,-1)
                                        --and status = 2

                                        select @EndDayTrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                                        where ValueDate = 
                                        (
                                        select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @DateFrom and FundPK = @FundPK
                                        )
                                        and status = 2 and FundPK = @FundPK
 
 
 
                                        select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc, 
                                        case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                                        cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,
                                        CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,    
                                        CP.Name CounterpartName,    
                                        TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,
                                        MV2.DescOne BoardTypeDesc
                                        ,InvestmentPK,DealingPK,SettlementPK,SelectedInvestment,SelectedDealing,SelectedSettlement,TP.HistoryPK,StatusInvestment,StatusDealing,StatusSettlement,TP.Notes,ValueDate
                                        ,TP.PeriodPK,TP.Category,InstructionDate,Reference,TP.InstrumentTypePK,TrxType,TrxTypeID,TP.CounterpartPK,TP.InstrumentPK,TP.FundPK	
                                        ,TP.FundCashRefPK,OrderPrice,Lot,TP.LotInShare,RangePrice,AcqPrice,Volume,Amount,TP.InterestPercent,BreakInterestPercent
                                        ,AccruedInterest,DoneAccruedInterest,TP.LastCouponDate,TP.NextCouponDate,TP.MaturityDate,SettlementDate,AcqDate,InvestmentNotes,DoneLot,DoneVolume
                                        ,DonePrice,DoneAmount,Tenor,CommissionPercent,LevyPercent,KPEIPercent,VATPercent,WHTPercent,OTCPercent,IncomeTaxSellPercent
                                        ,IncomeTaxInterestPercent,IncomeTaxGainPercent,CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,IncomeTaxInterestAmount
                                        ,IncomeTaxGainAmount,TotalAmount,CurrencyRate,AcqPrice1,AcqDate1,AcqPrice2,AcqDate2,AcqPrice3,AcqDate3,AcqPrice4
                                        ,AcqDate4,AcqPrice5,AcqDate5,SettlementMode,BoardType,OrderStatus,Posted,PostedBy,PostedTime,Revised,RevisedBy,RevisedTime	
                                        ,TP.EntryUsersID,TP.EntryTime,TP.UpdateUsersID,TP.UpdateTime,TP.ApprovedUsersID,TP.ApprovedTime,TP.VoidUsersID,TP.VoidTime
                                        ,EntryDealingID,EntryDealingTime,UpdateDealingID,UpdateDealingTime,ApprovedDealingID,ApprovedDealingTime,VoidDealingID,VoidDealingTime
                                        ,EntrySettlementID,EntrySettlementTime,UpdateSettlementID,UpdateSettlementTime,ApprovedSettlementID,ApprovedSettlementTime,VoidSettlementID,VoidSettlementTime
                                        ,TP.DBUserID,TP.DBTerminalID,TP.LastUpdate,TP.LastUpdateDB,I.BankPK,AcqVolume,AcqVolume1,AcqVolume2,AcqVolume3,AcqVolume4,AcqVolume5,AcqPrice6,AcqDate6,AcqVolume6
                                        ,AcqPrice7,AcqDate7,AcqVolume7,AcqPrice8,AcqDate8,AcqVolume8,AcqPrice9,AcqDate9,AcqVolume9,TP.TaxExpensePercent,1 MarketPK, M.ID MarketID
                                        ,Tp.BankBranchPK,Tp.InterestDaysType,Tp.InterestPaymentType,Tp.PaymentModeOnMaturity,Tp.YieldPercent,Tp.BitIsRounding,Tp.AccruedHoldingAmount,TP.TrxBuy, Tp.BitBreakable, Tp.CrossFundFromPK,Z.ID CrossFundFromID,TP.BitForeignTrx

 
                                        from Investment TP left join        
                                        Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join        
                                        Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join        
                                        Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join        
                                        Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join    
                                        FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join    
                                                InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                                        MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                                        MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join     
                                        MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join
                                        Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join 
                                        Market M on TP.MarketPK = M.MarketPK and M.status = 2      
                                        where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo  and IT.Type = 3
                                        " + _paramFund + @"   and TP.InvestmentNotes  <> 'Reject By Amend' 
                                        and TP.InvestmentPK <> 0 
  
                                        UNION ALL

                                        Select 'VIEW ONLY','','',A.FundID,'','',A.InstrumentID,B.name,'','','','','','','',''
                                        ,0,0,0,0,0,0,0,0,0,0,'',@DateFrom
                                        ,0,'',@datefrom,'',	3,0,'',0,A.InstrumentPK,A.FundPK
                                        ,0,0,0,0,'',0,A.Balance,A.Balance,B.InterestPercent,0
                                       ,0,0,'','','',A.AcqDate SettlementDate,'','',0,0
                                        ,0,0,0,0,0,0,0,0,0,0
                                        ,0,0,0,0,0,0,0,0,0,0
                                        ,0,0,0,0,'',0,'',0,'',0
                                        ,'',0,'',0,0,'',0,'','',0,'',''
                                        ,'','','','','','','','','','','','','','','','','',''
                                        ,'','','','','','','','','','',0,0,0,0,0,0,0
                                        ,0,'',0,0,'',0,0,'',0,0,'',0,A.TaxExpensePercent,1,MR.ID
                                        ,0,0,0,0,0,0,0,0,0,0,'',0

                                        from FundPosition A
                                        left join instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                                        left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
                                        left join Fund CR on A.FundPK = CR.FundPK and CR.status = 2
                                        left join Market MR on A.MarketPK = MR.MarketPK and MR.Status = 2
                                        where TrailsPK = @EndDayTrailsPK " + _paramFund + @"
                                        and A.MaturityDate = @DateFrom and C.Type = 3 and A.status = 2
                                        order by OrderStatusDesc
                                        ";
                                }


                            }

                            else if (_instrumentType == 2)
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join   
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join  
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' and IT.Type in (2,5,14)
                             " + _paramFund + @"
                             order by OrderStatusDesc  ";

                            }

                            else if (_instrumentType == 6)
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join    
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join   
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' and IT.Type = 4
                             " + _paramFund + @"
                             order by OrderStatusDesc  ";

                            }

                            else
                            {
                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                             select case when TP.statusInvestment=1 then 'PENDING'  else Case When TP.statusInvestment = 2  and (TP.statusDealing = 3 or TP.statusSettlement = 3) then 'REJECT'  else Case When TP.statusInvestment = 2  and TP.statusDealing <> 3 then 'APPROVED' else Case when TP.statusInvestment = 3 then 'VOID' else 'WAITING' END END END END StatusDesc,  
                             case when TP.OrderStatus  = 'O' then '3.OPEN' else case when TP.OrderStatus  = 'P' then '5.PARTIAL' else case when TP.OrderStatus  = 'M' then '4.MATCH' else case when TP.OrderStatus  = 'R' then '6.REJECT' else case when TP.StatusInvestment  = 2 then '2.APPROVED' else '1.PENDING' END END END END END OrderStatusDesc, 
                             cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,CR.ID FundID,P.ID PeriodID,MV.DescTwo InstrumentTypeID,I.ID InstrumentID,I.Name InstrumentName,CP.ID CounterpartID,  
                             CP.Name CounterpartName,  
                             TP.TrxTypeID,CR.Name FundName,FCR.ID FundCashRefID,FCR.Name FundCashRefName,MV1.Descone SettlementModeDesc,MV2.DescOne BoardTypeDesc,M.ID MarketID, 
                             I.CurrencyPK,C.ID CurrencyID ,I.BankPK ,M.ID MarketID,Z.ID CrossFundFromID,TP.* from Investment TP left join      
                             Period P on TP.PeriodPK = P.PeriodPK and P.Status = 2 left join      
                             Instrument I on TP.InstrumentPK = I.InstrumentPK and I.Status = 2 left join  Currency C on I.CurrencyPK = C.CurrencyPK and C.Status = 2 left join     
                             Counterpart CP on TP.CounterpartPK = CP.CounterpartPK and CP.Status = 2 left join      
                             Fund CR on TP.FundPK = CR.FundPK and CR.Status = 2  left join  
                             FundCashRef FCR on TP.FundCashRefPK = FCR.FundCashRefPK and FCR.Status = 2  left join  
                             InstrumentType IT on TP.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 left join
                             MasterValue MV1 on TP.SettlementMode = MV1.Code and MV1.ID ='SettlementMode' and MV1.Status = 2 left join      
                             MasterValue MV on IT.Type = MV.Code and MV.Status = 2 and MV.ID = 'InstrumentType'  left join   
                             MasterValue MV2 on TP.BoardType = MV2.Code and MV2.Status = 2 and MV2.ID = 'BoardType' left join 
                             Fund Z on TP.CrossFundFromPK = Z.FundPK and Z.Status = 2  left join     
                             Market M on TP.MarketPK = M.MarketPK and M.status = 2   
                             where TP.TrxType = 2 and   TP.ValueDate between @DateFrom and @DateTo    
                             and TP.InvestmentNotes <> 'Reject By Amend' and IT.Type = 1
                             " + _paramFund + @"
                             order by RefNo  ";

                            }
                        }

                        cmd.Parameters.AddWithValue("@Status", _status);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        if (_instrumentType != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _instrumentType);
                        }
                        cmd.Parameters.AddWithValue("@FundPK", _fundID);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Investment.Add(setInvestment(dr));
                                }
                            }
                            return L_Investment;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }




        public string ImportOmsEquityTemp(string _fileSource, string _userID, string _valueDate)
        {
            string _msg = string.Empty;
            DateTime _now = DateTime.Now;
            try
            {
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = "truncate table dbo.OmsEquityImportTemp";
                        cmd2.ExecuteNonQuery();
                    }
                }

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.OmsEquityImportTemp";
                    bulkCopy.WriteToServer(CreateDataTableFromOMSEquityTempExcelFile(_fileSource));
                }

                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        // logic Checks
                        // 1. Instrument sudah ada atau belum di investment sesuai valudate
                        // 2. instrument sudah ada atau belum di master instrument
                        // 3. check enddaytrails fund portfolio di hari itu uda ada apa belum
                        // 4. check available cash
                        // 5. check price exposure
                        // 6. 
                        cmd2.CommandText =
                            @"
                                --declare @ValueDate		date,
                                --		@UsersID		nvarchar(100),
                                --		@LastUpdate		datetime

                                --	set @ValueDate		= '01/05/18'
                                --	set @UsersID		= 'aming'
                                --	set @LastUpdate		= '01/05/18'
Declare @CurReference nvarchar(100)  
Declare @PK int    
Declare @CFundID nvarchar(100)
	
	           
declare @success	int,
@msg		nvarchar(max)

set @success	= 1
set @msg		= ''


if exists (select * from OmsEquityImportTemp where BuySell <> 'B/S' and InstrumentID  <> '')
begin
-- Cek Data Import
--if not exists (
--select *
--from Investment
--where StatusInvestment in (1,2) and ValueDate = @ValueDate
--and InstrumentPK in (
--	select distinct b.InstrumentPK
--	from OmsEquityImportTemp a
--		left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
--	where a.BuySell <> 'B/S' and a.InstrumentID <> ''
--)
--)
begin
-- Cek Master Instrument
if not exists (
select distinct InstrumentID
from OmsEquityImportTemp 
where BuySell <> 'B/S' and InstrumentID not in (select distinct ID from Instrument where [Status] = 2) and InstrumentID <> ''
)
begin
	begin transaction

	declare @PeriodPK		int,
			@Type			nvarchar(100),
			@LastNo			int

	declare @MaxInvestmentPK		bigint,
			@CInstrumentPK			int,
			@CInstrumentTypePK		int,
			@CFundPK				int,
			@CMarketPK				int,
			@CLotInShare			numeric(18,4),
			@CBuySell				nvarchar(20),
			@CInstrumentID			nvarchar(100),
			@CPrice					numeric(22,6),
			@CLot					numeric(22,4),
			@CVolume					numeric(22,4),
			@CAmount				numeric(22,4),
			@CBitContinueSave		bit
		
	select @PeriodPK = PeriodPK 
	from Period 
	where @ValueDate between DateFrom and DateTo and [Status] = 2

		set @Type	= 'INV'
		set @LastNo	= 0

	declare @Cp1 nvarchar(100), @Cp2 nvarchar(100), @Cp3 nvarchar(100), @Cp4 nvarchar(100), @Cp5 nvarchar(100),
			@Cp6 nvarchar(100), @Cp7 nvarchar(100), @Cp8 nvarchar(100), @Cp9 nvarchar(100), @Cp10 nvarchar(100),
			@Cp11 nvarchar(100), @Cp12 nvarchar(100), @Cp13 nvarchar(100), @Cp14 nvarchar(100), @Cp15 nvarchar(100), @Cp16 nvarchar(100)
												
	declare @BitOMSEndDayTrailsFundPortfolio	bit,
			@BitAvailableCash					bit,
			@MinPrice							numeric(18,4),
			@MaxPrice							numeric(18,4),
			@Validate							bit,
			@ExposureType						nvarchar(100),
			@ExposureID							nvarchar(100),
			@AlertExposure						int,
			@ExposurePercent					numeric(18,4),
			@MaxExposurePercent					numeric(18,4),
			@MinExposurePercent					numeric(18,4),
			@TrxBuy								int,
			@TrxBuyType							nvarchar(50),
			@MethodType							int,
			@BitAvailableInstrument				bit

	declare @LastRow int
		set @LastRow = 0

	declare curImport cursor for
		select top 1 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16 
		from OmsEquityImportTemp 
		where BuySell = 'B/S' and InstrumentID <> ''
	open curImport

	fetch next from curImport
	into @Cp1, @Cp2, @Cp3, @Cp4, @Cp5, @Cp6, @Cp7, @Cp8, @Cp9, @Cp10, @Cp11, @Cp12, @Cp13, @Cp14, @Cp15, @Cp16

	while @@fetch_status = 0  

	begin  
		if @Cp1 <> 'Spare Fund' and isnull(@Cp1, '') <> '' and len(@Cp1) <> 0
		begin
			declare curCp1 Cursor For
											
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F1, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F1, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F1, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp1 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F1 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp1

			fetch next from curCp1   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 11
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 12
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 13
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)
														
								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
									set @success	= 14
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end
														
								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
										
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 15
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 16
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 17
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
								--select @LastNo = isnull(max([No]) , 0) + 1
								--from CashierReference 
								--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp1   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp1
			deallocate curCp1
		end
			
		if @Cp2 <> 'Spare Fund' and isnull(@Cp2, '') <> '' and len(@Cp2) <> 0
		
		begin
			declare curCp2 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F2, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F2, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F2, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp2 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F2 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp2

			fetch next from curCp2   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 21
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 22
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 23
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 24
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate
									
									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
								        --from CashierReference 
								        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END	

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 25
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 26
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 27
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
								--select @LastNo = isnull(max([No]) , 0) + 1
								--from CashierReference 
								--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END	
			
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp2   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp2
			deallocate curCp2
		end
					
		if @Cp3 <> 'Spare Fund' and isnull(@Cp3, '') <> '' and len(@Cp3) <> 0
		begin
			declare curCp3 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F3, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F3, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F3, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp3 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F3 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp3

			fetch next from curCp3   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 31
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 32
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 33
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								
									set @success	= 34
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
								        --from CashierReference 
								        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END	
													
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 35
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 36
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 37
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
								--from CashierReference 
								--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END	
													
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp3   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp3
			deallocate curCp3
		end
					
		if @Cp4 <> 'Spare Fund' and isnull(@Cp4, '') <> '' and len(@Cp4) <> 0
		begin
			declare curCp4 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F4, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F4, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F4, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp4 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F4 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp4

			fetch next from curCp4   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END		

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp4   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp4
			deallocate curCp4
		end

		if @Cp5 <> 'Spare Fund' and isnull(@Cp5, '') <> '' and len(@Cp5) <> 0
		begin
			declare curCp5 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F5, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F5, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F5, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp5 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F5 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp5

			fetch next from curCp5   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
							    --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp5   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp5
			deallocate curCp5
		end

		if @Cp6 <> 'Spare Fund' and isnull(@Cp6, '') <> '' and len(@Cp6) <> 0
		begin
			declare curCp6 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F6, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F6, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F6, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp6 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F6 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp6

			fetch next from curCp6   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
								--select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
									
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp6   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp6
			deallocate curCp6
		end

		if @Cp7 <> 'Spare Fund' and isnull(@Cp7, '') <> '' and len(@Cp7) <> 0
		begin
			declare curCp7 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F7, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F7, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F7, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp7 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F7 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp7

			fetch next from curCp7   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
		                                --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
	
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
													
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									cast(@LastNo as nvarchar(10)) + '/' + @Type + '/' + replace(right(convert(nvarchar(8), @ValueDate, 3), 5), '/', '') as Reference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp7   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp7
			deallocate curCp7
		end

		if @Cp8 <> 'Spare Fund' and isnull(@Cp8, '') <> '' and len(@Cp8) <> 0
		begin
			declare curCp8 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F8, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F8, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F8, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp8 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F8 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp8

			fetch next from curCp8   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
				
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
				
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp8   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp8
			deallocate curCp8
		end

		if @Cp9 <> 'Spare Fund' and isnull(@Cp9, '') <> '' and len(@Cp9) <> 0
		begin
			declare curCp9 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F9, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F9, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F9, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp9 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F9 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp9

			fetch next from curCp9   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
													
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp9   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp9
			deallocate curCp9
		end

		if @Cp10 <> 'Spare Fund' and isnull(@Cp10, '') <> '' and len(@Cp10) <> 0
		begin
			declare curCp10 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F10, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F10, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F10, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp10 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F10 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp10

			fetch next from curCp10   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                 set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                          set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp10   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp10
			deallocate curCp10
		end

		if @Cp11 <> 'Spare Fund' and isnull(@Cp11, '') <> '' and len(@Cp11) <> 0
		begin
			declare curCp11 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F11, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F11, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F11, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp11 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F11 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp11

			fetch next from curCp11   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp11   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp11
			deallocate curCp11
		end

		if @Cp12 <> 'Spare Fund' and isnull(@Cp12, '') <> '' and len(@Cp12) <> 0
		begin
			declare curCp12 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F12, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F12, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F12, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp12 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F12 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp12

			fetch next from curCp12   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
													
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp12   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp12
			deallocate curCp12
		end

		if @Cp13 <> 'Spare Fund' and isnull(@Cp13, '') <> '' and len(@Cp13) <> 0
		begin
			declare curCp13 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F13, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F13, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F13, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp13 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F13 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp13

			fetch next from curCp13   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp13   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp13
			deallocate curCp13
		end

		if @Cp14 <> 'Spare Fund' and isnull(@Cp14, '') <> '' and len(@Cp14) <> 0
		begin
			declare curCp14 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F14, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F14, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F14, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp14 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F14 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp14

			fetch next from curCp14   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                       set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                          set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
				
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp14   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp14
			deallocate curCp14
		end

		if @Cp15 <> 'Spare Fund' and isnull(@Cp15, '') <> '' and len(@Cp15) <> 0
		begin
			declare curCp15 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F15, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F15, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F15, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp15 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F15 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp15

			fetch next from curCp15   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                     set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                       set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp15   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp15
			deallocate curCp15
		end

		if @Cp16 <> 'Spare Fund' and isnull(@Cp16, '') <> '' and len(@Cp16) <> 0
		begin
			declare curCp16 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
				from OmsEquityImportTemp a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp16 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp16

			fetch next from curCp16   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = [dbo].[FCheckAvailableCash] (@ValueDate, @CFundPK, @CAmount)
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 0
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = [dbo].[FCheckOMSEndDayTrailsFundPortfolio] (@ValueDate,@CFundPK)
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 0
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 0
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = [dbo].[FCheckAvailableInstrument] (@ValueDate, @CInstrumentPK, @CFundPK, @CVolume, @TrxBuy, @TrxBuyType, @CAmount, @MethodType)
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 0
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp16   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp16
			deallocate curCp16
		end

		set @LastRow = @MaxInvestmentPK

		fetch next from curImport 
		into @Cp1, @Cp2, @Cp3, @Cp4, @Cp5, @Cp6, @Cp7, @Cp8, @Cp9, @Cp10, @Cp11, @Cp12, @Cp13, @Cp14, @Cp15, @Cp16
	end   
	close curImport
	deallocate curImport

	--if @LastRow > 0
	--begin
	--	update CashierReference set 
	--		Reference = cast(@LastRow as nvarchar(10)) + '/' + @Type  + '/' + replace(right(convert(nvarchar(8), @ValueDate, 3), 5) ,'/',''), 
	--		[No] = @LastNo + @LastRow 
	--	where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)    
	--end
if(@success < 10)
begin
	commit transaction
	set @msg = 'Import OMS Equity Success'
end
Else
begin
	rollback transaction
end
end
else
begin
	set @msg = 'Check Master Instrument'
end
end
--else
--begin
--	set @msg = 'Already Has this investment for this day'
--end
end
select @msg as ResultMsg


                            ";
                        cmd2.CommandTimeout = 0;
                        cmd2.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd2.Parameters.AddWithValue("@UsersID", _userID);
                        cmd2.Parameters.AddWithValue("@LastUpdate", _now);
                        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                        {
                            if (!dr2.HasRows)
                            {
                                _msg = "Import OMS Equity Canceled, import data not found!";
                            }
                            else
                            {
                                dr2.Read();
                                _msg = Convert.ToString(dr2["ResultMsg"]);
                            }
                        }
                    }
                }

                return _msg;
            }
            catch (Exception err)
            {
                return "Error, Please Check Data Import! ";
                throw err;
            }
        }



        private DataTable CreateDataTableFromDealingEquityTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CounterpartID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BuySell";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Price";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F1";
                    dc.Unique = false;
                    dt.Columns.Add(dc);


                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F2";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F3";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F4";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F5";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F6";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F7";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F8";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F9";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F10";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F11";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F12";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F13";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F14";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F15";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F16";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    using (OleDbConnection odConnection = new OleDbConnection(Tools.ConStringExcel2007(_path)))
                    {
                        odConnection.Open();
                        using (OleDbCommand odCmd = odConnection.CreateCommand())
                        {
                            odCmd.CommandText = "SELECT * FROM [FormatLoad$]";
                            using (OleDbDataReader odRdr = odCmd.ExecuteReader())
                            {
                                if (odRdr.HasRows)
                                {
                                    odRdr.Read();

                                    int _no = 1;
                                    string _val = string.Empty;
                                    do
                                    {
                                        dr = dt.NewRow();
                                        if (_no == 1) { _val = "Spare Fund"; } else { _val = "0"; }

                                        dr["CounterpartID"] = Convert.ToString(odRdr[0]);
                                        dr["BuySell"] = Convert.ToString(odRdr[1]);
                                        dr["InstrumentID"] = Convert.ToString(odRdr[2]);
                                        dr["Price"] = Convert.ToString(odRdr[3]);
                                        dr["F1"] = odRdr[4].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[4]);
                                        dr["F2"] = odRdr[5].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[5]);
                                        dr["F3"] = odRdr[6].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[6]);
                                        dr["F4"] = odRdr[7].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[7]);
                                        dr["F5"] = odRdr[8].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[8]);
                                        dr["F6"] = odRdr[9].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[9]);
                                        dr["F7"] = odRdr[10].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[10]);
                                        dr["F8"] = odRdr[11].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[11]);
                                        dr["F9"] = odRdr[12].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[12]);
                                        dr["F10"] = odRdr[13].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[13]);
                                        dr["F11"] = odRdr[14].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[14]);
                                        dr["F12"] = odRdr[15].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[15]);
                                        dr["F13"] = odRdr[16].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[16]);
                                        dr["F14"] = odRdr[17].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[17]);
                                        dr["F15"] = odRdr[18].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[18]);
                                        dr["F16"] = odRdr[19].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[19]);

                                        if (
                                            dr["CounterpartID"].Equals(DBNull.Value) != true &&
                                            dr["BuySell"].Equals(DBNull.Value) != true &&
                                            dr["InstrumentID"].Equals(DBNull.Value) != true &&
                                            dr["Price"].Equals(DBNull.Value) != true
                                        ) { dt.Rows.Add(dr); _no++; }
                                    } while (odRdr.Read());
                                }
                            }
                        }
                        odConnection.Close();
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromOMSEquityTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BuySell";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Price";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F1";
                    dc.Unique = false;
                    dt.Columns.Add(dc);


                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F2";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F3";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F4";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F5";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F6";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F7";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F8";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F9";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F10";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F11";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F12";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F13";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F14";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F15";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F16";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    using (OleDbConnection odConnection = new OleDbConnection(Tools.ConStringExcel2007(_path)))
                    {
                        odConnection.Open();
                        using (OleDbCommand odCmd = odConnection.CreateCommand())
                        {
                            odCmd.CommandText = "SELECT * FROM [FormatLoad$]";
                            using (OleDbDataReader odRdr = odCmd.ExecuteReader())
                            {
                                if (odRdr.HasRows)
                                {
                                    odRdr.Read();

                                    int _no = 1;
                                    string _val = string.Empty;
                                    do
                                    {
                                        dr = dt.NewRow();
                                        if (_no == 1) { _val = "Spare Fund"; } else { _val = "0"; }

                                        dr["BuySell"] = Convert.ToString(odRdr[0]);
                                        dr["InstrumentID"] = Convert.ToString(odRdr[1]);
                                        dr["Price"] = Convert.ToString(odRdr[2]);
                                        dr["F1"] = odRdr[3].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[3]);
                                        dr["F2"] = odRdr[4].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[4]);
                                        dr["F3"] = odRdr[5].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[5]);
                                        dr["F4"] = odRdr[6].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[6]);
                                        dr["F5"] = odRdr[7].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[7]);
                                        dr["F6"] = odRdr[8].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[8]);
                                        dr["F7"] = odRdr[9].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[9]);
                                        dr["F8"] = odRdr[10].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[10]);
                                        dr["F9"] = odRdr[11].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[11]);
                                        dr["F10"] = odRdr[12].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[12]);
                                        dr["F11"] = odRdr[13].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[13]);
                                        dr["F12"] = odRdr[14].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[14]);
                                        dr["F13"] = odRdr[15].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[15]);
                                        dr["F14"] = odRdr[16].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[16]);
                                        dr["F15"] = odRdr[17].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[17]);
                                        dr["F16"] = odRdr[18].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[18]);

                                        if (
                                            dr["BuySell"].Equals(DBNull.Value) != true &&
                                            dr["InstrumentID"].Equals(DBNull.Value) != true &&
                                            dr["Price"].Equals(DBNull.Value) != true
                                        ) { dt.Rows.Add(dr); _no++; }
                                    } while (odRdr.Read());
                                }
                            }
                        }
                        odConnection.Close();
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public bool CheckOMS_EndDayTrailsFundPortfolio(DateTime _valueDate, int _fundPK)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                        Declare @MaxDateEndDayFP datetime
                        select @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                        where ValueDate = 
                        (
                        select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate <= @ValueDate and FundPK = @FundPk
                        )
                        and status = 2 and FundPK = @FundPK

                        IF (@ValueDate = @MaxDateEndDayFP)
                        BEGIN 
	                        select 1 Result
                        END
                        ELSE 
                        BEGIN
	                        select 0 Result
                        END
                                  ";

                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToBoolean(dr["Result"]);

                            }
                            return false;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public FundExposure Validate_CheckExposure(DateTime _valuedate, int _instrumentPK, int _fundPK, decimal _amount)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
               

                        
Declare @TrailsPK int
Declare @MaxDateEndDayFP datetime
Select @TrailsPK = EndDayTrailsFundPortfolioPK , @MaxDateEndDayFP = ValueDate From 
endDayTrailsFundPortfolio where 
valuedate = 
(
	Select max(ValueDate) from endDayTrailsFundPortfolio where
	valuedate < @Date  and status = 2 and FundPK = @FundPK
)
and status = 2 and FundPK = @FundPK






Create table #Exposure
(
FundID nvarchar(100) COLLATE DATABASE_DEFAULT,
ExposureID nvarchar(100) COLLATE DATABASE_DEFAULT,
ExposureType nvarchar(100) COLLATE DATABASE_DEFAULT,
MarketValue numeric(22,4),
ExposurePercent numeric(18,8),
MinExposurePercent numeric(18,8),
MaxExposurePercent numeric(18,8),
AlertMinExposure bit,
AlertMaxExposure bit,
WarningMinExposure bit,
WarningMaxExposure bit
	
)

Create table #OMSEquityExposure
(
FundID nvarchar(100) COLLATE DATABASE_DEFAULT,
ExposureType nvarchar(100) COLLATE DATABASE_DEFAULT,
ExposureID nvarchar(100) COLLATE DATABASE_DEFAULT,
MarketValue numeric(22,4),
ExposurePercent numeric(18,8),
MinExposurePercent numeric(18,8),
MaxExposurePercent numeric(18,8),
WarningMinExposurePercent numeric(18,8),
WarningMaxExposurePercent numeric(18,8)
	
)
Declare @TotalMarketValue numeric(26,6)

select @TotalMarketValue = aum From closeNav
where Date = (
	 select max(date) from CloseNAV where date <@Date
	 and FundPK = @FundPK and status = 2
)
and FundPK = @FundPK
and status = 2 

set @TotalMarketValue = isnull(@TotalMarketValue,1) 

---------------------- EQUITY ALL CHECKING ------------------------


Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.ID,'EQUITY ALL',0,0,B.ID,C.MinExposurePercent,c.MaxExposurePercent,
c.WarningMinExposurePercent,c.WarningMaxExposurePercent From Fund A
left join Instrument B on B.InstrumentPK = @InstrumentPK and B.status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 5 and Status = 2 and FundPK = @FundPK  
)C on C.parameter = 0
left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
Where FundPK = @FundPK and A.status = 2 


---------------------- EQUITY PER SINGLE INSTRUMENT CHECKING ------------------------

Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.ID,'PER SINGLE INSTRUMENT EQUITY',0,0,B.ID,C.MinExposurePercent,c.MaxExposurePercent,
c.WarningMinExposurePercent,c.WarningMaxExposurePercent From Fund A
left join Instrument B on B.InstrumentPK = @InstrumentPK and B.status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 5 and Status = 2 and FundPK = @FundPK  and Parameter > 0
)C on C.parameter = @InstrumentPK
left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2 
Where FundPK = @FundPK and A.status = 2 



------------------------- INSTRUMENT TYPE CHECKING ---------------------------------

Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.ID,'INSTRUMENT TYPE',0,0,D.ID,C.MinExposurePercent,c.MaxExposurePercent,
c.WarningMinExposurePercent,c.WarningMaxExposurePercent From Fund A
left join Instrument B on B.InstrumentPK = @InstrumentPK and B.status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 4 and Status = 2 and FundPK = @FundPK 
)C on B.InstrumentTypePK = C.Parameter 
left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
Where FundPK = @FundPK and A.status = 2

------------------------- SECTOR ---------------------------------
Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.ID,'SECTOR',0,0,E.ID,C.MinExposurePercent,c.MaxExposurePercent,
c.WarningMinExposurePercent,c.WarningMaxExposurePercent From Fund A
left join Instrument B on B.InstrumentPK = @InstrumentPK and B.status = 2
left join SubSector D on B.SectorPK = D.SubSectorPK and D.status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 3 and Status = 2 and FundPK = @fundPK 
)C on D.SectorPK = C.Parameter 
Left join Sector E on D.SectorPK = E.SectorPK and E.status = 2
Where FundPK = @fundPK and A.status = 2

------------------------- INDEX ---------------------------------
Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.ID,'INDEX',0,0,E.ID,C.MinExposurePercent,c.MaxExposurePercent,
c.WarningMinExposurePercent,c.WarningMaxExposurePercent From Fund A
left join Instrument B on B.InstrumentPK = @InstrumentPK and B.status = 2
left join InstrumentIndex D on B.InstrumentPK = D.InstrumentPK and D.status = 2
left join [Index] E on D.IndexPK = E.IndexPK and E.status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 14 and Status = 2 and FundPK = @fundPK 
)C on E.IndexPK = C.Parameter 
Where FundPK = @fundPK and A.status = 2


--------------SYARIAH CHECKING----------------
IF EXISTS(Select * from fundExposure where FundPK = @FundPK and Type = 15 and status = 2)
BEGIN
if Not Exists(select * from instrumentSyariah where InstrumentPK = @InstrumentPK and status = 2)
BEGIN
Insert into #Exposure
(ExposureType,ExposureID,MaxExposurePercent,MinExposurePercent,MarketValue,ExposurePercent,AlertMinExposure,
AlertMaxExposure,WarningMinExposure,WarningMaxExposure) 
Select 'SYARIAH','SYARIAH',100,0,0,100,1,1,1,1
END
	
END


Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.ID,'SYARIAH',0,0,D.ID,C.MinExposurePercent,c.MaxExposurePercent,
c.WarningMinExposurePercent,c.WarningMaxExposurePercent From Fund A
left join Instrument B on B.InstrumentPK = @InstrumentPK and B.status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 13 and Status = 2 and FundPK = @FundPK 
)C on B.InstrumentTypePK = C.Parameter 
left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
Where FundPK = @FundPK and A.status = 2 




------------------------POSISI GET ANGKA DARI POSISI DAN MOVEMENT--------------------------------




Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.FundID,'PER SINGLE INSTRUMENT EQUITY' ExposureType,A.Balance * 
case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) 
else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End ,0 ExposurePercent, B.ID ExposureID,  
C.MinExposurePercent,c.MaxExposurePercent,c.WarningMinExposurePercent,c.WarningMaxExposurePercent
From FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.Status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 5 and Status = 2 and FundPK = @FundPK 
)C on C.Parameter = @InstrumentPK
where A.TrailsPK = @TrailsPK and FundPK = @FundPK and A.Status = 2 and F.Type = 1
and A.InstrumentPK = @InstrumentPK




Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'PER SINGLE INSTRUMENT EQUITY' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,B.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Left Join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.Status = 2
Inner Join
(

Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 5 and Status = 2 and FundPK = @FundPK 
)D on D.Parameter  = @InstrumentPK
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK and F.Type = 1
and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 and A.InstrumentPK = @InstrumentPK



Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.FundID,'EQUITY ALL' ExposureType,A.Balance * 
case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) 
else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End ,0 ExposurePercent, B.ID ExposureID,  
C.MinExposurePercent,c.MaxExposurePercent,c.WarningMinExposurePercent,c.WarningMaxExposurePercent
From FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.Status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 5 and Status = 2 and FundPK = @FundPK and Parameter = 0
)C on C.Parameter = 0
where A.TrailsPK = @TrailsPK and FundPK = @FundPK and A.Status = 2 and F.Type = 1
and A.InstrumentPK = @InstrumentPK




Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'EQUITY ALL' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,B.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Left Join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.Status = 2
Inner Join
(

Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 5 and Status = 2 and FundPK = @FundPK and Parameter = 0
)D on D.Parameter = 0
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK and F.Type = 1
and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 and A.InstrumentPK = @InstrumentPK



Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.FundID,'INSTRUMENT TYPE' ExposureType,A.Balance * 
case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) 
else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End ,0 ExposurePercent, F.ID ExposureID,  
C.MinExposurePercent,c.MaxExposurePercent,c.WarningMinExposurePercent,c.WarningMaxExposurePercent
From FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.Status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 4 and Status = 2 and FundPK = @FundPK 
)C on F.Type = C.Parameter
where A.TrailsPK = @TrailsPK and FundPK = @FundPK and A.Status = 2 


Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'INSTRUMENT TYPE' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,F.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Left Join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.Status = 2
Inner Join
(

Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 4 and Status = 2 and FundPK = @FundPK
)D on F.Type = D.parameter
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK and F.Type = 1
and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3


Declare @PSectorPK int
Select @PSectorPK = B.SectorPK from Instrument A 
left join SubSector B on A.SectorPK = B.SubSectorPK and B.status = 2
where A.InstrumentPK = @InstrumentPK

Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.FundID,'SECTOR' ExposureType,A.Balance * 
case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) 
else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End ,0 ExposurePercent, D.ID ExposureID,  
C.MinExposurePercent,c.MaxExposurePercent,c.WarningMinExposurePercent,c.WarningMaxExposurePercent
From FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
left join SubSector E on E.SubSectorPK = B.SectorPK and E.Status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 3 and Status = 2 and FundPK = @FundPK
)C on E.SectorPK = C.Parameter
left join Sector D on E.SectorPK = D.SectorPK and D.Status = 2
left join InstrumentType H on B.InstrumentTypePK = H.InstrumentTypePK and H.Status = 2
where A.TrailsPK = @TrailsPK and FundPK = @FundPK and A.Status = 2 and H.Type  = 1 
and E.SectorPK = @PSectorPK




Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'SECTOR' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,F.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
left join SubSector E on B.SectorPK = E.SubSectorPK and E.Status = 2
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Inner Join
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 3 and Status = 2 and FundPK = @FundPK
)D on E.SectorPK = D.Parameter
left join Sector F on F.SectorPK = E.SectorPK and F.Status = 2
left join InstrumentType H on B.InstrumentTypePK = H.InstrumentTypePK and H.Status = 2
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK  and A.StatusDealing <> 3 and A.StatusSettlement <> 3 and A.StatusInvestment <> 3 and H.Type = 1
and E.SectorPK = @PSectorPK


--Declare @PIndexPK int
--Select @PIndexPK = IndexPK from InstrumentIndex 
--	where Date = (
--		select max(date) from InstrumentIndex where status = 2 and InstrumentPK = @InstrumentPK and date <= @Date
--	) and status = 2 and InstrumentPK = @InstrumentPK

Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select A.FundID,'INDEX' ExposureType,A.Balance * 
case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) 
else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End ,0 ExposurePercent, E.ID ExposureID,  
C.MinExposurePercent,c.MaxExposurePercent,c.WarningMinExposurePercent,c.WarningMaxExposurePercent
From FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
left join (
	Select InstrumentPK, IndexPK from InstrumentIndex 
	where Date = (
		select max(date) from InstrumentIndex where status = 2 and InstrumentPK = @InstrumentPK and date <= @Date
	) and status = 2 --and InstrumentPK = @InstrumentPK
	
)D on D.InstrumentPK = A.InstrumentPK
left join [Index] E on D.IndexPK = E.IndexPK and E.Status = 2
inner join 
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 14 and Status = 2 and FundPK = @FundPK
)C on E.IndexPK = C.Parameter
left join InstrumentType H on B.InstrumentTypePK = H.InstrumentTypePK and H.Status = 2
where A.TrailsPK = @TrailsPK and FundPK = @FundPK and A.Status = 2 and H.Type  = 1 




Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'INDEX' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,F.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
left join (
	Select InstrumentPK, IndexPK from InstrumentIndex 
	where Date = (
		select max(date) from InstrumentIndex where status = 2 and InstrumentPK = @InstrumentPK and date <= @Date
	) and status = 2 --and InstrumentPK = @InstrumentPK
	
)E on E.InstrumentPK = A.InstrumentPK
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Inner Join
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 14 and Status = 2 and FundPK = @FundPK
)D on E.IndexPK = D.Parameter
left join [Index] F on E.IndexPK = F.indexPK and F.status = 2
left join InstrumentType H on B.InstrumentTypePK = H.InstrumentTypePK and H.Status = 2
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK  and A.StatusDealing <> 3 and A.StatusSettlement <> 3 and A.StatusInvestment <> 3 and H.Type = 1





-- ISSUER

Declare @PIssuerPK int
Select @PIssuerPK = IssuerPK from Instrument 
where InstrumentPK = @InstrumentPK and status in (1,2)


Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
select B.ID,'ISSUER',sum(isnull(A.MarketValue,0)),sum(isnull(A.NAVPercent,0)),C.ID,D.MinExposurePercent,
D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent from
(
select C.IssuerPK,A.FundPK,isnull(sum(A.MarketValue),0) MarketValue,case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End NAVPercent   from FundPosition A 
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
left join CloseNav D on  A.FundPK = D.FundPK and D.status = 2 
left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2 
where A.TrailsPK = @TrailsPK and A.status = 2 and C.InstrumentTypePK <> 5 and isnull(C.IssuerPK,0) <> 0 and C.IssuerPK = @PIssuerPK
and A.FundPK = @FundPK and D.Date in
(
	select max(Date) from CloseNAV where status = 2 and Date <= @Date and FundPK = @FundPK
)
group by C.IssuerPK,A.InstrumentPK,A.FundPK,D.AUM
having case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End > 0
UNION ALL
select H.IssuerPK,A.FundPK,isnull(sum(A.MarketValue),0) MarketValue,case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End NAVPercent   from FundPosition A 
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
left join CloseNav D on A.FundPK = D.FundPK and D.status = 2 
left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2 
left join BankBranch G on A.BankbranchPK = G.BankBranchPK and G.status in (1,2)
left join Bank H on G.BankPK = H.BankPK and H.status in (1,2)
where A.status = 2 and C.InstrumentTypePK = 5 and isnull(H.IssuerPK,0) <> 0  and H.IssuerPK = @PIssuerPK
and A.FundPK = @FundPK  and D.Date in
(
	select max(Date) from CloseNAV where status = 2 and Date <= @Date and FundPK = @FundPK
)
group by H.IssuerPK,A.InstrumentPK,A.FundPK,D.AUM
having case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End > 0
) A 
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
left join Issuer C on A.IssuerPK = C.IssuerPK and C.Status in (1,2)
Inner Join
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 2 and Status = 2 and FundPK = @FundPK and Parameter = 0
)D on D.Parameter = 0
group by B.ID,C.ID,MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent
order by C.ID


Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'ISSUER' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,F.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Inner Join
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 2 and Status = 2 and FundPK = @FundPK and Parameter = 0
)D on D.Parameter = 0
left join Issuer F on B.IssuerPK = F.IssuerPK and F.status = 2
left join InstrumentType H on B.InstrumentTypePK = H.InstrumentTypePK and H.Status = 2
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK  and A.StatusDealing <> 3 and A.StatusSettlement <> 3 and A.StatusInvestment <> 3
and B.InstrumentTypePK <> 5 and isnull(F.IssuerPK,0) <> 0 and F.IssuerPK = @PIssuerPK


Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'ISSUER' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,I.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Inner Join
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 2 and Status = 2 and FundPK = @FundPK and Parameter = 0
)D on D.Parameter = 0
left join InstrumentType E on B.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2 
left join BankBranch G on A.BankbranchPK = G.BankBranchPK and G.status in (1,2)
left join Bank H on G.BankPK = H.BankPK and H.status in (1,2)
left join Issuer I on H.IssuerPK = I.IssuerPK and I.status = 2
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK  and A.StatusDealing <> 3 and A.StatusSettlement <> 3 and A.StatusInvestment <> 3
and E.InstrumentTypePK = 5 and isnull(H.IssuerPK,0) <> 0 and H.IssuerPK = @PIssuerPK







Declare @PHoldingPK int
Select @PHoldingPK = HoldingPK from Issuer 
where IssuerPK = @PIssuerPK and status in (1,2)



Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
select B.ID,'HOLDING',sum(isnull(A.MarketValue,0)),sum(isnull(A.NAVPercent,0)),C.ID,D.MinExposurePercent,
D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent from
(
select F.HoldingPK,A.FundPK,isnull(sum(A.MarketValue),0) MarketValue,case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End NAVPercent   from FundPosition A 
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
left join CloseNav D on  A.FundPK = D.FundPK and D.status = 2 
left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2 
left join Issuer F on C.IssuerPK = F.IssuerPK and F.Status = 2
where A.TrailsPK = @TrailsPK and A.status = 2 and C.InstrumentTypePK <> 5 and isnull(F.HoldingPK,0) <> 0 and F.HoldingPK = @PHoldingPK
and A.FundPK = @FundPK and D.Date in
(
	select max(Date) from CloseNAV where status = 2 and Date <= @Date and FundPK = @FundPK
)
group by F.HoldingPK,A.InstrumentPK,A.FundPK,D.AUM
having case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End > 0
UNION ALL
select F.HoldingPK,A.FundPK,isnull(sum(A.MarketValue),0) MarketValue,case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End NAVPercent   from FundPosition A 
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
left join CloseNav D on  A.FundPK = D.FundPK and D.status = 2 
left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2 
left join BankBranch G on A.BankbranchPK = G.BankBranchPK and G.status in (1,2)
left join Bank H on G.BankPK = H.BankPK and H.status in (1,2)
left join Issuer F on C.IssuerPK = F.IssuerPK and F.Status = 2
where A.status = 2 and C.InstrumentTypePK = 5 and isnull(F.HoldingPK,0) <> 0  and F.HoldingPK = @PHoldingPK
and A.FundPK = @FundPK and D.Date in
(
	select max(Date) from CloseNAV where status = 2 and Date <= @Date and FundPK = @FundPK
)
group by F.HoldingPK,A.InstrumentPK,A.FundPK,D.AUM
having case when isnull(D.AUM,0) = 0 then 0 else isnull(sum((A.MarketValue / 
case when D.AUM = 0 then 1 else isnull(D.AUM,1) End) * 100),0) End > 0
) A 
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
left join Holding C on A.HoldingPK = C.HoldingPK and C.Status in (1,2)
Inner Join
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 6 and Status = 2 and FundPK = @FundPK and Parameter = 0
)D on D.Parameter = 0
group by B.ID,C.ID,MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent
order by C.ID


Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'HOLDING' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,G.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Inner Join
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 6 and Status = 2 and FundPK = @FundPK and Parameter = 0
)D on D.Parameter = 0
left join Issuer F on B.IssuerPK = F.IssuerPK and F.status = 2
left join Holding G on F.HoldingPK = G.HoldingPK and G.status = 2
left join InstrumentType H on B.InstrumentTypePK = H.InstrumentTypePK and H.Status = 2
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK  and A.StatusDealing <> 3 and A.StatusSettlement <> 3 and A.StatusInvestment <> 3
and B.InstrumentTypePK <> 5 and isnull(F.IssuerPK,0) <> 0 and G.HoldingPK = @PHoldingPK


Insert into #OMSEquityExposure (FundID,ExposureType,MarketValue,ExposurePercent,ExposureID,
MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent)
Select C.ID,'HOLDING' ExposureType
,isnull((case when A.DoneVolume > 0 then A.DoneVolume  * case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 
	then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) 
		End else A.DoneAmount end),0)
,0,J.ID,D.MinExposurePercent,D.MaxExposurePercent,D.WarningMinExposurePercent,D.WarningMaxExposurePercent
From investment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
Left Join Fund C on A.FundPK = C.FundPk and C.status = 2
Inner Join
(
Select Parameter,MinExposurePercent,MaxExposurePercent, WarningMaxExposurePercent,WarningMinExposurePercent 
From FundExposure where Type = 6 and Status = 2 and FundPK = @FundPK and Parameter = 0
)D on D.Parameter = 0
left join InstrumentType E on B.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2 
left join BankBranch G on A.BankbranchPK = G.BankBranchPK and G.status in (1,2)
left join Bank H on G.BankPK = H.BankPK and H.status in (1,2)
left join Issuer I on H.IssuerPK = I.IssuerPK and I.status = 2
left join Holding J on I.HoldingPK = J.HoldingPK and J.status = 2
where A.ValueDate  > @MaxDateEndDayFP and A.ValueDate <= @Date and A.FundPK = @FundPK  and A.StatusDealing <> 3 and A.StatusSettlement <> 3 and A.StatusInvestment <> 3
and E.InstrumentTypePK = 5 and isnull(J.HoldingPK,0) <> 0 and J.HoldingPK = @PHoldingPK




Insert into #Exposure
(FundID,ExposureType,ExposureID,MaxExposurePercent,MinExposurePercent,MarketValue,ExposurePercent,AlertMinExposure,
AlertMaxExposure,WarningMinExposure,WarningMaxExposure)                     
Select FundID,ExposureType,
UPPER(ExposureID) ExposureID,MaxExposurePercent,MinExposurePercent,(sum(MarketValue) + @Amount) MarketValue, (sum(MarketValue)+@Amount)/ @TotalMarketValue * 100 ExposurePercent,
case when (isnull(sum(MarketValue),0) + @Amount)/ @TotalMarketValue * 100 <= MinExposurePercent then 1 else 0 end AlertMinExposure,
case when (isnull(sum(MarketValue),0) + @Amount)/ @TotalMarketValue * 100 >= MaxExposurePercent then 1 else 0 end AlertMaxExposure,
case when (isnull(sum(MarketValue),0) + @Amount)/ @TotalMarketValue * 100 <= WarningMinExposurePercent then 1 else 0 end WarningMinExposure,
case when (isnull(sum(MarketValue),0) + @Amount)/ @TotalMarketValue * 100 >= WarningMaxExposurePercent then 1 else 0 end WarningMaxExposure
From #OMSEquityExposure A 
left join Instrument B on A.ExposureID = B.ID and B.status  = 2
left join Fund C on A.FundID = C.ID and C.status  = 2
where 
--instrumentPK  =  @InstrumentPK and 
C.FundPK = @FundPK
Group by FundID,ExposureID,MinExposurePercent,MaxExposurePercent,WarningMinExposurePercent,WarningMaxExposurePercent,ExposureType
order by ExposureID 





select  FundID,ExposureType,ExposureID,Case when  WarningMaxExposure = 1 then 1 else case when AlertMaxExposure = 1 then 2
else Case when  WarningMinExposure = 1 then 3 else case when AlertMinExposure = 1  then 4 end end end end AlertExposure,ExposurePercent,MaxExposurePercent,MinExposurePercent,
CONVERT(varchar, CAST(MarketValue AS money), 1) MarketValue, CONVERT(varchar, CAST(@Amount AS money), 1) Amount from #Exposure 
where 
Case when  WarningMaxExposure = 1 then 1 else case when AlertMaxExposure = 1  then 2
else Case when  WarningMinExposure = 1 then 3 else case when AlertMinExposure = 1  then 4 end end end end > 0 and ExposureID not in ('G-BOND','C-BOND','DEP')
order by AlertExposure desc
                           ";

                        cmd.Parameters.AddWithValue("@date", _valuedate);
                        cmd.Parameters.AddWithValue("@instrumentPK", _instrumentPK);
                        cmd.Parameters.AddWithValue("@fundPK", _fundPK);
                        cmd.Parameters.AddWithValue("@Amount", _amount);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new FundExposure()
                                {
                                    FundID = dr["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["FundID"]),
                                    ExposureID = dr["ExposureID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["ExposureID"]),
                                    AlertExposure = dr["AlertExposure"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AlertExposure"]),
                                    ExposurePercent = dr["ExposurePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["ExposurePercent"]),
                                    MaxExposurePercent = dr["MaxExposurePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["MaxExposurePercent"]),
                                    MinExposurePercent = dr["MinExposurePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["MinExposurePercent"]),
                                    MarketValue = dr["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["MarketValue"]),
                                    Amount = dr["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Amount"]),
                                };
                            }
                            else
                            {
                                return new FundExposure()
                                {
                                    FundID = "",
                                    ExposureID = "",
                                    AlertExposure = 0,
                                    ExposurePercent = 0,
                                    MinExposurePercent = 0,
                                    MaxExposurePercent = 0,
                                    MarketValue = 0,
                                    Amount = 0
                                };
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public int Investment_ApproveDealingBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramFundA = "";
                        string _paramCounterpart = "";
                        string _paramCounterpartA = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";


                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " And InstrumentTypePK in (2,3,9,13,15)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " And InstrumentTypePK = @InstrumentTypePK ";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }
                        if (_investment.InstrumentTypePK == 1)
                        {
                            cmd.CommandText = @"
                            declare @InvestmentPK int
                            declare @DealingPK int
                            declare @HistoryPK int

                            declare @Comm numeric (22,4)
                            declare @Levy numeric (22,4)
                            declare @KPEI numeric (22,4)
                            declare @VAT numeric (22,4)
                            declare @WHT numeric (22,4)
                            declare @OTC numeric (22,4)
                            declare @TaxInterest numeric (22,4)
                            declare @TaxGain numeric (22,4)
                            declare @TaxSell numeric (22,4)
                            declare @TotalAmount numeric (22,4)

                            declare @FundCashRefPK int 
                            declare @SettlementPK int
                            declare @CommissionPercent numeric (22,4),@RoundingCommission int,@DecimalCommission int,@VATPercent numeric (22,4),@RoundingVAT int,@DecimalVAT int,@LevyPercent numeric (22,4),@RoundingLevy int,@DecimalLevy int,
                            @KPEIPercent numeric (22,4),@RoundingKPEI int,@DecimalKPEI int,@WHTPercent numeric (22,4),@RoundingWHT int,@DecimalWHT int,@OTCPercent numeric (22,4),@RoundingOTC int,@DecimalOTC int,
                            @IncomeTaxInterestPercent numeric (22,4),@RoundingTaxInterest int,@DecimalTaxInterest int,@IncomeTaxGainPercent numeric (22,4),@RoundingTaxGain int,@DecimalTaxGain int,@IncomeTaxSellPercent numeric (22,4),@RoundingTaxSell int,@DecimalTaxSell int,@BoardType int,@FundPK int,@CounterpartPK int

                            
                            DECLARE A CURSOR FOR 

                            select InstrumentTypePK,TrxType,FundPK,BoardType,CounterpartPK from Investment 
                            where statusInvestment = 2 
                            and statusDealing = 1 and OrderStatus in ('O','P') and ValueDate between @DateFrom and @DateFrom and SelectedDealing = 1 and InstrumentTypePK = @InstrumentTypePK  " + _paramTrxType + _paramFund + _paramCounterpart + @"

                            Open A
                            Fetch Next From A
                            Into @InstrumentTypePK,@TrxType,@FundPK,@BoardType,@CounterpartPK

                            While @@FETCH_STATUS = 0
                            BEGIN    

                            IF EXISTS(select * from CounterpartCommission where status = 2 and FundPK = @FundPK and BoardType = @BoardType and CounterpartPK = @CounterpartPK)
                            BEGIN
	                            DECLARE B CURSOR FOR 
	                            Select C.FundCashRefPK,InvestmentPK,DealingPK,HistoryPK,CommissionPercent ,LevyPercent,KPEIPercent,VATPercent,
	                            WHTPercent,OTCPercent,IncomeTaxInterestPercent,IncomeTaxGainPercent,IncomeTaxSellPercent,
	                            C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,
                                case when C.TrxType = 1 then sum(C.DoneAmount + C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT - C.TaxGain - C.WHT) 
                                Else sum(C.DoneAmount - (C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT + C.TaxSell - C.TaxGain - C.WHT)) End TotalAmount    
	                            from (
	                            select A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,
	                            B.CommissionPercent ,B.LevyPercent,B.KPEIPercent,B.VATPercent,
	                            B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,
	                            --Comm
	                            Case when @RoundingCommission = 1 and B.DecimalCommission = @DecimalCommission 
                                then Sum(isnull(round(A.DoneAmount * (B.CommissionPercent/100),@DecimalCommission),0))
	                            else Case when @RoundingCommission = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.CommissionPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.CommissionPercent/100),0),0)) End End  Comm,
	                            Case when @RoundingLevy = 1 and B.DecimalLevy = @DecimalLevy then Sum(isnull(round(A.DoneAmount * (B.LevyPercent/100),@DecimalLevy),0))
	                            else Case when @RoundingLevy = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.LevyPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.LevyPercent/100),0),0)) End End  Levy,
	                            Case when @RoundingKPEI = 1 and B.DecimalKPEI = @DecimalKPEI then Sum(isnull(round(A.DoneAmount * (B.KPEIPercent/100),@DecimalKPEI),0))
	                            else Case when @RoundingKPEI = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.KPEIPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.KPEIPercent/100),0),0)) End End  KPEI,
	                            Case when @RoundingVAT = 1 and B.DecimalVAT = @DecimalVAT then Sum(isnull(round(A.DoneAmount * (B.VATPercent/100),@DecimalVAT),0))
	                            else Case when @RoundingVAT = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.VATPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.VATPercent/100),0),0)) End End  VAT,
	                            Case when @RoundingWHT = 1 and B.DecimalWHT = @DecimalWHT then Sum(isnull(round(A.DoneAmount * (B.WHTPercent/100),@DecimalWHT),0))
	                            else Case when @RoundingWHT = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.WHTPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.WHTPercent/100),0),0)) End End  WHT,
	                            Case when @RoundingOTC = 1 and B.DecimalOTC = @DecimalOTC then Sum(isnull(round(A.DoneAmount * (B.OTCPercent/100),@DecimalOTC),0))
	                            else Case when @RoundingOTC = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.OTCPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.OTCPercent/100),0),0)) End End  OTC,
	                            Case when @RoundingTaxInterest = 1 and B.DecimalTaxInterest = @DecimalTaxInterest then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxInterestPercent/100),@DecimalTaxInterest),0))
	                            else Case when @RoundingTaxInterest = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxInterestPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxInterestPercent/100),0),0)) End End  TaxInterest,
	                            Case when @RoundingTaxGain = 1 and B.DecimalTaxGain = @DecimalTaxGain then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxGainPercent/100),@DecimalTaxGain),0))
	                            else Case when @RoundingTaxGain = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxGainPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxGainPercent/100),0),0)) End End  TaxGain,
	                            Case when @RoundingTaxSell = 1 and B.DecimalTaxSell = @DecimalTaxSell then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxSellPercent/100),@DecimalTaxSell),0))
	                            else Case when @RoundingTaxSell = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxSellPercent/100)),0)) 
	                            else  case when TrxType = 1 then 0 else Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxSellPercent/100),0),0)) End End End TaxSell
	                            from Investment A
	                            left join CounterpartCommission B on A.CounterpartPK = B.CounterpartPK and A.BoardType = B.BoardType and B.Status = 2
	                            left join FundCashRef D on D.FundPK = A.FundPK and D.Status = 2
	                            where statusInvestment = 2 and statusDealing = 1 and OrderStatus  in ('O','P') and ValueDate between @DateFrom and @DateTo and SelectedDealing = 1 and InstrumentTypePK = @InstrumentTypePK and A.BoardType = @BoardType and B.FundPK = @FundPK  and A.TrxType = @TrxType
	                            Group By D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.TrxType,A.DoneAmount,
	                            B.CommissionPercent,B.LevyPercent,B.KPEIPercent,B.VATPercent,
	                            B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,B.RoundingCommission,B.DecimalCommission,B.RoundingLevy,B.DecimalLevy,B.RoundingKPEI,B.DecimalKPEI,B.RoundingVAT,B.DecimalVAT,
	                            B.RoundingWHT,B.DecimalWHT,B.RoundingOTC,B.DecimalOTC,B.RoundingTaxInterest,B.DecimalTaxInterest,B.RoundingTaxGain,B.DecimalTaxGain,B.RoundingTaxSell,B.DecimalTaxSell
	                            ) C
	                            Group By  C.TrxType,C.FundCashRefPK,C.InvestmentPK,C.DealingPK,C.HistoryPK,C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,C.DoneAmount,
	                            C.CommissionPercent,C.LevyPercent,C.KPEIPercent,C.VATPercent,
	                            C.WHTPercent,C.OTCPercent,C.IncomeTaxInterestPercent,C.IncomeTaxGainPercent,C.IncomeTaxSellPercent

	                            Open B
	                            Fetch Next From B
	                            Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@CommissionPercent ,@LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxInterestPercent,@IncomeTaxGainPercent,@IncomeTaxSellPercent,
	                            @Comm,@Levy,@KPEI,@VAT,@WHT,@OTC,@TaxInterest,@TaxGain,@TaxSell,@TotalAmount

	                            While @@FETCH_STATUS = 0
	                            BEGIN          
	                            Select @SettlementPK = max(SettlementPK) + 1 From investment
	                            Update Investment set SettlementPK = @SettlementPK, StatusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',FundCashRefPK = @FundCashRefPK, ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime,CommissionPercent = @CommissionPercent,LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,IncomeTaxGainPercent=@IncomeTaxGainPercent,IncomeTaxSellPercent = @IncomeTaxSellPercent,
	                            CommissionAmount = @Comm,LevyAmount=@Levy,KPEIAmount = @KPEI, VATAmount=@VAT,WHTAmount = @WHT,OTCAmount=@OTC,IncomeTaxInterestAmount=@TaxInterest,IncomeTaxGainAmount = @TaxGain,IncomeTaxSellAmount = @TaxSell,TotalAmount = @TotalAmount
	                            where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

	                            Fetch next From B Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@CommissionPercent ,@LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxInterestPercent,@IncomeTaxGainPercent,@IncomeTaxSellPercent,
	                            @Comm,@Levy,@KPEI,@VAT,@WHT,@OTC,@TaxInterest,@TaxGain,@TaxSell,@TotalAmount
	                            END
	                            Close B
	                            Deallocate B
                            END
                            ELSE
                            BEGIN
	                            DECLARE B CURSOR FOR 
	                            Select C.FundCashRefPK,InvestmentPK,DealingPK,HistoryPK,CommissionPercent ,LevyPercent,KPEIPercent,VATPercent,
	                            WHTPercent,OTCPercent,IncomeTaxInterestPercent,IncomeTaxGainPercent,IncomeTaxSellPercent,
	                            C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,case when C.TrxType = 1 then sum(C.DoneAmount + C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT - C.TaxGain - C.WHT) Else sum(C.DoneAmount - (C.Comm + C.Levy + C.KPEI + C.OTC + C.VAT + C.TaxSell - C.TaxGain - C.WHT)) End TotalAmount    
	                            from (
	                            select A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,
	                            B.CommissionPercent ,B.LevyPercent,B.KPEIPercent,B.VATPercent,
	                            B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,
	                            --Comm
	                            Case when @RoundingCommission = 1 and B.DecimalCommission = @DecimalCommission then Sum(isnull(round(A.DoneAmount * (B.CommissionPercent/100),@DecimalCommission),0))
	                            else Case when @RoundingCommission = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.CommissionPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.CommissionPercent/100),0),0)) End End  Comm,
	                            Case when @RoundingLevy = 1 and B.DecimalLevy = @DecimalLevy then Sum(isnull(round(A.DoneAmount * (B.LevyPercent/100),@DecimalLevy),0))
	                            else Case when @RoundingLevy = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.LevyPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.LevyPercent/100),0),0)) End End  Levy,
	                            Case when @RoundingKPEI = 1 and B.DecimalKPEI = @DecimalKPEI then Sum(isnull(round(A.DoneAmount * (B.KPEIPercent/100),@DecimalKPEI),0))
	                            else Case when @RoundingKPEI = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.KPEIPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.KPEIPercent/100),0),0)) End End  KPEI,
	                            Case when @RoundingVAT = 1 and B.DecimalVAT = @DecimalVAT then Sum(isnull(round(A.DoneAmount * (B.VATPercent/100),@DecimalVAT),0))
	                            else Case when @RoundingVAT = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.VATPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.VATPercent/100),0),0)) End End  VAT,
	                            Case when @RoundingWHT = 1 and B.DecimalWHT = @DecimalWHT then Sum(isnull(round(A.DoneAmount * (B.WHTPercent/100),@DecimalWHT),0))
	                            else Case when @RoundingWHT = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.WHTPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.WHTPercent/100),0),0)) End End  WHT,
	                            Case when @RoundingOTC = 1 and B.DecimalOTC = @DecimalOTC then Sum(isnull(round(A.DoneAmount * (B.OTCPercent/100),@DecimalOTC),0))
	                            else Case when @RoundingOTC = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.OTCPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.OTCPercent/100),0),0)) End End  OTC,
	                            Case when @RoundingTaxInterest = 1 and B.DecimalTaxInterest = @DecimalTaxInterest then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxInterestPercent/100),@DecimalTaxInterest),0))
	                            else Case when @RoundingTaxInterest = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxInterestPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxInterestPercent/100),0),0)) End End  TaxInterest,
	                            Case when @RoundingTaxGain = 1 and B.DecimalTaxGain = @DecimalTaxGain then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxGainPercent/100),@DecimalTaxGain),0))
	                            else Case when @RoundingTaxGain = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxGainPercent/100)),0)) 
	                            else  Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxGainPercent/100),0),0)) End End  TaxGain,
	                            Case when @RoundingTaxSell = 1 and B.DecimalTaxSell = @DecimalTaxSell then Sum(isnull(round(A.DoneAmount * (B.IncomeTaxSellPercent/100),@DecimalTaxSell),0))
	                            else Case when @RoundingTaxSell = 2 then Sum(isnull(FLOOR(A.DoneAmount * (B.IncomeTaxSellPercent/100)),0)) 
	                            else  case when TrxType = 1 then 0 else Sum(isnull(ROUND(A.DoneAmount * (B.IncomeTaxSellPercent/100),0),0)) End End End  TaxSell
	                            from Investment A
	                            left join CounterpartCommission B on A.CounterpartPK = B.CounterpartPK and A.BoardType = B.BoardType and B.Status = 2
	                            left join FundCashRef D on D.FundPK = A.FundPK and D.Status = 2
	                            where statusInvestment = 2 and statusDealing = 1 and OrderStatus  in ('O','P') and ValueDate between @DateFrom and @DateTo and SelectedDealing = 1 and InstrumentTypePK = @InstrumentTypePK and A.BoardType = @BoardType and B.FundPK = 0  and A.TrxType = @TrxType
	                            Group By D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.TrxType,A.DoneAmount,
	                            B.CommissionPercent,B.LevyPercent,B.KPEIPercent,B.VATPercent,
	                            B.WHTPercent,B.OTCPercent,B.IncomeTaxInterestPercent,B.IncomeTaxGainPercent,B.IncomeTaxSellPercent,B.RoundingCommission,B.DecimalCommission,B.RoundingLevy,B.DecimalLevy,B.RoundingKPEI,B.DecimalKPEI,B.RoundingVAT,B.DecimalVAT,
	                            B.RoundingWHT,B.DecimalWHT,B.RoundingOTC,B.DecimalOTC,B.RoundingTaxInterest,B.DecimalTaxInterest,B.RoundingTaxGain,B.DecimalTaxGain,B.RoundingTaxSell,B.DecimalTaxSell
	                            ) C
	                            Group By  C.TrxType,C.FundCashRefPK,C.InvestmentPK,C.DealingPK,C.HistoryPK,C.Comm,C.Levy,C.KPEI,C.VAT,C.WHT,C.OTC,C.TaxInterest,C.TaxGain,C.TaxSell,C.DoneAmount,
	                            C.CommissionPercent,C.LevyPercent,C.KPEIPercent,C.VATPercent,
	                            C.WHTPercent,C.OTCPercent,C.IncomeTaxInterestPercent,C.IncomeTaxGainPercent,C.IncomeTaxSellPercent

	                            Open B
	                            Fetch Next From B
	                            Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@CommissionPercent ,@LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxInterestPercent,@IncomeTaxGainPercent,@IncomeTaxSellPercent,
	                            @Comm,@Levy,@KPEI,@VAT,@WHT,@OTC,@TaxInterest,@TaxGain,@TaxSell,@TotalAmount

	                            While @@FETCH_STATUS = 0
	                            BEGIN          
	                            Select @SettlementPK = max(SettlementPK) + 1 From investment
	                            Update Investment set SettlementPK = @SettlementPK, StatusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',FundCashRefPK = @FundCashRefPK, ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime = @ApprovedDealingTime,CommissionPercent = @CommissionPercent,LevyPercent=@LevyPercent,KPEIPercent=@KPEIPercent,VATPercent=@VATPercent,WHTPercent=@WHTPercent,OTCPercent=@OTCPercent,IncomeTaxInterestPercent=@IncomeTaxInterestPercent,IncomeTaxGainPercent=@IncomeTaxGainPercent,IncomeTaxSellPercent = @IncomeTaxSellPercent,
	                            CommissionAmount = @Comm,LevyAmount=@Levy,KPEIAmount = @KPEI, VATAmount=@VAT,WHTAmount = @WHT,OTCAmount=@OTC,IncomeTaxInterestAmount=@TaxInterest,IncomeTaxGainAmount = @TaxGain,IncomeTaxSellAmount = @TaxSell,TotalAmount = @TotalAmount,EntrySettlementID=@ApprovedDealingID,EntrySettlementTime=@ApprovedDealingTime,LastUpdate=@LastUpdate
	                            where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

	                            Fetch next From B Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@CommissionPercent ,@LevyPercent,@KPEIPercent,@VATPercent,@WHTPercent,@OTCPercent,@IncomeTaxInterestPercent,@IncomeTaxGainPercent,@IncomeTaxSellPercent,
	                            @Comm,@Levy,@KPEI,@VAT,@WHT,@OTC,@TaxInterest,@TaxGain,@TaxSell,@TotalAmount
	                            END
	                            Close B
	                            Deallocate B
                            END

                            Fetch next From A Into @InstrumentTypePK,@TrxType,@FundPK,@BoardType,@CounterpartPK
                            END
                            Close A
                            Deallocate A

                            Update Investment set SelectedDealing  = 0 
                            ";



                        }




                        else if (_investment.InstrumentTypePK == 5)
                        {
                            cmd.CommandText = @"
                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int
                        declare @TotalAmount numeric (22,4)
                        declare @DoneAccruedInterest numeric (22,2)
                        declare @IncomeTaxInterestAmount numeric (22,2)
                        declare @IncomeTaxGainAmount numeric (22,2)

                        declare @FundCashRefPK int 
                        declare @SettlementPK int

                        Declare @TaxPercentageDep numeric(8,4)
                        select @TaxPercentageDep = TaxPercentageTD from FundAccountingSetup where status = 2
                            
                        DECLARE A CURSOR FOR 
	                    Select C.FundCashRefPK,InvestmentPK,DealingPK,HistoryPK,DoneAmount,isnull(DoneAccruedInterest,0),isnull(IncomeTaxInterestAmount,0),isnull(IncomeTaxGainAmount,0)   
	                    from (
	                    select A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.DoneAccruedInterest,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount
	                    from Investment A
	                    left join FundCashRef D on D.FundPK = A.FundPK and D.Status = 2
	                    where statusInvestment = 2 and statusDealing = 1 and ValueDate between @DateFrom and @DateTo and SelectedDealing = 1 " + _paramInstrumentType + _paramTrxType + _paramFund + _paramCounterpart +
                        @"Group By A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.DoneAccruedInterest,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount
	                    ) C
	                    Group By  C.TrxType,C.FundCashRefPK,C.InvestmentPK,C.DealingPK,C.HistoryPK,C.DoneAmount,C.DoneAccruedInterest,C.IncomeTaxInterestAmount,C.IncomeTaxGainAmount
	
                        Open A
                        Fetch Next From A
                        Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@TotalAmount,@DoneAccruedInterest,@IncomeTaxInterestAmount,@IncomeTaxGainAmount

                        While @@FETCH_STATUS = 0
                        BEGIN              
                        Select @SettlementPK = max(SettlementPK) + 1 From investment
                        Update Investment set SettlementPK = @SettlementPK, StatusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',TotalAmount=@TotalAmount + @DoneAccruedInterest - @IncomeTaxInterestAmount - @IncomeTaxGainAmount,FundCashRefPK = @FundCashRefPK, 
                        SettlementMode = Case when TrxType  = 1 then 1 else 2 end,ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime=@ApprovedDealingTime,EntrySettlementID=@ApprovedDealingID,EntrySettlementTime=@ApprovedDealingTime,LastUpdate=@LastUpdate,
                        TaxExpensePercent = isnull(@TaxPercentageDep,TaxExpensePercent)
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

                        Fetch next From A Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@TotalAmount,@DoneAccruedInterest,@IncomeTaxInterestAmount,@IncomeTaxGainAmount
                        END
                        Close A
                        Deallocate A

                        Update Investment set SelectedDealing  = 0 ";
                        }

                        else
                        {
                            cmd.CommandText = @"
                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int
                        declare @TotalAmount numeric (22,4)
                        declare @DoneAccruedInterest numeric (22,2)
                        declare @IncomeTaxInterestAmount numeric (22,2)
                        declare @IncomeTaxGainAmount numeric (22,2)

                        declare @FundCashRefPK int 
                        declare @SettlementPK int
           

                            
                        DECLARE A CURSOR FOR 
	                    Select C.FundCashRefPK,InvestmentPK,DealingPK,HistoryPK,DoneAmount,isnull(DoneAccruedInterest,0),isnull(IncomeTaxInterestAmount,0),isnull(IncomeTaxGainAmount,0)   
	                    from (
	                    select A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.DoneAccruedInterest,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount
	                    from Investment A
	                    left join FundCashRef D on D.FundPK = A.FundPK and D.Status = 2
	                    where statusInvestment = 2 and statusDealing = 1 and OrderStatus = 'O' and ValueDate between @DateFrom and @DateTo and SelectedDealing = 1 " + _paramInstrumentType + _paramTrxType + _paramFund + _paramCounterpart +
                        @"Group By A.TrxType,D.FundCashRefPK,A.InvestmentPK,A.DealingPK,A.HistoryPK,A.DoneAmount,A.DoneAccruedInterest,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount
	                    ) C
	                    Group By  C.TrxType,C.FundCashRefPK,C.InvestmentPK,C.DealingPK,C.HistoryPK,C.DoneAmount,C.DoneAccruedInterest,C.IncomeTaxInterestAmount,C.IncomeTaxGainAmount
	
                        Open A
                        Fetch Next From A
                        Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@TotalAmount,@DoneAccruedInterest,@IncomeTaxInterestAmount,@IncomeTaxGainAmount

                        While @@FETCH_STATUS = 0
                        BEGIN              
                        Select @SettlementPK = max(SettlementPK) + 1 From investment
                        Update Investment set SettlementPK = @SettlementPK, StatusDealing = 2, StatusSettlement = 1,OrderStatus = 'M',FundCashRefPK = @FundCashRefPK, 
                        ApprovedDealingID = @ApprovedDealingID,ApprovedDealingTime=@ApprovedDealingTime,EntrySettlementID=@ApprovedDealingID,EntrySettlementTime=@ApprovedDealingTime,LastUpdate=@LastUpdate
                        where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK and HistoryPK = @HistoryPK

                        Fetch next From A Into @FundCashRefPK,@InvestmentPK,@DealingPK,@HistoryPK,@TotalAmount,@DoneAccruedInterest,@IncomeTaxInterestAmount,@IncomeTaxGainAmount
                        END
                        Close A
                        Deallocate A

                        Update Investment set SelectedDealing  = 0 ";
                        }


                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }

                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@ApprovedDealingID", _investment.ApprovedDealingID);
                        cmd.Parameters.AddWithValue("@ApprovedDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }



        public string Get_BankCustodianName(int _fundPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"Select top 1 C.Name From Fund A 
                        Left Join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status = 2
                        Left Join Bank C on B.BankPK = C.BankPK and C.Status = 2
                        where A.status = 2 and A.FundPK = @FundPK";
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["Name"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public string Get_FundName(int _fundPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Select top 1 Name From Fund " +
                        " where status = 2 and FundPK = @FundPK";
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["Name"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public string Get_FundType(int _fundPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Select top 1 MV.DescOne Type From Fund F Left Join MasterValue MV on MV.Code = F.Type and MV.ID = 'FundType' and MV.Status = 2 " +
                        " where F.status = 2 and F.FundPK = @FundPK";
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["Type"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public string Get_CurrencyID(int _fundPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "Select top 1 C.ID From Currency C Left Join Fund F on C.CurrencyPK = F.CurrencyPK and F.status =2 " +
                        " where C.status = 2 and F.FundPK = @FundPK";
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["ID"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public string Get_FundSinvestCode(int _fundPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"Select top 1 SInvestCode from fund where FundPK = @FundPK";
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["SInvestCode"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public Boolean Validate_CheckAvailableInstrumentForEquity(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
        
Declare @CurrBalance numeric (18,4)
  
Declare @TrailsPK int
Declare @MaxDateEndDayFP datetime

select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
where ValueDate = 
(
	select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @Date
)
and status = 2 and FundPK = @FundPK

select @CurrBalance = sum(A.Balance)  from (

	select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,A.Balance,D.ID CurrencyID,[Identity] TrxBuy,'FP' TrxBuyType from FundPosition A    
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2    
	Left join Currency D on A.CurrencyPK = D.CurrencyPK and D.status = 2   
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
	where A.FundPK = @FundPK  and A.TrailsPK = @TrailsPK and C.type in (1) and A.InstrumentPK = @InstrumentPK

	union all
	
	Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID
	,sum(case when DoneVolume <> 0 then DoneVolume else DoneAmount / case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,@InstrumentPK)			else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK) End  End) Balance
	,D.ID,InvestmentPK TrxBuy,'INV' TrxBuyType
	from Investment A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
	left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2
	where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date  and C.Type in (1) and 
	statusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3
	and A.OrderStatus = 'M'
	and FundPK = @FundPK 
	and A.InstrumentPK = @InstrumentPK  and A.TrxType = 1
	group By A.InstrumentPK,B.ID,B.Name,TrxBuy,TrxBuyType,InvestmentPK,D.ID
	
	UNION ALL

	Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID
	,sum(case when DoneVolume <> 0 then DoneVolume else DoneAmount / case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,@InstrumentPK)			else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK) End  End) *-1 Balance
	,D.ID,InvestmentPK TrxBuy,'INV' TrxBuyType
	from Investment A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
	left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2
	where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date  and C.Type in (1) and 
	statusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3
	and FundPK = @FundPK 
	and A.InstrumentPK = @InstrumentPK  and A.TrxType = 2
	group By A.InstrumentPK,B.ID,B.Name,TrxBuy,TrxBuyType,InvestmentPK,D.ID
	
) A 


if @Balance > 0
BEGIN
	if @Balance > @CurrBalance
	Begin
		Select 1 Result
		return
	end
	else
	begin
		select 0 Result
		return
	end
END

if @Amount > 0
BEGIN
	if ((@Amount /case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,@InstrumentPK)
	else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK) End  ) > @CurrBalance )
	Begin
		Select 1 Result
		return
	end
	else
	begin
		select 0 Result
		return
	end
END




                           ";

                        cmd.Parameters.AddWithValue("@date", _investment.ValueDate);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                        cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                        cmd.Parameters.AddWithValue("@Balance", _investment.Volume);
                        cmd.Parameters.AddWithValue("@TrxBuy", _investment.TrxBuy);
                        cmd.Parameters.AddWithValue("@TrxBuyType", _investment.TrxBuyType);
                        cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                        cmd.Parameters.AddWithValue("@MethodType", _investment.MethodType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToBoolean(dr["Result"]);

                            }
                            return false;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }



        public Boolean Validate_CheckAvailableInstrumentForReksadana(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
        
Declare @CurrBalance numeric (18,4)
  
Declare @TrailsPK int
Declare @MaxDateEndDayFP datetime

select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
where ValueDate = 
(
	select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @Date
)
and status = 2 and FundPK = @FundPK

select @CurrBalance = sum(A.Balance)  from (

	select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,A.Balance,D.ID CurrencyID,[Identity] TrxBuy,'FP' TrxBuyType from FundPosition A    
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2    
	Left join Currency D on A.CurrencyPK = D.CurrencyPK and D.status = 2   
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
	where A.FundPK = @FundPK  and A.TrailsPK = @TrailsPK and C.type in (4) and A.InstrumentPK = @InstrumentPK

	union all
	
	Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID
	,sum(case when DoneVolume <> 0 then DoneVolume else DoneAmount / case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,@InstrumentPK)			else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK) End  End) Balance
	,D.ID,InvestmentPK TrxBuy,'INV' TrxBuyType
	from Investment A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
	left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2
	where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date  and C.Type in (4) and 
	statusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3
	and A.OrderStatus = 'M'
	and FundPK = @FundPK 
	and A.InstrumentPK = @InstrumentPK  and A.TrxType = 1
	group By A.InstrumentPK,B.ID,B.Name,TrxBuy,TrxBuyType,InvestmentPK,D.ID
	
	UNION ALL

	Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID
	,sum(case when DoneVolume <> 0 then DoneVolume else DoneAmount / case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,@InstrumentPK)			else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,@InstrumentPK) End  End) *-1 Balance
	,D.ID,InvestmentPK TrxBuy,'INV' TrxBuyType
	from Investment A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
	left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2
	where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date  and C.Type in (4) and 
	statusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3
	and FundPK = @FundPK 
	and A.InstrumentPK = @InstrumentPK  and A.TrxType = 2
	group By A.InstrumentPK,B.ID,B.Name,TrxBuy,TrxBuyType,InvestmentPK,D.ID
	
) A 


if @Balance > 0
BEGIN
	if @Balance > @CurrBalance
	Begin
		Select 1 Result
		return
	end
	else
	begin
		select 0 Result
		return
	end
END




                           ";

                        cmd.Parameters.AddWithValue("@date", _investment.ValueDate);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                        cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                        cmd.Parameters.AddWithValue("@Balance", _investment.Volume);
                        cmd.Parameters.AddWithValue("@TrxBuy", _investment.TrxBuy);
                        cmd.Parameters.AddWithValue("@TrxBuyType", _investment.TrxBuyType);
                        cmd.Parameters.AddWithValue("@Amount", _investment.Amount);
                        cmd.Parameters.AddWithValue("@MethodType", _investment.MethodType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToBoolean(dr["Result"]);

                            }
                            return false;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<BankBranchCombo> BankBranch_ComboBankOnlyByBankPKEnableOnly(int _bankPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<BankBranchCombo> L_BankBranch = new List<BankBranchCombo>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText =
                         @" SELECT  BankBranchPK, A.PTPCode +' - '+ B.ID  + ' - ' + A.ID  ID FROM [BankBranch] A    
                        left join Bank B on A.BankPK = B.BankPK and B.status = 2
                        where  A.status = 2 and A.Type = 1  and BitIsEnabled = 1 and B.BankPK = @BankPK ";

                        cmd.Parameters.AddWithValue("@BankPK", _bankPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    BankBranchCombo M_BankBranch = new BankBranchCombo();
                                    M_BankBranch.BankBranchPK = Convert.ToInt32(dr["BankBranchPK"]);
                                    M_BankBranch.ID = Convert.ToString(dr["ID"]);
                                    L_BankBranch.Add(M_BankBranch);
                                }

                            }
                            return L_BankBranch;
                        }
                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public decimal Get_FundManagementFeeByFundPK(int _fundPK, DateTime _date)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"

                        Select isnull(B.ManagementFeePercent,A.ManagementFeePercent) ManagementFeePercent from Fund A 
                        left join 
                        (	
                        Select A.FundPK,A.ManagementFeePercent,A.ManagementFeeDays from FundFee A
                        where A.status = 2 and Date =
                        (
	                        select max(Date) from fundFee where status = 2 and FundPK = @FundPK and date <= @Date
                        ) and A.FundPK = @FundPK 
                        )B on A.FundPK = B.FundPK 
                        where A.FundPK = @FundPK and A.Status = 2
                         ";
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        cmd.Parameters.AddWithValue("@Date", _date);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["ManagementFeePercent"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public string RevenueTemp(string _fileSource, string _userID)
        {
            string _msg = "";
            try
            {
                DateTime _now = DateTime.Now;

                //delete data yang lama
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = "truncate table RevenueTemp";
                        cmd2.ExecuteNonQuery();
                    }
                }

                // import data ke temp dulu
                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.RevenueTemp";
                    bulkCopy.WriteToServer(CreateDataTableRevenueTempExcelFile(_fileSource));

                    _msg = "";
                }

                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd3 = conn.CreateCommand())
                    {
                        _msg = "Success Import Revenue";
                        cmd3.CommandText =
                        @"  
                                        delete revenue where agentpk in (select agentpk from revenuetemp a left join Agent b on a.SalesName = b.Name and b.Status in(1,2))
                                        and PeriodPK in (select PeriodPK from revenuetemp a left join Period b on a.Period = b.id and b.Status in(1,2))



                                        --delete revenue  where agentpk in (select agentpk from revenuetemp a left join Agent b on a.SalesName = b.Name and b.Status in(1,2))
										--and Instrumentpk in 
                                        --(select Instrumentpk from revenuetemp a 
                                        --left join BRIDGE.dbo.STG_TProductMap B on A.InstrumentCode = B.ProductCode
                                        --left join Instrument C on B.RadsoftCode = C.ID and C.Status = 2 )


										--update revenue set Status = 3 where agentpk in (select agentpk from revenuetemp a left join Agent b on a.SalesName = b.Name and b.Status in(1,2))
										--and Instrumentpk in 
                                        --(select Instrumentpk from revenuetemp a 
                                        --left join BRIDGE.dbo.STG_TProductMap B on A.InstrumentCode = B.ProductCode
                                        --left join Instrument C on B.RadsoftCode = C.ID and C.Status = 2 )

                                        Declare @revenuePK int
                                        Declare @PeriodPK int
                                        Declare @ReportPeriodPK int
                                        Declare @code int
                                        Declare @AgentPK int
										Declare @InstrumentPK int
										Declare @DepartmentPK int
                                        Declare @New nvarchar(50)
                                        Declare @Characteristic int
                                        Declare @MGTFee numeric(18,4)
                                        Declare @Jan numeric(18,4)
                                        Declare @Feb numeric(18,4)
                                        Declare @Mar numeric(18,4)
                                        Declare @Apr numeric(18,4)
                                        Declare @May numeric(18,4)
                                        Declare @Jun numeric(18,4)
                                        Declare @Jul numeric(18,4)
                                        Declare @Aug numeric(18,4)
                                        Declare @Sep numeric(18,4)
                                        Declare @Okt numeric(18,4)
                                        Declare @Nov numeric(18,4)
                                        Declare @Dec numeric(18,4)

                                        Declare A Cursor For
                                        select ab.PeriodPK,b.PeriodPK, c.code, d.AgentPK,F.InstrumentPK,H.DepartmentPK,New,G.Code,MGTFee,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Okt,Nov,Dec from revenuetemp A
                                        left join Period b on a.Period = b.ID and B.status in(1,2)
                                        left join Period ab on a.ReportPeriod = ab.ID and AB.status in(1,2)
                                        left join MasterValue c on a.TypeInstrument = c.DescOne and c.id = 'FundType' and c.Status in(1,2)
                                        left join agent d on a.SalesName = d.Name and d.Status in(1,2)
                                        left join Instrument F on A.InstrumentCode = F.ID and F.Status in(1,2) 
                                        left join MasterValue G on a.Characteristic = G.DescOne and G.ID = 'CompanyCharacteristic' and G.Status in(1,2)
                                        left join Department H on A.Department = H.ID and H.Status in (1,2) 

                                        Open A
                                        Fetch next From A
                                        into @ReportPeriodPK,
                                         @PeriodPK, 
                                         @code ,
                                         @AgentPK, 
                                         @InstrumentPK, 
                                         @DepartmentPK, 
                                         @New ,
                                         @Characteristic ,
                                         @MGTFee ,
                                         @Jan ,
                                         @Feb ,
                                         @Mar ,
                                         @Apr ,
                                         @May ,
                                         @Jun ,
                                         @Jul ,
                                         @Aug ,
                                         @Sep ,
                                         @Okt ,
                                         @Nov ,
                                         @Dec 
                                        While @@Fetch_status = 0
                                        BEGIN

										

                                        Select @revenuePK = max(revenuepk) + 1 from revenue
                                        set @revenuePK = isnull(@revenuePK,1)

                                        insert into 
                                        [dbo].[Revenue](
										[RevenuePK] ,
										[HistoryPK] ,
										[Status] ,
										[Notes] ,
										[ReportPeriodPK] ,
										[PeriodPK] ,
						                [DepartmentPK] ,
										[ReksadanaTypePK] ,
										[AgentPK] ,
										[InstrumentPK] ,
										[New] ,
										[Characteristic] ,
										[MGTFee] ,
										[January] ,
										[February] ,
										[March] ,
										[April] ,
										[May] ,
										[June] ,
										[July] ,
										[August] ,
										[September] ,
										[October] ,
										[November] ,
										[December] ,
										[EntryUsersID] ,
										[EntryTime] ,
										[ApprovedUsersID] ,
										[ApprovedTime] ,
										[LastUpdate] 
                                        )

                                        select @revenuePK,1,2,'',
                                         @ReportPeriodPK,
                                         @PeriodPK, 
                                         @DepartmentPK,
                                         @code ,
                                         @AgentPK, 
                                         @InstrumentPK, 
                                         @New ,
                                         @Characteristic ,
                                         @MGTFee ,
                                         @Jan ,
                                         @Feb ,
                                         @Mar ,
                                         @Apr ,
                                         @May ,
                                         @Jun ,
                                         @Jul ,
                                         @Aug ,
                                         @Sep ,
                                         @Okt ,
                                         @Nov ,
                                         @Dec ,
                                         @EntryUsersID ,
                                         @LastUpdate ,
                                         @EntryUsersID ,
                                         @LastUpdate ,
                                         @LastUpdate  

										select 'Success Import' Result
                                 

                                        fetch next From A into 
                                         @ReportPeriodPK,
                                         @PeriodPK, 
                                         @code ,
                                         @AgentPK, 
                                         @InstrumentPK, 
                                         @DepartmentPK, 
                                         @New ,
                                         @Characteristic ,
                                         @MGTFee ,
                                         @Jan ,
                                         @Feb ,
                                         @Mar ,
                                         @Apr ,
                                         @May ,
                                         @Jun ,
                                         @Jul ,
                                         @Aug ,
                                         @Sep ,
                                         @Okt ,
                                         @Nov ,
                                         @Dec 
                                        end
                                        Close A
                                        Deallocate A
                                ";
                        cmd3.Parameters.AddWithValue("@EntryUsersID", _userID);
                        cmd3.Parameters.AddWithValue("@LastUpdate", _now);
                        cmd3.ExecuteNonQuery();
                    }

                }

                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        private DataTable CreateDataTableRevenueTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "No";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "ReportPeriod";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Period";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Department";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "TypeInstrument";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "SalesName";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentCode";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentName";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "New";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Characteristic";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "MGTFee";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Jan";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Feb";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Mar";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Apr";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "May";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Jun";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Jul";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Aug";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Sep";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Okt";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Nov";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.Decimal");
                    dc.ColumnName = "Dec";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    using (OleDbConnection odConnection = new OleDbConnection(Tools.ConStringExcel2007(_path)))
                    {
                        odConnection.Open();
                        using (OleDbCommand odCmd = odConnection.CreateCommand())
                        {
                            // _oldfilename = nama sheet yang ada di file excel yang diimport
                            odCmd.CommandText = "SELECT * FROM [Sheet1$]";
                            using (OleDbDataReader odRdr = odCmd.ExecuteReader())
                            {
                                // start counting from index = 1 --> skipping the header (index=0)
                                for (int i = 1; i <= 1; i++)
                                {
                                    odRdr.Read();
                                }
                                do
                                {
                                    dr = dt.NewRow();
                                    //dr["TransactionType"] = odRdr[2];

                                    dr["No"] = odRdr[0];
                                    dr["ReportPeriod"] = odRdr[1];
                                    dr["Period"] = odRdr[2];
                                    dr["Department"] = odRdr[3];
                                    dr["TypeInstrument"] = odRdr[4];
                                    dr["SalesName"] = odRdr[5];
                                    dr["InstrumentCode"] = odRdr[6];
                                    dr["InstrumentName"] = odRdr[7];
                                    dr["New"] = odRdr[8];
                                    dr["Characteristic"] = odRdr[9];
                                    dr["MGTFee"] = odRdr[10];
                                    dr["Jan"] = odRdr[11];
                                    dr["Feb"] = odRdr[12];
                                    dr["Mar"] = odRdr[13];
                                    dr["Apr"] = odRdr[14];
                                    dr["May"] = odRdr[15];
                                    dr["Jun"] = odRdr[16];
                                    dr["Jul"] = odRdr[17];
                                    dr["Aug"] = odRdr[18];
                                    dr["Sep"] = odRdr[19];
                                    dr["Okt"] = odRdr[20];
                                    dr["Nov"] = odRdr[21];
                                    dr["Dec"] = odRdr[22];
                                    //dr["FeeNominal"] = Convert.ToDecimal(odRdr[24].ToString() == "" ? 0 : odRdr[24].Equals(DBNull.Value) == true ? 0 : odRdr[24]);

                                    if (dr["No"].Equals(DBNull.Value) != true) { dt.Rows.Add(dr); }
                                } while (odRdr.Read());
                            }
                        }
                        odConnection.Close();
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }



        public class InvestmentValidate
        {
            public string ResultText { get; set; }
            public string Result { get; set; }
        }


        public InvestmentValidate Validation_EntrierApproverByInvesment(string _userID, string _table, string _Type, Investment _investment)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramInvestmentPK = "";
                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramInvestmentPK = " And InvestmentPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramInvestmentPK = " And InvestmentPK in (0) ";
                        }

                        cmd.CommandText = @"
                                
                        DECLARE @Query NVARCHAR(2000)

                        SET @Query = ''

                        if @Type = 'OMSEquity'
                        SET @Query = 'if ((select count(*) from ' + @table + ' where EntryUsersID = ''' + @UsersID + ''' and (UpdateUsersID  = '''' or UpdateUsersID is null) and StatusInvestment = 1 " + _paramInvestmentPK + @" and InstrumentTypePK = 1) > 0)
				                        select 0 Result, ''Failed : Approved User ID is same with Entry User ID'' ResultText
			                        else if (( select count(*) from ' + @table + ' where UpdateUsersID = ''' + @UsersID + ''' and (UpdateUsersID  != '''' or UpdateUsersID is not null) and StatusInvestment = 1 " + _paramInvestmentPK + @" and InstrumentTypePK = 1) > 0)
				                        select 0 Result,''Failed : Approved User ID is same with Update User ID'' ResultText 
			                        else
				                        select 1 Result,'''' ResultText'
						if @Type = 'OMSBond'
						SET @Query = 'if ((select count(*) from ' + @table + ' where EntryUsersID = ''' + @UsersID + ''' and (UpdateUsersID  = '''' or UpdateUsersID is null) and StatusInvestment = 1 " + _paramInvestmentPK + @" and InstrumentTypePK in (2,3,9,15)) > 0)
				                        select 0 Result, ''Failed : Approved User ID is same with Entry User ID'' ResultText
			                        else if (( select count(*) from ' + @table + ' where UpdateUsersID = ''' + @UsersID + ''' and (UpdateUsersID  != '''' or UpdateUsersID is not null) and StatusInvestment = 1 " + _paramInvestmentPK + @" and InstrumentTypePK in (2,3,9,15)) > 0)
				                        select 0 Result,''Failed : Approved User ID is same with Update User ID'' ResultText 
			                        else
				                        select 1 Result,'''' ResultText'
						if @Type = 'OMSTimeDeposit'
						SET @Query = 'if ((select count(*) from ' + @table + ' where EntryUsersID = ''' + @UsersID + ''' and (UpdateUsersID  = '''' or UpdateUsersID is null) and StatusInvestment = 1 " + _paramInvestmentPK + @" and InstrumentTypePK = 5) > 0)
				                        select 0 Result, ''Failed : Approved User ID is same with Entry User ID'' ResultText
			                        else if (( select count(*) from ' + @table + ' where UpdateUsersID = ''' + @UsersID + ''' and (UpdateUsersID  != '''' or UpdateUsersID is not null) and StatusInvestment = 1 " + _paramInvestmentPK + @" and InstrumentTypePK = 5) > 0)
				                        select 0 Result,''Failed : Approved User ID is same with Update User ID'' ResultText 
			                        else
				                        select 1 Result,'''' ResultText'

                        EXEC(@query)
                                
                         ";

                        cmd.Parameters.AddWithValue("@table", _table);
                        cmd.Parameters.AddWithValue("@Type", _Type);
                        cmd.Parameters.AddWithValue("@UsersID", _userID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            InvestmentValidate InvestValidation = new InvestmentValidate();
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    InvestValidation.Result = dr["Result"].ToString();
                                    InvestValidation.ResultText = dr["ResultText"].ToString();
                                }
                            }
                            return InvestValidation;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }





        public List<CounterpartExposure> Get_CounterpartExposure(string _date)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<CounterpartExposure> _L = new List<CounterpartExposure>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 

                                declare @TotalBrokerFee numeric(22,2)
                                declare @PeriodPK int
                                Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  

                                select @TotalBrokerFee = isnull(Sum(A.DoneAmount * (B.CommissionPercent/100)),0) from Investment A
                                left join CounterpartCommission B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
                                where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and  PeriodPK = @PeriodPK
                                and A.CounterpartPK <> 0

                                select C.ID,C.Name,cast(isnull(Sum(A.DoneAmount * (B.CommissionPercent/100)),0) as numeric(22,2)) TotalPerBrokerFee
                                ,@TotalBrokerFee AllBrokerFee
                                ,isnull(Sum(A.DoneAmount * (B.CommissionPercent/100)),0)/@TotalBrokerFee * 100 Exposure from Investment A
                                left join Counterpart C on A.CounterpartPK = c.CounterpartPK and C.status = 2
                                left join CounterpartCommission B on A.CounterpartPK = B.CounterpartPK and B.Status = 2
                                where StatusDealing <> 3 and statusInvestment <> 3 and StatusSettlement <> 3 and  PeriodPK = @PeriodPK
                                and A.CounterpartPK <> 0
                                group by C.ID,C.Name
                         ";


                        cmd.Parameters.AddWithValue("@ValueDate", _date);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    CounterpartExposure _M = new CounterpartExposure();
                                    _M.ID = dr["ID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["ID"]);
                                    _M.Name = dr["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Name"]);
                                    _M.TotalPerBrokerFee = dr["TotalPerBrokerFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["TotalPerBrokerFee"]);
                                    _M.AllBrokerFee = dr["AllBrokerFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["AllBrokerFee"]);
                                    _M.Exposure = dr["Exposure"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Exposure"]);
                                    _L.Add(_M);
                                }
                            }
                            return _L;
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


    }
}