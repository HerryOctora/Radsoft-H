using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;using RFSRepository;


namespace RFSRepositoryOne
{
    public class CustomClient08Reps
    {
        Host _host = new Host();

        int _rB, _rC, _rD;


        public class ClientTrackingReport
        {
            public string ClientCategory { get; set; }
            public string FundName { get; set; }
            public string ClientName { get; set; }
            public string AgentName { get; set; }
            public string CurrencyID { get; set; }
            public decimal SalesAmount { get; set; }
            public decimal SalesUnit { get; set; }
            public string CIF { get; set; }
            public decimal UnitBalance { get; set; }
            public decimal CashBalance { get; set; }
            public decimal RedemptionAmount { get; set; }
            public decimal RedemptionUnit { get; set; }
            public decimal ManagementFeeAmount { get; set; }
            public decimal TrailFeeAmount { get; set; }
            public string SharingFeeType { get; set; }
            public decimal OtherFee { get; set; }
            public string SID { get; set; }
            public string SIDName { get; set; }
            public string FundType { get; set; }
            public string MFeeType { get; set; }
            public decimal SwitchingInAmount { get; set; }
            public decimal SwitchingInUnit { get; set; }
            public decimal SwitchingOutAmount { get; set; }
            public decimal SwitchingOutUnit { get; set; }
            public string InternalCategory { get; set; }
            public string ParentCategory { get; set; }

        }

        public class FundUnitLedger
        {
            public int FundPK { get; set; }
            public string FundName { get; set; }
            public string FundClientName { get; set; }
            public decimal ManagementFeePercent { get; set; }
            public string Currency { get; set; }
            public string DateFrom { get; set; }
            public string DateTo { get; set; }
            public string Date { get; set; }
            public decimal Nav { get; set; }
            public decimal SubsUnit { get; set; }
            public decimal SubsAmount { get; set; }
            public decimal RedempUnit { get; set; }
            public decimal RedempAmount { get; set; }
            public decimal UnitAmount { get; set; }
            public decimal AUM { get; set; }
            public decimal MGTFee { get; set; }
            public decimal FeeShare { get; set; }
            public decimal SharingFee { get; set; }
            public decimal RebateFeePercent { get; set; }
            public decimal Percentage { get; set; }
            public string FundType { get; set; }
            public bool BitisAgentBank { get; set; }

        }

        private FundClient setFundClient(SqlDataReader dr)
        {
            FundClient M_FundClient = new FundClient();
            M_FundClient.FundClientPK = Convert.ToInt32(dr["FundClientPK"]);
            M_FundClient.HistoryPK = Convert.ToInt32(dr["HistoryPK"]);
            M_FundClient.Status = Convert.ToInt32(dr["Status"]);
            M_FundClient.StatusDesc = dr["StatusDesc"].ToString();
            M_FundClient.Notes = dr["Notes"].ToString();
            M_FundClient.ID = dr["ID"].ToString();
            M_FundClient.OldID = dr["OldID"].ToString();
            M_FundClient.Name = dr["Name"].ToString();
            M_FundClient.ClientCategory = dr["ClientCategory"].ToString();
            M_FundClient.ClientCategoryDesc = dr["ClientCategoryDesc"].ToString();
            M_FundClient.InvestorType = dr["InvestorType"].ToString();
            M_FundClient.InvestorTypeDesc = dr["InvestorTypeDesc"].ToString();
            M_FundClient.InternalCategoryPK = Convert.ToInt32(dr["InternalCategoryPK"]);
            M_FundClient.RiskProfileScore = Convert.ToInt32(dr["RiskProfileScore"]);
            M_FundClient.RiskProfileScoreDesc = dr["RiskProfileScoreDesc"].ToString();
            M_FundClient.InternalCategoryID = dr["InternalCategoryID"].ToString();
            M_FundClient.SellingAgentPK = Convert.ToInt32(dr["SellingAgentPK"]);
            M_FundClient.SellingAgentID = dr["SellingAgentID"].ToString();
            M_FundClient.SID = dr["SID"].ToString();
            M_FundClient.IFUACode = dr["IFUACode"].ToString();
            //M_FundClient.Child = Convert.ToBoolean(dr["Child"]);
            M_FundClient.ARIA = Convert.ToBoolean(dr["ARIA"]);
            M_FundClient.Registered = Convert.ToBoolean(dr["Registered"]);
            //M_FundClient.JumlahDanaAwal = Convert.ToInt32(dr["JumlahDanaAwal"]);
            //M_FundClient.JumlahDanaSaatIniCash = Convert.ToInt32(dr["JumlahDanaSaatIniCash"]);
            //M_FundClient.JumlahDanaSaatIni = Convert.ToInt32(dr["JumlahDanaSaatIni"]);
            M_FundClient.Negara = dr["Negara"].ToString();
            M_FundClient.NegaraDesc = dr["NegaraDesc"].ToString();
            M_FundClient.Nationality = dr["Nationality"].ToString();
            M_FundClient.NationalityDesc = dr["NationalityDesc"].ToString();
            M_FundClient.NPWP = dr["NPWP"].ToString();
            M_FundClient.SACode = dr["SACode"].ToString();
            M_FundClient.Propinsi = Convert.ToInt32(dr["Propinsi"]);
            M_FundClient.PropinsiDesc = dr["PropinsiDesc"].ToString();
            M_FundClient.TeleponSelular = dr["TeleponSelular"].ToString();
            M_FundClient.Email = dr["Email"].ToString();
            M_FundClient.Fax = dr["Fax"].ToString();
            M_FundClient.DormantDate = dr["DormantDate"].ToString();
            M_FundClient.Description = dr["Description"].ToString();
            //M_FundClient.JumlahBank = Convert.ToInt32(dr["JumlahBank"]);
            M_FundClient.NamaBank1 = Convert.ToInt32(dr["NamaBank1"]);
            M_FundClient.NomorRekening1 = dr["NomorRekening1"].ToString();
            M_FundClient.BICCode1Name = dr["BICCode1Name"].ToString();
            //M_FundClient.BICCode1NameName = dr["BICCode1NameName"].ToString();
            M_FundClient.NamaNasabah1 = dr["NamaNasabah1"].ToString();
            M_FundClient.MataUang1 = dr["MataUang1"].ToString();
            M_FundClient.OtherCurrency = dr["OtherCurrency"].ToString();
            M_FundClient.NamaBank2 = Convert.ToInt32(dr["NamaBank2"]);
            M_FundClient.NomorRekening2 = dr["NomorRekening2"].ToString();
            //M_FundClient.BICCode2 = dr["BICCode2"].ToString();
            M_FundClient.BICCode2Name = dr["BICCode2Name"].ToString();
            M_FundClient.NamaNasabah2 = dr["NamaNasabah2"].ToString();
            M_FundClient.MataUang2 = dr["MataUang2"].ToString();
            M_FundClient.NamaBank3 = Convert.ToInt32(dr["NamaBank3"]);
            M_FundClient.NomorRekening3 = dr["NomorRekening3"].ToString();
            //M_FundClient.BICCode3 = dr["BICCode3"].ToString();
            M_FundClient.BICCode3Name = dr["BICCode3Name"].ToString();
            M_FundClient.NamaNasabah3 = dr["NamaNasabah3"].ToString();
            M_FundClient.MataUang3 = dr["MataUang3"].ToString();
            M_FundClient.IsFaceToFace = Convert.ToBoolean(dr["IsFaceToFace"]);
            M_FundClient.KYCRiskProfile = Convert.ToInt32(dr["KYCRiskProfile"]);
            M_FundClient.KYCRiskProfileDesc = dr["KYCRiskProfileDesc"].ToString();
            M_FundClient.DatePengkinianData = dr["DatePengkinianData"].ToString();

            //Individual
            M_FundClient.NamaDepanInd = dr["NamaDepanInd"].ToString();
            M_FundClient.NamaTengahInd = dr["NamaTengahInd"].ToString();
            M_FundClient.NamaBelakangInd = dr["NamaBelakangInd"].ToString();
            M_FundClient.TempatLahir = dr["TempatLahir"].ToString();
            M_FundClient.TanggalLahir = dr["TanggalLahir"].ToString();
            M_FundClient.JenisKelamin = Convert.ToInt32(dr["JenisKelamin"]);
            M_FundClient.JenisKelaminDesc = dr["JenisKelaminDesc"].ToString();
            M_FundClient.StatusPerkawinan = Convert.ToInt32(dr["StatusPerkawinan"]);
            M_FundClient.StatusPerkawinanDesc = dr["StatusPerkawinanDesc"].ToString();
            M_FundClient.Pekerjaan = Convert.ToInt32(dr["Pekerjaan"]);
            M_FundClient.PekerjaanDesc = dr["PekerjaanDesc"].ToString();
            M_FundClient.OtherOccupation = dr["OtherOccupation"].ToString();
            M_FundClient.OtherSpouseOccupation = dr["OtherSpouseOccupation"].ToString();
            M_FundClient.Pendidikan = Convert.ToInt32(dr["Pendidikan"]);
            M_FundClient.PendidikanDesc = dr["PendidikanDesc"].ToString();
            M_FundClient.OtherPendidikan = dr["OtherPendidikan"].ToString();
            M_FundClient.Agama = Convert.ToInt32(dr["Agama"]);
            M_FundClient.AgamaDesc = dr["AgamaDesc"].ToString();
            M_FundClient.OtherAgama = dr["OtherAgama"].ToString();
            M_FundClient.PenghasilanInd = Convert.ToInt32(dr["PenghasilanInd"]);
            M_FundClient.PenghasilanIndDesc = dr["PenghasilanIndDesc"].ToString();
            M_FundClient.SumberDanaInd = Convert.ToInt32(dr["SumberDanaInd"]);
            M_FundClient.SumberDanaIndDesc = dr["SumberDanaIndDesc"].ToString();
            M_FundClient.OtherSourceOfFunds = dr["OtherSourceOfFunds"].ToString();
            M_FundClient.MaksudTujuanInd = Convert.ToInt32(dr["MaksudTujuanInd"]);
            M_FundClient.MaksudTujuanIndDesc = dr["MaksudTujuanIndDesc"].ToString();
            M_FundClient.OtherInvestmentObjectives = dr["OtherInvestmentObjectives"].ToString();
            M_FundClient.AlamatInd1 = dr["AlamatInd1"].ToString();
            M_FundClient.KodeKotaInd1 = dr["KodeKotaInd1"].ToString();
            M_FundClient.KodeKotaInd1Desc = dr["KodeKotaInd1Desc"].ToString();
            M_FundClient.KodePosInd1 = Convert.ToInt32(dr["KodePosInd1"]);
            M_FundClient.AlamatInd2 = dr["AlamatInd2"].ToString();
            M_FundClient.KodeKotaInd2 = dr["KodeKotaInd2"].ToString();
            M_FundClient.KodeKotaInd2Desc = dr["KodeKotaInd2Desc"].ToString();
            M_FundClient.KodePosInd2 = Convert.ToInt32(dr["KodePosInd2"]);
            M_FundClient.CountryOfBirth = dr["CountryOfBirth"].ToString();
            M_FundClient.CountryOfBirthDesc = dr["CountryOfBirthDesc"].ToString();

            //Institution
            M_FundClient.NamaPerusahaan = dr["NamaPerusahaan"].ToString();
            M_FundClient.Domisili = Convert.ToInt32(dr["Domisili"]);
            M_FundClient.DomisiliDesc = dr["DomisiliDesc"].ToString();
            M_FundClient.Tipe = Convert.ToInt32(dr["Tipe"]);
            M_FundClient.TipeDesc = dr["TipeDesc"].ToString();
            M_FundClient.OtherTipe = dr["OtherTipe"].ToString();
            M_FundClient.Karakteristik = Convert.ToInt32(dr["Karakteristik"]);
            M_FundClient.KarakteristikDesc = dr["KarakteristikDesc"].ToString();
            M_FundClient.OtherCharacteristic = dr["OtherCharacteristic"].ToString();
            M_FundClient.NoSKD = dr["NoSKD"].ToString();
            M_FundClient.PenghasilanInstitusi = Convert.ToInt32(dr["PenghasilanInstitusi"]);
            M_FundClient.PenghasilanInstitusiDesc = dr["PenghasilanInstitusiDesc"].ToString();
            M_FundClient.SumberDanaInstitusi = Convert.ToInt32(dr["SumberDanaInstitusi"]);
            M_FundClient.SumberDanaInstitusiDesc = dr["SumberDanaInstitusiDesc"].ToString();
            M_FundClient.OtherSourceOfFundsIns = dr["OtherSourceOfFundsIns"].ToString();
            M_FundClient.MaksudTujuanInstitusi = Convert.ToInt32(dr["MaksudTujuanInstitusi"]);
            M_FundClient.MaksudTujuanInstitusiDesc = dr["MaksudTujuanInstitusiDesc"].ToString();
            M_FundClient.OtherInvestmentObjectivesIns = dr["OtherInvestmentObjectivesIns"].ToString();
            M_FundClient.OtherInvestmentObjectives = dr["OtherInvestmentObjectives"].ToString();
            M_FundClient.AlamatPerusahaan = dr["AlamatPerusahaan"].ToString();
            M_FundClient.KodeKotaIns = dr["KodeKotaIns"].ToString();
            M_FundClient.KodeKotaInsDesc = dr["KodeKotaInsDesc"].ToString();
            M_FundClient.KodePosIns = Convert.ToInt32(dr["KodePosIns"]);
            M_FundClient.SpouseName = dr["SpouseName"].ToString();
            M_FundClient.MotherMaidenName = dr["MotherMaidenName"].ToString();
            M_FundClient.AhliWaris = dr["AhliWaris"].ToString();
            M_FundClient.HubunganAhliWaris = dr["HubunganAhliWaris"].ToString();
            M_FundClient.NatureOfBusiness = Convert.ToInt32(dr["NatureOfBusiness"]);
            M_FundClient.NatureOfBusinessLainnya = dr["NatureOfBusinessLainnya"].ToString();
            M_FundClient.Politis = Convert.ToInt32(dr["Politis"]);
            M_FundClient.PolitisLainnya = dr["PolitisLainnya"].ToString();
            M_FundClient.TeleponRumah = dr["TeleponRumah"].ToString();
            M_FundClient.OtherAlamatInd1 = dr["OtherAlamatInd1"].ToString();
            M_FundClient.OtherKodeKotaInd1 = dr["OtherKodeKotaInd1"].ToString();
            M_FundClient.OtherKodeKotaInd1Desc = dr["OtherKodeKotaInd1Desc"].ToString();
            M_FundClient.OtherKodePosInd1 = Convert.ToInt32(dr["OtherKodePosInd1"]);
            M_FundClient.OtherPropinsiInd1 = Convert.ToInt32(dr["OtherPropinsiInd1"]);
            M_FundClient.OtherPropinsiInd1Desc = dr["OtherPropinsiInd1Desc"].ToString();
            M_FundClient.OtherNegaraInd1 = dr["OtherNegaraInd1"].ToString();
            M_FundClient.OtherNegaraInd1Desc = dr["OtherNegaraInd1Desc"].ToString();
            M_FundClient.OtherAlamatInd2 = dr["OtherAlamatInd2"].ToString();
            M_FundClient.OtherKodeKotaInd2 = dr["OtherKodeKotaInd2"].ToString();
            M_FundClient.OtherKodeKotaInd2Desc = dr["OtherKodeKotaInd2Desc"].ToString();
            M_FundClient.OtherKodePosInd2 = Convert.ToInt32(dr["OtherKodePosInd2"]);
            M_FundClient.OtherPropinsiInd2 = Convert.ToInt32(dr["OtherPropinsiInd2"]);
            M_FundClient.OtherPropinsiInd2Desc = dr["OtherPropinsiInd2Desc"].ToString();
            M_FundClient.OtherNegaraInd2 = dr["OtherNegaraInd2"].ToString();
            M_FundClient.OtherNegaraInd2Desc = dr["OtherNegaraInd2Desc"].ToString();
            M_FundClient.OtherAlamatInd3 = dr["OtherAlamatInd3"].ToString();
            M_FundClient.OtherKodeKotaInd3 = dr["OtherKodeKotaInd3"].ToString();
            M_FundClient.OtherKodeKotaInd3Desc = dr["OtherKodeKotaInd3Desc"].ToString();
            M_FundClient.OtherKodePosInd3 = Convert.ToInt32(dr["OtherKodePosInd3"]);
            M_FundClient.OtherPropinsiInd3 = Convert.ToInt32(dr["OtherPropinsiInd3"]);
            M_FundClient.OtherPropinsiInd3Desc = dr["OtherPropinsiInd3Desc"].ToString();
            M_FundClient.OtherNegaraInd3 = dr["OtherNegaraInd3"].ToString();
            M_FundClient.OtherNegaraInd3Desc = dr["OtherNegaraInd3Desc"].ToString();
            M_FundClient.OtherTeleponRumah = dr["OtherTeleponRumah"].ToString();
            M_FundClient.OtherTeleponSelular = dr["OtherTeleponSelular"].ToString();
            M_FundClient.OtherEmail = dr["OtherEmail"].ToString();
            M_FundClient.OtherFax = dr["OtherFax"].ToString();
            //M_FundClient.JumlahIdentitasInd = Convert.ToInt32(dr["JumlahIdentitasInd"]);
            M_FundClient.IdentitasInd1 = Convert.ToInt32(dr["IdentitasInd1"]);
            M_FundClient.NoIdentitasInd1 = dr["NoIdentitasInd1"].ToString();
            M_FundClient.RegistrationDateIdentitasInd1 = dr["RegistrationDateIdentitasInd1"].ToString();
            M_FundClient.ExpiredDateIdentitasInd1 = dr["ExpiredDateIdentitasInd1"].ToString();
            M_FundClient.IdentitasInd2 = Convert.ToInt32(dr["IdentitasInd2"]);
            M_FundClient.NoIdentitasInd2 = dr["NoIdentitasInd2"].ToString();
            M_FundClient.RegistrationDateIdentitasInd2 = dr["RegistrationDateIdentitasInd2"].ToString();
            M_FundClient.ExpiredDateIdentitasInd2 = dr["ExpiredDateIdentitasInd2"].ToString();
            M_FundClient.IdentitasInd3 = Convert.ToInt32(dr["IdentitasInd3"]);
            M_FundClient.NoIdentitasInd3 = dr["NoIdentitasInd3"].ToString();
            M_FundClient.RegistrationDateIdentitasInd3 = dr["RegistrationDateIdentitasInd3"].ToString();
            M_FundClient.ExpiredDateIdentitasInd3 = dr["ExpiredDateIdentitasInd3"].ToString();
            M_FundClient.IdentitasInd4 = Convert.ToInt32(dr["IdentitasInd4"]);
            M_FundClient.NoIdentitasInd4 = dr["NoIdentitasInd4"].ToString();
            M_FundClient.RegistrationDateIdentitasInd4 = dr["RegistrationDateIdentitasInd4"].ToString();
            M_FundClient.ExpiredDateIdentitasInd4 = dr["ExpiredDateIdentitasInd4"].ToString();
            M_FundClient.RegistrationNPWP = dr["RegistrationNPWP"].ToString();
            M_FundClient.ExpiredDateSKD = dr["ExpiredDateSKD"].ToString();
            M_FundClient.TanggalBerdiri = dr["TanggalBerdiri"].ToString();
            M_FundClient.LokasiBerdiri = dr["LokasiBerdiri"].ToString();
            M_FundClient.TeleponBisnis = dr["TeleponBisnis"].ToString();
            M_FundClient.NomorAnggaran = dr["NomorAnggaran"].ToString();
            M_FundClient.NomorSIUP = dr["NomorSIUP"].ToString();
            M_FundClient.AssetFor1Year = dr["AssetFor1Year"].ToString();
            M_FundClient.AssetFor2Year = dr["AssetFor2Year"].ToString();
            M_FundClient.AssetFor3Year = dr["AssetFor3Year"].ToString();
            M_FundClient.OperatingProfitFor1Year = dr["OperatingProfitFor1Year"].ToString();
            M_FundClient.OperatingProfitFor2Year = dr["OperatingProfitFor2Year"].ToString();
            M_FundClient.OperatingProfitFor3Year = dr["OperatingProfitFor3Year"].ToString();
            //M_FundClient.JumlahPejabat = Convert.ToInt32(dr["JumlahPejabat"]);
            M_FundClient.NamaDepanIns1 = dr["NamaDepanIns1"].ToString();
            M_FundClient.NamaTengahIns1 = dr["NamaTengahIns1"].ToString();
            M_FundClient.NamaBelakangIns1 = dr["NamaBelakangIns1"].ToString();
            M_FundClient.Jabatan1 = dr["Jabatan1"].ToString();
            //M_FundClient.JumlahIdentitasIns1 = Convert.ToInt32(dr["JumlahIdentitasIns1"]);
            M_FundClient.IdentitasIns11 = Convert.ToInt32(dr["IdentitasIns11"]);
            M_FundClient.NoIdentitasIns11 = dr["NoIdentitasIns11"].ToString();
            M_FundClient.RegistrationDateIdentitasIns11 = dr["RegistrationDateIdentitasIns11"].ToString();
            M_FundClient.ExpiredDateIdentitasIns11 = dr["ExpiredDateIdentitasIns11"].ToString();
            M_FundClient.IdentitasIns12 = Convert.ToInt32(dr["IdentitasIns12"]);
            M_FundClient.NoIdentitasIns12 = dr["NoIdentitasIns12"].ToString();
            M_FundClient.RegistrationDateIdentitasIns12 = dr["RegistrationDateIdentitasIns12"].ToString();
            M_FundClient.ExpiredDateIdentitasIns12 = dr["ExpiredDateIdentitasIns12"].ToString();
            M_FundClient.IdentitasIns13 = Convert.ToInt32(dr["IdentitasIns13"]);
            M_FundClient.NoIdentitasIns13 = dr["NoIdentitasIns13"].ToString();
            M_FundClient.RegistrationDateIdentitasIns13 = dr["RegistrationDateIdentitasIns13"].ToString();
            M_FundClient.ExpiredDateIdentitasIns13 = dr["ExpiredDateIdentitasIns13"].ToString();
            M_FundClient.IdentitasIns14 = Convert.ToInt32(dr["IdentitasIns14"]);
            M_FundClient.NoIdentitasIns14 = dr["NoIdentitasIns14"].ToString();
            M_FundClient.RegistrationDateIdentitasIns14 = dr["RegistrationDateIdentitasIns14"].ToString();
            M_FundClient.ExpiredDateIdentitasIns14 = dr["ExpiredDateIdentitasIns14"].ToString();
            M_FundClient.NamaDepanIns2 = dr["NamaDepanIns2"].ToString();
            M_FundClient.NamaTengahIns2 = dr["NamaTengahIns2"].ToString();
            M_FundClient.NamaBelakangIns2 = dr["NamaBelakangIns2"].ToString();
            M_FundClient.Jabatan2 = dr["Jabatan2"].ToString();
            //M_FundClient.JumlahIdentitasIns2 = Convert.ToInt32(dr["JumlahIdentitasIns2"]);
            M_FundClient.IdentitasIns21 = Convert.ToInt32(dr["IdentitasIns21"]);
            M_FundClient.NoIdentitasIns21 = dr["NoIdentitasIns21"].ToString();
            M_FundClient.RegistrationDateIdentitasIns21 = dr["RegistrationDateIdentitasIns21"].ToString();
            M_FundClient.ExpiredDateIdentitasIns21 = dr["ExpiredDateIdentitasIns21"].ToString();
            M_FundClient.IdentitasIns22 = Convert.ToInt32(dr["IdentitasIns22"]);
            M_FundClient.NoIdentitasIns22 = dr["NoIdentitasIns22"].ToString();
            M_FundClient.RegistrationDateIdentitasIns22 = dr["RegistrationDateIdentitasIns22"].ToString();
            M_FundClient.ExpiredDateIdentitasIns22 = dr["ExpiredDateIdentitasIns22"].ToString();
            M_FundClient.IdentitasIns23 = Convert.ToInt32(dr["IdentitasIns23"]);
            M_FundClient.NoIdentitasIns23 = dr["NoIdentitasIns23"].ToString();
            M_FundClient.RegistrationDateIdentitasIns23 = dr["RegistrationDateIdentitasIns23"].ToString();
            M_FundClient.ExpiredDateIdentitasIns23 = dr["ExpiredDateIdentitasIns23"].ToString();
            M_FundClient.IdentitasIns24 = Convert.ToInt32(dr["IdentitasIns24"]);
            M_FundClient.NoIdentitasIns24 = dr["NoIdentitasIns24"].ToString();
            M_FundClient.RegistrationDateIdentitasIns24 = dr["RegistrationDateIdentitasIns24"].ToString();
            M_FundClient.ExpiredDateIdentitasIns24 = dr["ExpiredDateIdentitasIns24"].ToString();
            M_FundClient.NamaDepanIns3 = dr["NamaDepanIns3"].ToString();
            M_FundClient.NamaTengahIns3 = dr["NamaTengahIns3"].ToString();
            M_FundClient.NamaBelakangIns3 = dr["NamaBelakangIns3"].ToString();
            M_FundClient.Jabatan3 = dr["Jabatan3"].ToString();
            M_FundClient.JumlahIdentitasIns3 = Convert.ToInt32(dr["JumlahIdentitasIns3"]);
            M_FundClient.IdentitasIns31 = Convert.ToInt32(dr["IdentitasIns31"]);
            M_FundClient.NoIdentitasIns31 = dr["NoIdentitasIns31"].ToString();
            M_FundClient.RegistrationDateIdentitasIns31 = dr["RegistrationDateIdentitasIns31"].ToString();
            M_FundClient.ExpiredDateIdentitasIns31 = dr["ExpiredDateIdentitasIns31"].ToString();
            M_FundClient.IdentitasIns32 = Convert.ToInt32(dr["IdentitasIns32"]);
            M_FundClient.NoIdentitasIns32 = dr["NoIdentitasIns32"].ToString();
            M_FundClient.RegistrationDateIdentitasIns32 = dr["RegistrationDateIdentitasIns32"].ToString();
            M_FundClient.ExpiredDateIdentitasIns32 = dr["ExpiredDateIdentitasIns32"].ToString();
            M_FundClient.IdentitasIns33 = Convert.ToInt32(dr["IdentitasIns33"]);
            M_FundClient.NoIdentitasIns33 = dr["NoIdentitasIns33"].ToString();
            M_FundClient.RegistrationDateIdentitasIns33 = dr["RegistrationDateIdentitasIns33"].ToString();
            M_FundClient.ExpiredDateIdentitasIns33 = dr["ExpiredDateIdentitasIns33"].ToString();
            M_FundClient.IdentitasIns34 = Convert.ToInt32(dr["IdentitasIns34"]);
            M_FundClient.NoIdentitasIns34 = dr["NoIdentitasIns34"].ToString();
            M_FundClient.RegistrationDateIdentitasIns34 = dr["RegistrationDateIdentitasIns34"].ToString();
            M_FundClient.ExpiredDateIdentitasIns34 = dr["ExpiredDateIdentitasIns34"].ToString();
            M_FundClient.NamaDepanIns4 = dr["NamaDepanIns4"].ToString();
            M_FundClient.NamaTengahIns4 = dr["NamaTengahIns4"].ToString();
            M_FundClient.NamaBelakangIns4 = dr["NamaBelakangIns4"].ToString();
            M_FundClient.Jabatan4 = dr["Jabatan4"].ToString();
            M_FundClient.JumlahIdentitasIns4 = Convert.ToInt32(dr["JumlahIdentitasIns4"]);
            M_FundClient.IdentitasIns41 = Convert.ToInt32(dr["IdentitasIns41"]);
            M_FundClient.NoIdentitasIns41 = dr["NoIdentitasIns41"].ToString();
            M_FundClient.RegistrationDateIdentitasIns41 = dr["RegistrationDateIdentitasIns41"].ToString();
            M_FundClient.ExpiredDateIdentitasIns41 = dr["ExpiredDateIdentitasIns41"].ToString();
            M_FundClient.IdentitasIns42 = Convert.ToInt32(dr["IdentitasIns42"]);
            M_FundClient.NoIdentitasIns42 = dr["NoIdentitasIns42"].ToString();
            M_FundClient.RegistrationDateIdentitasIns42 = dr["RegistrationDateIdentitasIns42"].ToString();
            M_FundClient.ExpiredDateIdentitasIns42 = dr["ExpiredDateIdentitasIns42"].ToString();
            M_FundClient.IdentitasIns43 = Convert.ToInt32(dr["IdentitasIns43"]);
            M_FundClient.NoIdentitasIns43 = dr["NoIdentitasIns43"].ToString();
            M_FundClient.RegistrationDateIdentitasIns43 = dr["RegistrationDateIdentitasIns43"].ToString();
            M_FundClient.ExpiredDateIdentitasIns43 = dr["ExpiredDateIdentitasIns43"].ToString();
            M_FundClient.IdentitasIns44 = Convert.ToInt32(dr["IdentitasIns44"]);
            M_FundClient.NoIdentitasIns44 = dr["NoIdentitasIns44"].ToString();
            M_FundClient.RegistrationDateIdentitasIns44 = dr["RegistrationDateIdentitasIns44"].ToString();
            M_FundClient.ExpiredDateIdentitasIns44 = dr["ExpiredDateIdentitasIns44"].ToString();

            M_FundClient.AlamatOfficer1 = dr["AlamatOfficer1"].ToString();
            M_FundClient.AlamatOfficer2 = dr["AlamatOfficer2"].ToString();
            M_FundClient.AlamatOfficer3 = dr["AlamatOfficer3"].ToString();
            M_FundClient.AlamatOfficer4 = dr["AlamatOfficer4"].ToString();
            M_FundClient.AgamaOfficer1 = dr["AgamaOfficer1"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AgamaOfficer1"]);
            M_FundClient.AgamaOfficer1Desc = dr["AgamaOfficer1Desc"].ToString();
            M_FundClient.AgamaOfficer2 = dr["AgamaOfficer2"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AgamaOfficer2"]);
            M_FundClient.AgamaOfficer2Desc = dr["AgamaOfficer2Desc"].ToString();
            M_FundClient.AgamaOfficer3 = dr["AgamaOfficer3"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AgamaOfficer3"]);
            M_FundClient.AgamaOfficer3Desc = dr["AgamaOfficer3Desc"].ToString();
            M_FundClient.AgamaOfficer4 = dr["AgamaOfficer4"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AgamaOfficer4"]);
            M_FundClient.AgamaOfficer4Desc = dr["AgamaOfficer4Desc"].ToString();
            M_FundClient.PlaceOfBirthOfficer1 = dr["PlaceOfBirthOfficer1"].ToString();
            M_FundClient.PlaceOfBirthOfficer2 = dr["PlaceOfBirthOfficer2"].ToString();
            M_FundClient.PlaceOfBirthOfficer3 = dr["PlaceOfBirthOfficer3"].ToString();
            M_FundClient.PlaceOfBirthOfficer4 = dr["PlaceOfBirthOfficer4"].ToString();
            M_FundClient.DOBOfficer1 = dr["DOBOfficer1"].ToString();
            M_FundClient.DOBOfficer2 = dr["DOBOfficer2"].ToString();
            M_FundClient.DOBOfficer3 = dr["DOBOfficer3"].ToString();
            M_FundClient.DOBOfficer4 = dr["DOBOfficer4"].ToString();

            // S-INVEST
            //M_FundClient.BIMemberCode1 = dr["BIMemberCode1"].ToString();
            //M_FundClient.BIMemberCode2 = dr["BIMemberCode2"].ToString();
            //M_FundClient.BIMemberCode3 = dr["BIMemberCode3"].ToString();
            M_FundClient.PhoneIns1 = dr["PhoneIns1"].ToString();
            M_FundClient.EmailIns1 = dr["EmailIns1"].ToString();
            M_FundClient.PhoneIns2 = dr["PhoneIns2"].ToString();
            M_FundClient.EmailIns2 = dr["EmailIns2"].ToString();
            M_FundClient.InvestorsRiskProfile = Convert.ToInt32(dr["InvestorsRiskProfile"]);
            M_FundClient.InvestorsRiskProfileDesc = dr["InvestorsRiskProfileDesc"].ToString();
            M_FundClient.AssetOwner = Convert.ToInt32(dr["AssetOwner"]);
            M_FundClient.AssetOwnerDesc = dr["AssetOwnerDesc"].ToString();
            M_FundClient.StatementType = Convert.ToInt32(dr["StatementType"]);
            M_FundClient.StatementTypeDesc = dr["StatementTypeDesc"].ToString();
            M_FundClient.FATCA = Convert.ToInt32(dr["FATCA"]);
            M_FundClient.FATCADesc = dr["FATCADesc"].ToString();
            M_FundClient.TIN = dr["TIN"].ToString();
            M_FundClient.TINIssuanceCountry = dr["TINIssuanceCountry"].ToString();
            M_FundClient.TINIssuanceCountryDesc = dr["TINIssuanceCountryDesc"].ToString();
            M_FundClient.GIIN = dr["GIIN"].ToString();
            M_FundClient.SubstantialOwnerName = dr["SubstantialOwnerName"].ToString();
            M_FundClient.SubstantialOwnerAddress = dr["SubstantialOwnerAddress"].ToString();
            M_FundClient.SubstantialOwnerTIN = dr["SubstantialOwnerTIN"].ToString();
            M_FundClient.BankBranchName1 = dr["BankBranchName1"].ToString();
            M_FundClient.BankBranchName2 = dr["BankBranchName2"].ToString();
            M_FundClient.BankBranchName3 = dr["BankBranchName3"].ToString();
            //M_FundClient.BankCountry1 = dr["BankCountry1"].ToString();
            //M_FundClient.BankCountry1Desc = dr["BankCountry1Desc"].ToString();
            //M_FundClient.BankCountry2 = dr["BankCountry2"].ToString();
            //M_FundClient.BankCountry2Desc = dr["BankCountry2Desc"].ToString();
            //M_FundClient.BankCountry3 = dr["BankCountry3"].ToString();
            //M_FundClient.BankCountry3Desc = dr["BankCountry3Desc"].ToString();

            // new add on
            M_FundClient.CountryofCorrespondence = dr["CountryofCorrespondence"].ToString();
            M_FundClient.CountryofCorrespondenceDesc = dr["CountryofCorrespondenceDesc"].ToString();
            M_FundClient.CountryofDomicile = dr["CountryofDomicile"].ToString();
            M_FundClient.CountryofDomicileDesc = dr["CountryofDomicileDesc"].ToString();
            M_FundClient.SIUPExpirationDate = dr["SIUPExpirationDate"].Equals(DBNull.Value) == true ? "" : dr["SIUPExpirationDate"].ToString();
            M_FundClient.CountryofEstablishment = dr["CountryofEstablishment"].ToString();
            M_FundClient.CountryofEstablishmentDesc = dr["CountryofEstablishmentDesc"].Equals(DBNull.Value) == true ? "" : dr["CountryofEstablishmentDesc"].ToString();
            M_FundClient.CompanyCityName = dr["CompanyCityName"].Equals(DBNull.Value) == true ? "" : dr["CompanyCityName"].ToString();
            M_FundClient.CompanyCityNameDesc = dr["CompanyCityNameDesc"].Equals(DBNull.Value) == true ? "" : dr["CompanyCityNameDesc"].ToString();
            M_FundClient.CountryofCompany = dr["CountryofCompany"].ToString();
            M_FundClient.CountryofCompanyDesc = dr["CountryofCompanyDesc"].Equals(DBNull.Value) == true ? "" : dr["CountryofCompanyDesc"].ToString();
            M_FundClient.NPWPPerson1 = dr["NPWPPerson1"].Equals(DBNull.Value) == true ? "" : dr["NPWPPerson1"].ToString();
            M_FundClient.NPWPPerson2 = dr["NPWPPerson2"].Equals(DBNull.Value) == true ? "" : dr["NPWPPerson2"].ToString();
            M_FundClient.BitIsSuspend = Convert.ToBoolean(dr["BitIsSuspend"]);
            M_FundClient.BitDefaultPayment1 = Convert.ToBoolean(dr["BitDefaultPayment1"]);
            M_FundClient.BitDefaultPayment2 = Convert.ToBoolean(dr["BitDefaultPayment2"]);
            M_FundClient.BitDefaultPayment3 = Convert.ToBoolean(dr["BitDefaultPayment3"]);

            M_FundClient.AlamatKantorInd = dr["AlamatKantorInd"].ToString();
            M_FundClient.KodeKotaKantorInd = Convert.ToInt32(dr["KodeKotaKantorInd"]);
            M_FundClient.KodeKotaKantorIndDesc = dr["KodeKotaKantorIndDesc"].ToString();
            M_FundClient.KodePosKantorInd = Convert.ToInt32(dr["KodePosKantorInd"]);

            M_FundClient.KodePropinsiKantorInd = Convert.ToInt32(dr["KodePropinsiKantorInd"]);
            M_FundClient.KodePropinsiKantorIndDesc = dr["KodePropinsiKantorIndDesc"].ToString();
            M_FundClient.KodeCountryofKantor = dr["KodeCountryofKantor"].ToString();
            M_FundClient.KodeCountryofKantorDesc = dr["KodeCountryofKantorDesc"].ToString();
            M_FundClient.CorrespondenceRT = dr["CorrespondenceRT"].ToString();
            M_FundClient.CorrespondenceRW = dr["CorrespondenceRW"].ToString();
            M_FundClient.DomicileRT = dr["DomicileRT"].ToString();
            M_FundClient.DomicileRW = dr["DomicileRW"].ToString();
            M_FundClient.Identity1RT = dr["Identity1RT"].ToString();
            M_FundClient.Identity1RW = dr["Identity1RW"].ToString();
            M_FundClient.KodeDomisiliPropinsi = Convert.ToInt32(dr["KodeDomisiliPropinsi"]);
            M_FundClient.KodeDomisiliPropinsiDesc = dr["KodeDomisiliPropinsiDesc"].ToString();

            M_FundClient.NamaKantor = dr["NamaKantor"].ToString();
            M_FundClient.JabatanKantor = dr["JabatanKantor"].ToString();

            // RDN
            M_FundClient.BankRDNPK = Convert.ToInt32(dr["BankRDNPK"]);
            M_FundClient.RDNAccountNo = dr["RDNAccountNo"].ToString();
            M_FundClient.RDNAccountName = dr["RDNAccountName"].ToString();
            M_FundClient.RDNBankBranchName = dr["RDNBankBranchName"].ToString();
            M_FundClient.RDNCurrency = dr["RDNCurrency"].ToString();

            //SPOUSE
            M_FundClient.SpouseBirthPlace = dr["SpouseBirthPlace"].ToString();
            M_FundClient.SpouseDateOfBirth = dr["SpouseDateOfBirth"].ToString();
            M_FundClient.SpouseOccupation = Convert.ToInt32(dr["SpouseOccupation"]);
            M_FundClient.SpouseOccupationDesc = dr["SpouseOccupationDesc"].ToString();
            M_FundClient.OtherSpouseOccupation = dr["OtherSpouseOccupation"].ToString();
            M_FundClient.SpouseNatureOfBusiness = Convert.ToInt32(dr["SpouseNatureOfBusiness"]);
            M_FundClient.SpouseNatureOfBusinessDesc = dr["SpouseNatureOfBusinessDesc"].ToString();
            M_FundClient.SpouseNatureOfBusinessOther = dr["SpouseNatureOfBusinessOther"].ToString();
            M_FundClient.SpouseIDNo = dr["SpouseIDNo"].ToString();
            M_FundClient.SpouseNationality = dr["SpouseNationality"].ToString();
            M_FundClient.SpouseNationalityDesc = dr["SpouseNationalityDesc"].ToString();
            M_FundClient.SpouseAnnualIncome = dr["SpouseAnnualIncome"].ToString();

            M_FundClient.CompanyFax = dr["CompanyFax"].ToString();
            M_FundClient.CompanyMail = dr["CompanyMail"].ToString();
            M_FundClient.SegmentClass = dr["SegmentClass"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["SegmentClass"]);
            M_FundClient.MigrationStatus = dr["MigrationStatus"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["MigrationStatus"]);
            M_FundClient.CompanyTypeOJK = dr["CompanyTypeOJK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["CompanyTypeOJK"]);
            M_FundClient.Legality = dr["Legality"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["Legality"]);
            M_FundClient.RenewingDate = dr["RenewingDate"].Equals(DBNull.Value) == true ? "" : dr["RenewingDate"].ToString();
            M_FundClient.BitShareAbleToGroup = dr["BitShareAbleToGroup"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitShareAbleToGroup"]);
            M_FundClient.RemarkBank1 = dr["RemarkBank1"].Equals(DBNull.Value) == true ? "" : dr["RemarkBank1"].ToString();
            M_FundClient.RemarkBank2 = dr["RemarkBank2"].Equals(DBNull.Value) == true ? "" : dr["RemarkBank2"].ToString();
            M_FundClient.RemarkBank3 = dr["RemarkBank3"].Equals(DBNull.Value) == true ? "" : dr["RemarkBank3"].ToString();

            M_FundClient.CantSubs = dr["CantSubs"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["CantSubs"]);
            M_FundClient.CantRedempt = dr["CantRedempt"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["CantRedempt"]);
            M_FundClient.CantSwitch = dr["CantSwitch"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["CantSwitch"]);

            M_FundClient.BeneficialName = dr["BeneficialName"].Equals(DBNull.Value) == true ? "" : dr["BeneficialName"].ToString();
            M_FundClient.BeneficialAddress = dr["BeneficialAddress"].Equals(DBNull.Value) == true ? "" : dr["BeneficialAddress"].ToString();
            M_FundClient.BeneficialIdentity = dr["BeneficialIdentity"].Equals(DBNull.Value) == true ? "" : dr["BeneficialIdentity"].ToString();
            M_FundClient.BeneficialWork = dr["BeneficialWork"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["BeneficialWork"]);
            M_FundClient.BeneficialRelation = dr["BeneficialRelation"].Equals(DBNull.Value) == true ? "" : dr["BeneficialRelation"].ToString();
            M_FundClient.BeneficialHomeNo = dr["BeneficialHomeNo"].Equals(DBNull.Value) == true ? "" : dr["BeneficialHomeNo"].ToString();
            M_FundClient.BeneficialPhoneNumber = dr["BeneficialPhoneNumber"].Equals(DBNull.Value) == true ? "" : dr["BeneficialPhoneNumber"].ToString();
            M_FundClient.BeneficialNPWP = dr["BeneficialNPWP"].Equals(DBNull.Value) == true ? "" : dr["BeneficialNPWP"].ToString();
            M_FundClient.ClientOnBoard = dr["ClientOnBoard"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["ClientOnBoard"]);
            M_FundClient.ClientOnBoardDesc = dr["ClientOnBoardDesc"].Equals(DBNull.Value) == true ? "" : dr["ClientOnBoardDesc"].ToString();
            M_FundClient.Referral = dr["Referral"].Equals(DBNull.Value) == true ? "" : dr["Referral"].ToString();

            M_FundClient.EntryUsersID = dr["EntryUsersID"].ToString();
            M_FundClient.UpdateUsersID = dr["UpdateUsersID"].ToString();
            M_FundClient.ApprovedUsersID = dr["ApprovedUsersID"].ToString();
            M_FundClient.VoidUsersID = dr["VoidUsersID"].ToString();
            M_FundClient.EntryTime = dr["EntryTime"].ToString();
            M_FundClient.UpdateTime = dr["UpdateTime"].ToString();
            M_FundClient.ApprovedTime = dr["ApprovedTime"].ToString();
            M_FundClient.VoidTime = dr["VoidTime"].ToString();
            M_FundClient.DBUserID = dr["DBUserID"].ToString();
            M_FundClient.DBTerminalID = dr["DBTerminalID"].ToString();
            M_FundClient.LastUpdate = dr["LastUpdate"].ToString();
            M_FundClient.LastUpdateDB = dr["LastUpdateDB"].Equals(DBNull.Value) == true ? "" : dr["LastUpdateDB"].ToString();
            M_FundClient.SuspendBy = dr["SuspendBy"].ToString();
            M_FundClient.SuspendTime = dr["SuspendTime"].ToString();
            M_FundClient.UnSuspendBy = dr["UnSuspendBy"].ToString();
            M_FundClient.UnSuspendTime = dr["UnSuspendTIme"].ToString();
            M_FundClient.BitIsAfiliated = dr["BitIsAfiliated"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitIsAfiliated"]);
            M_FundClient.AfiliatedFrom = dr["AfiliatedFromPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["AfiliatedFromPK"]);
            M_FundClient.BitisTA = dr["BitisTA"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["BitisTA"]);
            return M_FundClient;
        }

        public class IncomeStatementPeriod
        {

            public string ID { get; set; }
            public string Name { get; set; }
            public int Groups { get; set; }
            public int ParentPK { get; set; }
            public decimal Actual1 { get; set; }
            public decimal ofTotal1 { get; set; }
            public decimal Budget1 { get; set; }
            public decimal Variance1 { get; set; }
            public decimal Actual2 { get; set; }
            public decimal ofTotal2 { get; set; }
            public decimal Budget2 { get; set; }
            public decimal Variance2 { get; set; }

        }

        public class RevenuePerSalesRpt
        {

            public string ClientName { get; set; }
            public string SalesName { get; set; }
            public string Department { get; set; }
            public string FundID { get; set; }
            public decimal AUM { get; set; }
            public decimal Fee { get; set; }
            public decimal Revenue { get; set; }
            public decimal NetTransaction { get; set; }
            public decimal NetTransactionYTD { get; set; }
            public decimal RevenueYTD { get; set; }
            public decimal Subs { get; set; }
            public decimal Redemp { get; set; }

        }

        public class RadsoftVSBKReport
        {

            public string Fund { get; set; }
            public string Groups { get; set; }
            public decimal MGTFee { get; set; }
            public decimal AUM { get; set; }

        }


        public class UnitAllocation
        {

            public string FundName { get; set; }
            public string InvestorType { get; set; }
            public decimal UnitAmount { get; set; }
            public decimal NAV { get; set; }
            public decimal AUM { get; set; }

            public decimal TotalUnitInstitution { get; set; }
            public decimal TotalUnitRetail { get; set; }
            public decimal TotalAmountInstitution { get; set; }
            public decimal TotalAmountRetail { get; set; }
        }


        public class TrxVolumeAndValue
        {
            public string Type { get; set; }
            public decimal TotalUnitTransacted { get; set; }
            public decimal TotalValue { get; set; }
            public decimal TxnFrequency { get; set; }
            public decimal TotalTransactionUnitRetail { get; set; }
            public decimal TotalvalueRetail { get; set; }
            public decimal TxnFrequencyRetail { get; set; }
            public decimal TotalTransactionUnitIns { get; set; }
            public decimal TotalvalueIns { get; set; }
            public decimal TxnFrequencyIns { get; set; }

        }

        public class DailySalesReport
        {

            public string Channel { get; set; }
            public string YTD { get; set; }
            public decimal GrossSalesMonthBefore { get; set; }
            public decimal GrossSales { get; set; }

            public decimal NETSalesMonthBefore { get; set; }
            public decimal NETSales { get; set; }
            public string Type { get; set; }

            public string PrevMonth { get; set; }
            public string ThisMonth { get; set; }
        }

        public HighRiskMonitoring HighRiskMonitoring_CheckMaxUnitFundAndIncomePerAnnum(string _usersID, decimal _cashAmount, int _fundPK, DateTime _valueDate, int _fundClientPK)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                    
CREATE Table #Reason (Result int, Reason nvarchar(max))

    Declare @MaxUnit numeric (18,6)
    Declare @UnitAmount numeric (18,6)
    Declare @LastNav numeric (18,6)
    select @LastNav = [dbo].[FgetLastCloseNav](@ValueDate,@FundPK)
    select @LastNav = case when @LastNav = 0 then 1000 else @LastNav end 

    select @UnitAmount = sum(Unit) from (
    select sum(UnitAmount) Unit from fundclientPosition where FundPK = @FundPK and Date = @ValueDate
    union all
    select sum(CashAmount/@LastNav) Unit from ClientSubscription where status not in (3,4)and ValueDate = @ValueDate and FundPK = @FundPK
    union all
    select sum(case when UnitAmount = 0 then CashAmount/@LastNav else UnitAmount End) * -1 Unit from ClientRedemption where status not in (3,4)and ValueDate = @ValueDate and FundPK = @FundPK
    union all
    select sum(case when UnitAmount = 0 then CashAmount/@LastNav else UnitAmount End) * -1 Unit from ClientSwitching where status not in (3,4)and ValueDate = @ValueDate and FundPKFrom = @FundPK
    union all
    select sum(case when UnitAmount = 0 then CashAmount/@LastNav else UnitAmount End) Unit from ClientSwitching where status not in (3,4)and ValueDate = @ValueDate and FundPKTo = @FundPK
    union all 
    Select @Amount/@LastNav Unit     
                       
    ) A
    Select @MaxUnit = MaxUnits from Fund where FundPK = @FundPK and status in (1,2)

    IF (@UnitAmount >= @MaxUnit)
    BEGIN
	    Insert into #Reason (Result,Reason)
	    select 1 Result,'Total Unit Subscription Fund : ' + CONVERT(varchar, CAST(@UnitAmount AS money), 1) + ' and Max Unit Fund : ' +  CONVERT(varchar, CAST(@MaxUnit AS money), 1) Reason
    END
    
	DECLARE @IncomePerAnnum numeric(32,0)
    select @IncomePerAnnum = IncomePerAnnum from (
    select case when Code = 1 then 9999999 
    else case when Code = 2 then 50000000 
    else case when Code = 3 then 100000000 
    else case when Code = 4 then 500000000
    else case when Code = 5 then 1000000000
    else  9990000000 end end end end end  IncomePerAnnum from FundClient A 
    left join MasterValue B on A.PenghasilanInd = B.Code and B.ID = 'IncomeIND' and B.Status in (1,2)
    where FundClientPK = @FundClientPK and A.Status =2 and ClientCategory = 1
    union all
    select  case when Code = 1 then 99999999999 
    else case when Code = 2 then 500000000000 
    else case when Code = 3 then 1000000000000
    else case when Code = 4 then 5000000000000
    else case when Code = 5 then 6000000000000
    else  9000000000000 end end end end END * 0.8 IncomePerAnnum from FundClient A 
    left join MasterValue B on A.AssetFor1Year = B.Code and B.ID = 'AssetIns' and B.Status in (1,2)
    where FundClientPK = @FundClientPK and A.Status = 2 and ClientCategory = 2
    ) A


	DECLARE @TrxSubsAYear NUMERIC(22,0)
	DECLARE @TrxRedempAYear NUMERIC(22,0)
	DECLARE @ClientCategory INT 
	DECLARE @DateMinOne DATETIME
		DECLARE @DateMinTwo DATETIME
		DECLARE @TotalAUMInsti NUMERIC(22,0)
	SELECT @ClientCategory = ClientCategory FROM FundClient WHERE FundClientPK = @FundClientPK AND Status IN (1,2)

	IF(@ClientCategory = 1)
	BEGIN
		SELECT @TrxSubsAYear = SUM(ISNULL(CashAmount,0)) FROM dbo.ClientSubscription A WHERE status <> 3 AND Year(A.ValueDate) = Year(@ValueDate)
		AND FundClientPK = @FundClientPK
		SELECT @TrxRedempAYear = SUM(ISNULL(CashAmount,0))  FROM dbo.ClientRedemption A WHERE status <> 3 AND Year(A.ValueDate) = Year(@ValueDate)
		AND FundClientPK = @FundClientPK

		
	END

	ELSE
	BEGIN
		
		SET @DateMinOne = dbo.FWorkingDay(@ValueDate,-1)
		SET @DateMinTwo = dbo.FWorkingDay(@ValueDate,-2)
		SELECT @TotalAUMInsti = SUM(ISNULL(A.UnitAmount,0) * ISNULL(@LastNav,0)) FROM FundClientPosition A 
		WHERE A.Date = @DateMinTwo
		AND A.FundClientPK = @FundClientPK

		
	END
	SET @TrxSubsAYear = ISNULL(@TrxSubsAYear,0)
		SET @TrxRedempAYear = ISNULL(@TrxRedempAYear,0)
		SET @TotalAUMInsti = ISNULL(@TotalAUMInsti,0)

    IF (@Amount + @TrxSubsAYear - @TrxRedempAYear + @TotalAUMInsti > (@IncomePerAnnum*12))
    BEGIN
    Declare @Reason nvarchar(500)
    Declare @PK int
                        
    set @Reason = 'Total Amount Subscription For this Year : ' + CONVERT(varchar, CAST(@Amount + @TrxSubsAYear - @TrxRedempAYear + @TotalAUMInsti AS money), 1) + ' and Max Income Per Annum : ' +  CONVERT(varchar, CAST(@IncomePerAnnum AS money), 1) + ' / Year'

    Insert into #Reason (Result,Reason)
    select 1 Result, @Reason


    END


    IF EXISTS(select Result,Reason from #Reason)
    BEGIN
	    DECLARE @combinedString VARCHAR(MAX)
	    SELECT @combinedString = COALESCE(@combinedString + '; ', '') + Reason
	    FROM #Reason
	    SELECT 1 Result,'Add Cancel, Please Check : ' + @combinedString as Reason

	    select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
	    set @PK = isnull(@PK,1)
	    insert into HighRiskMonitoring( HighRiskMonitoringPK,HistoryPK,status,Selected,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
	    Select @PK,1,1,0,@FundClientPK,@valuedate,@combinedString,@UsersID,@valuedate,@LastUpdate
    END
    ELSE
    BEGIN
	    select 0 Result, '' Reason
    END
                           ";

                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        cmd.Parameters.AddWithValue("@Amount", _cashAmount);
                        cmd.Parameters.AddWithValue("@FundClientPK", _fundClientPK);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new HighRiskMonitoring()
                                {
                                    Result = dr["Result"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["Result"]),
                                    Reason = dr["Reason"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Reason"]),

                                };
                            }
                            else
                            {
                                return new HighRiskMonitoring()
                                {
                                    Result = 0,
                                    Reason = "",

                                };
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public class RHBDashboard
        {


        }

        //MIS
        public Boolean GenerateReportMIS(string _userID, MISRpt _misRpt)
        {
            #region Peach Tree By Cost Center Without Adjustment
            if (_misRpt.ReportName.Equals("Peach Tree By Cost Center Without Adjustment"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = @"
                                Select isnull(E.ID,'') CostCenter,C.ID,C.Name,
                                sum(isnull(D.CurrentBalance,0)) CurrentBalance,sum(isnull(F.amount/12,0)) ActBudget,
                                sum(isnull(D.EndBalance,0)) Endbalance,sum(isnull(F.amount,0)/12 * month(@DateFrom)) YTDBudget,G.Row,G.Col 
                                from COADestinationOneMappingRpt G
                                Left Join COADestinationOne C on G.CoaDestinationOnePK = C.CoaDestinationOnePK and C.status = 2
                                left join MappingSourceToDestinationOne A on C.CoaDestinationOnePK = A.CoaDestinationOnePK and C.status = 2 
                                left join BalanceFromSource D on A.CoaFromSourcePK = D.CoaFromSourcePK and A.status = 2
                                left join MISCostCenter E on D.MISCostCenterPK = E.MISCostCenterPK and E.status = 2
                                Left join BudgetCOADestinationOne F on D.MisCostCenterPK = F.MisCostCenterPK 
                                and F.PeriodPK = 3 and A.COADestinationOnePK = F.COADestinationOnePK
                                where C.status = 2 --and isnull(E.ID,'') <> ''
                                and (E.MisCostCenterPK = @MISCostCenterFrom OR E.ID is null) and Year(D.Date) = Year(@DateFrom) and Month(D.Date) = Month(@DateFrom)
                                Group by C.ID,C.Name,C.CoaDestinationOnePK,E.ID,G.Row,G.Col
                                order by C.CoaDestinationOnePK asc
                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _misRpt.ValueDate);
                            cmd.Parameters.AddWithValue("@MISCostCenterFrom", _misRpt.MISCostCenterFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PeachTreeByCCWithoutAdjustment" + "_" + _userID + "_" + _host.Get_MISCostCenterID(_misRpt.MISCostCenterFrom) + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "PeachTree_A.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                                        while (dr0.Read())
                                        {
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), Convert.ToInt32(dr0["Col"])].Value = dr0["Name"].ToString();
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 4].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 2].Value = Convert.ToDecimal(dr0["CurrentBalance"]);
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 3].Value = Convert.ToDecimal(dr0["ActBudget"]);
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 4].Value = Convert.ToDecimal(dr0["CurrentBalance"]) - Convert.ToDecimal(dr0["ActBudget"]);
                                            if (Convert.ToDecimal(dr0["ActBudget"]) > 0)
                                            {
                                                worksheet.Cells[Convert.ToInt32(dr0["Row"]), 5].Value = (Convert.ToDecimal(dr0["CurrentBalance"]) - Convert.ToDecimal(dr0["ActBudget"])) / Convert.ToDecimal(dr0["ActBudget"]);

                                            }

                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 6].Value = Convert.ToDecimal(dr0["EndBalance"]);
                                            if (Convert.ToDecimal(dr0["EndBalance"]) == 0)
                                            {
                                                worksheet.Row(Convert.ToInt32(dr0["Row"])).Height = 0;
                                            }
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 7].Value = Convert.ToDecimal(dr0["YTDBudget"]);
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 8].Value = Convert.ToDecimal(dr0["EndBalance"]) - Convert.ToDecimal(dr0["YTDBudget"]);
                                            if (Convert.ToDecimal(dr0["YTDBudget"]) > 0)
                                            {
                                                worksheet.Cells[Convert.ToInt32(dr0["Row"]), 9].Value = (Convert.ToDecimal(dr0["EndBalance"]) - Convert.ToDecimal(dr0["YTDBudget"])) / Convert.ToDecimal(dr0["YTDBudget"]);

                                            }
                                        }
                                        worksheet.Calculate();
                                        package.Save();
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Peach Tree By Cost Center With Adjustment
            if (_misRpt.ReportName.Equals("Peach Tree By Cost Center With Adjustment"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = @"
                               
                                Select isnull(E.ID,'') CostCenter,C.ID,C.Name,
                                Case when month(@DateFrom) = 3 then sum(isnull(D.CurrentBalance,0)) + sum(isnull(H.amount,0)) else sum(isnull(D.CurrentBalance,0)) end  CurrentBalance,
                                sum(isnull(F.amount/12,0)) ActBudget,
                                Case when month(@DateFrom) >= 3 then sum(isnull(D.EndBalance,0)) + sum(isnull(H.amount,0)) else sum(isnull(D.EndBalance,0)) end Endbalance,
                                sum(isnull(F.amount,0)/12 * month(@DateFrom)) YTDBudget,G.Row,G.Col
                                from COADestinationOneMappingRpt G
                                Left Join COADestinationOne C on G.CoaDestinationOnePK = C.CoaDestinationOnePK and C.status = 2
                                left join MappingSourceToDestinationOne A on C.CoaDestinationOnePK = A.CoaDestinationOnePK and C.status = 2 
                                left join BalanceFromSource D on A.CoaFromSourcePK = D.CoaFromSourcePK and A.status = 2
                                left join MISCostCenter E on D.MISCostCenterPK = E.MISCostCenterPK and E.status = 2
                                Left join BudgetCOADestinationOne F on D.MisCostCenterPK = F.MisCostCenterPK and A.COADestinationOnePK = F.COADestinationOnePK
                                and F.status = 2 and F.PeriodPK = 3
                                Left join AuditCOAFromSource H on D.COAFromSourcePK = H.COAFromSourcePK and D.MISCostCenterPK = H.MISCostCenterPK and H.status = 2
                                and H.PeriodPK = 3

                                where C.status = 2 --and isnull(E.ID,'') <> ''
                                and (E.MisCostCenterPK = @MISCostCenterFrom OR E.ID is null) and Year(D.Date) = Year(@DateFrom) and Month(D.Date) = Month(@DateFrom)

                                Group by C.ID,C.Name,C.CoaDestinationOnePK,E.ID,G.Row,G.Col
                                order by C.CoaDestinationOnePK asc

                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _misRpt.ValueDate);
                            cmd.Parameters.AddWithValue("@MISCostCenterFrom", _misRpt.MISCostCenterFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PeachTreeByCCWithAdjustment" + "_" + _userID + "_" + _host.Get_MISCostCenterID(_misRpt.MISCostCenterFrom) + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "PeachTree_A.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                                        while (dr0.Read())
                                        {
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), Convert.ToInt32(dr0["Col"])].Value = dr0["Name"].ToString();
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 4].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 2].Value = Convert.ToDecimal(dr0["CurrentBalance"]);
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 3].Value = Convert.ToDecimal(dr0["ActBudget"]);
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 4].Value = Convert.ToDecimal(dr0["CurrentBalance"]) - Convert.ToDecimal(dr0["ActBudget"]);
                                            if (Convert.ToDecimal(dr0["ActBudget"]) > 0)
                                            {
                                                worksheet.Cells[Convert.ToInt32(dr0["Row"]), 5].Value = (Convert.ToDecimal(dr0["CurrentBalance"]) - Convert.ToDecimal(dr0["ActBudget"])) / Convert.ToDecimal(dr0["ActBudget"]);

                                            }

                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 6].Value = Convert.ToDecimal(dr0["EndBalance"]);
                                            if (Convert.ToDecimal(dr0["EndBalance"]) == 0)
                                            {
                                                worksheet.Row(Convert.ToInt32(dr0["Row"])).Height = 0;
                                            }
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 7].Value = Convert.ToDecimal(dr0["YTDBudget"]);
                                            worksheet.Cells[Convert.ToInt32(dr0["Row"]), 8].Value = Convert.ToDecimal(dr0["EndBalance"]) - Convert.ToDecimal(dr0["YTDBudget"]);
                                            if (Convert.ToDecimal(dr0["YTDBudget"]) > 0)
                                            {
                                                worksheet.Cells[Convert.ToInt32(dr0["Row"]), 9].Value = (Convert.ToDecimal(dr0["EndBalance"]) - Convert.ToDecimal(dr0["YTDBudget"])) / Convert.ToDecimal(dr0["YTDBudget"]);

                                            }
                                        }
                                        worksheet.Calculate();
                                        package.Save();
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion
            else
            {
                return false;
            }
        }

        //FINANCE
        public Boolean GenerateReportFinance(string _userID, FinanceRpt _financeRpt)
        {
            #region Cashier Voucher
            if (_financeRpt.ReportName.Equals("Cashier Voucher"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _type = "";
                            string _paramBankFromDebitCashRef = "";
                            string _paramBankFromCreditCashRef = "";
                            string _paramReferenceFrom = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromDebitCashRef = "And C.DebitCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromDebitCashRef = "";
                            }

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromCreditCashRef = "And C.CreditCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromCreditCashRef = "";
                            }


                            if (!_host.findString(_financeRpt.ReferenceFrom.ToLower(), "'all'", ",") && !string.IsNullOrEmpty(_financeRpt.ReferenceFrom))
                            {
                                _paramReferenceFrom = " and C.Reference  in ( " + _financeRpt.ReferenceFrom + " ) ";
                            }
                            else
                            {
                                _paramReferenceFrom = "";
                            }

                            if (_financeRpt.Status == 1)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _status = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _status = " and C.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _status = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status not in (3,4) ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _status = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status not in (3,4) ";
                            }

                            if (_financeRpt.CashierType == "IN")
                            {
                                _type = "  C.Type in ( 'CR') ";
                            }
                            else if (_financeRpt.CashierType == "OUT")
                            {
                                _type = "  C.Type in ( 'CP') ";
                            }
                            else if (_financeRpt.CashierType == "ALL")
                            {
                                _type = "  C.Type in ( 'CR','CP') ";
                            }


                            cmd.CommandText =
                                @" SELECT A.CheckedBy,A.ApprovedBy,A.Reference,a.CashierID,A.ValueDate,A.AccountID,A.AccountName 
                            ,A.Description,A.DebitCredit,SUM(A.Debit) BaseDebit,SUM(A.Credit) BaseCredit,A.DepartmentID,A.RefNo,A.InstrumentID,A.OfficeID,A.AgentID,A.ConsigneeID
                            FROM (
	                            Select C.EntryUsersID CheckedBy,C.EntryUsersID ApprovedBy,       
	                            reference, CashierID , valuedate,A.ID AccountID, A.Name AccountName, '' Description,         
	                            CASE WHEN SUM(Case When DebitCredit ='D' AND C.Type = 'CR' 
	                            THEN BaseDebit ELSE CASE WHEN DebitCredit = 'C' AND C.Type = 'CR' then BaseDebit * -1 
	                            ELSE CASE WHEN DebitCredit = 'D' AND C.Type = 'CP' THEN C.BaseCredit * - 1 ELSE BaseCredit END END END
	                            ) < 0 AND C.Type = 'CR' THEN 'D' ELSE 'C' END DebitCredit, 

	                            CASE WHEN SUM(Case When DebitCredit ='D' AND C.Type = 'CR' 
	                            THEN BaseDebit ELSE CASE WHEN DebitCredit = 'C' AND C.Type = 'CR' then BaseDebit * -1 
	                            ELSE CASE WHEN DebitCredit = 'D' AND C.Type = 'CP' THEN C.BaseCredit * - 1 ELSE BaseCredit END END END
	                            ) < 0 AND C.Type = 'CR'
	                            THEN ABS(SUM(Case When DebitCredit ='D' AND C.Type = 'CR' 
	                            THEN BaseDebit ELSE CASE WHEN DebitCredit = 'C' AND C.Type = 'CR' then BaseDebit * -1 
	                            ELSE CASE WHEN DebitCredit = 'D' AND C.Type = 'CP' THEN C.BaseCredit * - 1 ELSE BaseCredit END END END)) 
	                            ELSE 0 END Debit,

	                            CASE WHEN SUM(Case When DebitCredit ='D' AND C.Type = 'CR' 
	                            THEN BaseDebit ELSE CASE WHEN DebitCredit = 'C' AND C.Type = 'CR' then BaseDebit * -1 
	                            ELSE CASE WHEN DebitCredit = 'D' AND C.Type = 'CP' THEN C.BaseCredit * - 1 ELSE BaseCredit END END END
	                            ) < 0 AND C.Type = 'CR' 
	                            THEN 0 
	                            ELSE ABS(SUM(Case When DebitCredit ='D' AND C.Type = 'CR' 
	                            THEN BaseDebit ELSE CASE WHEN DebitCredit = 'C' AND C.Type = 'CR' then BaseDebit * -1 
	                            ELSE CASE WHEN DebitCredit = 'D' AND C.Type = 'CP' THEN C.BaseCredit * - 1 ELSE BaseCredit END END END)) END Credit,

	                            '' DepartmentID,
	                            case when Reference = '' or Reference is null then 0 else cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) end RefNo,'' InstrumentID,'' OfficeID,'' AgentID,'' ConsigneeID   
	                            from Cashier C       
	                            left join Account A ON CASE WHEN C.Type = 'CR' then C.DebitAccountPK ELSE C.CreditAccountPK end =A.Accountpk and A.status = 2       
	                            left join Office E on C.OfficePK = E.OfficePK and E.status = 2       
	                            left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2       
	                            left join Agent G on C.AgentPK = G.AgentPK and G.status = 2       
	                            left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
	                            left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2       
	                            WHERE " + _type + _paramReferenceFrom + _status + @"and C.ValueDate between @Datefrom and @DateTo  
	                            group by C.EntryUsersID,Reference,CashierID , Valuedate,A.ID, A.Name ,F.ID ,C.Type	
	                            )A
	                            GROUP BY  A.CheckedBy,A.ApprovedBy,A.Reference, A.CashierID,A.ValueDate,A.AccountID,A.AccountName ,A.Description,A.DebitCredit,
	                            A.DepartmentID,A.RefNo,A.InstrumentID,A.OfficeID,A.AgentID,A.ConsigneeID      
                                UNION ALL       
                                 Select C.EntryUsersID CheckedBy,C.EntryUsersID ApprovedBy,       
                                Reference ,CashierID , ValueDate,A.ID AccountID, A.Name AccountName, C.Description,     
                                DebitCredit,(Case When DebitCredit ='D' then BaseDebit else 0 end) BaseDebit,(Case When DebitCredit ='D' then 0 else BaseCredit end) BaseCredit,F.ID DepartmentID,
                                case when Reference = '' or Reference is null then 0 else cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) end RefNo,'' InstrumentID,'' OfficeID,'' AgentID,'' ConsigneeID       
                                from Cashier C       
                                left join Account A on CASE WHEN C.Type = 'CR' then C.CreditAccountPK ELSE C.DebitAccountPK end =A.Accountpk and A.status = 2     
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2       
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2       
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2       
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2       
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2       
                                WHERE  " + _type + _paramReferenceFrom + _status + "and C.ValueDate between @Datefrom and @DateTo";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@BankFrom", _financeRpt.BankFrom);
                            cmd.Parameters.AddWithValue("@ReferenceFrom", _financeRpt.ReferenceFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CashierVoucher" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Cashier Voucher");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CashierVoucher> rList = new List<CashierVoucher>();
                                        while (dr0.Read())
                                        {
                                            CashierVoucher rSingle = new CashierVoucher();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.CashierID = Convert.ToString(dr0["CashierID"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.CheckedBy = Convert.ToString(dr0["CheckedBy"]);
                                            rSingle.ApprovedBy = Convert.ToString(dr0["ApprovedBy"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                orderby r.ValueDate, r.RefNo ascending
                                                group r by new { r.CashierID, r.ValueDate, r.CheckedBy, } into rGroup
                                                select rGroup;


                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 1;
                                            if (rsHeader.Key.ValueDate >= _compareDate)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "PT RHB ASSET MANAGEMENT INDONESIA";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 13;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "PT RHB OSK Asset Management";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 13;
                                            }

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Cashier ID : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CashierID;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "DATE : ";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.ValueDate;

                                            //worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(rsHeader.Key.ValueDate).ToShortDateString();
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "BANK";
                                            //worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BankID + "-" + rsHeader.Key.BankName;
                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "ACCOUNT ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "NAME";
                                            worksheet.Cells[incRowExcel, 4].Value = "DESCRIPTION";
                                            worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                            worksheet.Cells[incRowExcel, 8].Value = "INST";
                                            worksheet.Cells[incRowExcel, 9].Value = "OFF";
                                            worksheet.Cells[incRowExcel, 10].Value = "DIR";
                                            worksheet.Cells[incRowExcel, 11].Value = "CONS";
                                            string _range = "A" + incRowExcel + ":K" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":K" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":K" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":K" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccountID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccountName;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Description;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                if (_financeRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.OfficeID;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.AgentID;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.ConsigneeID;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;





                                            }

                                            int RowF = incRowExcel - 1;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;





                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            if (_financeRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                            }
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 5].Value = worksheet.Cells[incRowExcel - 1, 5].Value;
                                            worksheet.Cells[incRowExcel, 6].Value = worksheet.Cells[incRowExcel - 1, 6].Value;
                                            if (_financeRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                            }
                                            worksheet.Cells[incRowExcel - 1, 5].Value = "";
                                            worksheet.Cells[incRowExcel - 1, 6].Value = "";
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 2].Value = "Prepared By";
                                            worksheet.Cells[incRowExcel, 4].Value = "Checked By";
                                            worksheet.Cells[incRowExcel, 6].Value = "Approved By";
                                            incRowExcel = incRowExcel + 5;
                                            worksheet.Cells[incRowExcel, 2].Value = "(     " + rsHeader.Key.CheckedBy;
                                            worksheet.Cells[incRowExcel, 3].Value = "      )";
                                            worksheet.Cells[incRowExcel, 4].Value = "(                                         )";
                                            worksheet.Cells[incRowExcel, 6].Value = "(                                 ";
                                            worksheet.Cells[incRowExcel, 7].Value = "      )";
                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }

                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(11).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();
                                        worksheet.Column(11).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER VOUCHER";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                    }
                                    return true;
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Bank Reconcile
            else if (_financeRpt.ReportName.Equals("Bank Reconcile"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramBankFromDebitCashRef = "";
                            string _paramBankFromCreditCashRef = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromDebitCashRef = "And C.DebitCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromDebitCashRef = "";
                            }

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromCreditCashRef = "And C.CreditCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromCreditCashRef = "";
                            }

                            if (_financeRpt.Status == 1)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";

                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";

                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _status = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";

                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _status = " and C.Status = 1  ";

                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _status = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status not in (3,4) ";

                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _status = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status not in (3,4) ";

                            }


                            cmd.CommandText =
                            @"DECLARE @Description nvarchar(Max)    
                            Declare @CurCashierID nvarchar(max) 
                            Declare @CurType nvarchar(max) 
                            Declare @CurDescription nvarchar(max)    
                            set @Description = ''    

                            CREATE TABLE #TempDescription ( tmDescription nvarChar( max ), CashierID nvarchar(100),Type nvarchar(100))    
                            CREATE TABLE #TempFinalDescription ( tmDescription nvarChar( max ), CashierID nvarchar(100),Type nvarchar(100) )    
                            Insert into #TempDescription    
                            Select distinct Description, CashierID, Type  From Cashier C where    
                            ValueDate Between @DateFrom and @DateTo    
                            " + _status + @"
                            group By CashierID,Description,Type    
                            Declare A Cursor For    
                            Select distinct CashierID,Type From Cashier where    
                            ValueDate Between @DateFrom and @DateTo    
                            Open A    
                            Fetch Next From A    
                            into @CurCashierID,@CurType   
                            while @@Fetch_Status = 0    
                            BEGIN    
                            set @Description = ''    
                            select @Description =  @description  + ' || ' +   tmDescription    
                            from #TempDescription Where CashierID = @CurCashierID and Type = @CurType     
                            Insert into #TempFinalDescription    
                            select @Description,@CurCashierID,@CurType    
                            FETCH NEXT FROM A INTO @CurCashierID,@CurType    
                            END    
                            Close A    
                            Deallocate A    
                            Select A.Type,A.ValueDate,A.Reference,A.CashierID,case when A.Reference = '' or A.Reference is null then 0 else cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) end RefNo,A.AccountID,A.AccountName, B.tmDescription Description,    
                            Case When sum(A.BaseDebit) > sum(A.BaseCredit) then 'C' else 'D' end DebitCredit,    
                            case when sum(A.BaseDebit) < sum(A.BaseCredit) then sum(A.BaseCredit) - sum(A.BaseDebit) else 0 end BaseDebit,    
                            case when sum(A.BaseDebit) > sum(A.BaseCredit) then sum(A.BaseDebit) - sum(A.BaseCredit) else 0 end BaseCredit,    
                            [dbo].[FGetStartAccountBalance](@DateFrom,C.AccountPK) StartBalance,isnull(ConsigneeID,'') ConsigneeID    
                            From (    
                            Select        
                            C.Type,reference,C.CashierID , valuedate,A.ID AccountID, A.Name AccountName, C.Description,         
                            Case When DebitCredit = 'D' then BaseDebit else 0 End BaseDebit,    
                            Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,    
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,    
                            [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance , H.ID ConsigneeID      
                            from Cashier C           
                            left join Office E on C.OfficePK = E.OfficePK and E.status in (1,2)           
                            left join Department F on C.DepartmentPK = F.DepartmentPK and F.status in (1,2)        
                            left join Agent G on C.AgentPK = G.AgentPK and G.status in (1,2)          
                            left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status in (1,2)         
                            left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status in (1,2)     
                            left join Account A on C.Debitaccountpk =A.Accountpk and A.status in (1,2)     
                            Where C.DebitAccountPK IN  (SELECT AccountPK FROM dbo.CashRef WHERE status in (1,2)) and C.ValueDate between @DateFrom and @DateTo           
                            AND C.creditAccountPK <> C.DebitAccountPK    
                            " + _status + _paramBankFromDebitCashRef + @"
                            UNION ALL           
                            Select          
                            C.Type,reference ,C.CashierID , valuedate,A.ID AccountID, A.Name AccountName, c.Description,           
                            Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,    
                            Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,    
                            cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,    
                            [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK)   StartBalance, H.ID ConsigneeID             
                            from Cashier C           
                            left join Office E on C.OfficePK = E.OfficePK and E.status = 2          
                            left join Department F on C.DepartmentPK = F.DepartmentPK and F.status in (1,2)       
                            left join Agent G on C.AgentPK = G.AgentPK and G.status in (1,2)           
                            left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status in (1,2)        
                            left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status in (1,2)      
                            left join Account A on C.Creditaccountpk =A.Accountpk and A.status in (1,2)    
                            Where C.CreditAccountPK IN  (SELECT AccountPK FROM dbo.CashRef WHERE status in (1,2)) and C.ValueDate between @DateFrom and @DateTo      
                            AND C.creditAccountPK <> C.DebitAccountPK  
                            " + _status + _paramBankFromCreditCashRef + @"
                            ) A left join #TempFinalDescription B on A.CashierID = B.CashierID and A.Type = B.Type    
                            left join Account C on A.AccountID = C.ID and C.status in (1,2)    
                            Group By A.Type,A.ValueDate,A.AccountID,A.AccountName,A.Reference, A.CashierID ,   
                            B.tmDescription,[dbo].[FGetStartAccountBalance](@DateFrom,C.AccountPK),case when A.Reference = '' or A.Reference is null then 0 else cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) end,A.ConsigneeID  
                            Order By ValueDate,RefNo Asc ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@BankFrom", _financeRpt.BankFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BankReconcile" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Bank Reconcile");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            //rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            //rSingle.OfficeID = Convert.ToString(dr0["OfficeID"]);
                                            //rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            //rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                            ////rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            //rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.AccountID, r.AccountName, r.StartBalance } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 3].Value = _financeRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 3].Value = _financeRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE :";
                                            if (_financeRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                            }
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "REF";
                                            worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                            //worksheet.Cells[incRowExcel, 5].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 6].Value = "INST";
                                            worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = "JOURNAL NO";
                                            //worksheet.Cells[incRowExcel, 3].Value = "DESCRIPTION";
                                            //worksheet.Cells[incRowExcel, 6].Value = "OFF";
                                            //worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 8].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 9].Value = "CONSG";
                                            //worksheet.Cells[incRowExcel, 10].Value = "Instrument";
                                            //worksheet.Cells[incRowExcel, 11].Value = "BALANCE";

                                            _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                //worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.ValueDate).ToShortDateString();
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;

                                                worksheet.Cells[incRowExcel, 7].Formula = "=G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel;
                                                if (_financeRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.journalPK;
                                                //worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.DetailDescription;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.OfficeID;

                                                //worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentID;
                                                //worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 9].Value = rsDetail.ConsigneeID;

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            incRowExcel = incRowExcel + 3;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                            //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 2].Value = ")";
                                            //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                            //worksheet.Cells[incRowExcel, 6].Value = ")";
                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(8).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 BANK RECONCILE";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Cashier and Journal Activity
            else if (_financeRpt.ReportName.Equals("Cashier and Journal Activity"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusCashier = "";
                            string _statusJournal = "";
                            string _paramAccount = "";

                            if (!_host.findString(_financeRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.AccountFrom))
                            {
                                _paramAccount = "And A.AccountPK  in ( " + _financeRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_financeRpt.Status == 1)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 1 and J.Reversed = 1 ";
                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _statusCashier = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";
                                _statusJournal = " and J.Status = 2 and J.Posted = 0 and J.Reversed = 0 ";
                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _statusCashier = " and C.Status = 1  ";
                                _statusJournal = " and J.Status = 1  ";
                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _statusCashier = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _statusCashier = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0  ";
                                _statusJournal = " and (J.Status = 1 Or J.Status = 2 or J.Posted = 1) and J.Reversed = 0  ";
                            }


                            cmd.CommandText =


                            " Select    " +
                            " A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, C.Description,      " +
                            " DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit, " +
                            " Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit, " +
                            " Case When A.Type > 2 then F.ID else '' end  DepartmentID, " +
                            " Case When A.Type > 0 then I.ID else '' end InstrumentID, " +
                            " Case When A.Type > 2 then E.ID else '' end OfficeID, " +
                            " Case When A.Type > 2 then G.ID else '' end AgentID, " +
                            " Case When A.Type > 2 then H.ID else '' end ConsigneeID, " +
                            " case when Reference = '' or Reference is null then 0 else cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) end RefNo,  " +
                            " [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance    " +
                            " from Cashier C        " +
                            " left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2   " +
                            " left join Office E on C.OfficePK = E.OfficePK and E.status = 2        " +
                            " left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2     " +
                            " left join Agent G on C.AgentPK = G.AgentPK and G.status = 2        " +
                            " left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2      " +
                            " left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2    " +
                                //" left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2 " +
                            " Where C.ValueDate between @DateFrom and @DateTo       " +
                            " and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                            _paramAccount +
                            _statusCashier +
                                "\n " +
                            " UNION ALL        " +
                                "\n " +
                            " Select       " +
                            " A.Type AccountType,reference , valuedate,A.ID AccountID, A.Name AccountName, c.Description,       " +
                            " DebitCredit,Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit, " +
                            " Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit, " +
                            " Case When A.Type > 2 then F.ID else '' end  DepartmentID, " +
                            " Case When A.Type > 0 then I.ID else '' end InstrumentID, " +
                            " Case When A.Type > 2 then E.ID else '' end OfficeID, " +
                            " Case When A.Type > 2 then G.ID else '' end AgentID, " +
                            " Case When A.Type > 2 then H.ID else '' end ConsigneeID, " +
                            " case when Reference = '' or Reference is null then 0 else cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) end RefNo,  " +
                            " [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance           " +
                            " from Cashier C        " +
                            " left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2        " +
                            " left join Office E on C.OfficePK = E.OfficePK and E.status = 2        " +
                            " left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2     " +
                            " left join Agent G on C.AgentPK = G.AgentPK and G.status = 2        " +
                            " left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2        " +
                            " left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2       " +
                                //  " left join Cashref J on C.DebitCashRefPK = J.CashRefPK and J.status = 2 " +
                            " Where C.ValueDate between @DateFrom and @DateTo     " +
                            _paramAccount +
                                //" and A.AccountPK not in (select AccountPk From CashRef where Status = 2) " +
                            _statusCashier +
                                "\n " +
                            " UNION ALL  " +
                                "\n " +
                            " select  A.Type AccountType,J.Reference,J.ValueDate,A.ID AccountID,A.Name AccountName, B.DetailDescription Description,   " +
                            " B.DebitCredit,B.BaseDebit,B.BaseCredit,F.ID DepartmentID,I.ID InstrumentID,E.ID OfficeID,G.ID AgentID,H.ID ConsigneeID,    " +
                            " case when Reference = '' or Reference is null then 0 else cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) end RefNo,  " +
                            " [dbo].[FGetStartAccountBalance](@DateFrom,B.AccountPK) StartBalance     " +
                            " from journal J    " +
                            " left join journalDetail B on J.JournalPK = B.JournalPK    " +
                            " left join Account A on B.AccountPK = A.AccountPK and A.status = 2    " +
                            " left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2    " +
                            " left join Office E on B.OfficePK = E.OfficePK and E.status = 2    " +
                            " left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2    " +
                            " left join Agent G on B.AgentPK = G.AgentPK and G.status = 2    " +
                            " left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2    " +
                            " left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2    " +
                            " Where J.ValueDate Between @DateFrom and @DateTo and year(J.ValueDate) = YEAR(@DateTo)  " +
                            " and A.AccountPK not in (select AccountPk From CashRef where Status = 2)  " +
                            _paramAccount +
                            _statusJournal +
                            " and J.Type <> 3 order by ValueDate ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CashierJournalActivity" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Cashier & Journal Activity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.AccountID, r.AccountName, r.StartBalance } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 7].Value = _financeRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 7].Value = _financeRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "BEG BALANCE :";
                                            if (_financeRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                            }
                                            worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "REF";
                                            worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 5].Value = "DEPT";
                                            worksheet.Cells[incRowExcel, 6].Value = "INST";
                                            worksheet.Cells[incRowExcel, 7].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 8].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 9].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":I" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = "JOURNAL NO";
                                            //worksheet.Cells[incRowExcel, 3].Value = "DESCRIPTION";
                                            //worksheet.Cells[incRowExcel, 6].Value = "OFF";
                                            //worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 8].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 9].Value = "CONSG";
                                            //worksheet.Cells[incRowExcel, 10].Value = "Instrument";
                                            //worksheet.Cells[incRowExcel, 11].Value = "BALANCE";

                                            _range = "A" + incRowExcel + ":I" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":I" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                //worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.ValueDate).ToShortDateString();
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseCredit;
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Formula = "=I" + _rowEndBalance + "+G" + incRowExcel + "-H" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Formula = "=I" + _rowEndBalance + "-G" + incRowExcel + "+H" + incRowExcel;
                                                }
                                                if (_financeRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_financeRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":I" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.journalPK;
                                                //worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.DetailDescription;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.OfficeID;

                                                //worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentID;
                                                //worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 9].Value = rsDetail.ConsigneeID;

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                            //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 2].Value = ")";
                                            //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                            //worksheet.Cells[incRowExcel, 6].Value = ")";
                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:I";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(10).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CASHIER & JOURNAL ACTIVITY";
                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            else
            {
                return false;
            }

        }

        //ACCOUNTING
        public Boolean GenerateReportAccounting(string _userID, AccountingRpt _accountingRpt)
        {

            #region Trial Balance Plain MTD
            if (_accountingRpt.ReportName.Equals("Trial Balance Plain MTD"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            string _paramAccount = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "and A.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.Status <> 3  ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                            }
                            if (_accountingRpt.ParamData == 1)
                            {
                                _paramData = "  A.Groups = 1  ";
                            }
                            else if (_accountingRpt.ParamData == 2)
                            {
                                _paramData = "  A.Groups = 0  ";
                            }
                            else if (_accountingRpt.ParamData == 3)
                            {
                                _paramData = "  A.Groups in (0,1)  ";
                            }


                            cmd.CommandText = @"  
                     
  
Declare @PeriodPK int
Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2
Create table #TempTBMonthly  (
ID nvarchar(100),
Name nvarchar(500),
CurrID nvarchar(100),
Groups int,
ParentPK int,
Type int, 
Bulan int,
Balance numeric(22,4)
)

Declare @DateCounter datetime
set @DateCounter = @ValueDateFrom

while (@DateCounter<= @ValueDateTo)
BEGIN

	insert into #TempTBMonthly 

		SELECT C.ID, C.Name,
        D.ID,C.groups,C.ParentPK,1,  month(@DateCounter) -1,
        CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
        FROM (      
        SELECT  A.AccountPK,       
        SUM(B.Balance) AS CurrentBalance,       
        SUM(B.BaseBalance) AS CurrentBaseBalance
        FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
        SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
        SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
        C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
        C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
        FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
        INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
        INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
        WHERE B.ValueDate < @DateCounter and B.PeriodPK = @PeriodPK 
		and B.Status = 2 and B.Posted = 1 and B.Reversed = 0
        Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
        C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
        C.ParentPK7, C.ParentPK8, C.ParentPK9       
        ) AS B        
        WHERE  (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
        OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
        OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
        OR B.ParentPK9 = A.AccountPK)   and A.Type in (1,2)     And A.status = 2    
        Group BY A.AccountPK   
        ) A
        INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
        INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                                   
        Order BY C.ID


									
	set @DateCounter = dateadd(month,1,@DateCounter)
	--set @DateCounter =dateadd(mm, Datediff(mm,0,dateadd(month,1,@DateCounter))+1,-1) 
END

	insert into #TempTBMonthly 

		SELECT C.ID, C.Name,
        D.ID,C.Groups,C.ParentPK,1,  bulan,
        CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
        FROM (      
        SELECT A.AccountPK,       
        SUM(B.Balance) AS CurrentBalance,       
        SUM(B.BaseBalance) AS CurrentBaseBalance,Bulan
        FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
        SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
        SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
        C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
        C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9   
		,month(B.ValueDate) bulan
        FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
        INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
        INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
        WHERE  B.ValueDate <= @ValueDateTo and  B.PeriodPK = @PeriodPK
		and B.Status = 2  and B.Posted = 1 and B.Reversed = 0
        Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
        C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
        C.ParentPK7, C.ParentPK8, C.ParentPK9,month(B.ValueDate)
        ) AS B        
        WHERE  (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
        OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
        OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
        OR B.ParentPK9 = A.AccountPK)   and A.Type in (3,4)   And A.status = 2      
        Group BY A.AccountPK,bulan   
        ) A
        INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
        INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                                        
        Order BY C.ID
		delete #TempTBMonthly where bulan = 0

						
DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(bulan) +',0) ' + QUOTENAME(bulan) 
                    from (SELECT DISTINCT bulan FROM #TempTBMonthly) A
					order by A.bulan
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

select @cols = STUFF((SELECT distinct ',' + QUOTENAME(bulan) 
                    from #TempTBMonthly
				
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

set @query = 'SELECT ID,Name,CurrID,Groups,ParentPK,' + @colsForQuery + ' from 
                (
                SELECT ID,Name,CurrID,Groups,isnull(ParentPK,0) ParentPK,Bulan,Balance FROM #TempTBMonthly 
            ) x
            pivot 
            (
                SUM(Balance)
                for Bulan in (' + @cols + ')
            ) p 
			order by id
			'
exec(@query)			
		

                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TrialBalanceMTD" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Trial Balance");

                                        int incRowExcel = 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE FROM : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE TO : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        //incRowExcel++;
                                        worksheet.Cells[4, 1].Value = "ID";
                                        worksheet.Cells[4, 2].Value = "NAME";
                                        worksheet.Cells[4, 3].Value = "JAN";
                                        worksheet.Cells[4, 4].Value = "FEB";
                                        worksheet.Cells[4, 5].Value = "MAR";
                                        worksheet.Cells[4, 6].Value = "APR";
                                        worksheet.Cells[4, 7].Value = "MEI";
                                        worksheet.Cells[4, 8].Value = "JUNI";
                                        worksheet.Cells[4, 9].Value = "JULY";
                                        worksheet.Cells[4, 10].Value = "AGUST";
                                        worksheet.Cells[4, 11].Value = "SEPT";
                                        worksheet.Cells[4, 12].Value = "OKT";
                                        worksheet.Cells[4, 13].Value = "NOV";
                                        worksheet.Cells[4, 14].Value = "DES";
                                        //incRowExcel++;

                                        int incRowExcelA = 5;
                                        while (dr0.Read())
                                        {
                                            if (Convert.ToInt32(dr0["Groups"]) == 1)
                                            {
                                                int _parentPK = 0;
                                                worksheet.Cells["A" + incRowExcelA + ":N" + incRowExcelA].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["Name"]);

                                                _parentPK = dr0["ParentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ParentPK"]);
                                                if (_parentPK == 0)
                                                {
                                                    worksheet.Cells["A" + incRowExcelA + ":B" + incRowExcelA].Style.Font.Color.SetColor(Color.Red);
                                                }
                                                else
                                                {
                                                    worksheet.Cells["A" + incRowExcelA + ":B" + incRowExcelA].Style.Font.Color.SetColor(Color.Blue);
                                                }


                                            }
                                            else
                                            {

                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["Name"]);

                                            }
                                            for (int i = 5; i < dr0.FieldCount; i++)
                                            {
                                                worksheet.Cells[incRowExcelA, i - 2].Value = Convert.ToDecimal(dr0[i]);
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcelA, i - 2].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcelA, i - 2].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcelA, i - 2].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcelA, i - 2].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcelA, i - 2].Style.Numberformat.Format = "#,##0.00000000";
                                                }

                                            }
                                            incRowExcelA = incRowExcelA + 1;

                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells["A:H"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 TRIAL BALANCE";
                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB OSK ASSET MANAGEMENT";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region AUM 4 Pillar
            else if (_accountingRpt.ReportName.Equals("AUM 4 Pillar"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramInstrument = "";
                            string _paramDepartment = "";

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0  and A.status <> 3                                ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status <> 3 ";
                            }
                            cmd.CommandText = @"
  Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateTo between DateFrom and DateTo and status = 2

	                        Select A.Code,A.Month,A.InstrumentID,A.DepartmentID,SUM(A.ManagementFee) ManagementFee,    
                            SUM(A.SubsFee) SubsFee, SUM(A.SellingAgentFee) SellingAgentFee    
                            , SUM(A.CommissionFee) CommissionFee    
                                       
                            From     
                            (    
                            select MV.Code Code,MV.DescOne Month,C.id InstrumentID,D.ID DepartmentID,    
                            sum(B.BaseDebit-B.BaseCredit) * -1 ManagementFee,0 SubsFee,0 SellingAgentFee ,     
                            0 CommissionFee    
                            From Journal A    
                            Left join JournalDetail B on A.JournalPK = B.JournalPK    
                            Left join Instrument C on B.InstrumentPK = C.InstrumentPK and C.Status = 2    
                            Left join MasterValue MV on Month(A.ValueDate) = MV.Code and MV.Status = 2 and MV.ID = 'Month'    
                            Left join Department D on B.DepartmentPK = D.DepartmentPK and D.Status = 2    
                            where   A.PeriodPK = @PeriodPK " + _status + @"
                            and B.AccountPK in (164,382,385)      
                            Group by MV.Code,MV.DescOne,C.id,D.ID    
                                       
                            UNION ALL    
                                       
                            select MV.Code Code,MV.DescOne Month,C.id InstrumentID,D.ID DepartmentID,    
                            0 managementFee,sum(B.BaseDebit-B.BaseCredit) * -1 SubsFee,0 SellingAgentFee,     
                            0 CommissionFee    
                            From Journal A    
                            Left join JournalDetail B on A.JournalPK = B.JournalPK    
                            Left join Instrument C on B.InstrumentPK = C.InstrumentPK and C.Status = 2    
                            Left join MasterValue MV on Month(A.ValueDate) = MV.Code and MV.Status = 2 and MV.ID = 'Month'    
                            Left join Department D on B.DepartmentPK = D.DepartmentPK and D.Status = 2    
                               where  A.PeriodPK = @PeriodPK   " + _status + @"
                            and B.AccountPK = 165    
                            Group by MV.Code,MV.DescOne,C.id,D.ID    
                                       
                            UNION ALL    
                                       
                            select MV.Code Code,MV.DescOne Month,C.id InstrumentID,D.ID DepartmentID,    
                            0 managementFee,0 SubsFee,sum(B.BaseDebit-B.BaseCredit)  SellingAgentFee,     
                            0 CommissionFee    
                            From Journal A    
                            Left join JournalDetail B on A.JournalPK = B.JournalPK    
                            Left join Instrument C on B.InstrumentPK = C.InstrumentPK and C.Status = 2    
                            Left join MasterValue MV on Month(A.ValueDate) = MV.Code and MV.Status = 2 and MV.ID = 'Month'    
                            Left join Department D on B.DepartmentPK = D.DepartmentPK and D.Status = 2    
                                where   A.PeriodPK = @PeriodPK  " + _status + @" 
                            and B.AccountPK = 319    
                            Group by MV.Code,MV.DescOne,C.id,D.ID    
                                       
                            UNION ALL    
                                       
                            select MV.Code Code,MV.DescOne Month,C.id InstrumentID,D.ID DepartmentID,    
                            0 managementFee,0 SubsFee,0  SellingAgentFee,     
                            sum(B.BaseDebit-B.BaseCredit) CommissionFee    
                            From Journal A    
                            Left join JournalDetail B on A.JournalPK = B.JournalPK    
                            Left join Instrument C on B.InstrumentPK = C.InstrumentPK and C.Status = 2    
                            Left join MasterValue MV on Month(A.ValueDate) = MV.Code and MV.Status = 2 and MV.ID = 'Month'    
                            Left join Department D on B.DepartmentPK = D.DepartmentPK and D.Status = 2    
                            where  A.PeriodPK = @PeriodPK  " + _status + @" 
                            and B.AccountPK in (320,380)     
                            Group by MV.Code,MV.DescOne,C.id,D.ID    
                            )A    
                            Group by A.Code,A.Month,A.InstrumentID,A.DepartmentID    
                            Order by A.Code,A.Month,A.InstrumentID 


                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AUM4Pillar" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AUM 4 Pillar");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AUM4Pillar> rList = new List<AUM4Pillar>();
                                        while (dr0.Read())
                                        {

                                            AUM4Pillar rSingle = new AUM4Pillar();
                                            rSingle.Code = Convert.ToInt32(dr0["Code"]);
                                            rSingle.Month = Convert.ToString(dr0["Month"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.ManagementFee = Convert.ToDecimal(dr0["ManagementFee"]);
                                            rSingle.SubsFee = Convert.ToDecimal(dr0["SubsFee"]);
                                            rSingle.SellingAgentFee = Convert.ToDecimal(dr0["SellingAgentFee"]);
                                            rSingle.CommissionFee = Convert.ToDecimal(dr0["CommissionFee"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByMonth =
                                                       from r in rList
                                                       orderby r.Code, r.InstrumentID ascending
                                                       group r by new { r.Code } into rGroup
                                                       select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByMonth)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = "MONTH : ";
                                            //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Code;

                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "BANK";
                                            //worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BankID + "-" + rsHeader.Key.BankName;
                                            //incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "MONTH";
                                            worksheet.Cells[incRowExcel, 2].Value = "INSTRUMENT ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "DEPT ID";
                                            worksheet.Cells[incRowExcel, 4].Value = "MANAGEMENT FEE";
                                            worksheet.Cells[incRowExcel, 5].Value = "SUBS. FEE";
                                            worksheet.Cells[incRowExcel, 6].Value = "SELLING AGENT FEE";
                                            worksheet.Cells[incRowExcel, 7].Value = "COMMISSION FEE";
                                            string _range = "A" + incRowExcel + ":G" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;


                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":G" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Month;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ManagementFee;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SubsFee;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.SellingAgentFee;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CommissionFee;

                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                }

                                                _endRowDetail = incRowExcel;

                                                incRowExcel++;





                                            }

                                            int RowF = incRowExcel - 1;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";

                                            if (_accountingRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                            }

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:F";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 AUM 4 PILLAR";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region RHB OSK IS By CostCenter
            else if (_accountingRpt.ReportName.Equals("RHB OSK IS By CostCenter"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            decimal _netPnlValueDateFrom = 0;
                            decimal _netPnlLastMonth = 0;
                            decimal _netPnLValueDateTo = 0;

                            _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";

                            cmd.CommandText =
                            @"
                                Declare @DateLastMonth datetime 
                                Declare @PeriodPK int
                                Select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

                                Declare @table3 table 
                                ( 
	                                AccountPK int, 
	                                LastMonthBaseDebit numeric(19,4), 
	                                LastMonthBaseCredit numeric(19,4) 
                                ) 

                                Declare @table1 table
                                ( 
	                                AccountPK int, 
	                                CurrentBalance numeric(19,4), 
	                                CurrentBaseBalance numeric(19,4), 
	                                CurrentDebit numeric(19,4), 
	                                CurrentCredit numeric(19,4), 
	                                CurrentBaseDebit numeric(19,4), 
	                                CurrentBaseCredit numeric(19,4) 
                                )

                                Declare @table2 table 
                                ( 
	                                AccountPK int,
	                                PreviousBalance numeric(19,4),
	                                PreviousBaseBalance numeric(19,4), 
	                                PreviousDebit numeric(19,4), 
	                                PreviousCredit numeric(19,4), 
	                                PreviousBaseDebit numeric(19,4), 
	                                PreviousBaseCredit numeric(19,4) 
                                ) 

                                Insert into @table1 
                                SELECT A.AccountPK,   
                                SUM(B.Balance) AS CurrentBalance,   
                                SUM(B.BaseBalance) AS CurrentBaseBalance,  
                                SUM(B.SumDebit) AS CurrentDebit,   
                                SUM(B.SumCredit) AS CurrentCredit,   
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,   
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit  
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, 
                                (   
	                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,   
	                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,   
	                                SUM(A.Debit) AS SumDebit,   
	                                SUM(A.Credit) AS SumCredit,   
	                                SUM(A.BaseDebit) AS SumBaseDebit,   
	                                SUM(A.BaseCredit) AS SumBaseCredit,    
	                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,   
	                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9  
	                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK   
	                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2 
	                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2  
	                                WHERE B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK and A.DepartmentPK = @DepPK and C.Type in (3,4)
	                                AND (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3
	                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,  
	                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,  
	                                C.ParentPK7, C.ParentPK8, C.ParentPK9  
                                ) AS B   
                                WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK 
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK   
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK    
                                OR B.ParentPK9 = A.AccountPK)   
                                Group BY A.AccountPK  
    

                                Insert into @table2
                                SELECT A.AccountPK,   
                                SUM(B.Balance) AS PreviousBalance,   
                                SUM(B.BaseBalance) AS PreviousBaseBalance,  
                                SUM(B.SumDebit) AS PreviousDebit,  
                                SUM(B.SumCredit) AS PreviousCredit,   
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,   
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit  
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, 
                                (   
	                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,   
	                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,   
	                                SUM(A.Debit) AS SumDebit,   
	                                SUM(A.Credit) AS SumCredit,   
	                                SUM(A.BaseDebit) AS SumBaseDebit,   
	                                SUM(A.BaseCredit) AS SumBaseCredit,   
	                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,   
	                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9  
	                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK   
	                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2 
	                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2 
	                                WHERE B.ValueDate < @DateFrom and B.PeriodPK = @PeriodPK and A.DepartmentPK = @DepPK and C.Type in (3,4)
	                                AND (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3
	                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,   
	                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,   
	                                C.ParentPK7, C.ParentPK8, C.ParentPK9   
                                ) AS B   
                                WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK   
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK    
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK    
                                OR B.ParentPK9 = A.AccountPK)  
                                Group BY A.AccountPK  
    

                                set @DateLastMonth  = @DateFrom 
                                set @DateLastMonth = DATEADD(month,-1,@DateLastMonth)

                                Insert into @table3 
                                SELECT A.AccountPK,   
                                SUM(B.SumBaseDebit) AS LastMonthBaseDebit,    
                                SUM(B.SumBaseCredit) AS LastMonthBaseCredit   
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (  
	                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,    
	                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,    
	                                SUM(A.Debit) AS SumDebit,  
	                                SUM(A.Credit) AS SumCredit,   
	                                SUM(A.BaseDebit) AS SumBaseDebit,  
	                                SUM(A.BaseCredit) AS SumBaseCredit,   
	                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,   
	                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9   
	                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK   
	                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2
	                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2
	                                WHERE B.ValueDate >= @DateLastMonth and B.ValueDate < @DateFrom and year(B.ValueDate) = YEAR(@DateLastMonth) 
	                                AND B.Description <> 'PERIOD CLOSING' and A.DepartmentPK = @DepPK and C.Type in (3,4)
	                                AND (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3
	                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,   
	                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,  
	                                C.ParentPK7, C.ParentPK8, C.ParentPK9   
                                ) AS B  
                                WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK   
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK   
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK    
                                OR B.ParentPK9 = A.AccountPK)   
                                Group BY A.AccountPK  


                                select Z.ID,Z.Name,sum(CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4))) AS PreviousBaseBalance,                             
                                sum(CAST(isnull(A.CurrentBaseDebit,0) -  ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4))) AS BaseDebitMutasi,   
                                sum(CAST(isnull(A.CurrentBaseCredit,0) - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4))) * -1 AS BaseCreditMutasi,   
                                sum(CAST(isnull(A.CurrentBaseBalance,0) AS NUMERIC(19,4))) AS CurrentBaseBalance,  
                                sum(CAST(ISNULL(C.LastMonthBaseDebit,0) AS NUMERIC(19,4))) AS LastMonthBaseDebit,
                                sum(CAST(ISNULL(C.LastMonthBaseCredit,0) AS NUMERIC(19,4))) * -1 AS LastMonthBaseCredit,isnull(e.Newrow,0) Row,
                                Z.Groups,isnull(Z.ParentPK,0) ParentPK
                                from Account Z 
                                LEFT JOIN @table1 A on Z.AccountPK = A.AccountPK 
                                left join @table2 B on Z.AccountPK = B.AccountPK 
                                LEFT Join @table3 C on Z.AccountPK = C.AccountPK  
                                left JOIN OSKMonthlyMappingReport E ON Z.AccountPK = E.AccountPK   And E.Status = 2 
 
                                WHERE ((A.CurrentBalance <> 0)   
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)    
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)   
                                OR (A.CurrentBaseBalance <> 0)    
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)   
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0 OR LastMonthBaseDebit <> 0 or LastMonthBaseCredit <> 0 ))
                                AND Z.Status  = 2
                                group by e.Newrow ,Z.ID,Z.Name,Z.Groups,Z.ParentPK
                                Order by Z.ID Asc
";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@DepPK", _accountingRpt.DepartmentFrom);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    using (SqlConnection subCon = new SqlConnection(Tools.conString))
                                    {
                                        subCon.Open();
                                        using (SqlCommand subCmd = subCon.CreateCommand())
                                        {
                                            subCmd.CommandText =
                                            @"
Declare @DateFrom datetime Declare @DateTo datetime Declare @PeriodPK int 
                                            set @DateFrom = DATEADD(m, DATEDIFF(m,0,@Date), 0) 
                                            set @DateTo = DATEADD(m, DATEDIFF(m,0,@Date) + 1, -1) 
                                            Declare @Income int Declare @Expense int 
                                        
select @Income = Income,@Expense = Expense From AccountingSetup where status = 2 
select @PeriodPK = PeriodPK from period Where status = 2 and @Date Between Datefrom and DateTo 

Declare @PeriodID nvarchar(4)
	select @PeriodID = ID From period where PeriodPK = @PeriodPK
	set @PeriodID = @PeriodID - 1

if month(@Date) = 1 and day(@Date) = 1
BEGIN
	select 0  NetLastMonth,
	[dbo].FGetAccountBalanceByDateByParent  (@DateTo,162) - [dbo].FGetAccountBalanceByDateByParent  (@DateTo,213) Net
END
ELSE
BEGIN
	select [dbo].[FGetStartAccountBalanceByParentByDate] (@DateFrom,162) - [dbo].[FGetStartAccountBalanceByParentByDate] (@DateFrom,213) NetLastMonth,
	[dbo].FGetAccountBalanceByDateByParent  (@DateTo,162) - [dbo].FGetAccountBalanceByDateByParent  (@DateTo,213) Net
END



";
                                            subCmd.CommandTimeout = 0;
                                            subCmd.Parameters.AddWithValue("@Date", _accountingRpt.ValueDateFrom);
                                            using (SqlDataReader dr1 = subCmd.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    _netPnlValueDateFrom = 0;
                                                    _netPnlLastMonth = 0;
                                                }
                                                else
                                                {
                                                    dr1.Read();
                                                    _netPnlValueDateFrom = Convert.ToDecimal(dr1["Net"]);
                                                    _netPnlLastMonth = Convert.ToDecimal(dr1["NetLastMonth"]);
                                                }
                                            }
                                        }
                                    }

                                    using (SqlConnection subCon1 = new SqlConnection(Tools.conString))
                                    {
                                        subCon1.Open();
                                        using (SqlCommand subCmd1 = subCon1.CreateCommand())
                                        {
                                            subCmd1.CommandText =
                                                @"Declare @DateFrom datetime Declare @DateTo datetime Declare @PeriodPK int 
                                                set @DateFrom = DATEADD(m, DATEDIFF(m,0,@Date), 0) 
                                                set @DateTo = DATEADD(m, DATEDIFF(m,0,@Date) + 1, -1) 
                                                Declare @Income int Declare @Expense int 
                                                select @Income = Income,@Expense = Expense From AccountingSetup where status = 2 
                                                select @PeriodPK = PeriodPK from period Where status = 2 and @Date Between Datefrom and DateTo 
                                                SELECT  isnull(SUM(B.Balance),0) AS CurrentBalance FROM Account A, (  SELECT A.AccountPK, B.Posted, B.Reversed, SUM(A.BaseDebit-A.BaseCredit) AS Balance,D.ID Dep,  
                                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,  C.ParentPK7, C.ParentPK8, C.ParentPK9 
                                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK INNER JOIN Account C ON A.AccountPK = C.AccountPK  and c.status = 2 
                                                LEFT JOIN Department D on A.DepartmentPK = D.DepartmentPK and D.status = 2 WHERE  B.ValueDate between  @DateFrom and @DateTo and B.PeriodPK = @PeriodPK " + _status + @" 
                                                AND C.[Type] >= 3 GROUP BY A.AccountPK, B.Posted, B.Reversed, C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9, D.ID     ) AS B    
                                                WHERE A.[Type] >= 3 AND A.Show = 1 AND A.AccountPK in (162,213) And (B.AccountPK = A.AccountPK  OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK    OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK    
                                                OR B.ParentPK5 = A.AccountPK OR B.ParentPK6 = A.AccountPK   OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK  OR B.ParentPK9 = A.AccountPK) 
                                                ";
                                            subCmd1.CommandTimeout = 0;
                                            subCmd1.Parameters.AddWithValue("@Date", _accountingRpt.ValueDateTo);
                                            using (SqlDataReader dr2 = subCmd1.ExecuteReader())
                                            {
                                                if (!dr2.HasRows)
                                                {
                                                    _netPnLValueDateTo = 0;
                                                }
                                                else
                                                {
                                                    dr2.Read();
                                                    _netPnLValueDateTo = Convert.ToDecimal(dr2["CurrentBalance"]);
                                                }
                                            }
                                        }
                                    }



                                    string filePath = Tools.ReportsPath + "RHBOSKISByCostCenter" + "_" + _host.Get_DepartmentID(Convert.ToInt32(_accountingRpt.DepartmentFrom)) + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "OSKMonthlyReportTemplateNewTB.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {

                                        ExcelWorksheet cover = package.Workbook.Worksheets[1];
                                        cover.Cells[24, 1].Value = _accountingRpt.ValueDateTo;
                                        ExcelWorksheet bs = package.Workbook.Worksheets[2];
                                        bs.Cells[7, 6].Value = _accountingRpt.ValueDateFrom.AddDays(-1);
                                        ExcelWorksheet worksheet = package.Workbook.Worksheets[5];
                                        //worksheet.Cells[97, 5].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[98, 5].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[97, 5].Value = _netPnlLastMonth;
                                        //worksheet.Cells[98, 16].Value = _netPnlValueDateFrom;
                                        //worksheet.Cells[98, 17].Value = _netPnLValueDateTo;


                                        int incRowExcel = 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE FROM : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateFrom.AddDays(-1);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE TO : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        //incRowExcel++;
                                        worksheet.Cells[4, 1].Value = "ID";
                                        worksheet.Cells[4, 2].Value = "NAME";
                                        worksheet.Cells[4, 3].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[4, 4].Value = "DEBIT";
                                        worksheet.Cells[4, 5].Value = "CREDIT";
                                        worksheet.Cells[4, 6].Value = "CURRENT BALANCE";
                                        //incRowExcel++;


                                        int incRowExcelA = 5;
                                        while (dr0.Read())
                                        {

                                            if (Convert.ToInt32(dr0["Groups"]) == 1)
                                            {
                                                int _parentPK = 0;
                                                worksheet.Cells["A" + incRowExcelA + ":G" + incRowExcelA].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["Name"]);

                                                _parentPK = dr0["ParentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ParentPK"]);
                                                if (_parentPK == 0)
                                                {
                                                    worksheet.Cells["B" + incRowExcelA + ":B" + incRowExcelA].Style.Font.Color.SetColor(Color.Red);
                                                }
                                                else
                                                {
                                                    worksheet.Cells["B" + incRowExcelA + ":B" + incRowExcelA].Style.Font.Color.SetColor(Color.Blue);
                                                }


                                            }
                                            else
                                            {

                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["Name"]);

                                            }
                                            worksheet.Cells[incRowExcelA, 3].Value = Convert.ToDecimal(dr0["PreviousBaseBalance"]);
                                            worksheet.Cells[incRowExcelA, 4].Value = Convert.ToDecimal(dr0["BaseDebitMutasi"]);
                                            worksheet.Cells[incRowExcelA, 5].Value = Convert.ToDecimal(dr0["BaseCreditMutasi"]);
                                            worksheet.Cells[incRowExcelA, 6].Value = Convert.ToDecimal(dr0["CurrentBaseBalance"]);
                                            worksheet.Cells[incRowExcelA, 7].Value = Convert.ToDecimal(dr0["LastMonthBaseDebit"]);
                                            worksheet.Cells[incRowExcelA, 8].Value = Convert.ToDecimal(dr0["LastMonthBaseCredit"]);
                                            worksheet.Cells[incRowExcelA, 10].Value = Convert.ToInt16(dr0["Row"]);


                                            if (_accountingRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                            }


                                            incRowExcelA = incRowExcelA + 1;

                                        }
                                        worksheet.Cells[incRowExcelA, 2].Value = "PROFIT / LOSS YTD PREVIOUS MONTH";
                                        worksheet.Cells[incRowExcelA, 3].Value = _netPnlLastMonth;
                                        worksheet.Cells[incRowExcelA, 10].Value = 81;
                                        incRowExcelA = incRowExcelA + 1;
                                        worksheet.Cells[incRowExcelA, 2].Value = "PROFIT / LOSS THIS MONTH";
                                        worksheet.Cells[incRowExcelA, 3].Value = _netPnlValueDateFrom;
                                        worksheet.Cells[incRowExcelA, 10].Value = 0;
                                        package.Save();
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region TB RECAP DETAIL PER COST CENTER
            //TB RECAP DETAIL PER COST CENTER
            else if (_accountingRpt.ReportName.Equals("TB RECAP DETAIL PER COST CENTER"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            cmd.CommandText = @"                 
                          Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

                              declare @CC int
                              --drop table #TBDetailPerCostCenter
                              Create Table #TBDetailPerCostCenter
                              (
	                            ID Nvarchar(200),
	                            Name Nvarchar(200),
                                Groups Bit,
                                ParentPK int,
	                            PrevBal numeric(22,2),
	                            Debit numeric(22,2),
	                            Credit numeric(22,2),
	                            CurrBal numeric(22,2),
	                            RetailPrevBal numeric(22,2),
	                            RetailDebit numeric(22,2),
	                            RetailCredit numeric(22,2),
	                            RetailCurrBal numeric(22,2),
	                            InsPrevBal numeric(22,2),
	                            InsDebit numeric(22,2),
	                            InsCredit numeric(22,2),
	                            InsCurrBal numeric(22,2),
	                            InvPrevBal numeric(22,2),
	                            InvDebit numeric(22,2),
	                            InvCredit numeric(22,2),
	                            InvCurrBal numeric(22,2),
	                            OpsPrevBal numeric(22,2),
	                            OpsDebit numeric(22,2),
	                            OpsCredit numeric(22,2),
	                            OpsCurrBal numeric(22,2),
	                            OthPrevBal numeric(22,2),
	                            OthDebit numeric(22,2),
	                            OthCredit numeric(22,2),
	                            OthCurrBal numeric(22,2)
                              )
  
                              Insert into #TBDetailPerCostCenter (ID,Name,Groups,ParentPK,PrevBal,Debit,Credit,CurrBal)
                              
                              -- INI YANG TOTAL SMUA DLU
                              Select A.ID,A.Name,A.Groups,isnull(A.ParentPK,0),isnull(Z.PreviousBaseBalance,0),
                              isnull(Z.BaseDebitMutasi ,0),ISNULL(Z.BaseCreditMutasi,0),ISNULL(Z.CurrentBaseBalance,0)
                              from Account A left join (
                              SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                              D.ID,       
                              CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                              CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                              CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                              CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                              FROM (      
	                              SELECT A.AccountPK,       
	                               SUM(B.Balance) AS CurrentBalance,       
	                               SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                               SUM(B.SumDebit) AS CurrentDebit,       
	                               SUM(B.SumCredit) AS CurrentCredit,       
	                               SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                               SUM(B.SumBaseCredit) AS CurrentBaseCredit      
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                               SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
		                            SUM(A.Debit) AS SumDebit,      
		                            SUM(A.Credit) AS SumCredit,      
		                            SUM(A.BaseDebit) AS SumBaseDebit,      
		                            SUM(A.BaseCredit) AS SumBaseCredit,      
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
		                            WHERE  B.ValueDate <= @DateTo and B.periodPK = @PeriodPK     
		                            --and A.DepartmentPK In 
		                            --(
		                            --	Select DepartmentPK From Department
		                            --	where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            --	ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            --	or ParentPK8 = @CC or ParentPK9 = @CC
		                            --) 
	                              --and A.DepartmentPK IN (4,6,7)
	                              --and (A.DepartmentPK Is null Or A.DepartmentPK = 0)
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                               ) AS A LEFT JOIN (       
	                               SELECT A.AccountPK,        
	                               SUM(B.Balance) AS PreviousBalance,        
	                               SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                               SUM(B.SumDebit) AS PreviousDebit,        
	                               SUM(B.SumCredit) AS PreviousCredit,        
	                               SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                               SUM(B.SumBaseCredit) AS PreviousBaseCredit       
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
		                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                               SUM(A.Debit) AS SumDebit,        
	                               SUM(A.Credit) AS SumCredit,        
	                               SUM(A.BaseDebit) AS SumBaseDebit,        
	                               SUM(A.BaseCredit) AS SumBaseCredit,        
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
		                            WHERE  B.ValueDate < @DateFrom  and B.periodPK = @PeriodPK   
		                            --and A.DepartmentPK In 
		                            --(
		                            --	Select DepartmentPK From Department
		                            --	where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            --	ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            --	or ParentPK8 = @CC or ParentPK9 = @CC
		                            --) 
		                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE 
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                             ) AS B ON A.AccountPK = B.AccountPK        
                               INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                               INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                               WHERE (A.CurrentBalance <> 0)        
                               OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                               OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                               OR (A.CurrentBaseBalance <> 0)        
                               OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                               OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2
                            order by A.ID

                            Set @CC =  56


                            Update A set A.RetailPrevBal = B.PrevBal,A.RetailDebit = B.Debit,A.RetailCredit = B.Credit ,A.RetailCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                              Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                              isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                              from Account A left join (
                              SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                              D.ID,       
                              CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                              CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                              CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                              CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                              FROM (      
	                              SELECT A.AccountPK,       
	                               SUM(B.Balance) AS CurrentBalance,       
	                               SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                               SUM(B.SumDebit) AS CurrentDebit,       
	                               SUM(B.SumCredit) AS CurrentCredit,       
	                               SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                               SUM(B.SumBaseCredit) AS CurrentBaseCredit      
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                               SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
		                            SUM(A.Debit) AS SumDebit,      
		                            SUM(A.Credit) AS SumCredit,      
		                            SUM(A.BaseDebit) AS SumBaseDebit,      
		                            SUM(A.BaseCredit) AS SumBaseCredit,      
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
		                            WHERE  B.ValueDate <= @DateTo and B.periodPK = @PeriodPK  
		                            and A.DepartmentPK In 
		                            (
			                            Select DepartmentPK From Department
			                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
			                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
			                            or ParentPK8 = @CC or ParentPK9 = @CC
		                            ) 

	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                               ) AS A LEFT JOIN (       
	                               SELECT A.AccountPK,        
	                               SUM(B.Balance) AS PreviousBalance,        
	                               SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                               SUM(B.SumDebit) AS PreviousDebit,        
	                               SUM(B.SumCredit) AS PreviousCredit,        
	                               SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                               SUM(B.SumBaseCredit) AS PreviousBaseCredit       
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
		                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                               SUM(A.Debit) AS SumDebit,        
	                               SUM(A.Credit) AS SumCredit,        
	                               SUM(A.BaseDebit) AS SumBaseDebit,        
	                               SUM(A.BaseCredit) AS SumBaseCredit,        
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
		                            WHERE  B.ValueDate < @DateFrom  and B.periodPK = @PeriodPK    
		                            and A.DepartmentPK In 
		                            (
			                            Select DepartmentPK From Department
			                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
			                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
			                            or ParentPK8 = @CC or ParentPK9 = @CC
		                            ) 
		                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0   and B.status <> 3   
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE 
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                             ) AS B ON A.AccountPK = B.AccountPK        
                               INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                               INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                               WHERE (A.CurrentBalance <> 0)        
                               OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                               OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                               OR (A.CurrentBaseBalance <> 0)        
                               OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                               OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT 

                            -- INSTITUSI
                            Set @CC =  57


                            Update A set A.InsPrevBal = B.PrevBal,A.InsDebit = B.Debit,A.InsCredit = B.Credit ,A.InsCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                              Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                              isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                              from Account A left join (
                              SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                              D.ID,       
                              CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                              CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                              CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                              CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                              FROM (      
	                              SELECT A.AccountPK,       
	                               SUM(B.Balance) AS CurrentBalance,       
	                               SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                               SUM(B.SumDebit) AS CurrentDebit,       
	                               SUM(B.SumCredit) AS CurrentCredit,       
	                               SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                               SUM(B.SumBaseCredit) AS CurrentBaseCredit      
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                               SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
		                            SUM(A.Debit) AS SumDebit,      
		                            SUM(A.Credit) AS SumCredit,      
		                            SUM(A.BaseDebit) AS SumBaseDebit,      
		                            SUM(A.BaseCredit) AS SumBaseCredit,      
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
		                            WHERE  B.ValueDate <= @DateTo and B.periodPK = @PeriodPK   
		                            and A.DepartmentPK In 
		                            (
			                            Select DepartmentPK From Department
			                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
			                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
			                            or ParentPK8 = @CC or ParentPK9 = @CC
		                            ) 

	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                               ) AS A LEFT JOIN (       
	                               SELECT A.AccountPK,        
	                               SUM(B.Balance) AS PreviousBalance,        
	                               SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                               SUM(B.SumDebit) AS PreviousDebit,        
	                               SUM(B.SumCredit) AS PreviousCredit,        
	                               SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                               SUM(B.SumBaseCredit) AS PreviousBaseCredit       
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
		                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                               SUM(A.Debit) AS SumDebit,        
	                               SUM(A.Credit) AS SumCredit,        
	                               SUM(A.BaseDebit) AS SumBaseDebit,        
	                               SUM(A.BaseCredit) AS SumBaseCredit,        
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
		                            WHERE  B.ValueDate < @DateFrom  and B.periodPK = @PeriodPK  
		                            and A.DepartmentPK In 
		                            (
			                            Select DepartmentPK From Department
			                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
			                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
			                            or ParentPK8 = @CC or ParentPK9 = @CC
		                            ) 
		                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0    and B.status <> 3  
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE 
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                             ) AS B ON A.AccountPK = B.AccountPK        
                               INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                               INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                               WHERE (A.CurrentBalance <> 0)        
                               OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                               OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                               OR (A.CurrentBaseBalance <> 0)        
                               OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                               OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            -- INVESTMENT
                            Set @CC =  58


                            Update A set A.InvPrevBal = B.PrevBal,A.InvDebit = B.Debit,A.InvCredit = B.Credit ,A.InvCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                              Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                              isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                              from Account A left join (
                              SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                              D.ID,       
                              CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                              CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                              CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                              CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                              FROM (      
	                              SELECT A.AccountPK,       
	                               SUM(B.Balance) AS CurrentBalance,       
	                               SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                               SUM(B.SumDebit) AS CurrentDebit,       
	                               SUM(B.SumCredit) AS CurrentCredit,       
	                               SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                               SUM(B.SumBaseCredit) AS CurrentBaseCredit      
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                               SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
		                            SUM(A.Debit) AS SumDebit,      
		                            SUM(A.Credit) AS SumCredit,      
		                            SUM(A.BaseDebit) AS SumBaseDebit,      
		                            SUM(A.BaseCredit) AS SumBaseCredit,      
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
		                            WHERE  B.ValueDate <= @DateTo and B.periodPK = @PeriodPK
		                            and A.DepartmentPK In 
		                            (
			                            Select DepartmentPK From Department
			                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
			                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
			                            or ParentPK8 = @CC or ParentPK9 = @CC
		                            ) 

	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                               ) AS A LEFT JOIN (       
	                               SELECT A.AccountPK,        
	                               SUM(B.Balance) AS PreviousBalance,        
	                               SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                               SUM(B.SumDebit) AS PreviousDebit,        
	                               SUM(B.SumCredit) AS PreviousCredit,        
	                               SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                               SUM(B.SumBaseCredit) AS PreviousBaseCredit       
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
		                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                               SUM(A.Debit) AS SumDebit,        
	                               SUM(A.Credit) AS SumCredit,        
	                               SUM(A.BaseDebit) AS SumBaseDebit,        
	                               SUM(A.BaseCredit) AS SumBaseCredit,        
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
		                            WHERE  B.ValueDate < @DateFrom  and B.periodPK = @PeriodPK
		                            and A.DepartmentPK In 
		                            (
			                            Select DepartmentPK From Department
			                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
			                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
			                            or ParentPK8 = @CC or ParentPK9 = @CC
		                            ) 
		                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3    
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE 
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                             ) AS B ON A.AccountPK = B.AccountPK        
                               INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                               INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                               WHERE (A.CurrentBalance <> 0)        
                               OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                               OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                               OR (A.CurrentBaseBalance <> 0)        
                               OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                               OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            -- OPS
                            Set @CC =  59


                            Update A set A.OpsPrevBal = B.PrevBal,A.OpsDebit = B.Debit,A.OpsCredit = B.Credit ,A.OpsCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                              Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                              isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                              from Account A left join (
                              SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                              D.ID,       
                              CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                              CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                              CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                              CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                              FROM (      
	                              SELECT A.AccountPK,       
	                               SUM(B.Balance) AS CurrentBalance,       
	                               SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                               SUM(B.SumDebit) AS CurrentDebit,       
	                               SUM(B.SumCredit) AS CurrentCredit,       
	                               SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                               SUM(B.SumBaseCredit) AS CurrentBaseCredit      
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                               SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
		                            SUM(A.Debit) AS SumDebit,      
		                            SUM(A.Credit) AS SumCredit,      
		                            SUM(A.BaseDebit) AS SumBaseDebit,      
		                            SUM(A.BaseCredit) AS SumBaseCredit,      
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
		                            WHERE  B.ValueDate <= @DateTo and B.periodPK = @PeriodPK  
		                            and A.DepartmentPK In 
		                            (
			                            Select DepartmentPK From Department
			                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
			                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
			                            or ParentPK8 = @CC or ParentPK9 = @CC
		                            ) 

	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                               ) AS A LEFT JOIN (       
	                               SELECT A.AccountPK,        
	                               SUM(B.Balance) AS PreviousBalance,        
	                               SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                               SUM(B.SumDebit) AS PreviousDebit,        
	                               SUM(B.SumCredit) AS PreviousCredit,        
	                               SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                               SUM(B.SumBaseCredit) AS PreviousBaseCredit       
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
		                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                               SUM(A.Debit) AS SumDebit,        
	                               SUM(A.Credit) AS SumCredit,        
	                               SUM(A.BaseDebit) AS SumBaseDebit,        
	                               SUM(A.BaseCredit) AS SumBaseCredit,        
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
		                            WHERE  B.ValueDate < @DateFrom  and B.periodPK = @PeriodPK
		                            and A.DepartmentPK In 
		                            (
			                            Select DepartmentPK From Department
			                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
			                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
			                            or ParentPK8 = @CC or ParentPK9 = @CC
		                            ) 
		                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0    and B.status <> 3  
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE 
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                             ) AS B ON A.AccountPK = B.AccountPK        
                               INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                               INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                               WHERE (A.CurrentBalance <> 0)        
                               OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                               OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                               OR (A.CurrentBaseBalance <> 0)        
                               OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                               OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT

                            -- OTHERS


                            Update A set A.OthPrevBal = B.PrevBal,A.OthDebit = B.Debit,A.OthCredit = B.Credit ,A.OthCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                              Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                              isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                              from Account A left join (
                              SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                              D.ID,       
                              CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                              CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                              CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                              CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                              FROM (      
	                              SELECT A.AccountPK,       
	                               SUM(B.Balance) AS CurrentBalance,       
	                               SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                               SUM(B.SumDebit) AS CurrentDebit,       
	                               SUM(B.SumCredit) AS CurrentCredit,       
	                               SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                               SUM(B.SumBaseCredit) AS CurrentBaseCredit      
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                               SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
		                            SUM(A.Debit) AS SumDebit,      
		                            SUM(A.Credit) AS SumCredit,      
		                            SUM(A.BaseDebit) AS SumBaseDebit,      
		                            SUM(A.BaseCredit) AS SumBaseCredit,      
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
		                            WHERE  B.ValueDate <= @DateTo and B.periodPK = @PeriodPK  
		                            and (A.DepartmentPK is null or A.DepartmentPK = 0)

	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                               ) AS A LEFT JOIN (       
	                               SELECT A.AccountPK,        
	                               SUM(B.Balance) AS PreviousBalance,        
	                               SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                               SUM(B.SumDebit) AS PreviousDebit,        
	                               SUM(B.SumCredit) AS PreviousCredit,        
	                               SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                               SUM(B.SumBaseCredit) AS PreviousBaseCredit       
		                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
		                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
		                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                               SUM(A.Debit) AS SumDebit,        
	                               SUM(A.Credit) AS SumCredit,        
	                               SUM(A.BaseDebit) AS SumBaseDebit,        
	                               SUM(A.BaseCredit) AS SumBaseCredit,        
		                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
		                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
		                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
		                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
		                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
		                            WHERE  B.ValueDate < @DateFrom  and B.periodPK = @PeriodPK    
		                            and (A.DepartmentPK is null or A.DepartmentPK = 0)
		                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0     and B.status <> 3 
		                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
		                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
		                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                               ) AS B        
	                               WHERE 
		                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                               OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                               OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                               OR B.ParentPK9 = A.AccountPK)       
	                               Group BY A.AccountPK       
	                             ) AS B ON A.AccountPK = B.AccountPK        
                               INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                               INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                               WHERE (A.CurrentBalance <> 0)        
                               OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                               OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                               OR (A.CurrentBaseBalance <> 0)        
                               OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                               OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            Select * From #TBDetailPerCostCenter
                            ORder by ID ASC";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TBRecapDetailPerCostCenter" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("TB Recap Detail Per CostCenter");

                                        int incRowExcel = 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE FROM : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MM/dd/yyyy";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE TO : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MM/dd/yyyy";
                                        //incRowExcel++;
                                        worksheet.Cells[4, 1].Value = "ID";
                                        worksheet.Cells[4, 2].Value = "NAME";
                                        worksheet.Cells[4, 3].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[4, 4].Value = "DEBIT";
                                        worksheet.Cells[4, 5].Value = "CREDIT";
                                        worksheet.Cells[4, 6].Value = "CURRENT BALANCE";
                                        worksheet.Cells[3, 8].Value = "RETAIL";
                                        worksheet.Cells[4, 8].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[4, 9].Value = "DEBIT";
                                        worksheet.Cells[4, 10].Value = "CREDIT";
                                        worksheet.Cells[4, 11].Value = "CURRENT BALANCE";
                                        worksheet.Cells[3, 14].Value = "INSTITUTION";
                                        worksheet.Cells[4, 14].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[4, 15].Value = "DEBIT";
                                        worksheet.Cells[4, 16].Value = "CREDIT";
                                        worksheet.Cells[4, 17].Value = "CURRENT BALANCE";
                                        worksheet.Cells[3, 19].Value = "INVESTMENT";
                                        worksheet.Cells[4, 19].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[4, 20].Value = "DEBIT";
                                        worksheet.Cells[4, 21].Value = "CREDIT";
                                        worksheet.Cells[4, 22].Value = "CURRENT BALANCE";
                                        worksheet.Cells[3, 24].Value = "OPERATIONS";
                                        worksheet.Cells[4, 24].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[4, 25].Value = "DEBIT";
                                        worksheet.Cells[4, 26].Value = "CREDIT";
                                        worksheet.Cells[4, 27].Value = "CURRENT BALANCE";
                                        worksheet.Cells[3, 29].Value = "OTHERS";
                                        worksheet.Cells[4, 29].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[4, 30].Value = "DEBIT";
                                        worksheet.Cells[4, 31].Value = "CREDIT";
                                        worksheet.Cells[4, 32].Value = "CURRENT BALANCE";
                                        worksheet.Cells[4, 35].Value = "REKAP";
                                        //incRowExcel++;


                                        int incRowExcelA = 5;
                                        while (dr0.Read())
                                        {

                                            if (Convert.ToInt32(dr0["Groups"]) == 1)
                                            {
                                                int _parentPK = 0;
                                                worksheet.Cells["A" + incRowExcelA + ":AE" + incRowExcelA].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["Name"]);
                                                worksheet.Cells[incRowExcelA, 3].Value = Convert.ToDecimal(dr0["PrevBal"]);
                                                worksheet.Cells[incRowExcelA, 4].Value = Convert.ToDecimal(dr0["Debit"]);
                                                worksheet.Cells[incRowExcelA, 5].Value = Convert.ToDecimal(dr0["Credit"]);
                                                worksheet.Cells[incRowExcelA, 6].Value = Convert.ToDecimal(dr0["CurrBal"]);

                                                worksheet.Cells[incRowExcelA, 8].Value = Convert.ToDecimal(dr0["RetailPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 9].Value = Convert.ToDecimal(dr0["RetailDebit"]);
                                                worksheet.Cells[incRowExcelA, 10].Value = Convert.ToDecimal(dr0["RetailCredit"]);
                                                worksheet.Cells[incRowExcelA, 11].Value = Convert.ToDecimal(dr0["RetailCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 14].Value = Convert.ToDecimal(dr0["InsPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 15].Value = Convert.ToDecimal(dr0["InsDebit"]);
                                                worksheet.Cells[incRowExcelA, 16].Value = Convert.ToDecimal(dr0["InsCredit"]);
                                                worksheet.Cells[incRowExcelA, 17].Value = Convert.ToDecimal(dr0["InsCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 19].Value = Convert.ToDecimal(dr0["InvPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 20].Value = Convert.ToDecimal(dr0["InvDebit"]);
                                                worksheet.Cells[incRowExcelA, 21].Value = Convert.ToDecimal(dr0["InvCredit"]);
                                                worksheet.Cells[incRowExcelA, 22].Value = Convert.ToDecimal(dr0["InvCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 24].Value = Convert.ToDecimal(dr0["OpsPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 25].Value = Convert.ToDecimal(dr0["OpsDebit"]);
                                                worksheet.Cells[incRowExcelA, 26].Value = Convert.ToDecimal(dr0["OpsCredit"]);
                                                worksheet.Cells[incRowExcelA, 27].Value = Convert.ToDecimal(dr0["OpsCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 29].Value = Convert.ToDecimal(dr0["OthPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 30].Value = Convert.ToDecimal(dr0["OthDebit"]);
                                                worksheet.Cells[incRowExcelA, 31].Value = Convert.ToDecimal(dr0["OthCredit"]);
                                                worksheet.Cells[incRowExcelA, 32].Value = Convert.ToDecimal(dr0["OthCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 35].Formula = "=F" + incRowExcelA + "-K" + incRowExcelA + "-Q" + incRowExcelA + "-V" + incRowExcelA + "-AA" + incRowExcelA + "-AF" + incRowExcelA;

                                                _parentPK = dr0["ParentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ParentPK"]);
                                                if (_parentPK == 0)
                                                {
                                                    worksheet.Cells["B" + incRowExcelA + ":B" + incRowExcelA].Style.Font.Color.SetColor(Color.Red);
                                                }
                                                else
                                                {
                                                    worksheet.Cells["B" + incRowExcelA + ":B" + incRowExcelA].Style.Font.Color.SetColor(Color.Blue);
                                                }



                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {

                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0.00000000";
                                                }


                                            }
                                            else
                                            {

                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["Name"]);
                                                worksheet.Cells[incRowExcelA, 3].Value = Convert.ToDecimal(dr0["PrevBal"]);
                                                worksheet.Cells[incRowExcelA, 4].Value = Convert.ToDecimal(dr0["Debit"]);
                                                worksheet.Cells[incRowExcelA, 5].Value = Convert.ToDecimal(dr0["Credit"]);
                                                worksheet.Cells[incRowExcelA, 6].Value = Convert.ToDecimal(dr0["CurrBal"]);

                                                worksheet.Cells[incRowExcelA, 8].Value = Convert.ToDecimal(dr0["RetailPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 9].Value = Convert.ToDecimal(dr0["RetailDebit"]);
                                                worksheet.Cells[incRowExcelA, 10].Value = Convert.ToDecimal(dr0["RetailCredit"]);
                                                worksheet.Cells[incRowExcelA, 11].Value = Convert.ToDecimal(dr0["RetailCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 14].Value = Convert.ToDecimal(dr0["InsPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 15].Value = Convert.ToDecimal(dr0["InsDebit"]);
                                                worksheet.Cells[incRowExcelA, 16].Value = Convert.ToDecimal(dr0["InsCredit"]);
                                                worksheet.Cells[incRowExcelA, 17].Value = Convert.ToDecimal(dr0["InsCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 19].Value = Convert.ToDecimal(dr0["InvPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 20].Value = Convert.ToDecimal(dr0["InvDebit"]);
                                                worksheet.Cells[incRowExcelA, 21].Value = Convert.ToDecimal(dr0["InvCredit"]);
                                                worksheet.Cells[incRowExcelA, 22].Value = Convert.ToDecimal(dr0["InvCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 24].Value = Convert.ToDecimal(dr0["OpsPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 25].Value = Convert.ToDecimal(dr0["OpsDebit"]);
                                                worksheet.Cells[incRowExcelA, 26].Value = Convert.ToDecimal(dr0["OpsCredit"]);
                                                worksheet.Cells[incRowExcelA, 27].Value = Convert.ToDecimal(dr0["OpsCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 29].Value = Convert.ToDecimal(dr0["OthPrevBal"]);
                                                worksheet.Cells[incRowExcelA, 30].Value = Convert.ToDecimal(dr0["OthDebit"]);
                                                worksheet.Cells[incRowExcelA, 31].Value = Convert.ToDecimal(dr0["OthCredit"]);
                                                worksheet.Cells[incRowExcelA, 32].Value = Convert.ToDecimal(dr0["OthCurrBal"]);

                                                worksheet.Cells[incRowExcelA, 35].Formula = "=F" + incRowExcelA + "-K" + incRowExcelA + "-Q" + incRowExcelA + "-V" + incRowExcelA + "-AA" + incRowExcelA + "-AF" + incRowExcelA;


                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {

                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcelA, 3].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 14].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 15].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 16].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 17].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 19].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 20].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 21].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 22].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 24].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 25].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 26].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 27].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 29].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 30].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 31].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 32].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcelA, 35].Style.Numberformat.Format = "#,##0.00000000";
                                                }

                                            }

                                            incRowExcelA = incRowExcelA + 1;

                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells["A:H"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 TRIAL BALANCE";
                                        if (_accountingRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region PILLAR MTD
            else if (_accountingRpt.ReportName.Equals("PILLAR MTD"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText =
                             @" 

    Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

                declare @CC int
                            --drop table #TBDetailPerCostCenter
                            Create Table #TBDetailPerCostCenter
                            (
                            AccountPK int,
                            ID Nvarchar(200),
                            Name Nvarchar(200),
                            Groups Bit,
                            ParentPK int,
                            PrevBal numeric(22,0),
                            Debit numeric(22,0),
                            Credit numeric(22,0),
                            CurrBal numeric(22,0),
                            RetailPrevBal numeric(22,0),
                            RetailDebit numeric(22,0),
                            RetailCredit numeric(22,0),
                            RetailCurrBal numeric(22,0),
                            InsPrevBal numeric(22,0),
                            InsDebit numeric(22,0),
                            InsCredit numeric(22,0),
                            InsCurrBal numeric(22,0),
                            InvPrevBal numeric(22,0),
                            InvDebit numeric(22,0),
                            InvCredit numeric(22,0),
                            InvCurrBal numeric(22,0),
                            OpsPrevBal numeric(22,0),
                            OpsDebit numeric(22,0),
                            OpsCredit numeric(22,0),
                            OpsCurrBal numeric(22,0),
                            OthPrevBal numeric(22,0),
                            OthDebit numeric(22,0),
                            OthCredit numeric(22,0),
                            OthCurrBal numeric(22,0),
                            )
  
                            Insert into #TBDetailPerCostCenter (AccountPK,ID,Name,Groups,ParentPK,PrevBal,Debit,Credit,CurrBal)
                              
                            -- INI YANG TOTAL SMUA DLU
                            Select A.AccountPK,A.ID,A.Name,A.Groups,isnull(A.ParentPK,0),isnull(Z.PreviousBaseBalance,0),
                            isnull(Z.BaseDebitMutasi ,0),ISNULL(Z.BaseCreditMutasi,0),ISNULL(Z.CurrentBaseBalance,0)
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK
	                            --and A.DepartmentPK In 
	                            --(
	                            --	Select DepartmentPK From Department
	                            --	where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
	                            --	ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
	                            --	or ParentPK8 = @CC or ParentPK9 = @CC
	                            --) 
	                            --and A.DepartmentPK IN (4,6,7)
	                            --and (A.DepartmentPK Is null Or A.DepartmentPK = 0)
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK    
	                            --and A.DepartmentPK In 
	                            --(
	                            --	Select DepartmentPK From Department
	                            --	where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
	                            --	ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
	                            --	or ParentPK8 = @CC or ParentPK9 = @CC
	                            --) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0     and B.status <> 3 
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2
                            order by A.ID


                            Set @CC =  56


                            Update A set A.RetailPrevBal = B.PrevBal,A.RetailDebit = B.Debit,A.RetailCredit = B.Credit ,A.RetailCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3 
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK     
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3    
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT 

                            -- INSTITUSI
                            Set @CC =  57


                            Update A set A.InsPrevBal = B.PrevBal,A.InsDebit = B.Debit,A.InsCredit = B.Credit ,A.InsCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK   
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK    
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0      and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            -- INVESTMENT
                            Set @CC =  58


                            Update A set A.InvPrevBal = B.PrevBal,A.InvDebit = B.Debit,A.InvCredit = B.Credit ,A.InvCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK     
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK  
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0    and B.status <> 3  
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            -- OPS
                            Set @CC =  59


                            Update A set A.OpsPrevBal = B.PrevBal,A.OpsDebit = B.Debit,A.OpsCredit = B.Credit ,A.OpsCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK  
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0     and B.status <> 3 
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT

                            -- OTHERS


                            Update A set A.OthPrevBal = B.PrevBal,A.OthDebit = B.Debit,A.OthCredit = B.Credit ,A.OthCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK  
	                            and A.DepartmentPK is null or A.DepartmentPK = 0

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK 
	                            and A.DepartmentPK is null or A.DepartmentPK = 0
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0     and B.status <> 3 
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            Select A.ID,isnull(B.Link,'') Link ,A.Name, 
                            0 PrevBal,A.Debit,A.Credit,A.Debit-A.Credit CurrBal,'',
                            0 RetailPrevBal,A.RetailDebit,A.RetailCredit,A.RetailDebit-A.RetailCredit RetailCurrBal,'','',
                            0 InsPrevBal,A.InsDebit,A.InsCredit,A.InsDebit-A.InsCredit InsCurrBal,'',
                            0 InvPrevBal,A.InvDebit,A.InvCredit,A.InvDebit-A.InvCredit InvCurrBal,'',
                            0 OpsPrevBal,A.OpsDebit,A.OpsCredit,A.OpsDebit-A.OpsCredit OpsCurrBal,'',
                            0 OthPrevBal,A.OthDebit,A.OthCredit,A.OthDebit-A.OthCredit OthCurrBal,'','',0 Rekap
                            From #TBDetailPerCostCenter A
                            left join MapRptPillar B on A.AccountPK  = B.AccountPK 
                            ORder by A.ID ASC";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {


                                    string filePath = Tools.ReportsPath + "PillarMTD" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "\\08\\" + "08_PillarRHBAMTemplate.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReports";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                        int incRowExcel;
                                        int incColExcel = 1;
                                        worksheet.Cells[1, 1].Value = "DATE FROM :";
                                        worksheet.Cells[2, 1].Value = "DATE TO :";
                                        worksheet.Cells[1, 3].Value = _accountingRpt.ValueDateFrom;
                                        worksheet.Cells[2, 3].Value = _accountingRpt.ValueDateTo;
                                        incRowExcel = 5;
                                        // ini buat header
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[4, incColExcel].Value = dr0.GetName(inc1).ToString();
                                            incColExcel++;
                                        }
                                        while (dr0.Read())
                                        {
                                            incColExcel = 1;
                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                //worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                incColExcel++;
                                            }
                                            incRowExcel++;
                                        }
                                        incRowExcel = incRowExcel + 2;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                        //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                        //incRowExcel = incRowExcel + 5;
                                        //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                        //worksheet.Cells[incRowExcel, 2].Value = ")";
                                        //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                        //worksheet.Cells[incRowExcel, 6].Value = ")";
                                        //worksheet.Row(incRowExcel).PageBreak = _auditTrailRpt.PageBreak;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 PILLAR MTD";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }



            #endregion

            #region PILLAR YTD
            else if (_accountingRpt.ReportName.Equals("PILLAR YTD"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText =
                             @" 
  Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2
declare @CC int
                            --drop table #TBDetailPerCostCenter
                            Create Table #TBDetailPerCostCenter
                            (
                            AccountPK int,
                            ID Nvarchar(200),
                            Name Nvarchar(200),
                            Groups Bit,
                            ParentPK int,
                            PrevBal numeric(22,0),
                            Debit numeric(22,0),
                            Credit numeric(22,0),
                            CurrBal numeric(22,0),
                            RetailPrevBal numeric(22,0),
                            RetailDebit numeric(22,0),
                            RetailCredit numeric(22,0),
                            RetailCurrBal numeric(22,0),
                            InsPrevBal numeric(22,0),
                            InsDebit numeric(22,0),
                            InsCredit numeric(22,0),
                            InsCurrBal numeric(22,0),
                            InvPrevBal numeric(22,0),
                            InvDebit numeric(22,0),
                            InvCredit numeric(22,0),
                            InvCurrBal numeric(22,0),
                            OpsPrevBal numeric(22,0),
                            OpsDebit numeric(22,0),
                            OpsCredit numeric(22,0),
                            OpsCurrBal numeric(22,0),
                            OthPrevBal numeric(22,0),
                            OthDebit numeric(22,0),
                            OthCredit numeric(22,0),
                            OthCurrBal numeric(22,0),
                            )
  
                            Insert into #TBDetailPerCostCenter (AccountPK,ID,Name,Groups,ParentPK,PrevBal,Debit,Credit,CurrBal)
                              
                            -- INI YANG TOTAL SMUA DLU
                            Select A.AccountPK,A.ID,A.Name,A.Groups,isnull(A.ParentPK,0),isnull(Z.PreviousBaseBalance,0),
                            isnull(Z.BaseDebitMutasi ,0),ISNULL(Z.BaseCreditMutasi,0),ISNULL(Z.CurrentBaseBalance,0)
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK    
	                            --and A.DepartmentPK In 
	                            --(
	                            --	Select DepartmentPK From Department
	                            --	where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
	                            --	ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
	                            --	or ParentPK8 = @CC or ParentPK9 = @CC
	                            --) 
	                            --and A.DepartmentPK IN (4,6,7)
	                            --and (A.DepartmentPK Is null Or A.DepartmentPK = 0)
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and  B.PeriodPK = @PeriodPK    
	                            --and A.DepartmentPK In 
	                            --(
	                            --	Select DepartmentPK From Department
	                            --	where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
	                            --	ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
	                            --	or ParentPK8 = @CC or ParentPK9 = @CC
	                            --) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3    
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2
                            order by A.ID


                            Set @CC =  56


                            Update A set A.RetailPrevBal = B.PrevBal,A.RetailDebit = B.Debit,A.RetailCredit = B.Credit ,A.RetailCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and  B.PeriodPK = @PeriodPK     
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and  B.PeriodPK = @PeriodPK      
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0    and B.status <> 3  
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT 

                            -- INSTITUSI
                            Set @CC =  57


                            Update A set A.InsPrevBal = B.PrevBal,A.InsDebit = B.Debit,A.InsCredit = B.Credit ,A.InsCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and  B.PeriodPK = @PeriodPK  
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and  B.PeriodPK = @PeriodPK  
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0    and B.status <> 3  
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            -- INVESTMENT
                            Set @CC =  58


                            Update A set A.InvPrevBal = B.PrevBal,A.InvDebit = B.Debit,A.InvCredit = B.Credit ,A.InvCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and  B.PeriodPK = @PeriodPK    
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and  B.PeriodPK = @PeriodPK     
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0      and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            -- OPS
                            Set @CC =  59


                            Update A set A.OpsPrevBal = B.PrevBal,A.OpsDebit = B.Debit,A.OpsCredit = B.Credit ,A.OpsCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and  B.PeriodPK = @PeriodPK    
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK        
	                            and A.DepartmentPK In 
	                            (
		                            Select DepartmentPK From Department
		                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
		                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
		                            or ParentPK8 = @CC or ParentPK9 = @CC
	                            ) 
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0     and B.status <> 3 
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT

                            -- OTHERS


                            Update A set A.OthPrevBal = B.PrevBal,A.OthDebit = B.Debit,A.OthCredit = B.Credit ,A.OthCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
	                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
	                            SELECT A.AccountPK,       
	                            SUM(B.Balance) AS CurrentBalance,       
	                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
	                            SUM(B.SumDebit) AS CurrentDebit,       
	                            SUM(B.SumCredit) AS CurrentCredit,       
	                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
	                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
	                            SUM(A.Debit) AS SumDebit,      
	                            SUM(A.Credit) AS SumCredit,      
	                            SUM(A.BaseDebit) AS SumBaseDebit,      
	                            SUM(A.BaseCredit) AS SumBaseCredit,      
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
	                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK       
	                            and A.DepartmentPK is null or A.DepartmentPK = 0

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS A LEFT JOIN (       
	                            SELECT A.AccountPK,        
	                            SUM(B.Balance) AS PreviousBalance,        
	                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
	                            SUM(B.SumDebit) AS PreviousDebit,        
	                            SUM(B.SumCredit) AS PreviousCredit,        
	                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
	                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
	                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
	                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
	                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
	                            SUM(A.Debit) AS SumDebit,        
	                            SUM(A.Credit) AS SumCredit,        
	                            SUM(A.BaseDebit) AS SumBaseDebit,        
	                            SUM(A.BaseCredit) AS SumBaseCredit,        
	                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
	                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
	                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
	                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
	                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
	                            WHERE  B.ValueDate < @DateFrom and B.PeriodPK = @PeriodPK         
	                            and A.DepartmentPK is null or A.DepartmentPK = 0
	                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0      and B.status <> 3
	                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
	                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
	                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
	                            ) AS B        
	                            WHERE 
	                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
	                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
	                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
	                            OR B.ParentPK9 = A.AccountPK)       
	                            Group BY A.AccountPK       
	                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            Select A.ID,isnull(B.Link,'') Link,A.Name, 
                            A.PrevBal,A.Debit,A.Credit,A.CurrBal,'',
                            A.RetailPrevBal,A.RetailDebit,A.RetailCredit,A.RetailCurrBal,'','',
                            A.InsPrevBal,A.InsDebit,A.InsCredit,A.InsCurrBal,'',
                            A.InvPrevBal,A.InvDebit,A.InvCredit,A.InvCurrBal,'',
                            A.OpsPrevBal,A.OpsDebit,A.OpsCredit,A.OpsCurrBal,'',
                            A.OthPrevBal,A.OthDebit,A.OthCredit,A.OthCurrBal,'','',0 Rekap
                            From #TBDetailPerCostCenter A
                            left join MapRptPillar B on A.AccountPK  = B.AccountPK 
                            ORder by A.ID ASC";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {


                                    string filePath = Tools.ReportsPath + "PillarYTD" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "\\08\\" + "08_PillarRHBAMTemplate.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReports";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                                        int incRowExcel;
                                        int incColExcel = 1;
                                        worksheet.Cells[1, 1].Value = "DATE FROM :";
                                        worksheet.Cells[2, 1].Value = "DATE TO :";
                                        worksheet.Cells[1, 3].Value = _accountingRpt.ValueDateFrom;
                                        worksheet.Cells[2, 3].Value = _accountingRpt.ValueDateTo;
                                        incRowExcel = 5;
                                        // ini buat header
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[4, incColExcel].Value = dr0.GetName(inc1).ToString();
                                            incColExcel++;
                                        }
                                        while (dr0.Read())
                                        {
                                            incColExcel = 1;
                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                //worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                incColExcel++;
                                            }
                                            incRowExcel++;
                                        }
                                        incRowExcel = incRowExcel + 2;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                        //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                        //incRowExcel = incRowExcel + 5;
                                        //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                        //worksheet.Cells[incRowExcel, 2].Value = ")";
                                        //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                        //worksheet.Cells[incRowExcel, 6].Value = ")";
                                        //worksheet.Row(incRowExcel).PageBreak = _auditTrailRpt.PageBreak;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 PILLAR YTD";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }



            #endregion

            #region RHB OSK Monthly Report TB New
            else if (_accountingRpt.ReportName.Equals("RHB OSK Monthly Report TB New"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            decimal _netPnlValueDateFrom = 0;
                            decimal _netPnlLastMonth = 0;
                            decimal _netPnLValueDateTo = 0;

                            _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";

                            cmd.CommandText =
                            @"
  Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

Declare @table1 table
    ( 
	AccountPK int, 
	CurrentBalance numeric(19,4), 
	CurrentBaseBalance numeric(19,4), 
	CurrentDebit numeric(19,4), 
	CurrentCredit numeric(19,4), 
	CurrentBaseDebit numeric(19,4), 
	CurrentBaseCredit numeric(19,4) 
    )
    Insert into @table1 
    SELECT A.AccountPK,   
    SUM(B.Balance) AS CurrentBalance,   
    SUM(B.BaseBalance) AS CurrentBaseBalance,  
    SUM(B.SumDebit) AS CurrentDebit,   
    SUM(B.SumCredit) AS CurrentCredit,   
    SUM(B.SumBaseDebit) AS CurrentBaseDebit,   
    SUM(B.SumBaseCredit) AS CurrentBaseCredit  
    FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (   
    SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,   
    SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,   
    SUM(A.Debit) AS SumDebit,   
    SUM(A.Credit) AS SumCredit,   
    SUM(A.BaseDebit) AS SumBaseDebit,   
    SUM(A.BaseCredit) AS SumBaseCredit,    
    C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,   
    C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9  
    FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK   
    INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2 
    INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2  
    WHERE B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK 
	AND (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3
 Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,  
    C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,  
    C.ParentPK7, C.ParentPK8, C.ParentPK9  
    ) AS B   
  WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK 
    OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK   
    OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK    
    OR B.ParentPK9 = A.AccountPK)   
    Group BY A.AccountPK  
    Declare @table2 table 
    ( 
	AccountPK int,
	PreviousBalance numeric(19,4),
	PreviousBaseBalance numeric(19,4), 
	PreviousDebit numeric(19,4), 
	PreviousCredit numeric(19,4), 
	PreviousBaseDebit numeric(19,4), 
	PreviousBaseCredit numeric(19,4) 
    ) 
    Insert into @table2
    SELECT A.AccountPK,   
    SUM(B.Balance) AS PreviousBalance,   
    SUM(B.BaseBalance) AS PreviousBaseBalance,  
    SUM(B.SumDebit) AS PreviousDebit,  
    SUM(B.SumCredit) AS PreviousCredit,   
    SUM(B.SumBaseDebit) AS PreviousBaseDebit,   
    SUM(B.SumBaseCredit) AS PreviousBaseCredit  
    FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (   
    SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,   
    SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,   
    SUM(A.Debit) AS SumDebit,   
    SUM(A.Credit) AS SumCredit,   
    SUM(A.BaseDebit) AS SumBaseDebit,   
    SUM(A.BaseCredit) AS SumBaseCredit,   
    C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,   
    C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9  
    FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK   
    INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2 
    INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2 
    WHERE B.ValueDate < @DateFrom and B.PeriodPK = @PeriodPK
		AND (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3
 Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,   
    C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,   
    C.ParentPK7, C.ParentPK8, C.ParentPK9   
    ) AS B   
 WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK   
    OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK    
    OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK    
    OR B.ParentPK9 = A.AccountPK)  
    Group BY A.AccountPK  
    Declare @table3 table 
    ( 
	AccountPK int, 
	LastMonthBaseDebit numeric(19,4), 
	LastMonthBaseCredit numeric(19,4) 
    ) 
Declare @DateLastMonth datetime 
set @DateLastMonth  = @DateFrom 
set @DateLastMonth = DATEADD(month,-1,@DateLastMonth)
Insert into @table3 
    SELECT A.AccountPK,   
    SUM(B.SumBaseDebit) AS LastMonthBaseDebit,    
    SUM(B.SumBaseCredit) AS LastMonthBaseCredit   
    FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (  
    SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,    
    SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,    
    SUM(A.Debit) AS SumDebit,  
    SUM(A.Credit) AS SumCredit,   
    SUM(A.BaseDebit) AS SumBaseDebit,  
    SUM(A.BaseCredit) AS SumBaseCredit,   
    C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,   
    C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9   
    FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK   
    INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2
    INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2
    WHERE B.ValueDate >= @DateLastMonth and B.ValueDate < @DateFrom and year(B.ValueDate) = YEAR(@DateLastMonth) 
	AND B.Description <> 'PERIOD CLOSING'
		AND (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3
 Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,   
    C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,  
    C.ParentPK7, C.ParentPK8, C.ParentPK9   
    ) AS B  
 WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK   
    OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK   
    OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK    
    OR B.ParentPK9 = A.AccountPK)   
    Group BY A.AccountPK  


   select Z.ID,Z.Name,sum(CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4))) AS PreviousBaseBalance,                             
    sum(CAST(isnull(A.CurrentBaseDebit,0) -  ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4))) AS BaseDebitMutasi,   
    sum(CAST(isnull(A.CurrentBaseCredit,0) - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4))) * -1 AS BaseCreditMutasi,   
    sum(CAST(isnull(A.CurrentBaseBalance,0) AS NUMERIC(19,4))) AS CurrentBaseBalance,  
    sum(CAST(ISNULL(C.LastMonthBaseDebit,0) AS NUMERIC(19,4))) AS LastMonthBaseDebit,
    sum(CAST(ISNULL(C.LastMonthBaseCredit,0) AS NUMERIC(19,4))) * -1 AS LastMonthBaseCredit,isnull(e.Newrow,0) Row,
	Z.Groups,isnull(Z.ParentPK,0) ParentPK
    from Account Z 
	LEFT JOIN @table1 A on Z.AccountPK = A.AccountPK 
	left join @table2 B on Z.AccountPK = B.AccountPK 
	LEFT Join @table3 C on Z.AccountPK = C.AccountPK  
    left JOIN OSKMonthlyMappingReport E ON Z.AccountPK = E.AccountPK   And E.Status = 2 
 
    WHERE ((A.CurrentBalance <> 0)   
    OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)    
    OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)   
    OR (A.CurrentBaseBalance <> 0)    
    OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)   
    OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0 OR LastMonthBaseDebit <> 0 or LastMonthBaseCredit <> 0 ))
	AND Z.Status  = 2 
    group by e.Newrow ,Z.ID,Z.Name,Z.Groups,Z.ParentPK
    Order by Z.ID Asc
";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    using (SqlConnection subCon = new SqlConnection(Tools.conString))
                                    {
                                        subCon.Open();
                                        using (SqlCommand subCmd = subCon.CreateCommand())
                                        {
                                            subCmd.CommandText =
                                            @"
Declare @DateFrom datetime Declare @DateTo datetime Declare @PeriodPK int 
                                            set @DateFrom = DATEADD(m, DATEDIFF(m,0,@Date), 0) 
                                            set @DateTo = DATEADD(m, DATEDIFF(m,0,@Date) + 1, -1) 
                                            Declare @Income int Declare @Expense int 
                                        
select @Income = Income,@Expense = Expense From AccountingSetup where status = 2 
select @PeriodPK = PeriodPK from period Where status = 2 and @Date Between Datefrom and DateTo 

Declare @PeriodID nvarchar(4)
	select @PeriodID = ID From period where PeriodPK = @PeriodPK
	set @PeriodID = @PeriodID - 1

if month(@Date) = 1 and day(@Date) = 1
BEGIN
	select 0  NetLastMonth,
	[dbo].FGetAccountBalanceByDateByParent  (@DateTo,162) - [dbo].FGetAccountBalanceByDateByParent  (@DateTo,213) Net
END
ELSE
BEGIN
	select [dbo].[FGetStartAccountBalanceByParentByDate] (@DateFrom,162) - [dbo].[FGetStartAccountBalanceByParentByDate] (@DateFrom,213) NetLastMonth,
	[dbo].FGetAccountBalanceByDateByParent  (@DateTo,162) - [dbo].FGetAccountBalanceByDateByParent  (@DateTo,213) Net
END



";
                                            subCmd.CommandTimeout = 0;
                                            subCmd.Parameters.AddWithValue("@Date", _accountingRpt.ValueDateFrom);
                                            using (SqlDataReader dr1 = subCmd.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    _netPnlValueDateFrom = 0;
                                                    _netPnlLastMonth = 0;
                                                }
                                                else
                                                {
                                                    dr1.Read();
                                                    _netPnlValueDateFrom = Convert.ToDecimal(dr1["Net"]);
                                                    _netPnlLastMonth = Convert.ToDecimal(dr1["NetLastMonth"]);
                                                }
                                            }
                                        }
                                    }

                                    using (SqlConnection subCon1 = new SqlConnection(Tools.conString))
                                    {
                                        subCon1.Open();
                                        using (SqlCommand subCmd1 = subCon1.CreateCommand())
                                        {
                                            subCmd1.CommandText =
                                                @"Declare @DateFrom datetime Declare @DateTo datetime Declare @PeriodPK int 
                                                set @DateFrom = DATEADD(m, DATEDIFF(m,0,@Date), 0) 
                                                set @DateTo = DATEADD(m, DATEDIFF(m,0,@Date) + 1, -1) 
                                                Declare @Income int Declare @Expense int 
                                                select @Income = Income,@Expense = Expense From AccountingSetup where status = 2 
                                                select @PeriodPK = PeriodPK from period Where status = 2 and @Date Between Datefrom and DateTo 
                                                SELECT  isnull(SUM(B.Balance),0) AS CurrentBalance FROM Account A, (  SELECT A.AccountPK, B.Posted, B.Reversed, SUM(A.BaseDebit-A.BaseCredit) AS Balance,D.ID Dep,  
                                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,  C.ParentPK7, C.ParentPK8, C.ParentPK9 
                                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK INNER JOIN Account C ON A.AccountPK = C.AccountPK  and c.status = 2 
                                                LEFT JOIN Department D on A.DepartmentPK = D.DepartmentPK and D.status = 2 WHERE  B.ValueDate between  @DateFrom and @DateTo and B.PeriodPK = @PeriodPK " + _status + @" 
                                                AND C.[Type] >= 3 GROUP BY A.AccountPK, B.Posted, B.Reversed, C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9, D.ID     ) AS B    
                                                WHERE A.[Type] >= 3 AND A.Show = 1 AND A.AccountPK in (162,213) And (B.AccountPK = A.AccountPK  OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK    OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK    
                                                OR B.ParentPK5 = A.AccountPK OR B.ParentPK6 = A.AccountPK   OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK  OR B.ParentPK9 = A.AccountPK) 
                                                ";
                                            subCmd1.CommandTimeout = 0;
                                            subCmd1.Parameters.AddWithValue("@Date", _accountingRpt.ValueDateTo);
                                            using (SqlDataReader dr2 = subCmd1.ExecuteReader())
                                            {
                                                if (!dr2.HasRows)
                                                {
                                                    _netPnLValueDateTo = 0;
                                                }
                                                else
                                                {
                                                    dr2.Read();
                                                    _netPnLValueDateTo = Convert.ToDecimal(dr2["CurrentBalance"]);
                                                }
                                            }
                                        }
                                    }


                                    string filePath = Tools.ReportsPath + "RHBOSKMonthlyReportNewTB" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "OSKMonthlyReportTemplateNewTB.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {

                                        ExcelWorksheet cover = package.Workbook.Worksheets[1];
                                        cover.Cells[24, 1].Value = _accountingRpt.ValueDateTo;
                                        ExcelWorksheet bs = package.Workbook.Worksheets[2];
                                        bs.Cells[7, 6].Value = _accountingRpt.ValueDateFrom.AddDays(-1);
                                        ExcelWorksheet worksheet = package.Workbook.Worksheets[5];
                                        //worksheet.Cells[97, 5].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[98, 5].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[97, 5].Value = _netPnlLastMonth;
                                        //worksheet.Cells[98, 16].Value = _netPnlValueDateFrom;
                                        //worksheet.Cells[98, 17].Value = _netPnLValueDateTo;


                                        int incRowExcel = 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE FROM : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateFrom.AddDays(-1);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE TO : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        //incRowExcel++;
                                        worksheet.Cells[4, 1].Value = "ID";
                                        worksheet.Cells[4, 2].Value = "NAME";
                                        worksheet.Cells[4, 3].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[4, 4].Value = "DEBIT";
                                        worksheet.Cells[4, 5].Value = "CREDIT";
                                        worksheet.Cells[4, 6].Value = "CURRENT BALANCE";
                                        //incRowExcel++;


                                        int incRowExcelA = 5;
                                        while (dr0.Read())
                                        {

                                            if (Convert.ToInt32(dr0["Groups"]) == 1)
                                            {
                                                int _parentPK = 0;
                                                worksheet.Cells["A" + incRowExcelA + ":G" + incRowExcelA].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["Name"]);

                                                _parentPK = dr0["ParentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ParentPK"]);
                                                if (_parentPK == 0)
                                                {
                                                    worksheet.Cells["B" + incRowExcelA + ":B" + incRowExcelA].Style.Font.Color.SetColor(Color.Red);
                                                }
                                                else
                                                {
                                                    worksheet.Cells["B" + incRowExcelA + ":B" + incRowExcelA].Style.Font.Color.SetColor(Color.Blue);
                                                }


                                            }
                                            else
                                            {

                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["Name"]);

                                            }
                                            worksheet.Cells[incRowExcelA, 3].Value = Convert.ToDecimal(dr0["PreviousBaseBalance"]);
                                            worksheet.Cells[incRowExcelA, 4].Value = Convert.ToDecimal(dr0["BaseDebitMutasi"]);
                                            worksheet.Cells[incRowExcelA, 5].Value = Convert.ToDecimal(dr0["BaseCreditMutasi"]);
                                            worksheet.Cells[incRowExcelA, 6].Value = Convert.ToDecimal(dr0["CurrentBaseBalance"]);
                                            worksheet.Cells[incRowExcelA, 7].Value = Convert.ToDecimal(dr0["LastMonthBaseDebit"]);
                                            worksheet.Cells[incRowExcelA, 8].Value = Convert.ToDecimal(dr0["LastMonthBaseCredit"]);
                                            worksheet.Cells[incRowExcelA, 10].Value = Convert.ToInt16(dr0["Row"]);


                                            if (_accountingRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                            }


                                            incRowExcelA = incRowExcelA + 1;

                                        }
                                        worksheet.Cells[incRowExcelA, 2].Value = "PROFIT / LOSS YTD PREVIOUS MONTH";
                                        worksheet.Cells[incRowExcelA, 3].Value = _netPnlLastMonth;
                                        worksheet.Cells[incRowExcelA, 10].Value = 81;
                                        incRowExcelA = incRowExcelA + 1;
                                        worksheet.Cells[incRowExcelA, 2].Value = "PROFIT / LOSS THIS MONTH";
                                        worksheet.Cells[incRowExcelA, 3].Value = _netPnlValueDateFrom;
                                        worksheet.Cells[incRowExcelA, 10].Value = 0;
                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region PILLAR AM
            else if (_accountingRpt.ReportName.Equals("PILLAR AM"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            cmd.CommandText = @"                 
                          Declare @PeriodPK int
                          Select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

                            declare @CC int
                            --drop table #TBDetailPerCostCenter
                            Create Table #TBDetailPerCostCenter
                            (
                            AccountPK int,
                            ID Nvarchar(200),
                            Name Nvarchar(200),
                            Groups Bit,
                            ParentPK int,
                            PrevBal numeric(22,0),
                            Debit numeric(22,0),
                            Credit numeric(22,0),
                            CurrBal numeric(22,0),
                            RetailPrevBal numeric(22,0),
                            RetailDebit numeric(22,0),
                            RetailCredit numeric(22,0),
                            RetailCurrBal numeric(22,0),
                            InsPrevBal numeric(22,0),
                            InsDebit numeric(22,0),
                            InsCredit numeric(22,0),
                            InsCurrBal numeric(22,0),
                            InvPrevBal numeric(22,0),
                            InvDebit numeric(22,0),
                            InvCredit numeric(22,0),
                            InvCurrBal numeric(22,0),
                            OpsPrevBal numeric(22,0),
                            OpsDebit numeric(22,0),
                            OpsCredit numeric(22,0),
                            OpsCurrBal numeric(22,0),
                            OthPrevBal numeric(22,0),
                            OthDebit numeric(22,0),
                            OthCredit numeric(22,0),
                            OthCurrBal numeric(22,0),
                            )
  
                            Insert into #TBDetailPerCostCenter (AccountPK,ID,Name,Groups,ParentPK,PrevBal,Debit,Credit,CurrBal)
                              
                            -- INI YANG TOTAL SMUA DLU
                            Select A.AccountPK,A.ID,A.Name,A.Groups,isnull(A.ParentPK,0),isnull(Z.PreviousBaseBalance,0),
                            isnull(Z.BaseDebitMutasi ,0),ISNULL(Z.BaseCreditMutasi,0),ISNULL(Z.CurrentBaseBalance,0)
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
                            SELECT A.AccountPK,       
                            SUM(B.Balance) AS CurrentBalance,       
                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
                            SUM(B.SumDebit) AS CurrentDebit,       
                            SUM(B.SumCredit) AS CurrentCredit,       
                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                            SUM(A.Debit) AS SumDebit,      
                            SUM(A.Credit) AS SumCredit,      
                            SUM(A.BaseDebit) AS SumBaseDebit,      
                            SUM(A.BaseCredit) AS SumBaseCredit,      
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK
                            --and A.DepartmentPK In 
                            --(
                            --	Select DepartmentPK From Department
                            --	where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            --	ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            --	or ParentPK8 = @CC or ParentPK9 = @CC
                            --) 
                            --and A.DepartmentPK IN (4,6,7)
                            --and (A.DepartmentPK Is null Or A.DepartmentPK = 0)
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS A LEFT JOIN (       
                            SELECT A.AccountPK,        
                            SUM(B.Balance) AS PreviousBalance,        
                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
                            SUM(B.SumDebit) AS PreviousDebit,        
                            SUM(B.SumCredit) AS PreviousCredit,        
                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                            SUM(A.Debit) AS SumDebit,        
                            SUM(A.Credit) AS SumCredit,        
                            SUM(A.BaseDebit) AS SumBaseDebit,        
                            SUM(A.BaseCredit) AS SumBaseCredit,        
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK    
                            --and A.DepartmentPK In 
                            --(
                            --	Select DepartmentPK From Department
                            --	where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            --	ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            --	or ParentPK8 = @CC or ParentPK9 = @CC
                            --) 
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0     and B.status <> 3 
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE 
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2
                            order by A.ID


                            Set @CC =  56


                            Update A set A.RetailPrevBal = B.PrevBal,A.RetailDebit = B.Debit,A.RetailCredit = B.Credit ,A.RetailCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
                            SELECT A.AccountPK,       
                            SUM(B.Balance) AS CurrentBalance,       
                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
                            SUM(B.SumDebit) AS CurrentDebit,       
                            SUM(B.SumCredit) AS CurrentCredit,       
                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                            SUM(A.Debit) AS SumDebit,      
                            SUM(A.Credit) AS SumCredit,      
                            SUM(A.BaseDebit) AS SumBaseDebit,      
                            SUM(A.BaseCredit) AS SumBaseCredit,      
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK
                            and A.DepartmentPK In 
                            (
                            Select DepartmentPK From Department
                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            or ParentPK8 = @CC or ParentPK9 = @CC
                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3 
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS A LEFT JOIN (       
                            SELECT A.AccountPK,        
                            SUM(B.Balance) AS PreviousBalance,        
                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
                            SUM(B.SumDebit) AS PreviousDebit,        
                            SUM(B.SumCredit) AS PreviousCredit,        
                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                            SUM(A.Debit) AS SumDebit,        
                            SUM(A.Credit) AS SumCredit,        
                            SUM(A.BaseDebit) AS SumBaseDebit,        
                            SUM(A.BaseCredit) AS SumBaseCredit,        
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK     
                            and A.DepartmentPK In 
                            (
                            Select DepartmentPK From Department
                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            or ParentPK8 = @CC or ParentPK9 = @CC
                            ) 
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3    
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE 
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT 

                            -- INSTITUSI
                            Set @CC =  57


                            Update A set A.InsPrevBal = B.PrevBal,A.InsDebit = B.Debit,A.InsCredit = B.Credit ,A.InsCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
                            SELECT A.AccountPK,       
                            SUM(B.Balance) AS CurrentBalance,       
                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
                            SUM(B.SumDebit) AS CurrentDebit,       
                            SUM(B.SumCredit) AS CurrentCredit,       
                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                            SUM(A.Debit) AS SumDebit,      
                            SUM(A.Credit) AS SumCredit,      
                            SUM(A.BaseDebit) AS SumBaseDebit,      
                            SUM(A.BaseCredit) AS SumBaseCredit,      
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK   
                            and A.DepartmentPK In 
                            (
                            Select DepartmentPK From Department
                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            or ParentPK8 = @CC or ParentPK9 = @CC
                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS A LEFT JOIN (       
                            SELECT A.AccountPK,        
                            SUM(B.Balance) AS PreviousBalance,        
                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
                            SUM(B.SumDebit) AS PreviousDebit,        
                            SUM(B.SumCredit) AS PreviousCredit,        
                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                            SUM(A.Debit) AS SumDebit,        
                            SUM(A.Credit) AS SumCredit,        
                            SUM(A.BaseDebit) AS SumBaseDebit,        
                            SUM(A.BaseCredit) AS SumBaseCredit,        
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK    
                            and A.DepartmentPK In 
                            (
                            Select DepartmentPK From Department
                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            or ParentPK8 = @CC or ParentPK9 = @CC
                            ) 
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0      and B.status <> 3
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE 
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            -- INVESTMENT
                            Set @CC =  58


                            Update A set A.InvPrevBal = B.PrevBal,A.InvDebit = B.Debit,A.InvCredit = B.Credit ,A.InvCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
                            SELECT A.AccountPK,       
                            SUM(B.Balance) AS CurrentBalance,       
                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
                            SUM(B.SumDebit) AS CurrentDebit,       
                            SUM(B.SumCredit) AS CurrentCredit,       
                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                            SUM(A.Debit) AS SumDebit,      
                            SUM(A.Credit) AS SumCredit,      
                            SUM(A.BaseDebit) AS SumBaseDebit,      
                            SUM(A.BaseCredit) AS SumBaseCredit,      
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK     
                            and A.DepartmentPK In 
                            (
                            Select DepartmentPK From Department
                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            or ParentPK8 = @CC or ParentPK9 = @CC
                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS A LEFT JOIN (       
                            SELECT A.AccountPK,        
                            SUM(B.Balance) AS PreviousBalance,        
                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
                            SUM(B.SumDebit) AS PreviousDebit,        
                            SUM(B.SumCredit) AS PreviousCredit,        
                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                            SUM(A.Debit) AS SumDebit,        
                            SUM(A.Credit) AS SumCredit,        
                            SUM(A.BaseDebit) AS SumBaseDebit,        
                            SUM(A.BaseCredit) AS SumBaseCredit,        
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK  
                            and A.DepartmentPK In 
                            (
                            Select DepartmentPK From Department
                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            or ParentPK8 = @CC or ParentPK9 = @CC
                            ) 
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0    and B.status <> 3  
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE 
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            -- OPS
                            Set @CC =  59


                            Update A set A.OpsPrevBal = B.PrevBal,A.OpsDebit = B.Debit,A.OpsCredit = B.Credit ,A.OpsCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
                            SELECT A.AccountPK,       
                            SUM(B.Balance) AS CurrentBalance,       
                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
                            SUM(B.SumDebit) AS CurrentDebit,       
                            SUM(B.SumCredit) AS CurrentCredit,       
                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                            SUM(A.Debit) AS SumDebit,      
                            SUM(A.Credit) AS SumCredit,      
                            SUM(A.BaseDebit) AS SumBaseDebit,      
                            SUM(A.BaseCredit) AS SumBaseCredit,      
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK
                            and A.DepartmentPK In 
                            (
                            Select DepartmentPK From Department
                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            or ParentPK8 = @CC or ParentPK9 = @CC
                            ) 

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS A LEFT JOIN (       
                            SELECT A.AccountPK,        
                            SUM(B.Balance) AS PreviousBalance,        
                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
                            SUM(B.SumDebit) AS PreviousDebit,        
                            SUM(B.SumCredit) AS PreviousCredit,        
                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                            SUM(A.Debit) AS SumDebit,        
                            SUM(A.Credit) AS SumCredit,        
                            SUM(A.BaseDebit) AS SumBaseDebit,        
                            SUM(A.BaseCredit) AS SumBaseCredit,        
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK  
                            and A.DepartmentPK In 
                            (
                            Select DepartmentPK From Department
                            where DepartmentPK = @CC or ParentPK = @CC or ParentPK1 = @CC or 
                            ParentPK2 = @CC or ParentPK5 = @CC or ParentPK6 = @CC or ParentPK7 =@CC
                            or ParentPK8 = @CC or ParentPK9 = @CC
                            ) 
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0     and B.status <> 3 
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE 
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT

                            -- OTHERS


                            Update A set A.OthPrevBal = B.PrevBal,A.OthDebit = B.Debit,A.OthCredit = B.Credit ,A.OthCurrBal = B.CurrBal From #TBDetailPerCostCenter A
                            LEFT JOIN
                            (
                            Select A.ID,A.Name,isnull(Z.PreviousBaseBalance,0) PrevBal,
                            isnull(Z.BaseDebitMutasi ,0) Debit,ISNULL(Z.BaseCreditMutasi,0) Credit,ISNULL(Z.CurrentBaseBalance,0) CurrBal
                            from Account A left join (
                            SELECT C.ID AccountID, C.Name, C.[Groups],C.[ParentPK],    
                            D.ID,       
                            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                            FROM (      
                            SELECT A.AccountPK,       
                            SUM(B.Balance) AS CurrentBalance,       
                            SUM(B.BaseBalance) AS CurrentBaseBalance,      
                            SUM(B.SumDebit) AS CurrentDebit,       
                            SUM(B.SumCredit) AS CurrentCredit,       
                            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                            SUM(A.Debit) AS SumDebit,      
                            SUM(A.Credit) AS SumCredit,      
                            SUM(A.BaseDebit) AS SumBaseDebit,      
                            SUM(A.BaseCredit) AS SumBaseCredit,      
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
                            WHERE  B.ValueDate <= @DateTo and B.PeriodPK = @PeriodPK  
                            and A.DepartmentPK is null or A.DepartmentPK = 0

                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS A LEFT JOIN (       
                            SELECT A.AccountPK,        
                            SUM(B.Balance) AS PreviousBalance,        
                            SUM(B.BaseBalance) AS PreviousBaseBalance,       
                            SUM(B.SumDebit) AS PreviousDebit,        
                            SUM(B.SumCredit) AS PreviousCredit,        
                            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                            SUM(A.Debit) AS SumDebit,        
                            SUM(A.Credit) AS SumCredit,        
                            SUM(A.BaseDebit) AS SumBaseDebit,        
                            SUM(A.BaseCredit) AS SumBaseCredit,        
                            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
                            WHERE  B.ValueDate < @DateFrom  and B.PeriodPK = @PeriodPK 
                            and A.DepartmentPK is null or A.DepartmentPK = 0
                            and	(B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0     and B.status <> 3 
                            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                            C.ParentPK7, C.ParentPK8, C.ParentPK9        
                            ) AS B        
                            WHERE 
                            (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                            OR B.ParentPK9 = A.AccountPK)       
                            Group BY A.AccountPK       
                            ) AS B ON A.AccountPK = B.AccountPK        
                            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
                            WHERE (A.CurrentBalance <> 0)        
                            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                            OR (A.CurrentBaseBalance <> 0)        
                            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
                            )Z on A.ID = Z.AccountID where A.Type > 2

                            )B ON A.ID COLLATE DATABASE_DEFAULT =B.ID COLLATE DATABASE_DEFAULT


                            Select A.ID ID,A.Name NAME, '','','','',
                            A.Debit-A.Credit CURRENTBALANCE,'','','','',
                            A.RetailDebit-A.RetailCredit RETAILCURRENTBALANCE,'','','','','',
                            A.InsDebit-A.InsCredit INSTITUTIONCURRENTBALANCE,'','','','',
                            A.InvDebit-A.InvCredit INVESTMENTCURRENTBALANCE,'','','','',
                            A.OpsDebit-A.OpsCredit OPERATIONSCURRENTBALANCE,'',
                            0 OTHERSPREVIOUSBALANCE,A.OthDebit DEBIT,A.OthCredit CREDIT,A.OthDebit-A.OthCredit CURRENTBALANCE,'','',0 REKAP
                            From #TBDetailPerCostCenter A
                            left join MapRptPillar B on A.AccountPK  = B.AccountPK 
                            ORder by A.ID ASC";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {


                                    string filePath = Tools.ReportsPath + "PillarAM" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "PillarAMTemplate.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReports";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                                        int incRowExcel;
                                        int incColExcel = 1;
                                        incRowExcel = 5;
                                        // ini buat header
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[4, incColExcel].Value = dr0.GetName(inc1).ToString();
                                            incColExcel++;
                                        }
                                        while (dr0.Read())
                                        {
                                            incColExcel = 1;
                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                //worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                incColExcel++;
                                            }
                                            incRowExcel++;
                                        }
                                        incRowExcel = incRowExcel + 2;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                        //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                        //incRowExcel = incRowExcel + 5;
                                        //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                        //worksheet.Cells[incRowExcel, 2].Value = ")";
                                        //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                        //worksheet.Cells[incRowExcel, 6].Value = ")";
                                        //worksheet.Row(incRowExcel).PageBreak = _auditTrailRpt.PageBreak;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 PILLAR AM";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }



            #endregion

            #region Income Statement Period
            else if (_accountingRpt.ReportName.Equals("Income Statement Period"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            string _paramAccount = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "and A.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.Status <> 3  ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                            }
                            if (_accountingRpt.ParamData == 1)
                            {
                                _paramData = "  A.Groups = 1  ";
                            }
                            else if (_accountingRpt.ParamData == 2)
                            {
                                _paramData = "  A.Groups = 0  ";
                            }
                            else if (_accountingRpt.ParamData == 3)
                            {
                                _paramData = "  A.Groups in (0,1)  ";
                            }


                            cmd.CommandText = @"  
	DECLARE @PeriodPK int
Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2


         SELECT C.ID,C.Name, C.[ParentPK],C.[Groups],ISNULL(B.CurrentBaseBalance,0) Actual,ISNULL(A.Balance,0) Budget FROM dbo.AccountBudget A
		 LEFT JOIN Account C ON A.AccountPK = C.AccountPK AND C.status IN (1,2)
		 LEFT JOIN (
		 
		    SELECT C.AccountPK,C.ID , C.Name, C.[Groups],C.[ParentPK],    
            D.ID CurrencyID,       
            CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
            CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
            CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
            CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
            FROM (      
            SELECT A.AccountPK,       
            SUM(B.Balance) AS CurrentBalance,       
            SUM(B.BaseBalance) AS CurrentBaseBalance,      
            SUM(B.SumDebit) AS CurrentDebit,       
            SUM(B.SumCredit) AS CurrentCredit,       
            SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
            SUM(B.SumBaseCredit) AS CurrentBaseCredit      
            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
            SUM(A.Debit) AS SumDebit,      
            SUM(A.Credit) AS SumCredit,      
            SUM(A.BaseDebit) AS SumBaseDebit,      
            SUM(A.BaseCredit) AS SumBaseCredit,      
            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2    
            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2      
            WHERE  B.ValueDate <= @ValueDateTo and B.PeriodPK = @PeriodPK
			--AND B.status <> 3
            " + _status + _paramAccount + @"       
            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
            C.ParentPK7, C.ParentPK8, C.ParentPK9        
            ) AS B        
            WHERE  
			" + _paramData + @"  AND 
			(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
            OR B.ParentPK9 = A.AccountPK)       and A.Status = 2
            Group BY A.AccountPK       
            ) AS A LEFT JOIN (       
            SELECT A.AccountPK,        
            SUM(B.Balance) AS PreviousBalance,        
            SUM(B.BaseBalance) AS PreviousBaseBalance,       
            SUM(B.SumDebit) AS PreviousDebit,        
            SUM(B.SumCredit) AS PreviousCredit,        
            SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
            SUM(B.SumBaseCredit) AS PreviousBaseCredit       
            FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
            SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
            SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
            SUM(A.Debit) AS SumDebit,        
            SUM(A.Credit) AS SumCredit,        
            SUM(A.BaseDebit) AS SumBaseDebit,        
            SUM(A.BaseCredit) AS SumBaseCredit,        
            C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
            C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
            FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
            INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2     
            WHERE  B.ValueDate < @ValueDateFrom  and B.PeriodPK = @PeriodPK   
			--AND B.status <> 3
            " + _status + _paramAccount + @" 
            Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
            C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
            C.ParentPK7, C.ParentPK8, C.ParentPK9        
            ) AS B        
            WHERE  
			" + _paramData + @"   AND 
			(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
            OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
            OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
            OR B.ParentPK9 = A.AccountPK)       and A.Status = 2
            Group BY A.AccountPK       
            ) AS B ON A.AccountPK = B.AccountPK        
            INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
            INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     
            WHERE (A.CurrentBalance <> 0)        
            OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
            OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
            OR (A.CurrentBaseBalance <> 0)        
            OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
            OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
         )B ON A.AccountPK = B.AccountPK
		 WHERE A.month = MONTH(@ValueDateFrom) AND A.PeriodPK = @PeriodPK AND C.ID IS NOT null 
                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "IncomeStatementPeriod" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Income Statement Period");

                                        List<IncomeStatementPeriod> rList = new List<IncomeStatementPeriod>();
                                        while (dr0.Read())
                                        {
                                            IncomeStatementPeriod rSingle = new IncomeStatementPeriod();
                                            //rSingle.AccountPK = Convert.ToInt32(dr0["AccountPK"]);
                                            rSingle.ID = Convert.ToString(dr0["ID"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.Groups = Convert.ToInt32(dr0["Groups"]);
                                            //rSingle.ParentPK = Convert.ToInt32(dr0["ParentPK"]);
                                            rSingle.ParentPK = dr0["ParentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ParentPK"]);
                                            rSingle.Actual1 = Convert.ToDecimal(dr0["Actual"]);
                                            rSingle.ofTotal1 = Convert.ToDecimal(dr0["Budget"]);
                                            rSingle.Budget1 = Convert.ToDecimal(dr0["Budget"]);
                                            //rSingle.Variance1 = Convert.ToDecimal(dr0["CurrentBaseBalance"]);

                                            rSingle.Actual2 = Convert.ToDecimal(dr0["Actual"]);
                                            rSingle.ofTotal2 = Convert.ToDecimal(dr0["Budget"]);
                                            rSingle.Budget2 = Convert.ToDecimal(dr0["Budget"]);
                                            //rSingle.Variance2 = Convert.ToDecimal(dr0["CurrentBaseBalance"]);


                                            rList.Add(rSingle);

                                        }
                                        var GroupByReference =
                                            from r in rList
                                            orderby r.ID ascending
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Income Statement";
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "For the Period Ended " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM-yyyy");
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;

                                            //Row B = 3
                                            int RowA = incRowExcel;
                                            int RowC = incRowExcel + 1;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM-yyyy");
                                            worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "YTD " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("yyyy");
                                            worksheet.Cells["G" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "ID";
                                            worksheet.Cells[incRowExcel, 2].Value = "Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "Actual";
                                            worksheet.Cells[incRowExcel, 4].Value = "% of  Total";
                                            worksheet.Cells[incRowExcel, 5].Value = "Budget ";
                                            worksheet.Cells[incRowExcel, 6].Value = "Variance";
                                            worksheet.Cells[incRowExcel, 7].Value = "Actual";
                                            worksheet.Cells[incRowExcel, 8].Value = "% of  Total";
                                            worksheet.Cells[incRowExcel, 9].Value = "Budget ";
                                            worksheet.Cells[incRowExcel, 10].Value = "Variance";

                                            string _range = "A" + incRowExcel + ":J" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;


                                            //int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //int _A = 0;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells["C" + RowA + ":J" + RowC].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowA + ":J" + RowC].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowA + ":J" + RowC].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowA + ":J" + RowC].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["C" + RowB + ":J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + RowB + ":J" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                if (rsDetail.Groups == 1)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.ID;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Name;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Actual1;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ofTotal1;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Budget1;
                                                    worksheet.Cells[incRowExcel, 6].Formula = "iferror((" + rsDetail.Actual1 + "-" + rsDetail.Budget1 + ") / (" + rsDetail.Budget1 + "),0)";
                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Actual2;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.ofTotal2;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Budget2;
                                                    worksheet.Cells[incRowExcel, 10].Formula = "iferror((" + rsDetail.Actual1 + "-" + rsDetail.Budget1 + ") / (" + rsDetail.Budget1 + "),0)";
                                                    worksheet.Cells[incRowExcel, 10].Calculate();
                                                    worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Font.Bold = true;
                                                    worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.Font.Color.SetColor(Color.Blue);
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.ID;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Name;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Actual1;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ofTotal1;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Budget1;
                                                    worksheet.Cells[incRowExcel, 6].Formula = "iferror((" + rsDetail.Actual1 + "-" + rsDetail.Budget1 + ") / (" + rsDetail.Budget1 + "),0)";
                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Actual2;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.ofTotal2;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Budget2;
                                                    worksheet.Cells[incRowExcel, 10].Formula = "iferror((" + rsDetail.Actual1 + "-" + rsDetail.Budget1 + ") / (" + rsDetail.Budget1 + "),0)";
                                                    worksheet.Cells[incRowExcel, 10].Calculate();
                                                }


                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                }


                                                //_endRowDetail = incRowExcel;

                                                //_no++;
                                                incRowExcel++;

                                            }
                                            int RowF = incRowExcel - 1;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            incRowExcel = incRowExcel + 2;

                                        }
                                        worksheet.Row(incRowExcel).PageBreak = true;

                                        string _rangeDetail = "A:J";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 0;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 0;
                                        worksheet.Column(8).Width = 0;
                                        worksheet.Column(9).Width = 0;
                                        worksheet.Column(10).Width = 0;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND PORTFOLIO";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region General Ledger
            else if (_accountingRpt.ReportName.Equals("General Ledger"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4)";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                            }
                            cmd.CommandText = @"
	                        Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            ------
                            DECLARE @AccountRpt TABLE
                            (
	                            AccountPK int
                            )

                            INSERT INTO @AccountRpt
                                    ( AccountPK )
                            SELECT DISTINCT B.AccountPK 
                            FROM journal A  
                            LEFT join journalDetail B on A.JournalPK = B.JournalPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                                and A.PeriodPK = @PeriodPK 


                            DECLARE @AccountBalance TABLE
                            (
	                            AccountPK INT,
	                            StartBalance NUMERIC(22,4)
                            )

                            INSERT INTO @AccountBalance
                                    ( AccountPK, StartBalance )
                            SELECT AccountPK,[dbo].[FGetStartAccountBalance](@ValueDateFrom,AccountPK) FROM @AccountRpt
                            ------

                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                            isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
                            isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                            B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance ,    
                            case when Reference = '' or Reference is null then 0 else cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) end RefNo       
                            from journal A    
                            left join journalDetail B on A.JournalPK = B.JournalPK    
                            left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)    
                            left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in (1,2)    
                            left join Office E on B.OfficePK = E.OfficePK and E.status in (1,2)    
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in (1,2)    
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in (1,2)    
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in (1,2)    
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in (1,2)  
                            LEFT JOIN @AccountBalance J ON B.AccountPK  = J.AccountPK  
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo 
                            and A.PeriodPK = @PeriodPK
                             " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "GeneralLedger" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "GeneralLedger" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("General Ledger");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = dr0["RefNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByAccountID =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByAccountID)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "ACC : ";
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 9].Value = _accountingRpt.ValueDateFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "CURR ID : ";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CurrencyID;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 9].Value = _accountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "BEG BALANCE :";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "ACC No";
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "NO";
                                            worksheet.Cells[incRowExcel, 4].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 5].Value = "REF";
                                            worksheet.Cells[incRowExcel, 6].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                            worksheet.Cells[incRowExcel, 8].Value = "INST";
                                            worksheet.Cells[incRowExcel, 9].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 10].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 11].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":K" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }

                                            _range = "A" + incRowExcel + ":K" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.AccountID;
                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.AccountName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = _no;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.BaseCredit;
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Formula = "K" + _rowEndBalance + "+I" + incRowExcel + "-J" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Formula = "K" + _rowEndBalance + "-I" + incRowExcel + "+J" + incRowExcel;
                                                }
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                //worksheet.Cells[incRowExcel, 9].Calculate();
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":K" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }
                                                _no++;


                                            }
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                            worksheet.Cells["K" + _startRowDetail + ":K" + _rowEndBalance].Calculate();

                                        }
                                        string _rangeDetail = "A:K";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(1).Width = 12;
                                        worksheet.Column(2).Width = 32;
                                        worksheet.Column(3).Width = 5;
                                        worksheet.Column(4).Width = 14;
                                        worksheet.Column(5).Width = 14;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 12;
                                        worksheet.Column(8).Width = 14;
                                        worksheet.Column(9).Width = 18;
                                        worksheet.Column(10).Width = 18;
                                        worksheet.Column(11).Width = 18;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 General Ledger";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            else
            {
                return false;
            }
        }

        //AUDIT ACCOUNTING
        public Boolean GenerateReportAuditAccounting(string _userID, AuditAccountingRpt _auditAccountingRpt)
        {
            if (_auditAccountingRpt.ReportName.Equals("Account Activity"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            string _showNullData = " and C.ID Between left(@AccountFrom,charindex('-',@AccountFrom) - 2) and left(@AccountTo,charindex('-',@AccountTo) - 2) " +
                                            " and E.ID Between left(@OfficeFrom,charindex('-',@OfficeFrom) - 2) and left(@OfficeTo,charindex('-',@OfficeTo) - 2) " +
                                            " and F.ID Between left(@DepartmentFrom,charindex('-',@DepartmentFrom) - 2) and left(@DepartmentTo,charindex('-',@DepartmentTo) - 2) " +
                                            " and G.ID Between left(@AgentFrom,charindex('-',@AgentFrom) - 2) and left(@AgentTo,charindex('-',@AgentTo) - 1) " +
                                            " and H.ID Between left(@ConsigneeFrom,charindex('-',@ConsigneeFrom) - 2) and left(@ConsigneeTo,charindex('-',@ConsigneeTo) - 2) " +
                                            " and I.ID Between left(@InstrumentFrom,charindex('-',@InstrumentFrom) - 2) and left(@InstrumentTo,charindex('-',@InstrumentTo) - 2) ";
                            if (_auditAccountingRpt.ShowNullData)
                            {
                                _showNullData = " and (C.ID Between left(@AccountFrom,charindex('-',@AccountFrom) - 2) and left(@AccountTo,charindex('-',@AccountTo) - 2) or C.ID is null) " +
                                            " and (E.ID Between left(@OfficeFrom,charindex('-',@OfficeFrom) - 2) and left(@OfficeTo,charindex('-',@OfficeTo) - 2) or E.ID is null) " +
                                            " and (F.ID Between left(@DepartmentFrom,charindex('-',@DepartmentFrom) - 2) and left(@DepartmentTo,charindex('-',@DepartmentTo) - 2) or F.ID is null) " +
                                            " and (G.ID Between left(@AgentFrom,charindex('-',@AgentFrom) - 2) and left(@AgentTo,charindex('-',@AgentTo) - 2) or G.ID is null) " +
                                            " and (H.ID Between left(@ConsigneeFrom,charindex('-',@ConsigneeFrom) - 2) and left(@ConsigneeTo,charindex('-',@ConsigneeTo) - 2) or H.ID is null) " +
                                            " and (I.ID Between left(@InstrumentFrom,charindex('-',@InstrumentFrom) - 2) and left(@InstrumentTo,charindex('-',@InstrumentTo) - 2) or I.ID is null)  ";
                            }
                            if (_auditAccountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_auditAccountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_auditAccountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0  ";
                            }
                            else if (_auditAccountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0  ";
                            }


                            cmd.CommandText =
                                             " select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference, " +
                                             " Case when C.ID = '401.03.02.000' Or C.ID = '401.03.01.000' Or C.ID = '401.03.03.000' then '401.03.00.000' else " +
                                             " case when C.ID = '401.08.01.001' Or C.ID = '401.08.01.002' Or C.ID = '401.08.01.003' then '401.08.01.000' else " +
                                             " Case when C.ID = '401.13.01.001' or C.ID = '401.13.01.002' or C.ID = '401.13.01.003' or C.ID = '401.13.01.004' then '401.13.01.000' else " +
                                             " Case When C.ID = '402.04.01.001' or C.ID = '402.04.01.002' or C.ID = '402.04.01.003' then '402.04.01.000' else " +
                                             " Case when C.ID = '402.04.02.001' or C.ID = '402.04.02.002' or C.ID = '402.04.02.003' then '402.04.02.000' else C.ID End end end end END AccountID " +
                                             " , " +
                                             " Case when C.Name = 'Office Rental Expense' or C.Name = 'Storage Rental Expense' or C.Name = 'Apartment Rental Expense' then 'Rental Expense' else " +
                                             " Case when C.Name = 'Office Telephone Expense' or C.Name = 'Mobilephone Expense' or C.Name = 'Facsimile Expense' then 'Telecommunication Expense' else " +
                                             " Case when C.Name = 'Office Electricity - Monthly' or C.Name = 'Office Electricity - Overtime' or C.Name = 'Apartment Electricity' or C.Name = 'Apartment Water' then 'Electricity & Water Expense' else " +
                                             " Case when C.Name = 'Transportation - DOMESTIC' or C.Name = 'Accomodation - DOMESTIC' or C.Name = 'Pocket Allowance - DOMESTIC' then 'Business Travel - Domestic' else " +
                                             " Case when C.Name = 'Transportation - OVERSEAS' or C.Name = 'Accomodation - OVERSEAS' or C.Name = 'Pocket Allowance - OVERSEAS' then 'Business Travel - Overseas' else C.Name End end end end END AccountName " +
                                             " ,   " +
                                             " isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,   " +
                                             " isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,   " +
                                             " B.BaseDebit,B.BaseCredit, " +
                                             " Case when B.AccountPK = 245 or B.AccountPK = 246 or B.AccountPK = 247 then [dbo].[FGetStartAccountBalanceByParentByDate](@ValueDateFrom,244) else " +
                                             " Case when B.AccountPK = 268 or B.AccountPK = 269 or B.AccountPK = 270 then [dbo].[FGetStartAccountBalanceByParentByDate](@ValueDateFrom,267) else " +
                                             " Case when B.AccountPK = 293 or B.AccountPK = 294 or B.AccountPK = 295 or B.AccountPK = 296 then [dbo].[FGetStartAccountBalanceByParentByDate](@ValueDateFrom,292) else " +
                                             " Case when B.AccountPK = 327 or B.AccountPK = 328 or B.AccountPK = 329 then [dbo].[FGetStartAccountBalanceByParentByDate](@ValueDateFrom,326) else " +
                                             " Case when B.AccountPK = 331 or B.AccountPK = 332 or B.AccountPK = 333 then [dbo].[FGetStartAccountBalanceByParentByDate](@ValueDateFrom,330) else " +
                                             " [dbo].[FGetStartAccountBalance](@ValueDateFrom,B.AccountPK) END END END END END StartBalance " +
                                             " ,   " +
                                             " cast(substring(A.reference,1,charindex('/',A.reference,1) - 1) as integer) RefNo    " +
                                             " from journal A   " +
                                             " left join journalDetail B on A.JournalPK = B.JournalPK   " +
                                             " left join Account C on B.AccountPK = C.AccountPK and C.status = 2   " +
                                             " left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status = 2   " +
                                             " left join Office E on B.OfficePK = E.OfficePK and E.status = 2   " +
                                             " left join Department F on B.DepartmentPK = F.DepartmentPK and F.status = 2   " +
                                             " left join Agent G on B.AgentPK = G.AgentPK and G.status = 2   " +
                                             " left join Consignee H on B.consigneePK = H.ConsigneePK and H.status = 2   " +
                                             " left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status = 2   " +
                                             " Where A.ValueDate Between @ValueDateFrom and @ValueDateTo  " +
                                             _status + " \n " +
                                             _showNullData + " \n " +
                                             " Order By A.ValueDate, RefNo ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _auditAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _auditAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _auditAccountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@AccountTo", _auditAccountingRpt.AccountTo);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _auditAccountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@OfficeTo", _auditAccountingRpt.OfficeTo);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _auditAccountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@DepartmentTo", _auditAccountingRpt.DepartmentTo);
                            cmd.Parameters.AddWithValue("@AgentFrom", _auditAccountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@AgentTo", _auditAccountingRpt.AgentTo);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _auditAccountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeTo", _auditAccountingRpt.ConsigneeTo);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _auditAccountingRpt.InstrumentFrom);
                            cmd.Parameters.AddWithValue("@InstrumentTo", _auditAccountingRpt.InstrumentTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountActivityAudit" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity Plain");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {




                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                         from r in rList
                                         orderby r.AccountID ascending
                                         group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance } into rGroup
                                         select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 7].Value = _auditAccountingRpt.ValueDateFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 7].Value = _auditAccountingRpt.ValueDateTo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "REF";
                                            worksheet.Cells[incRowExcel, 4].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 5].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 6].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 7].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = "JOURNAL NO";
                                            //worksheet.Cells[incRowExcel, 3].Value = "DESCRIPTION";
                                            //worksheet.Cells[incRowExcel, 6].Value = "OFF";
                                            //worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 8].Value = "DEPT";
                                            //worksheet.Cells[incRowExcel, 9].Value = "CONSG";
                                            //worksheet.Cells[incRowExcel, 10].Value = "Instrument";
                                            //worksheet.Cells[incRowExcel, 11].Value = "BALANCE";

                                            _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                //worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel + "4:" + incRowExcel + "6"].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Formula = "=G" + _rowEndBalance + "+E" + incRowExcel + "-F" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Formula = "=G" + _rowEndBalance + "-E" + incRowExcel + "+F" + incRowExcel;
                                                }
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.journalPK;
                                                //worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.DetailDescription;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.OfficeID;

                                                //worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentID;
                                                //worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 9].Value = rsDetail.ConsigneeID;

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                            //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 2].Value = ")";
                                            //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                            //worksheet.Cells[incRowExcel, 6].Value = ")";
                                            worksheet.Row(incRowExcel).PageBreak = _auditAccountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(8).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY AUDIT";
                                        if (_auditAccountingRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            else if (_auditAccountingRpt.ReportName.Equals("Journal Voucher"))
            {

                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            string _showNullData = " and C.ID Between left(@AccountFrom,charindex('-',@AccountFrom) - 1) and left(@AccountTo,charindex('-',@AccountTo) - 1) " +
                                            " and E.ID Between left(@OfficeFrom,charindex('-',@OfficeFrom) - 1) and left(@OfficeTo,charindex('-',@OfficeTo) - 1) " +
                                            " and F.ID Between left(@DepartmentFrom,charindex('-',@DepartmentFrom) - 1) and left(@DepartmentTo,charindex('-',@DepartmentTo) - 1) " +
                                            " and G.ID Between left(@AgentFrom,charindex('-',@AgentFrom) - 1) and left(@AgentTo,charindex('-',@AgentTo) - 1) " +
                                            " and H.ID Between left(@ConsigneeFrom,charindex('-',@ConsigneeFrom) - 1) and left(@ConsigneeTo,charindex('-',@ConsigneeTo) - 1) " +
                                            " and I.ID Between left(@InstrumentFrom,charindex('-',@InstrumentFrom) - 1) and left(@InstrumentTo,charindex('-',@InstrumentTo) - 1) ";
                            if (_auditAccountingRpt.ShowNullData)
                            {
                                _showNullData = " and (C.ID Between left(@AccountFrom,charindex('-',@AccountFrom) - 1) and left(@AccountTo,charindex('-',@AccountTo) - 1) or C.ID is null) " +
                                            " and (E.ID Between left(@OfficeFrom,charindex('-',@OfficeFrom) - 1) and left(@OfficeTo,charindex('-',@OfficeTo) - 1) or E.ID is null) " +
                                            " and (F.ID Between left(@DepartmentFrom,charindex('-',@DepartmentFrom) - 1) and left(@DepartmentTo,charindex('-',@DepartmentTo) - 1) or F.ID is null) " +
                                            " and (G.ID Between left(@AgentFrom,charindex('-',@AgentFrom) - 1) and left(@AgentTo,charindex('-',@AgentTo) - 1) or G.ID is null) " +
                                            " and (H.ID Between left(@ConsigneeFrom,charindex('-',@ConsigneeFrom) - 1) and left(@ConsigneeTo,charindex('-',@ConsigneeTo) - 1) or H.ID is null) " +
                                            " and (I.ID Between left(@InstrumentFrom,charindex('-',@InstrumentFrom) - 1) and left(@InstrumentTo,charindex('-',@InstrumentTo) - 1) or I.ID is null)  ";
                            }
                            if (_auditAccountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_auditAccountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_auditAccountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) ";
                            }
                            else if (_auditAccountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) ";
                            }
                            cmd.CommandText = " Select B.EntryUsersID CheckedBy,B.ApprovedUsersID ApprovedBy,B.ValueDate,B.Reference,  " +
                                            " A.DetailDescription Description, " +
                                             " Case when C.ID = '401.03.02.000' Or C.ID = '401.03.01.000' Or C.ID = '401.03.03.000' then '401.03.00.000' else " +
                                             " case when C.ID = '401.08.01.001' Or C.ID = '401.08.01.002' Or C.ID = '401.08.01.003' then '401.08.01.000' else " +
                                             " Case when C.ID = '401.13.01.001' or C.ID = '401.13.01.002' or C.ID = '401.13.01.003' or C.ID = '401.13.01.004' then '401.13.01.000' else " +
                                             " Case When C.ID = '402.04.01.001' or C.ID = '402.04.01.002' or C.ID = '402.04.01.003' then '402.04.01.000' else " +
                                             " Case when C.ID = '402.04.02.001' or C.ID = '402.04.02.002' or C.ID = '402.04.02.003' then '402.04.02.000' else C.ID End end end end END AccountID " +
                                             " , " +
                                             " Case when C.Name = 'Office Rental Expense' or C.Name = 'Storage Rental Expense' or C.Name = 'Apartment Rental Expense' then 'Rental Expense' else " +
                                             " Case when C.Name = 'Office Telephone Expense' or C.Name = 'Mobilephone Expense' or C.Name = 'Facsimile Expense' then 'Telecommunication Expense' else " +
                                             " Case when C.Name = 'Office Electricity - Monthly' or C.Name = 'Office Electricity - Overtime' or C.Name = 'Apartment Electricity' or C.Name = 'Apartment Water' then 'Electricity & Water Expense' else " +
                                             " Case when C.Name = 'Transportation - DOMESTIC' or C.Name = 'Accomodation - DOMESTIC' or C.Name = 'Pocket Allowance - DOMESTIC' then 'Business Travel - Domestic' else " +
                                             " Case when C.Name = 'Transportation - OVERSEAS' or C.Name = 'Accomodation - OVERSEAS' or C.Name = 'Pocket Allowance - OVERSEAS' then 'Business Travel - Overseas' else C.Name End end end end END AccountName " +
                                             " ,   " +
                                //C.ID AccountID,C.Name AccountName,   " +
                                            " D.ID BankCurrencyID,A.DebitCredit DebitCredit,A.Amount Amount,A.Debit Debit, A.Credit Credit, " +
                                            " A.CurrencyRate Rate,A.BaseDebit BaseDebit,A.BaseCredit BaseCredit,  " +
                                            " E.ID OfficeID,F.ID DepartmentID,G.ID AgentID,H.ID ConsigneeID,I.ID InstrumentID ,   " +
                                            " cast(substring(B.reference,1,charindex('/',B.reference,1) - 1) as integer) RefNo    " +
                                            " from JournalDetail A     " +
                                            " left join Journal B on A.JournalPK = B.JournalPK and B.status = 2   " +
                                            " left join Account C on A.AccountPK = C.AccountPK and C.status = 2   " +
                                            " left join Currency D on A.CurrencyPK = D.CurrencyPK and D.status = 2   " +
                                            " left join Office E on A.OfficePK = E.OfficePK and E.status = 2   " +
                                            " left join Department F on A.DepartmentPK = F.DepartmentPK and F.status = 2   " +
                                            " left join Agent G on A.AgentPK = G.AgentPK and G.status = 2   " +
                                            " left join Consignee H on A.ConsigneePK = H.ConsigneePK and H.status = 2   " +
                                            " left join Instrument I on A.InstrumentPK = I.InstrumentPK and I.status = 2  " +
                                            " Where B.ValueDate Between @ValueDateFrom and @ValueDateTo " +
                                //" And cast(substring(B.reference,1,charindex('/',B.reference,1) - 1) as integer) between cast(substring(@ReferenceFrom,1,charindex('/',@ReferenceFrom,1) - 1) as integer) " +
                                //" And cast(substring(@ReferenceTo,1,charindex('/',@ReferenceTo,1) - 1) as integer)     " +
                                            _status + " \n " +
                                            _showNullData + " \n " +
                                            " Order By B.ValueDate, RefNo ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _auditAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _auditAccountingRpt.ValueDateTo);
                            //cmd.Parameters.AddWithValue("@ReferenceFrom", _auditAccountingRpt.ReferenceFrom);
                            //cmd.Parameters.AddWithValue("@ReferenceTo", _auditAccountingRpt.ReferenceTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _auditAccountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@AccountTo", _auditAccountingRpt.AccountTo);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _auditAccountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@OfficeTo", _auditAccountingRpt.OfficeTo);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _auditAccountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@DepartmentTo", _auditAccountingRpt.DepartmentTo);
                            cmd.Parameters.AddWithValue("@AgentFrom", _auditAccountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@AgentTo", _auditAccountingRpt.AgentTo);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _auditAccountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeTo", _auditAccountingRpt.ConsigneeTo);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _auditAccountingRpt.InstrumentFrom);
                            cmd.Parameters.AddWithValue("@InstrumentTo", _auditAccountingRpt.InstrumentTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "JournalVoucherAuditRpt" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Journal Voucher Audit");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<JournalVoucher> rList = new List<JournalVoucher>();
                                        while (dr0.Read())
                                        {
                                            JournalVoucher rSingle = new JournalVoucher();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.CheckedBy = Convert.ToString(dr0["CheckedBy"]);
                                            rSingle.ApprovedBy = Convert.ToString(dr0["ApprovedBy"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.Reference, r.ValueDate, r.CheckedBy, } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 1;
                                            if (rsHeader.Key.ValueDate >= _compareDate)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "PT RHB ASSET MANAGEMENT INDONESIA";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 13;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "PT RHB OSK Asset Management";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 13;
                                            }
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "REFERENCE : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "DATE : ";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.ValueDate;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "BANK";
                                            //worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BankID + "-" + rsHeader.Key.BankName;
                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "ACCOUNT ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "NAME";
                                            worksheet.Cells[incRowExcel, 4].Value = "DESCRIPTION";
                                            worksheet.Cells[incRowExcel, 5].Value = "DEBIT";
                                            worksheet.Cells[incRowExcel, 6].Value = "CREDIT";
                                            worksheet.Cells[incRowExcel, 7].Value = "DEPT";
                                            worksheet.Cells[incRowExcel, 8].Value = "INS";
                                            string _range = "A" + incRowExcel + ":H" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccountID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccountName;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Description;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseCredit;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;





                                            }

                                            int RowF = incRowExcel - 1;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;




                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 2].Value = "Prepared By";
                                            worksheet.Cells[incRowExcel, 4].Value = "Checked By";
                                            worksheet.Cells[incRowExcel, 6].Value = "Approved By";
                                            incRowExcel = incRowExcel + 5;
                                            worksheet.Cells[incRowExcel, 2].Value = "(     " + rsHeader.Key.CheckedBy;
                                            worksheet.Cells[incRowExcel, 3].Value = "      )";
                                            worksheet.Cells[incRowExcel, 4].Value = "(                                         )";
                                            worksheet.Cells[incRowExcel, 6].Value = "(                                 ";
                                            worksheet.Cells[incRowExcel, 7].Value = "      )";
                                            worksheet.Row(incRowExcel).PageBreak = _auditAccountingRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:H";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(9).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 JOURNAL VOUCHER AUDIT";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

                //-----------------------

            else if (_auditAccountingRpt.ReportName.Equals("Balance Sheet"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_auditAccountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_auditAccountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_auditAccountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) ";
                            }
                            else if (_auditAccountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) ";
                            }
                            if (_auditAccountingRpt.ParamData == 1)
                            {
                                _paramData = " and A.Groups = 1  ";
                            }
                            else if (_auditAccountingRpt.ParamData == 2)
                            {
                                _paramData = " and A.Groups = 0  ";
                            }
                            else if (_auditAccountingRpt.ParamData == 3)
                            {
                                _paramData = " and A.Groups in (0,1)  ";
                            }
                            cmd.CommandText =
                                                  " Declare @PeriodPK int \n " +
                                                  " select @PeriodPK = PeriodPK from period Where status = 2 and @ValueDate Between Datefrom and DateTo \n " +
                                                  " SELECT A.AccountPK, A.ID, A.Name, A.[Type], A.[Groups], " +
                                                  " SUM(B.Balance) AS CurrentBalance FROM Account A, (  " +
                                                  " SELECT A.AccountPK, B.Posted, B.Reversed, SUM(CASE C.[Type] WHEN 1 THEN A.BaseDebit-A.BaseCredit   " +
                                                  " ELSE A.BaseCredit-A.BaseDebit END) AS Balance,   " +
                                                  " C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,  " +
                                                  " C.ParentPK7, C.ParentPK8, C.ParentPK9  " +
                                                  " FROM [JournalDetail] A   " +
                                                  " INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK  " +
                                                  " INNER JOIN Account C ON A.AccountPK = C.AccountPK  " +
                                                  " WHERE B.PeriodPK = @PeriodPK   " +
                                                  " AND B.ValueDate <= @ValueDate  " +
                                                  _status + " \n " +
                                                  " GROUP BY A.AccountPK, B.Posted, B.Reversed,C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4,   " +
                                                  " C.ParentPK5, C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9  " +
                                                  " ) AS B  " +
                                                  " WHERE A.[Type] <= 2 AND A.Show = 1 AND (B.AccountPK = A.AccountPK   " +
                                                  " OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK    " +
                                                  " OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK   " +
                                                  " OR B.ParentPK5 = A.AccountPK OR B.ParentPK6 = A.AccountPK   " +
                                                  " OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK    " +
                                                  " OR B.ParentPK9 = A.AccountPK) " +
                                                  _paramData + " \n " +
                                                  " GROUP BY A.AccountPK, A.ID, A.Name, A.[Type], A.[Levels], A.[Groups] " +
                                                  "  ORDER by A.ID ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _auditAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BalanceSheetAudit" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Balance Sheet");




                                        int incRowExcel = 1;
                                        worksheet.Cells["A1:B1"].Value = "AS OF DATE : ";
                                        worksheet.Cells["A1:B1"].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = _auditAccountingRpt.ValueDateTo;
                                        incRowExcel++;
                                        worksheet.Cells["A2:D2"].Value = "ASSETS";
                                        worksheet.Cells["A2:D2"].Merge = true;
                                        worksheet.Cells["A2:D2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["F2:I2"].Value = "LIABILITIES & EQUITY";
                                        worksheet.Cells["F2:I2"].Merge = true;
                                        worksheet.Cells["F2:I2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells["A3:B3"].Value = "ID";
                                        worksheet.Cells["A3:B3"].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "NAME";
                                        worksheet.Cells[incRowExcel, 4].Value = "BALANCE";
                                        worksheet.Cells["F3:G3"].Value = "ID";
                                        worksheet.Cells["F3:G3"].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "NAME";
                                        worksheet.Cells[incRowExcel, 9].Value = "BALANCE";

                                        incRowExcel++;


                                        int incRowExcelA = 4;
                                        int incRowExcelB = 4;
                                        while (dr0.Read())
                                        {


                                            if (Convert.ToInt32(dr0["Type"]) == 1)
                                            {


                                                if (Convert.ToInt32(dr0["Groups"]) == 1)
                                                {
                                                    worksheet.Cells["A" + incRowExcelA + ":D" + incRowExcelA].Style.Font.Bold = true;
                                                    worksheet.Cells["A" + incRowExcelA + ":B" + incRowExcelA].Merge = true;
                                                    worksheet.Cells[incRowExcelA, 1].AutoFitColumns(3);
                                                    worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                    worksheet.Cells[incRowExcelA, 3].Value = Convert.ToString(dr0["Name"]);
                                                }
                                                else
                                                {

                                                    worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["ID"]);
                                                    worksheet.Cells[incRowExcelA, 3].Value = Convert.ToString(dr0["Name"]);

                                                }
                                                worksheet.Cells[incRowExcelA, 4].Value = Convert.ToDecimal(dr0["CurrentBalance"]);
                                                worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0";
                                                incRowExcelA = incRowExcelA + 1;

                                            }


                                            else if (Convert.ToInt32(dr0["Type"]) == 2)
                                            {


                                                if (Convert.ToInt32(dr0["Groups"]) == 1)
                                                {
                                                    worksheet.Cells["F" + incRowExcelB + ":I" + incRowExcelB].Style.Font.Bold = true;
                                                    worksheet.Cells["F" + incRowExcelB + ":G" + incRowExcelB].Merge = true;
                                                    worksheet.Cells[incRowExcelB, 6].AutoFitColumns(3);
                                                    worksheet.Cells[incRowExcelB, 6].Value = Convert.ToString(dr0["ID"]);
                                                    worksheet.Cells[incRowExcelB, 8].Value = Convert.ToString(dr0["Name"]);
                                                }
                                                else
                                                {

                                                    worksheet.Cells[incRowExcelB, 7].Value = Convert.ToString(dr0["ID"]);
                                                    worksheet.Cells[incRowExcelB, 8].Value = Convert.ToString(dr0["Name"]);

                                                }
                                                worksheet.Cells[incRowExcelB, 9].Value = Convert.ToDecimal(dr0["CurrentBalance"]);
                                                worksheet.Cells[incRowExcelB, 9].Style.Numberformat.Format = "#,##0";
                                                incRowExcelB = incRowExcelB + 1;

                                            }




                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells["B:D"].AutoFitColumns();
                                        worksheet.Cells["G:I"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 BALANCE SHEET AUDIT";
                                        if (_auditAccountingRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            else if (_auditAccountingRpt.ReportName.Equals("Income Statement"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_auditAccountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_auditAccountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_auditAccountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) ";
                            }
                            else if (_auditAccountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) ";
                            }
                            if (_auditAccountingRpt.ParamData == 1)
                            {
                                _paramData = " and A.Groups = 1  ";
                            }
                            else if (_auditAccountingRpt.ParamData == 2)
                            {
                                _paramData = " and A.Groups = 0  ";
                            }
                            else if (_auditAccountingRpt.ParamData == 3)
                            {
                                _paramData = " and A.Groups in (0,1)  ";
                            }


                            cmd.CommandText =
                               " SELECT A.AccountPK, A.ID, A.Name, A.[Type], A.[Groups], " +
                               " SUM(B.Balance) AS CurrentBalance FROM Account A, (     " +
                               " SELECT A.AccountPK, B.Posted, B.Reversed, SUM(CASE C.[Type] WHEN 4 THEN A.BaseDebit-A.BaseCredit      " +
                               " ELSE A.BaseCredit-A.BaseDebit END) AS Balance,      " +
                               " C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,     " +
                               " C.ParentPK7, C.ParentPK8, C.ParentPK9     " +
                               " FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK   " +
                               " INNER JOIN Account C ON A.AccountPK = C.AccountPK   " +
                               " WHERE  B.ValueDate between @DateFrom and @DateTo      " +
                               " AND C.[Type] >= 3   " +
                                  " \n " +
                                _status +
                                  " \n " +
                               " GROUP BY A.AccountPK, B.Posted, B.Reversed, C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4,    " +
                               " C.ParentPK5, C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     " +
                               " ) AS B     " +
                               " WHERE A.[Type] >= 3 AND A.Show = 1 AND (B.AccountPK = A.AccountPK   " +
                               " OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK   " +
                               " OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK   " +
                               " OR B.ParentPK5 = A.AccountPK OR B.ParentPK6 = A.AccountPK   " +
                               " OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK   " +
                               " OR B.ParentPK9 = A.AccountPK)   " +
                               " and A.ParentPK not in(244,267,292,326,330)  " +
                                  " \n " +
                               _paramData +
                                  " \n " +
                               " GROUP BY A.AccountPK, A.ID, A.Name, A.[Type], A.[Levels], A.[Groups]   " +
                               " ORDER by A.ID ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _auditAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _auditAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "IncomeStatementAudit" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Income Statement");




                                        int incRowExcel = 1;
                                        worksheet.Cells["A1:B1"].Value = "DATE FROM : ";
                                        worksheet.Cells["A1:B1"].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = _auditAccountingRpt.ValueDateFrom;
                                        worksheet.Cells["F1:G1"].Value = "DATE TO : ";
                                        worksheet.Cells["F1:G1"].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = _auditAccountingRpt.ValueDateTo;
                                        incRowExcel++;
                                        worksheet.Cells["A2:D2"].Value = "INCOME";
                                        worksheet.Cells["A2:D2"].Merge = true;
                                        worksheet.Cells["A2:D2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["F2:I2"].Value = "EXPENSE";
                                        worksheet.Cells["F2:I2"].Merge = true;
                                        worksheet.Cells["F2:I2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells["A3:B3"].Value = "ID";
                                        worksheet.Cells["A3:B3"].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "NAME";
                                        worksheet.Cells[incRowExcel, 4].Value = "BALANCE";
                                        worksheet.Cells["F3:G3"].Value = "ID";
                                        worksheet.Cells["F3:G3"].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "NAME";
                                        worksheet.Cells[incRowExcel, 9].Value = "BALANCE";

                                        incRowExcel++;


                                        int incRowExcelA = 4;
                                        int incRowExcelB = 4;
                                        while (dr0.Read())
                                        {


                                            if (Convert.ToInt32(dr0["Type"]) == 3)
                                            {


                                                if (Convert.ToInt32(dr0["Groups"]) == 1)
                                                {
                                                    worksheet.Cells["A" + incRowExcelA + ":D" + incRowExcelA].Style.Font.Bold = true;
                                                    worksheet.Cells["A" + incRowExcelA + ":B" + incRowExcelA].Merge = true;
                                                    worksheet.Cells[incRowExcelA, 1].AutoFitColumns(3);
                                                    worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                    worksheet.Cells[incRowExcelA, 3].Value = Convert.ToString(dr0["Name"]);
                                                }
                                                else
                                                {

                                                    worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["ID"]);
                                                    worksheet.Cells[incRowExcelA, 3].Value = Convert.ToString(dr0["Name"]);

                                                }
                                                worksheet.Cells[incRowExcelA, 4].Value = Convert.ToDecimal(dr0["CurrentBalance"]);
                                                worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0";
                                                incRowExcelA = incRowExcelA + 1;

                                            }


                                            else if (Convert.ToInt32(dr0["Type"]) == 4)
                                            {


                                                if (Convert.ToInt32(dr0["Groups"]) == 1)
                                                {
                                                    worksheet.Cells["F" + incRowExcelB + ":I" + incRowExcelB].Style.Font.Bold = true;
                                                    worksheet.Cells["F" + incRowExcelB + ":G" + incRowExcelB].Merge = true;
                                                    worksheet.Cells[incRowExcelB, 6].AutoFitColumns(3);
                                                    worksheet.Cells[incRowExcelB, 6].Value = Convert.ToString(dr0["ID"]);
                                                    worksheet.Cells[incRowExcelB, 8].Value = Convert.ToString(dr0["Name"]);
                                                }
                                                else
                                                {

                                                    worksheet.Cells[incRowExcelB, 7].Value = Convert.ToString(dr0["ID"]);
                                                    worksheet.Cells[incRowExcelB, 8].Value = Convert.ToString(dr0["Name"]);

                                                }
                                                worksheet.Cells[incRowExcelB, 9].Value = Convert.ToDecimal(dr0["CurrentBalance"]);
                                                worksheet.Cells[incRowExcelB, 9].Style.Numberformat.Format = "#,##0";
                                                incRowExcelB = incRowExcelB + 1;

                                            }




                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells["B:D"].AutoFitColumns();
                                        worksheet.Cells["G:I"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 INCOME STATEMENT";
                                        if (_auditAccountingRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            //TRIAL BALANCE AUDIT

            else if (_auditAccountingRpt.ReportName.Equals("Trial Balance"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");
                            if (_auditAccountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_auditAccountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_auditAccountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_auditAccountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) ";
                            }
                            else if (_auditAccountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) ";
                            }
                            if (_auditAccountingRpt.ParamData == 1)
                            {
                                _paramData = " and A.Groups = 1  ";
                            }
                            else if (_auditAccountingRpt.ParamData == 2)
                            {
                                _paramData = " and A.Groups = 0  ";
                            }
                            else if (_auditAccountingRpt.ParamData == 3)
                            {
                                _paramData = " and A.Groups in (0,1)  ";
                            }


                            cmd.CommandText =

                            " SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],  " +
                            " D.ID,     " +
                            " CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,    " +
                            " CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,     " +
                            " CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,    " +
                            " CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance    " +
                            " FROM (    " +
                            " SELECT A.AccountPK,     " +
                            " SUM(B.Balance) AS CurrentBalance,     " +
                            " SUM(B.BaseBalance) AS CurrentBaseBalance,    " +
                            " SUM(B.SumDebit) AS CurrentDebit,     " +
                            " SUM(B.SumCredit) AS CurrentCredit,     " +
                            " SUM(B.SumBaseDebit) AS CurrentBaseDebit,   " +
                            " SUM(B.SumBaseCredit) AS CurrentBaseCredit    " +
                            " FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (    " +
                            " SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,     " +
                            " SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,   " +
                            " SUM(A.Debit) AS SumDebit,    " +
                            " SUM(A.Credit) AS SumCredit,    " +
                            " SUM(A.BaseDebit) AS SumBaseDebit,    " +
                            " SUM(A.BaseCredit) AS SumBaseCredit,    " +
                            " C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,    " +
                            " C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9   " +
                            " FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK    " +
                            " INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2  " +
                            " INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2    " +
                            " WHERE  B.ValueDate <= @DateTo     " +
                            " AND C.ID Between left(@IDFrom,charindex(' ',@IDFrom) - 1) and left(@IDTo,charindex(' ',@IDTo) - 1)  " +
                            " AND D.ID Between left(@CurrencyIDFrom,charindex(' ',@CurrencyIDFrom) - 1) and left(@CurrencyIDTo,charindex(' ',@CurrencyIDTo) - 1)  " +
                            _status + " \n " +
                            " Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,     " +
                            " C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,  " +
                            " C.ParentPK7, C.ParentPK8, C.ParentPK9     " +
                            " ) AS B      " +
                            " WHERE A.ID Between left(@IDFrom,charindex(' ',@IDFrom) - 1) and left(@IDTo,charindex(' ',@IDTo) - 1)  " +
                                _paramData + " \n " +
                            " AND C.ID Between left(@CurrencyIDFrom,charindex(' ',@CurrencyIDFrom) - 1) and left(@CurrencyIDTo,charindex(' ',@CurrencyIDTo) - 1)  " +
                            " AND (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK      " +
                            " OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK      " +
                            " OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK      " +
                            " OR B.ParentPK9 = A.AccountPK)     " +
                            " Group BY A.AccountPK     " +
                            " ) AS A LEFT JOIN (     " +
                            " SELECT A.AccountPK,      " +
                            " SUM(B.Balance) AS PreviousBalance,      " +
                            " SUM(B.BaseBalance) AS PreviousBaseBalance,  " +
                            " SUM(B.SumDebit) AS PreviousDebit,      " +
                            " SUM(B.SumCredit) AS PreviousCredit,      " +
                            " SUM(B.SumBaseDebit) AS PreviousBaseDebit,      " +
                            " SUM(B.SumBaseCredit) AS PreviousBaseCredit     " +
                            " FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (     " +
                            " SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,     " +
                            " SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      " +
                            " SUM(A.Debit) AS SumDebit,      " +
                            " SUM(A.Credit) AS SumCredit,      " +
                            " SUM(A.BaseDebit) AS SumBaseDebit,      " +
                            " SUM(A.BaseCredit) AS SumBaseCredit,      " +
                            " C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      " +
                            " C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     " +
                            " FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      " +
                            " INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2   " +
                            " INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2    " +
                            " WHERE  B.ValueDate <= @DateFrom        " +
                                       _status + " \n " +
                               " \n " +
                            " AND C.ID Between left(@IDFrom,charindex(' ',@IDFrom) - 1) and left(@IDTo,charindex(' ',@IDTo) - 1)    " +
                            " AND D.ID Between left(@CurrencyIDFrom,charindex(' ',@CurrencyIDFrom) - 1) and left(@CurrencyIDTo,charindex(' ',@CurrencyIDTo) - 1)    " +
                            " Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        " +
                            " C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       " +
                            " C.ParentPK7, C.ParentPK8, C.ParentPK9        " +
                            " ) AS B   " +
                               " \n " +
                            " WHERE A.ID Between left(@IDFrom,charindex(' ',@IDFrom) - 1) and left(@IDTo,charindex(' ',@IDTo) - 1)    " +
                             _paramData + " \n " +
                            " AND C.ID Between left(@CurrencyIDFrom,charindex(' ',@CurrencyIDFrom) - 1) and left(@CurrencyIDTo,charindex(' ',@CurrencyIDTo) - 1)    " +
                            " AND (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        " +
                            " OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        " +
                            " OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        " +
                            " OR B.ParentPK9 = A.AccountPK)       " +
                            " Group BY A.AccountPK       " +
                            " ) AS B ON A.AccountPK = B.AccountPK        " +
                            " INNER JOIN Account C ON A.AccountPK = C.AccountPK and isnull(C.ParentPK,0) not in(244,267,292,326,330)   And C.Status = 2     " +
                            " INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2     " +
                            " WHERE (A.CurrentBalance <> 0)        " +
                            " OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        " +
                            " OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        " +
                            " OR (A.CurrentBaseBalance <> 0)        " +
                            " OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        " +
                            " OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     " +
                            " Order BY C.ID ";


                            //cmd.CommandText = " SELECT C.ID, C.Name, C.[Groups],C.[ParentPK], " +
                            //                    " D.ID,    " +
                            //                    " CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,   " +
                            //                    " CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,    " +
                            //                    " CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,   " +
                            //                    " CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance   " +
                            //                    " FROM (   " +
                            //                    " SELECT A.AccountPK,    " +
                            //                    "  SUM(B.Balance) AS CurrentBalance,    " +
                            //                    "  SUM(B.BaseBalance) AS CurrentBaseBalance,   " +
                            //                    "  SUM(B.SumDebit) AS CurrentDebit,    " +
                            //                    "  SUM(B.SumCredit) AS CurrentCredit,    " +
                            //                    "  SUM(B.SumBaseDebit) AS CurrentBaseDebit,    " +
                            //                    "  SUM(B.SumBaseCredit) AS CurrentBaseCredit   " +
                            //                    "   FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (   " +
                            //                    "  SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,    " +
                            //                    "   SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,   " +
                            //                    "   SUM(A.Debit) AS SumDebit,   " +
                            //                    "   SUM(A.Credit) AS SumCredit,   " +
                            //                    "   SUM(A.BaseDebit) AS SumBaseDebit,   " +
                            //                    "   SUM(A.BaseCredit) AS SumBaseCredit,   " +
                            //                    "   C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,   " +
                            //                    "   C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9  " +
                            //                    "   FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK   " +
                            //                    "   INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2 " +
                            //                    "   INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status = 2   " +
                            //                    "   WHERE  B.ValueDate <= @DateTo    " +
                            //                    "   AND C.ID Between left(@IDFrom,charindex(' ',@IDFrom) - 1) and left(@IDTo,charindex(' ',@IDTo) - 1) " +
                            //                    "   AND D.ID Between left(@CurrencyIDFrom,charindex(' ',@CurrencyIDFrom) - 1) and left(@CurrencyIDTo,charindex(' ',@CurrencyIDTo) - 1) " +
                            //                    _status + " \n " +
                            //                    "   Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,     " +
                            //                    "   C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,    " +
                            //                    "   C.ParentPK7, C.ParentPK8, C.ParentPK9     " +
                            //                    "  ) AS B     " +
                            //                    "  WHERE A.ID Between left(@IDFrom,charindex(' ',@IDFrom) - 1) and left(@IDTo,charindex(' ',@IDTo) - 1) " +
                            //                    _paramData + " \n " +
                            //                    "  AND C.ID Between left(@CurrencyIDFrom,charindex(' ',@CurrencyIDFrom) - 1) and left(@CurrencyIDTo,charindex(' ',@CurrencyIDTo) - 1) " +
                            //                    "  AND (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK     " +
                            //                    "  OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK     " +
                            //                    "  OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK     " +
                            //                    "  OR B.ParentPK9 = A.AccountPK)    " +
                            //                    "  Group BY A.AccountPK    " +
                            //                    "  ) AS A LEFT JOIN (    " +
                            //                    "  SELECT A.AccountPK,     " +
                            //                    "  SUM(B.Balance) AS PreviousBalance,     " +
                            //                    "  SUM(B.BaseBalance) AS PreviousBaseBalance,    " +
                            //                    "  SUM(B.SumDebit) AS PreviousDebit,     " +
                            //                    "  SUM(B.SumCredit) AS PreviousCredit,     " +
                            //                    "  SUM(B.SumBaseDebit) AS PreviousBaseDebit,     " +
                            //                    "  SUM(B.SumBaseCredit) AS PreviousBaseCredit    " +
                            //                    "   FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (    " +
                            //                    "   SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,     " +
                            //                    "   SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,     " +
                            //                    "  SUM(A.Debit) AS SumDebit,     " +
                            //                    "  SUM(A.Credit) AS SumCredit,     " +
                            //                    "  SUM(A.BaseDebit) AS SumBaseDebit,     " +
                            //                    "  SUM(A.BaseCredit) AS SumBaseCredit,     " +
                            //                    "   C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,     " +
                            //                    "   C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9    " +
                            //                    "   FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK     " +
                            //                    "   INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2  " +
                            //                    "   INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status = 2  " +
                            //                    "   WHERE  B.ValueDate <= @DateFrom     " +
                            //                    _status + " \n " +
                            //                    "   AND C.ID Between left(@IDFrom,charindex(' ',@IDFrom) - 1) and left(@IDTo,charindex(' ',@IDTo) - 1) " +
                            //                    "   AND D.ID Between left(@CurrencyIDFrom,charindex(' ',@CurrencyIDFrom) - 1) and left(@CurrencyIDTo,charindex(' ',@CurrencyIDTo) - 1) " +
                            //                    "   Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,     " +
                            //                    "   C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,    " +
                            //                    "   C.ParentPK7, C.ParentPK8, C.ParentPK9     " +
                            //                    "  ) AS B     " +
                            //                    "  WHERE A.ID Between left(@IDFrom,charindex(' ',@IDFrom) - 1) and left(@IDTo,charindex(' ',@IDTo) - 1) " +
                            //                    _paramData + " \n " +
                            //                    "  AND C.ID Between left(@CurrencyIDFrom,charindex(' ',@CurrencyIDFrom) - 1) and left(@CurrencyIDTo,charindex(' ',@CurrencyIDTo) - 1) " +
                            //                    "  AND (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK     " +
                            //                    "  OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK     " +
                            //                    "  OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK     " +
                            //                    "  OR B.ParentPK9 = A.AccountPK)    " +
                            //                    "  Group BY A.AccountPK    " +
                            //                    "  ) AS B ON A.AccountPK = B.AccountPK     " +
                            //                    "  INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2  " +
                            //                    "  INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2  " +
                            //                    "  WHERE (A.CurrentBalance <> 0)     " +
                            //                    "  OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)     " +
                            //                    "  OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)     " +
                            //                    "  OR (A.CurrentBaseBalance <> 0)     " +
                            //                    "  OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)     " +
                            //                    "  OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)  " +
                            //                    " Order BY C.ID  ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _auditAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _auditAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@IDFrom", _auditAccountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@IDTo", _auditAccountingRpt.AccountTo);
                            cmd.Parameters.AddWithValue("@CurrencyIDFrom", _auditAccountingRpt.CurrencyFrom);
                            cmd.Parameters.AddWithValue("@CurrencyIDTo", _auditAccountingRpt.CurrencyTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TrialBalanceAudit" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Trial Balance");

                                        int incRowExcel = 1;
                                        worksheet.Cells["A1:B1"].Value = "DATE FROM : ";
                                        worksheet.Cells["A1:B1"].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = _auditAccountingRpt.ValueDateFrom;
                                        incRowExcel++;
                                        worksheet.Cells["A2:B2"].Value = "DATE TO : ";
                                        worksheet.Cells["A2:B2"].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = _auditAccountingRpt.ValueDateTo;
                                        //incRowExcel++;
                                        worksheet.Cells["A6:B6"].Value = "ID";
                                        worksheet.Cells["A6:B6"].Merge = true;
                                        worksheet.Cells[6, 3].Value = "NAME";
                                        worksheet.Cells[6, 4].Value = "PREVIOUS BALANCE";
                                        worksheet.Cells[6, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[6, 5].Value = "DEBIT";
                                        worksheet.Cells[6, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[6, 6].Value = "CREDIT";
                                        worksheet.Cells[6, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[6, 7].Value = "CURRENT BALANCE";
                                        worksheet.Cells[6, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //incRowExcel++;


                                        int incRowExcelA = 7;
                                        while (dr0.Read())
                                        {





                                            if (Convert.ToInt32(dr0["Groups"]) == 1)
                                            {
                                                int _parentPK = 0;
                                                worksheet.Cells["A" + incRowExcelA + ":G" + incRowExcelA].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcelA + ":B" + incRowExcelA].Merge = true;
                                                worksheet.Cells[incRowExcelA, 1].AutoFitColumns(3);
                                                worksheet.Cells[incRowExcelA, 1].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 3].Value = Convert.ToString(dr0["Name"]);

                                                _parentPK = dr0["ParentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ParentPK"]);
                                                if (_parentPK == 0)
                                                {
                                                    worksheet.Cells["C" + incRowExcelA + ":C" + incRowExcelA].Style.Font.Color.SetColor(Color.Red);
                                                }
                                                else
                                                {
                                                    worksheet.Cells["C" + incRowExcelA + ":C" + incRowExcelA].Style.Font.Color.SetColor(Color.Blue);
                                                }


                                            }
                                            else
                                            {

                                                worksheet.Cells[incRowExcelA, 2].Value = Convert.ToString(dr0["ID"]);
                                                worksheet.Cells[incRowExcelA, 3].Value = Convert.ToString(dr0["Name"]);

                                            }
                                            worksheet.Cells[incRowExcelA, 4].Value = Convert.ToDecimal(dr0["PreviousBaseBalance"]);
                                            worksheet.Cells[incRowExcelA, 4].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcelA, 5].Value = Convert.ToDecimal(dr0["BaseDebitMutasi"]);
                                            worksheet.Cells[incRowExcelA, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcelA, 6].Value = Convert.ToDecimal(dr0["BaseCreditMutasi"]);
                                            worksheet.Cells[incRowExcelA, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcelA, 7].Value = Convert.ToDecimal(dr0["CurrentBaseBalance"]);
                                            worksheet.Cells[incRowExcelA, 7].Style.Numberformat.Format = "#,##0";
                                            incRowExcelA = incRowExcelA + 1;

                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells["B:H"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 TRIAL BALANCE";
                                        if (_auditAccountingRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT RHB ASSET MANAGEMENT INDONESIA";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            else
            {
                return false;
            }
        }

        public List<OSKMonthlyMappingReport> Get_RowOSKMonthlyMappingReport()
        {
            try
            {

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OSKMonthlyMappingReport> L_OSKMonthlyMappingReport = new List<OSKMonthlyMappingReport>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "SELECT distinct Row FROM [OSKMonthlyMappingReport] order by Row ";
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    OSKMonthlyMappingReport M_OSKMonthlyMappingReport = new OSKMonthlyMappingReport();
                                    M_OSKMonthlyMappingReport.Row = Convert.ToString(dr["Row"]);
                                    L_OSKMonthlyMappingReport.Add(M_OSKMonthlyMappingReport);
                                }
                            }
                            return L_OSKMonthlyMappingReport;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public Boolean GenerateReportCommission(string _userID, CommissionRpt _commissionRpt)
        {

            #region Newton Report
            if (_commissionRpt.ReportName.Equals("Newton Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = "And C.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = "And C.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            cmd.CommandText =
                                @"
     
		                            Declare @StartDate datetime
                            Declare @EndDate datetime

                            set @StartDate =  dbo.fworkingday(@dateFrom,-2)
                            set @EndDate = dbo.fworkingday(@DateTo,-2)





                            Create table #FCP
                            (
	                            Date datetime,
	                            UnitAmount Numeric(20,4),
	                            ManagementFeePercent Numeric(18,8),
	                            FundPK int,
	                            FundClientPK int,
	                            NAVDate datetime,
	                            SeriesDay int
                            )
                            insert into #FCP
                            Select Date,UnitAmount,[dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) ManagementFeePercent,A.FundPK,A.FundClientPK,dbo.fworkingday(A.Date,1) NAVDate 
                            , Case when dbo.fworkingday(A.Date,1) < @DateFrom and dbo.CheckTodayIsHoliday(@DateFrom) = 1 
		                            then datediff(day,@Datefrom,dbo.fworkingday(@DateFrom,1)) + 1
	                            when dbo.fworkingday(A.Date,1) < @DateFrom 
		                            then datediff(day,@Datefrom,dbo.fworkingday(@DateFrom,1))  
	                            when dbo.fworkingday(A.Date,1) = dbo.fworkingday(@DateTo,-1) and dbo.CheckTodayIsHoliday(dateadd(day,-1,@DateTo)) = 1
		                            then datediff(day,dbo.fworkingday(A.Date,1),dateadd(day,-1,@DateTo))  + 1
	                            when dbo.fworkingday(A.Date,1) = dbo.fworkingday(@DateTo,-1) 
		                            then 1
		 
	                            else case when [dbo].CheckIsTommorowHoliday(dbo.fworkingday(A.Date,1)) = 1 
                            then dbo.CheckTotalSeriesHoliday(
	                            case when dbo.fworkingday(A.Date,1) < @DateFrom then @DateFrom 	
	                            else case when dbo.fworkingday(A.Date,1) < @DateTo then  dbo.fworkingday(A.Date,1) 
	                            else @DateTo end end
                            ) else 1 end 
                            end SeriesDay
                            from
                            FundClientPosition A  
                            where	A.Date between @StartDate and @EndDate
                            --and A.FundClientPK = 1061 and A.FundPK = 2


                            create table #tempMFee
                            (
	                            AUM decimal (22,8),
	                            UnitAmount decimal(22,8),
	                            MGTFee decimal (22,8),
	                            FundClientPK int,
	                            FundPK int
                            )

                            insert into #tempMFee
	                            Select sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) ,sum(isnull(A.UnitAmount,0))
	                            ,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0) * A.ManagementFeePercent /365 /100 * SeriesDay)
	                            ,A.FundClientPK, A.FundPK
	                            from #FCP A
	                            left join CloseNAV B on A.NAVDate = B.Date and B.status = 2 and A.FundPK = B.FundPK
	                            Group By A.FundClientPK, A.FundPK
	

	                            --select * from #tempMFee order by FundClientPK asc

                            Select @Datefrom DateFrom, @DateTo DateTo
                            ,A.Name ClientName 
                            ,A.ID CIF
                            ,B.Name AgentName
                            ,D.ID FundID
                            ,D.Name FundName
                            ,E.ID CurrencyID
                            ,isnull(F.SalesAmount,0) SalesAmount,isnull(F.SalesUnit,0) SalesUnit
                            ,0 SwitchingAmount, 0 SwitchingUnit
                            ,isnull(G.RedemptionAmount,0) RedemptionAmount,isnull(G.RedemptionUnit,0) RedemptionUnit
                            ,0 Charge, 0 Commission
                            ,isnull(H.UnitAmount,0) UnitBalance
                            ,isnull(H.UnitAmount,0) * isnull(I.Nav,0) CashBalance
                            ,isnull(I.NAV,0) LastNAV
                            ,isnull(C.MGTFee,0) ManagementfeeAmount
                            ,0 OtherFee,0 TrailFeeAmount
                            ,isnull(H.UnitAmount,0) * isnull(I.Nav,0) AUM
                            ,J.DescOne ClientCategory
                            from FundClient A
                            left join Agent B on A.SellingAgentPK = B.AgentPK and B.status = 2
                            left join #tempMFee C on A.FundClientPK = C.FundClientPK 
                            left join Fund D on C.FundPK = D.FundPK and D.status = 2
                            left join Currency E on D.CurrencyPK =  E.CurrencyPK and E.Status = 2
                            left join
                            (
	                            Select FundClientPK,FundPK,Sum(isnull(CashAmount,0)) SalesAmount,Sum(isnull(UnitAmount,0))  SalesUnit from ClientSubscription 
	                            where ValueDate between @datefrom and @DateTo
	                            and Posted = 1 and status = 2 and Revised = 0
	                            Group by FundClientPK,FundPK 
                            )F on C.FundClientPK = F.FundClientPK and C.FundPK = F.FundPK
                            left join 
                            (
	                            Select FundClientPK,FundPK,Sum(isnull(CashAmount,0)) RedemptionAmount,Sum(isnull(UnitAmount,0))  RedemptionUnit from ClientRedemption 
	                            where ValueDate between @datefrom and @DateTo
	                            and Posted = 1 and status = 2 and Revised = 0
	                            Group by FundClientPK,FundPK 
                            )G on C.FundClientPK = G.FundClientPK and C.FundPK = G.FundPK
                            left join
                            (
	                            Select FundPK,FundClientPK, sum(UnitAmount) UnitAmount from FundClientPosition where date =  
	                            (select max(date) From FundclientPosition where date <= @DateTo )
	                            group by FundPK,FundClientPK
                            )H on C.FundPK = H.FundPK and C.FundClientPK = H.FundClientPK
                            left join 
                            (
	                            Select FundPK,Nav from CloseNAV where Date = 
		                            (select max(date) From FundclientPosition where date <= @DateTo )
	
                            )I on C.FundPK = I.FundPK 
                            left join MasterValue J on A.ClientCategory = J.Code and J.status = 2 and J.ID = 'ClientCategory' 
                            where A.Status in (1,2)
                            and (isnull(H.UnitAmount,0) > 1 or isnull(C.MGTFee,0) > 1 ) " + _paramFund + _paramFundClient + @"
		
                   
                             ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);




                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NewtonReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NewtonReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Newton Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.DateFrom = Convert.ToDateTime(dr0["DateFrom"]);
                                            rSingle.DateTo = Convert.ToDateTime(dr0["DateTo"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.CIF = Convert.ToString(dr0["CIF"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.SalesAmount = Convert.ToDecimal(dr0["SalesAmount"]);
                                            rSingle.SwitchingAmount = Convert.ToDecimal(dr0["SwitchingAmount"]);
                                            rSingle.RedemptionAmount = Convert.ToDecimal(dr0["RedemptionAmount"]);
                                            rSingle.Charge = Convert.ToDecimal(dr0["Charge"]);
                                            rSingle.Commission = Convert.ToDecimal(dr0["Commission"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitBalance"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["CashBalance"]);
                                            rSingle.ManagementFeeAmount = Convert.ToDecimal(dr0["ManagementFeeAmount"]);
                                            rSingle.TrailFeeAmount = Convert.ToDecimal(dr0["TrailFeeAmount"]);
                                            rSingle.OtherFee = Convert.ToDecimal(dr0["OtherFee"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByClientID =
                                         from r in rList
                                         group r by new { r.DateFrom, r.DateTo } into rGroup
                                         select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByClientID)
                                        {

                                            incRowExcel++;
                                            //Row A = 2
                                            int RowA = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsHeader.Key.DateFrom).ToShortDateString();
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date To :";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsHeader.Key.DateTo).ToShortDateString();
                                            incRowExcel++;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "Client Name";
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Account No/ Client No ";
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Team";
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Fund Name";
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Class";
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Sales Amount";
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Switching Amount";
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Redemption Amount";
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Charge";
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Commission";
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "No. of units";
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "AUM";
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Management Fee";
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Trailer Fee";
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 15].Value = "Other Fee Sharing";
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            // Untuk Cetak Tebal
                                            string _range = "A" + incRowExcel + ":O" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }
                                            incRowExcel++;
                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.CIF;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CurrencyID;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.SalesAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.SwitchingAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.RedemptionAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Charge;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Commission;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.CashBalance;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.ManagementFeeAmount;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.TrailFeeAmount;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.OtherFee;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";

                                            }

                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells["A3:O14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 NEWTON REPORT";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();





                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region AUM & Revenue Performance
            else if (_commissionRpt.ReportName.Equals("AUM & Revenue Performance"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText =
                                @" 
                 
declare @StartOfYear datetime
set @StartOfYear = convert (date,DATEADD(YEAR,DATEDIFF(YEAR,0,@DateFrom),0))
Declare @FundPK int
Declare @FundClientPK int

Declare @StartDate datetime
Declare @EndDate datetime

set @StartDate =  dbo.fworkingday(@DateFrom,-2)
set @EndDate = dbo.fworkingday(@DateTo,-2)




--Create Table #AUMPerformanceByClass
--(
--	TypeFund Nvarchar(500),
--	TotalAUM numeric(22,4),
--	NetTransaction numeric(22,4),
--	NetTransactionYTD numeric(22,4),
--	MIFee numeric(22,4),
--	RebateFee numeric(22,4),
--	NetMIFee numeric(22,4),
--	MIFeeYTD numeric(22,4),
--	Category nvarchar(100)

	
--)



Create table #FCP
(
	Date datetime,
	UnitAmount Numeric(20,4),
	ManagementFeePercent Numeric(18,8),
	RebateFeePercent Numeric(18,8),
	FundPK int,
	FundClientPK int,
	NAVDate datetime,
	SeriesDay int
)
insert into #FCP
Select Date,UnitAmount,[dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) ManagementFeePercent,
[dbo].[FgetRebateFeePercentByDate] (A.Date,A.FundPK,A.FundClientPK) RebateFeePercent,
A.FundPK,A.FundClientPK,dbo.fworkingday(A.Date,1) NAVDate, 
    Case when dbo.fworkingday(A.Date,1) < @DateFrom and dbo.CheckTodayIsHoliday(@DateFrom) = 1 
		then datediff(day,@DateFrom,dbo.fworkingday(@DateFrom,1)) + 1
	when dbo.fworkingday(A.Date,1) < @DateFrom 
		then datediff(day,@DateFrom,dbo.fworkingday(@DateFrom,1))  
	when dbo.fworkingday(A.Date,1) = dbo.fworkingday(@DateTo,-1) and dbo.CheckTodayIsHoliday(dateadd(day,-1,@DateTo)) = 1
		then datediff(day,dbo.fworkingday(A.Date,1),dateadd(day,-1,@DateTo))  + 1
	when dbo.fworkingday(A.Date,1) = dbo.fworkingday(@DateTo,-1) 
		then 1
		 
	else case when [dbo].CheckIsTommorowHoliday(dbo.fworkingday(A.Date,1)) = 1 
then dbo.CheckTotalSeriesHoliday(
	case when dbo.fworkingday(A.Date,1) < @DateFrom then @DateFrom 	
	else case when dbo.fworkingday(A.Date,1) < @DateTo then  dbo.fworkingday(A.Date,1) 
	else @DateTo end end
) else 1 end 
end SeriesDay
from
FundClientPosition A  
where	A.Date between @StartDate and @EndDate
--and A.FundClientPK in ( 1381,1383) 
and A.FundPK = 28


create table #tempMFee
(
	Date datetime,
	AUM decimal (22,8),
	UnitAmount decimal(22,8),
	NAV decimal (22,8),
	MGTFee decimal (22,8),
	RebateFee decimal (22,8),
	FundClientPK int,
	FundPK int
)

insert into #tempMFee
	Select A.NAVDate,isnull(A.UnitAmount,0) * isnull(B.NAV,0),A.UnitAmount,B.NAV
	,A.UnitAmount * B.NAV * A.ManagementFeePercent /365 /100 * SeriesDay
	,A.UnitAmount * B.NAV * A.ManagementFeePercent /365 /100 * SeriesDay * (A.RebateFeePercent/100)  
	,A.FundClientPK, A.FundPK
	from #FCP A
	left join CloseNAV B on A.NAVDate = B.Date and B.status = 2 and A.FundPK = B.FundPK
	order by A.date	


Select Case when A.FundTypeInternal = 1 and A.type = 1 then B.descone
	else case when A.FundTypeInternal = 1 and A.type <> 1 then 'Open Ended - ' + B.DescOne
		else case when A.FundTypeInternal = 2 then 'KPD - ' + B.DescOne end end end TypeFund
,sum(isnull(D.AUM,0)) RetailAUM
,sum(isnull(E.SubsAmount,0)) - sum(isnull(E.RedempAmount,0)) RetailNetTransaction
,sum(isnull(E.MGTFee,0)) RetailMIFee
,sum(isnull(E.RebateFee,0)) RetailRebate
,sum(isnull(E.MGTFee,0)) - sum(isnull(E.RebateFee,0)) RetailNetFee
,sum(isnull(I.AUM,0)) InsAUM
,sum(isnull(L.SubsAmount,0)) - sum(isnull(L.RedempAmount,0)) InsNetTransaction
,sum(isnull(L.MGTFee,0)) InsMIFee
,sum(isnull(L.RebateFee,0)) InsRebate
,sum(isnull(L.MGTFee,0)) - sum(isnull(L.RebateFee,0)) InsNetFee

from Fund A
left join MasterValue B on A.Type = B.Code and B.ID = 'Fundtype' and B.status = 2
left join MasterValue C on A.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status = 2
left join
(
	Select A.FundPK, Sum(isnull(A.UnitAmount,0) * isnull(D.NAV,0)) AUM from FundClientPosition A
	left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status in (1,2)
	left join(
		Select FundPK,NAV From CloseNAV where Date = (select max(Date) From CloseNAV where Date <= @DateTo)
	)D on A.FundPK = D.FundPK
	Where Date = (select max(Date) From FundClientPosition where Date < @DateTo)
	and C.ParentCategoryPK = 'RT' 
	Group By A.FundPK
)D on A.FundPK = D.FundPK
left join
(
	select A.FundPK
	,sum((isnull(MFee.MGTFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
	isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) else 0 end)) 
	/ case when MFee.date = dbo.FWorkingDay(@DateFrom,-1) then datediff(day,MFee.Date,A.Date) else 1 end * case when MFee.date = dbo.FWorkingDay(@DateFrom,-1) then
	datediff(day,@DateFrom,A.Date) + 1 else 1 end
	)
	 MGTFee 
	,sum(isnull(MFee.RebateFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
	isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 
	* datediff(day,A.Date,@DateTo) * ([dbo].[FgetRebateFeePercentByDate] (A.Date,A.FundPK,A.FundClientPK)/100) else 0 end) / case when MFee.date = dbo.FWorkingDay(@DateFrom,-1) then datediff(day,MFee.Date,A.Date) else 1 end * case when MFee.date = dbo.FWorkingDay(@DateFrom,-1) then
	datediff(day,@DateFrom,A.Date) + 1 else 1 end ) RebateFee 
,sum(isnull(CS.TotalUnitAmount,0)) SubsUnit
	,sum(isnull(CS.TotalCashAmount,0)) SubsAmount
	,sum(isnull(CR.TotalUnitAmount,0)) RedempUnit
	,sum(isnull(CR.TotalCashAmount,0)) RedempAmount

	from FundClientPosition A 
	left join 
	(
		Select FundClientPK,ValueDate,sum(isnull(TotalCashAmount,0)) TotalCashAmount,sum(isnull(TotalUnitAmount,0)) TotalUnitAmount,FundPK  
		from ClientSubscription where valueDate between @DateFrom and @DateTo 
		and Posted = 1 and Revised = 0 and status = 2
		group by fundPK,FundClientPK,ValueDate
	)
	
	CS on CS.FundPK = A.FundPK and CS.FundClientPK = A.FundClientPK and CS.ValueDate = A.Date 
	
	left join 
	(
		Select FundClientPK,ValueDate,sum(isnull(TotalCashAmount,0)) TotalCashAmount,sum(isnull(TotalUnitAmount,0)) TotalUnitAmount,FundPK  
		from ClientRedemption where valueDate between @DateFrom and @DateTo 
		and Posted = 1 and Revised = 0 and status = 2
		group by fundPK,FundClientPK,ValueDate
	)
	
	 CR on CR.FundPK = A.FundPK and CR.FundClientPK = A.FundClientPK and CR.ValueDate = A.Date 

	left join Fund C on A.FundPK = C.FundPK and C.status = 2
	left join Currency CRY on C.CurrencyPK = CRY.CurrencyPK and CRY.Status = 2
	left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
	left join #tempMFee MF on A.Date = MF.Date and A.FundPK = MF.FundPK and A.FundClientPK = MF.FundClientPK
	left join #tempMFee MFee on dbo.fworkingday(A.Date,-1) = MFee.Date and A.FundPK = MFee.FundPK and A.FundClientPK = MFee.FundClientPK
	left join InternalCategory E on D.InternalCategoryPK = E.InternalCategoryPK and E.status = 2
	where A.date between @DateFrom and @DateTo 
	and E.ParentCategoryPK = 'RT' 
	group by A.fundPK
)E on A.FundPK = E.FundPK 
left join
(
	Select A.FundPK, Sum(isnull(A.UnitAmount,0) * isnull(D.NAV,0)) AUM from FundClientPosition A
	left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status in (1,2)
	left join(
		Select FundPK,NAV From CloseNAV where Date = (select max(Date) From CloseNAV where Date <= @DateTo)
	)D on A.FundPK = D.FundPK
	Where Date = (select max(Date) From FundClientPosition where Date < @DateTo)
	and C.ParentCategoryPK = 'IN' 
	Group By A.FundPK
)I on A.FundPK = I.FundPK

left join
(
	select A.FundPK
	,sum((isnull(MFee.MGTFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
	isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) else 0 end))/ case when MFee.date = dbo.FWorkingDay(@DateFrom,-1) then datediff(day,MFee.Date,A.Date) else 1 end * case when MFee.date = dbo.FWorkingDay(@DateFrom,-1) then
	datediff(day,@DateFrom,A.Date) + 1 else 1 end
	)  MGTFee 
	,sum(isnull(MFee.RebateFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
	isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) * ([dbo].[FgetRebateFeePercentByDate] (A.Date,A.FundPK,A.FundClientPK)/100) else 0 end))  RebateFee
,sum(isnull(CS.TotalUnitAmount,0)) SubsUnit
	,sum(isnull(CS.TotalCashAmount,0)) SubsAmount
	,sum(isnull(CR.TotalUnitAmount,0)) RedempUnit
	,sum(isnull(CR.TotalCashAmount,0)) RedempAmount

	from FundClientPosition A 
	left join (
		Select FundClientPK,ValueDate,sum(isnull(TotalCashAmount,0)) TotalCashAmount,sum(isnull(TotalUnitAmount,0)) TotalUnitAmount,FundPK  
		from ClientSubscription where valueDate between @DateFrom and @DateTo 
		and Posted = 1 and Revised = 0 and status = 2
		group by fundPK,FundClientPK,ValueDate
	) CS on CS.FundPK = A.FundPK and CS.FundClientPK = A.FundClientPK and CS.ValueDate = A.Date 
	--and CS.Type in (1,2)
	left join (
	Select FundClientPK,ValueDate,sum(isnull(TotalCashAmount,0)) TotalCashAmount,sum(isnull(TotalUnitAmount,0)) TotalUnitAmount,FundPK  
		from ClientRedemption where valueDate between @DateFrom and @DateTo 
		and Posted = 1 and Revised = 0 and status = 2
		group by fundPK,FundClientPK,ValueDate
	) CR on CR.FundPK = A.FundPK and CR.FundClientPK = A.FundClientPK and CR.ValueDate = A.Date 
	--and CR.Type in (1,2)
	left join Fund C on A.FundPK = C.FundPK and C.status = 2
	left join Currency CRY on C.CurrencyPK = CRY.CurrencyPK and CRY.Status = 2
	left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
	left join #tempMFee MF on A.Date = MF.Date and A.FundPK = MF.FundPK and A.FundClientPK = MF.FundClientPK
	left join #tempMFee MFee on dbo.fworkingday(A.Date,-1) = MFee.Date and A.FundPK = MFee.FundPK and A.FundClientPK = MFee.FundClientPK
	left join InternalCategory E on D.InternalCategoryPK = E.InternalCategoryPK and E.status = 2
	where A.date between @DateFrom and @DateTo 
	and E.ParentCategoryPK = 'IN' 
	group by A.fundPK
)L on A.FundPK = L.FundPK 

where A.Status = 2 and A.FundTypeInternal in (1,2)
group by Case when A.FundTypeInternal = 1 and A.type = 1 then B.descone
	else case when A.FundTypeInternal = 1 and A.type <> 1 then 'Open Ended - ' + B.DescOne
		else case when A.FundTypeInternal = 2 then 'KPD - ' + B.DescOne end end end
	

                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AUMandRevenuePerformance" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AUMandRevenuePerformance" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AUM & Revenue Performance");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AUMandRevenuePerformance> rList = new List<AUMandRevenuePerformance>();
                                        while (dr0.Read())
                                        {
                                            AUMandRevenuePerformance rSingle = new AUMandRevenuePerformance();
                                            rSingle.TypeFund = Convert.ToString(dr0["TypeFund"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TypeFund"]));
                                            rSingle.RetailAUM = Convert.ToDecimal(dr0["RetailAUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RetailAUM"]));
                                            rSingle.RetailNetTransaction = Convert.ToDecimal(dr0["RetailNetTransaction"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RetailNetTransaction"]));
                                            rSingle.RetailMIFee = Convert.ToDecimal(dr0["RetailMIFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RetailMIFee"]));
                                            rSingle.RetailRebate = Convert.ToDecimal(dr0["RetailRebate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RetailRebate"]));
                                            rSingle.RetailNetFee = Convert.ToDecimal(dr0["RetailNetFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RetailNetFee"]));

                                            rSingle.InsAUM = Convert.ToDecimal(dr0["InsAUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InsAUM"]));
                                            rSingle.InsNetTransaction = Convert.ToDecimal(dr0["InsNetTransaction"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InsNetTransaction"]));
                                            rSingle.InsMIFee = Convert.ToDecimal(dr0["InsMIFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InsMIFee"]));
                                            rSingle.InsRebate = Convert.ToDecimal(dr0["InsRebate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InsRebate"]));
                                            rSingle.InsNetFee = Convert.ToDecimal(dr0["InsNetFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InsNetFee"]));


                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                        from r in rList
                                        group r by new { r.TypeFund } into rGroup
                                        select rGroup;

                                        int incRowExcel = 1; incRowExcel++;
                                        //incRowExcel++;
                                        worksheet.Cells[2, 1].Value = "Date From";
                                        worksheet.Cells[2, 2].Value = _commissionRpt.ValueDateFrom;
                                        worksheet.Cells[3, 1].Value = "Date To";
                                        worksheet.Cells[3, 2].Value = _commissionRpt.ValueDateTo;
                                        worksheet.Cells[16, 1].Value = "Date From";
                                        worksheet.Cells[16, 2].Value = _commissionRpt.ValueDateFrom;
                                        worksheet.Cells[17, 1].Value = "Date To";
                                        worksheet.Cells[17, 2].Value = _commissionRpt.ValueDateTo;
                                        worksheet.Cells[31, 1].Value = "Date From";
                                        worksheet.Cells[31, 2].Value = _commissionRpt.ValueDateFrom;
                                        worksheet.Cells[32, 1].Value = "Date To";
                                        worksheet.Cells[32, 2].Value = _commissionRpt.ValueDateTo;
                                        worksheet.Cells[35, 1].Value = "Reksadana Dengan Penjaminan";
                                        worksheet.Cells[36, 1].Value = "Open Ended - Reksadana Terproteksi";
                                        worksheet.Cells[37, 1].Value = "Open Ended - Reksadana Index";
                                        worksheet.Cells[38, 1].Value = "Open Ended - Reksadana Saham";
                                        worksheet.Cells[39, 1].Value = "Open Ended - Reksadana PendapatanTetap";
                                        worksheet.Cells[40, 1].Value = "Open Ended - Reksadana Pasar Uang";
                                        worksheet.Cells[41, 1].Value = "Open Ended - Reksadana Penyertaan Terbatas";
                                        worksheet.Cells[42, 1].Value = "Open Ended - Reksadana Campuran";
                                        incRowExcel = incRowExcel + 2;
                                        foreach (var rsHeader in QueryBySales)
                                        {


                                            //worksheet.Cells[5, 1].Value = "Date To";

                                            worksheet.Cells[5, 1, 5, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[5, 1, 5, 9].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            worksheet.Cells[19, 1, 19, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[19, 1, 19, 9].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            worksheet.Cells[34, 1, 34, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[34, 1, 34, 9].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            worksheet.Cells[5, 1].Value = "Type Fund";
                                            worksheet.Cells[5, 1].Style.Font.Bold = true;
                                            worksheet.Cells[5, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[5, 2].Value = "Retail AUM";
                                            worksheet.Cells[5, 2].Style.Font.Bold = true;
                                            worksheet.Cells[5, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[5, 3].Value = "Net Transaction";
                                            worksheet.Cells[5, 3].Style.Font.Bold = true;
                                            worksheet.Cells[5, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[5, 5].Value = "Retail MIFee (Gross)";
                                            worksheet.Cells[5, 5].Style.Font.Bold = true;
                                            worksheet.Cells[5, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[5, 6].Value = "Retail Rebate";
                                            worksheet.Cells[5, 6].Style.Font.Bold = true;
                                            worksheet.Cells[5, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[5, 7].Value = "Retail MIFee (Net)";
                                            worksheet.Cells[5, 7].Style.Font.Bold = true;
                                            worksheet.Cells[5, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[19, 1].Value = "Type Fund";
                                            worksheet.Cells[19, 1].Style.Font.Bold = true;
                                            worksheet.Cells[19, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[19, 2].Value = "Institution AUM";
                                            worksheet.Cells[19, 2].Style.Font.Bold = true;
                                            worksheet.Cells[19, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[19, 3].Value = "Net Transaction";
                                            worksheet.Cells[19, 3].Style.Font.Bold = true;
                                            worksheet.Cells[19, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[19, 5].Value = "Institution MIFee (Gross)";
                                            worksheet.Cells[19, 5].Style.Font.Bold = true;
                                            worksheet.Cells[19, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[19, 6].Value = "Institution Rebate";
                                            worksheet.Cells[19, 6].Style.Font.Bold = true;
                                            worksheet.Cells[19, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[19, 7].Value = "Institution MIFee (Net)";
                                            worksheet.Cells[19, 7].Style.Font.Bold = true;
                                            worksheet.Cells[19, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[34, 1].Value = "Type Fund";
                                            worksheet.Cells[34, 1].Style.Font.Bold = true;
                                            worksheet.Cells[34, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[34, 2].Value = "Total AUM";
                                            worksheet.Cells[34, 2].Style.Font.Bold = true;
                                            worksheet.Cells[34, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[34, 3].Value = "Net Transaction";
                                            worksheet.Cells[34, 3].Style.Font.Bold = true;
                                            worksheet.Cells[34, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[34, 5].Value = "Total MIFee (Gross)";
                                            worksheet.Cells[34, 5].Style.Font.Bold = true;
                                            worksheet.Cells[34, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[34, 6].Value = "Total Rebate";
                                            worksheet.Cells[34, 6].Style.Font.Bold = true;
                                            worksheet.Cells[34, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[34, 7].Value = "Total MIFee (Net)";
                                            worksheet.Cells[34, 7].Style.Font.Bold = true;
                                            worksheet.Cells[34, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            incRowExcel = incRowExcel + 2;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;


                                                if (rsDetail.TypeFund == "Reksadana Dengan Penjaminan")
                                                {
                                                    worksheet.Cells[6, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[6, 2].Value = rsDetail.RetailAUM;
                                                    worksheet.Cells[6, 3].Value = rsDetail.RetailNetTransaction;
                                                    worksheet.Cells[6, 5].Value = rsDetail.RetailMIFee;
                                                    worksheet.Cells[6, 6].Value = rsDetail.RetailRebate;
                                                    worksheet.Cells[6, 7].Value = rsDetail.RetailNetFee;
                                                    worksheet.Cells[6, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[6, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[6, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[6, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[6, 7].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[20, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[20, 2].Value = rsDetail.InsAUM;
                                                    worksheet.Cells[20, 3].Value = rsDetail.InsNetTransaction;

                                                    worksheet.Cells[20, 5].Value = rsDetail.InsMIFee;
                                                    worksheet.Cells[20, 6].Value = rsDetail.InsRebate;
                                                    worksheet.Cells[20, 7].Value = rsDetail.InsNetFee;

                                                    worksheet.Cells[20, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[20, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[20, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[20, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[20, 7].Style.Numberformat.Format = "#,##0";

                                                }
                                                if (rsDetail.TypeFund == "Open Ended - Reksadana Terproteksi")
                                                {
                                                    worksheet.Cells[7, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[7, 2].Value = rsDetail.RetailAUM;
                                                    worksheet.Cells[7, 3].Value = rsDetail.RetailNetTransaction;

                                                    worksheet.Cells[7, 5].Value = rsDetail.RetailMIFee;
                                                    worksheet.Cells[7, 6].Value = rsDetail.RetailRebate;
                                                    worksheet.Cells[7, 7].Value = rsDetail.RetailNetFee;

                                                    worksheet.Cells[7, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[7, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[7, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[7, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[7, 7].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[21, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[21, 2].Value = rsDetail.InsAUM;
                                                    worksheet.Cells[21, 3].Value = rsDetail.InsNetTransaction;

                                                    worksheet.Cells[21, 5].Value = rsDetail.InsMIFee;
                                                    worksheet.Cells[21, 6].Value = rsDetail.InsRebate;
                                                    worksheet.Cells[21, 7].Value = rsDetail.InsNetFee;

                                                    worksheet.Cells[21, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[21, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[21, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[21, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[21, 7].Style.Numberformat.Format = "#,##0";



                                                }
                                                if (rsDetail.TypeFund == "Open Ended - Reksadana Index")
                                                {
                                                    worksheet.Cells[8, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[8, 2].Value = rsDetail.RetailAUM;
                                                    worksheet.Cells[8, 3].Value = rsDetail.RetailNetTransaction;

                                                    worksheet.Cells[8, 5].Value = rsDetail.RetailMIFee;
                                                    worksheet.Cells[8, 6].Value = rsDetail.RetailRebate;
                                                    worksheet.Cells[8, 7].Value = rsDetail.RetailNetFee;

                                                    worksheet.Cells[8, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[8, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[8, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[8, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[8, 7].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[22, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[22, 2].Value = rsDetail.InsAUM;
                                                    worksheet.Cells[22, 3].Value = rsDetail.InsNetTransaction;

                                                    worksheet.Cells[22, 5].Value = rsDetail.InsMIFee;
                                                    worksheet.Cells[22, 6].Value = rsDetail.InsRebate;
                                                    worksheet.Cells[22, 7].Value = rsDetail.InsNetFee;

                                                    worksheet.Cells[22, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[22, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[22, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[22, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[22, 7].Style.Numberformat.Format = "#,##0";



                                                }
                                                if (rsDetail.TypeFund == "Open Ended - Reksadana Saham")
                                                {
                                                    worksheet.Cells[9, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[9, 2].Value = rsDetail.RetailAUM;
                                                    worksheet.Cells[9, 3].Value = rsDetail.RetailNetTransaction;

                                                    worksheet.Cells[9, 5].Value = rsDetail.RetailMIFee;
                                                    worksheet.Cells[9, 6].Value = rsDetail.RetailRebate;
                                                    worksheet.Cells[9, 7].Value = rsDetail.RetailNetFee;

                                                    worksheet.Cells[9, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[9, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[9, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[9, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[9, 7].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[23, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[23, 2].Value = rsDetail.InsAUM;
                                                    worksheet.Cells[23, 3].Value = rsDetail.InsNetTransaction;

                                                    worksheet.Cells[23, 5].Value = rsDetail.InsMIFee;
                                                    worksheet.Cells[23, 6].Value = rsDetail.InsRebate;
                                                    worksheet.Cells[23, 7].Value = rsDetail.InsNetFee;

                                                    worksheet.Cells[23, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[23, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[23, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[23, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[23, 7].Style.Numberformat.Format = "#,##0";


                                                }
                                                if (rsDetail.TypeFund == "Open Ended - Reksadana Pendapatan Tetap")
                                                {
                                                    worksheet.Cells[10, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[10, 2].Value = rsDetail.RetailAUM;
                                                    worksheet.Cells[10, 3].Value = rsDetail.RetailNetTransaction;

                                                    worksheet.Cells[10, 5].Value = rsDetail.RetailMIFee;
                                                    worksheet.Cells[10, 6].Value = rsDetail.RetailRebate;
                                                    worksheet.Cells[10, 7].Value = rsDetail.RetailNetFee;

                                                    worksheet.Cells[10, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[10, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[10, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[10, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[10, 7].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[24, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[24, 2].Value = rsDetail.InsAUM;
                                                    worksheet.Cells[24, 3].Value = rsDetail.InsNetTransaction;

                                                    worksheet.Cells[24, 5].Value = rsDetail.InsMIFee;
                                                    worksheet.Cells[24, 6].Value = rsDetail.InsRebate;
                                                    worksheet.Cells[24, 7].Value = rsDetail.InsNetFee;

                                                    worksheet.Cells[24, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[24, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[24, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[24, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[24, 7].Style.Numberformat.Format = "#,##0";


                                                }
                                                if (rsDetail.TypeFund == "Open Ended - Reksadana Pasar Uang")
                                                {
                                                    worksheet.Cells[11, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[11, 2].Value = rsDetail.RetailAUM;
                                                    worksheet.Cells[11, 3].Value = rsDetail.RetailNetTransaction;

                                                    worksheet.Cells[11, 5].Value = rsDetail.RetailMIFee;
                                                    worksheet.Cells[11, 6].Value = rsDetail.RetailRebate;
                                                    worksheet.Cells[11, 7].Value = rsDetail.RetailNetFee;

                                                    worksheet.Cells[11, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[11, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[11, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[11, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[11, 7].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[25, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[25, 2].Value = rsDetail.InsAUM;
                                                    worksheet.Cells[25, 3].Value = rsDetail.InsNetTransaction;

                                                    worksheet.Cells[25, 5].Value = rsDetail.InsMIFee;
                                                    worksheet.Cells[25, 6].Value = rsDetail.InsRebate;
                                                    worksheet.Cells[25, 7].Value = rsDetail.InsNetFee;

                                                    worksheet.Cells[25, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[25, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[25, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[25, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[25, 7].Style.Numberformat.Format = "#,##0";


                                                }

                                                if (rsDetail.TypeFund == "Open Ended - Reksadana PenyertaanTerbatas")
                                                {
                                                    worksheet.Cells[12, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[12, 2].Value = rsDetail.RetailAUM;
                                                    worksheet.Cells[12, 3].Value = rsDetail.RetailNetTransaction;

                                                    worksheet.Cells[12, 5].Value = rsDetail.RetailMIFee;
                                                    worksheet.Cells[12, 6].Value = rsDetail.RetailRebate;
                                                    worksheet.Cells[12, 7].Value = rsDetail.RetailNetFee;

                                                    worksheet.Cells[12, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[12, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[12, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[12, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[12, 7].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[26, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[26, 2].Value = rsDetail.InsAUM;
                                                    worksheet.Cells[26, 3].Value = rsDetail.InsNetTransaction;

                                                    worksheet.Cells[26, 5].Value = rsDetail.InsMIFee;
                                                    worksheet.Cells[26, 6].Value = rsDetail.InsRebate;
                                                    worksheet.Cells[26, 7].Value = rsDetail.InsNetFee;

                                                    worksheet.Cells[26, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[26, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[26, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[26, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[26, 7].Style.Numberformat.Format = "#,##0";


                                                }
                                                if (rsDetail.TypeFund == "Open Ended - Reksadana Campuran")
                                                {
                                                    worksheet.Cells[13, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[13, 2].Value = rsDetail.RetailAUM;
                                                    worksheet.Cells[13, 3].Value = rsDetail.RetailNetTransaction;

                                                    worksheet.Cells[13, 5].Value = rsDetail.RetailMIFee;
                                                    worksheet.Cells[13, 6].Value = rsDetail.RetailRebate;
                                                    worksheet.Cells[13, 7].Value = rsDetail.RetailNetFee;

                                                    worksheet.Cells[13, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[13, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[13, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[13, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[13, 7].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[27, 1].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[27, 2].Value = rsDetail.InsAUM;
                                                    worksheet.Cells[27, 3].Value = rsDetail.InsNetTransaction;

                                                    worksheet.Cells[27, 5].Value = rsDetail.InsMIFee;
                                                    worksheet.Cells[27, 6].Value = rsDetail.InsRebate;
                                                    worksheet.Cells[27, 7].Value = rsDetail.InsNetFee;

                                                    worksheet.Cells[27, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[27, 3].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[27, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[27, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[27, 7].Style.Numberformat.Format = "#,##0";


                                                }

                                                worksheet.Cells[14, 1, 14, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[14, 1, 14, 9].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                worksheet.Cells[28, 1, 28, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[28, 1, 28, 9].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                worksheet.Cells[43, 1, 43, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[43, 1, 43, 9].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                incRowExcel++;
                                                worksheet.Cells[14, 1].Value = "TOTAL";
                                                worksheet.Cells[14, 1].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[14, 1].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                                worksheet.Cells[28, 1].Value = "TOTAL";
                                                worksheet.Cells[28, 1].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[28, 1].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                                worksheet.Cells[43, 1].Value = "TOTAL";
                                                worksheet.Cells[43, 1].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[43, 1].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                            }

                                            worksheet.Cells[14, 2].Formula = "SUM(B6:B13)";
                                            worksheet.Cells[14, 3].Formula = "SUM(C6:C13)";

                                            worksheet.Cells[14, 5].Formula = "SUM(E6:E13)";
                                            worksheet.Cells[14, 6].Formula = "SUM(F6:F13)";
                                            worksheet.Cells[14, 7].Formula = "SUM(G6:G13)";


                                            worksheet.Cells[28, 2].Formula = "SUM(B20:B27)";
                                            worksheet.Cells[28, 3].Formula = "SUM(C20:C27)";

                                            worksheet.Cells[28, 5].Formula = "SUM(E20:E27)";
                                            worksheet.Cells[28, 6].Formula = "SUM(F20:F27)";
                                            worksheet.Cells[28, 7].Formula = "SUM(G20:G27)";


                                            worksheet.Cells[35, 2].Formula = "SUM(B6+B20)";
                                            worksheet.Cells[35, 3].Formula = "SUM(C6+C20)";

                                            worksheet.Cells[35, 5].Formula = "SUM(E6+E20)";
                                            worksheet.Cells[35, 6].Formula = "SUM(F6+F20)";
                                            worksheet.Cells[35, 7].Formula = "SUM(G6+G20)";


                                            worksheet.Cells[36, 2].Formula = "SUM(B7+B21)";
                                            worksheet.Cells[36, 3].Formula = "SUM(C7+C21)";

                                            worksheet.Cells[36, 5].Formula = "SUM(E7+E21)";
                                            worksheet.Cells[36, 6].Formula = "SUM(F7+F21)";
                                            worksheet.Cells[36, 7].Formula = "SUM(G7+G21)";


                                            worksheet.Cells[37, 2].Formula = "SUM(B8+B22)";
                                            worksheet.Cells[37, 3].Formula = "SUM(C8+C22)";

                                            worksheet.Cells[37, 5].Formula = "SUM(E8+E22)";
                                            worksheet.Cells[37, 6].Formula = "SUM(F8+F22)";
                                            worksheet.Cells[37, 7].Formula = "SUM(G8+G22)";


                                            worksheet.Cells[38, 2].Formula = "SUM(B9+B23)";
                                            worksheet.Cells[38, 3].Formula = "SUM(C9+C23)";

                                            worksheet.Cells[38, 5].Formula = "SUM(E9+E23)";
                                            worksheet.Cells[38, 6].Formula = "SUM(F9+F23)";
                                            worksheet.Cells[38, 7].Formula = "SUM(G9+G23)";


                                            worksheet.Cells[39, 2].Formula = "SUM(B10+B24)";
                                            worksheet.Cells[39, 3].Formula = "SUM(C10+C24)";

                                            worksheet.Cells[39, 5].Formula = "SUM(E10+E24)";
                                            worksheet.Cells[39, 6].Formula = "SUM(F10+F24)";
                                            worksheet.Cells[39, 7].Formula = "SUM(G10+G24)";


                                            worksheet.Cells[40, 2].Formula = "SUM(B11+B25)";
                                            worksheet.Cells[40, 3].Formula = "SUM(C11+C25)";

                                            worksheet.Cells[40, 5].Formula = "SUM(E11+E25)";
                                            worksheet.Cells[40, 6].Formula = "SUM(F11+F25)";
                                            worksheet.Cells[40, 7].Formula = "SUM(G11+G25)";


                                            worksheet.Cells[41, 2].Formula = "SUM(B12+B26)";
                                            worksheet.Cells[41, 3].Formula = "SUM(C12+C26)";

                                            worksheet.Cells[41, 5].Formula = "SUM(E12+E26)";
                                            worksheet.Cells[41, 6].Formula = "SUM(F12+F26)";
                                            worksheet.Cells[41, 7].Formula = "SUM(G12+G26)";


                                            worksheet.Cells[42, 2].Formula = "SUM(B13+B27)";
                                            worksheet.Cells[42, 3].Formula = "SUM(C13+C27)";

                                            worksheet.Cells[42, 5].Formula = "SUM(E13+E27)";
                                            worksheet.Cells[42, 6].Formula = "SUM(F13+F27)";
                                            worksheet.Cells[42, 7].Formula = "SUM(G13+G27)";


                                            worksheet.Cells[43, 2].Formula = "SUM(B35:B42)";
                                            worksheet.Cells[43, 3].Formula = "SUM(C35:C42)";

                                            worksheet.Cells[43, 5].Formula = "SUM(E35:E42)";
                                            worksheet.Cells[43, 6].Formula = "SUM(F35:F42)";
                                            worksheet.Cells[43, 7].Formula = "SUM(G35:G42)";


                                            worksheet.Cells[14, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[14, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[14, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[14, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[14, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[28, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[28, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[28, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[28, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[28, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[35, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[35, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[35, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[35, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[35, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[36, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[36, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[36, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[36, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[36, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[37, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[37, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[37, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[37, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[37, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[38, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[38, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[38, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[38, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[38, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[39, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[39, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[39, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[39, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[39, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[40, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[40, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[40, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[40, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[40, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[41, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[41, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[41, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[41, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[41, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[42, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[42, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[42, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[42, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[42, 7].Style.Numberformat.Format = "#,##0";


                                            worksheet.Cells[43, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[43, 3].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[43, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[43, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[43, 7].Style.Numberformat.Format = "#,##0";



                                            //++;
                                            //incRowExcel = incRowExcel + 3;


                                        }
                                        int _startRowDetail = 19;
                                        int _endRowDetail = 28;

                                        worksheet.Cells["A" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        int _startRowDetail1 = 5;
                                        int _endRowDetail1 = 14;

                                        worksheet.Cells["A" + _startRowDetail1 + ":I" + _endRowDetail1].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail1 + ":I" + _endRowDetail1].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail1 + ":I" + _endRowDetail1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail1 + ":I" + _endRowDetail1].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        int _startRowDetail2 = 34;
                                        int _endRowDetail2 = 43;

                                        worksheet.Cells["A" + _startRowDetail2 + ":I" + _endRowDetail2].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail2 + ":I" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail2 + ":I" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail2 + ":I" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        //worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 55;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 0;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 0;
                                        worksheet.Column(9).Width = 0;
                                        worksheet.Column(10).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PERFORMANCE";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Revenue Fund Type
            else if (_commissionRpt.ReportName.Equals("Revenue Fund Type"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText =
                                @" 
                                                     declare @StartOfYear datetime
                                set @StartOfYear = convert (date,DATEADD(YEAR,DATEDIFF(YEAR,0,@DateFrom),0))
                                Declare @FundPK int
                                Declare @FundClientPK int

                                Declare @StartDate datetime
                                Declare @EndDate datetime

                                set @StartDate =  dbo.fworkingday(@StartOfYear,-2)
                                set @EndDate = dbo.fworkingday(@DateTo,-2)


                                --Create Table #AUMPerformanceByClass
                                --(
                                --	TypeFund Nvarchar(500),
                                --	TotalAUM numeric(22,4),
                                --	NetTransaction numeric(22,4),
                                --	NetTransactionYTD numeric(22,4),
                                --	MIFee numeric(22,4),
                                --	RebateFee numeric(22,4),
                                --	NetMIFee numeric(22,4),
                                --	MIFeeYTD numeric(22,4),
                                --	Category nvarchar(100)

	
                                --)



                                Create table #FCP
                                (
	                                Date datetime,
	                                UnitAmount Numeric(20,4),
	                                ManagementFeePercent Numeric(18,8),
	                                RebateFeePercent Numeric(18,8),
	                                FundPK int,
	                                FundClientPK int,
	                                NAVDate datetime,
	                                SeriesDay int
                                )
                                insert into #FCP
                                Select Date,UnitAmount,[dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) ManagementFeePercent,
                                [dbo].[FgetRebateFeePercentByDate] (A.Date,A.FundPK,A.FundClientPK) RebateFeePercent,
                                A.FundPK,A.FundClientPK,dbo.fworkingday(A.Date,1) NAVDate, 
                                 Case when dbo.fworkingday(A.Date,1) < @DateFrom and dbo.CheckTodayIsHoliday(@DateFrom) = 1 
		                                then datediff(day,@Datefrom,dbo.fworkingday(@DateFrom,1)) + 1
	                                when dbo.fworkingday(A.Date,1) < @DateFrom 
		                                then datediff(day,@Datefrom,dbo.fworkingday(@DateFrom,1))  
	                                when dbo.fworkingday(A.Date,1) = dbo.fworkingday(@DateTo,-1) and dbo.CheckTodayIsHoliday(dateadd(day,-1,@DateTo)) = 1
		                                then datediff(day,dbo.fworkingday(A.Date,1),dateadd(day,-1,@DateTo))  + 1
	                                when dbo.fworkingday(A.Date,1) = dbo.fworkingday(@DateTo,-1) 
		                                then 1
		 
	                                else case when [dbo].CheckIsTommorowHoliday(dbo.fworkingday(A.Date,1)) = 1 
                                then dbo.CheckTotalSeriesHoliday(
	                                case when dbo.fworkingday(A.Date,1) < @DateFrom then @DateFrom 	
	                                else case when dbo.fworkingday(A.Date,1) < @DateTo then  dbo.fworkingday(A.Date,1) 
	                                else @DateTo end end
                                ) else 1 end 
                                end SeriesDay
                                from
                                FundClientPosition A  
                                where	A.Date between @StartDate and @EndDate
                                --and A.FundClientPK = 736 
                                --and A.FundPK = 2


                                create table #tempMFee
                                (
	                                Date datetime,
	                                AUM decimal (22,8),
	                                UnitAmount decimal(22,8),
	                                NAV decimal (22,8),
	                                MGTFee decimal (22,8),
	                                RebateFee decimal (22,8),
	                                FundClientPK int,
	                                FundPK int
                                )

                                insert into #tempMFee
	                                Select A.NAVDate,isnull(A.UnitAmount,0) * isnull(B.NAV,0),A.UnitAmount,B.NAV
	                                ,A.UnitAmount * B.NAV * A.ManagementFeePercent /365 /100 * SeriesDay
	                                ,A.UnitAmount * B.NAV * A.ManagementFeePercent /365 /100 * SeriesDay * (A.RebateFeePercent/100)  
	                                ,A.FundClientPK, A.FundPK
	                                from #FCP A
	                                left join CloseNAV B on A.NAVDate = B.Date and B.status = 2 and A.FundPK = B.FundPK
	                                order by A.date	

	                                --Select * from #tempMFee where FundClientPK = 1061
	                                --order by date

                                -- untuk tes di sql



                                Select Case when A.FundTypeInternal = 1 and A.type = 1 then B.descone
	                                else case when A.FundTypeInternal = 1 and A.type <> 1 then 'Open Ended - ' + B.DescOne
		                                else case when A.FundTypeInternal = 2 then 'KPD - ' + B.DescOne end end end TypeFund
                                ,sum(isnull(D.AUM,0)) RetailAUM
                                ,sum(isnull(E.SubsAmount,0) - isnull(E.RedempAmount,0)) RetailNetTransaction
                                ,sum(isnull(F.TotalSubsYTD,0)) - sum(isnull(G.TotalRedempYTD,0)) RetailNetTransactionYTD
                                ,sum(isnull(E.MGTFee,0)) RetailMIFee
                                ,sum(isnull(E.RebateFee,0)) RetailRebate
                                ,sum(isnull(E.MGTFee,0)) - sum(isnull(E.RebateFee,0)) RetailNetFee
                                ,sum(isnull(H.MGTFeeYTD,0)) RetailMgtFeeTYD
                                ,sum(isnull(H.MGTFeeYTD,0)) - sum(isnull(H.RebateFeeYTD,0)) RetailNetFeeTYD


                                ,sum(isnull(I.AUM,0)) InsAUM
                                ,sum(isnull(L.SubsAmount,0) - isnull(L.RedempAmount,0)) InsNetTransaction
                                ,sum(isnull(J.TotalSubsYTD,0)) - sum(isnull(K.TotalRedempYTD,0)) InsNetTransactionYTD
                                ,sum(isnull(L.MGTFee,0)) InsMIFee
                                ,sum(isnull(L.RebateFee,0)) InsRebate
                                ,sum(isnull(L.MGTFee,0)) - sum(isnull(L.RebateFee,0)) InsNetFee
                                ,sum(isnull(M.MGTFeeYTD,0)) InsMgtFeeTYD
                                ,sum(isnull(M.MGTFeeYTD,0)) - sum(isnull(M.RebateFeeYTD,0)) InsNetFeeTYD
                                from Fund A
                                left join MasterValue B on A.Type = B.Code and B.ID = 'Fundtype' and B.status = 2
                                left join MasterValue C on A.FundTypeInternal = C.Code and C.ID = 'FundTypeInternal' and C.status = 2
                                left join
                                (
	                                Select A.FundPK,sum(isnull(UnitAmount,0)) * D.NAV AUM   from FundClientPosition A
	                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
	                                left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status = 2
	                                left join (
		                                Select FundPK, Nav from CloseNAV where Date = ( Select max(date) From FundClientPosition where Date <= @DateTo ) and status = 2
	                                )D on A.FundPK = D.FundPK 
	                                where A.Date = 
	                                ( Select max(date) From FundClientPosition where Date <= @DateTo )
	                                and C.ParentCategoryPK = 'RT' 
	                                group by A.FundPK,D.Nav
                                )D on A.FundPK = D.FundPK
                                left join
                                (
	                                select A.FundPK
	                                ,sum(isnull(MFee.MGTFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
	                                isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) else 0 end))  MGTFee 
	                                ,sum(isnull(MFee.RebateFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
	                                isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) * ([dbo].[FgetRebateFeePercentByDate] (A.Date,A.FundPK,A.FundClientPK)/100) else 0 end))  RebateFee 
	                                ,sum(isnull(CS.TotalUnitAmount,0)) SubsUnit
	                                ,sum(isnull(CS.TotalCashAmount,0)) SubsAmount
	                                ,sum(isnull(CR.TotalUnitAmount,0)) RedempUnit
	                                ,sum(isnull(CR.TotalCashAmount,0)) RedempAmount

	                                from FundClientPosition A 
	                                left join ClientSubscription CS on CS.FundPK = A.FundPK and CS.FundClientPK = A.FundClientPK and CS.ValueDate = A.Date and CS.status = 2 and CS.posted = 1 and CS.Revised = 0 
	                                --and CS.Type in (1,2)
	                                left join ClientRedemption CR on CR.FundPK = A.FundPK and CR.FundClientPK = A.FundClientPK and CR.ValueDate = A.Date and CR.status = 2 and CR.posted = 1 and CR.Revised = 0 
	                                --and CR.Type in (1,2)
	                                left join Fund C on A.FundPK = C.FundPK and C.status = 2
	                                left join Currency CRY on C.CurrencyPK = CRY.CurrencyPK and CRY.Status = 2
	                                left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
	                                left join #tempMFee MF on A.Date = MF.Date and A.FundPK = MF.FundPK and A.FundClientPK = MF.FundClientPK
	                                left join #tempMFee MFee on dbo.fworkingday(A.Date,-1) = MFee.Date and A.FundPK = MFee.FundPK and A.FundClientPK = MFee.FundClientPK
	                                left join InternalCategory E on D.InternalCategoryPK = E.InternalCategoryPK and E.status = 2
	                                where A.date between @DateFrom and @DateTo 
	                                and E.ParentCategoryPK = 'RT' 
	                                group by A.fundPK
                                )E on A.FundPK = E.FundPK 
                                left join 
                                (
	                                Select A.FundPK, sum(A.CashAmount) TotalSubsYTD from ClientSubscription A
	                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	                                left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status = 2
	                                where C.ParentCategoryPK = 'RT' and A.Posted = 1 and A.Status = 2 and A.Revised = 0
	                                and A.ValueDate <= @DateTo and Year(ValueDate) = Year(@DateTo)
	                                group by A.FundPK
                                )F on A.FundPK = F.FundPK
                                left join 
                                (
	                                Select A.FundPK, sum(A.CashAmount) TotalRedempYTD from ClientRedemption A
	                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	                                left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status = 2
	                                where C.ParentCategoryPK = 'RT' and A.Posted = 1 and A.Status = 2 and A.Revised = 0
	                                and A.ValueDate <= @DateTo and Year(ValueDate) = Year(@DateTo)
	                                group by A.FundPK
                                )G on A.FundPK = F.FundPK
                                left join
                                (


	                                select A.FundPK
	                                ,sum(isnull(MFee.MGTFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
				                                isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) else 0 end))  MGTFeeYTD 
	                                ,sum(isnull(MFee.RebateFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
			                                isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) * ([dbo].[FgetRebateFeePercentByDate] (A.Date,A.FundPK,A.FundClientPK)/100) else 0 end))  RebateFeeYTD 
	                                from FundClientPosition A 
	                                left join Fund C on A.FundPK = C.FundPK and C.status = 2
	                                left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
	                                left join #tempMFee MF on A.Date = MF.Date and A.FundPK = MF.FundPK and A.FundClientPK = MF.FundClientPK
	                                left join #tempMFee MFee on dbo.fworkingday(A.Date,-1) = MFee.Date and A.FundPK = MFee.FundPK and A.FundClientPK = MFee.FundClientPK
	                                left join InternalCategory E on D.InternalCategoryPK = E.InternalCategoryPK and E.status = 2
	                                where year(A.date) = Year(@DateTo) and A.Date <= @DateTo  
	                                and E.ParentCategoryPK = 'RT' 
	                                group by A.fundPK

                                )H on A.FundPK = H.FundPK


                                left join
                                (
	                                Select A.FundPK,sum(isnull(UnitAmount,0)) * D.NAV AUM   from FundClientPosition A
	                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
	                                left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status = 2
	                                left join (
		                                Select FundPK, Nav from CloseNAV where Date = ( Select max(date) From FundClientPosition where Date <= @DateTo ) and status = 2
	                                )D on A.FundPK = D.FundPK 
	                                where A.Date = 
	                                ( Select max(date) From FundClientPosition where Date <= @DateTo )
	                                and C.ParentCategoryPK = 'IN' 
	                                group by A.FundPK,D.Nav
                                )I on A.FundPK = I.FundPK

                                left join 
                                (
	                                Select A.FundPK, sum(A.CashAmount) TotalSubsYTD from ClientSubscription A
	                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	                                left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status = 2
	                                where C.ParentCategoryPK = 'IN' and A.Posted = 1 and A.Status = 2 and A.Revised = 0
	                                and A.ValueDate <= @DateTo and Year(ValueDate) = Year(@DateTo)
	                                group by A.FundPK
                                )J on A.FundPK = J.FundPK
                                left join 
                                (
	                                Select A.FundPK, sum(A.CashAmount) TotalRedempYTD from ClientRedemption A
	                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	                                left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status = 2
	                                where C.ParentCategoryPK = 'IN' and A.Posted = 1 and A.Status = 2 and A.Revised = 0
	                                and A.ValueDate <= @DateTo and Year(ValueDate) = Year(@DateTo)
	                                group by A.FundPK
                                )K on A.FundPK = K.FundPK

                                left join
                                (
	                                select A.FundPK
	                                ,sum(isnull(MFee.MGTFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
	                                isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) else 0 end))  MGTFee 
	                                ,sum(isnull(MFee.RebateFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
	                                isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) * ([dbo].[FgetRebateFeePercentByDate] (A.Date,A.FundPK,A.FundClientPK)/100) else 0 end))  RebateFee
	                                ,sum(isnull(CS.TotalUnitAmount,0)) SubsUnit
	                                ,sum(isnull(CS.TotalCashAmount,0)) SubsAmount
	                                ,sum(isnull(CR.TotalUnitAmount,0)) RedempUnit
	                                ,sum(isnull(CR.TotalCashAmount,0)) RedempAmount

	                                from FundClientPosition A 
	                                left join ClientSubscription CS on CS.FundPK = A.FundPK and CS.FundClientPK = A.FundClientPK and CS.ValueDate = A.Date and CS.status = 2 and CS.posted = 1 and CS.Revised = 0 
	                                --and CS.Type in (1,2)
	                                left join ClientRedemption CR on CR.FundPK = A.FundPK and CR.FundClientPK = A.FundClientPK and CR.ValueDate = A.Date and CR.status = 2 and CR.posted = 1 and CR.Revised = 0 
	                                --and CR.Type in (1,2)
	                                left join Fund C on A.FundPK = C.FundPK and C.status = 2
	                                left join Currency CRY on C.CurrencyPK = CRY.CurrencyPK and CRY.Status = 2
	                                left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
	                                left join #tempMFee MF on A.Date = MF.Date and A.FundPK = MF.FundPK and A.FundClientPK = MF.FundClientPK
	                                left join #tempMFee MFee on dbo.fworkingday(A.Date,-1) = MFee.Date and A.FundPK = MFee.FundPK and A.FundClientPK = MFee.FundClientPK
	                                left join InternalCategory E on D.InternalCategoryPK = E.InternalCategoryPK and E.status = 2
	                                where A.date between @DateFrom and @DateTo 
	                                and E.ParentCategoryPK = 'IN' 
	                                group by A.fundPK
                                )L on A.FundPK = L.FundPK 
                                left join
                                (


	                                select A.FundPK
	                                ,sum(isnull(MFee.MGTFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
			                                isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) else 0 end))  MGTFeeYTD 
	                                ,sum(isnull(MFee.RebateFee,0) + (case when dbo.CheckTodayIsHoliday(@DateTo) = 1 and A.Date = dbo.fworkingday(@DateTo,-1) then  
			                                isnull(MF.AUM,dbo.FgetLastAUM(A.Date,A.fundPK)) * [dbo].[FgetManagementFeePercentByDate] (A.Date,A.FundPK) / 100 / 365 * datediff(day,A.Date,@DateTo) * ([dbo].[FgetRebateFeePercentByDate] (A.Date,A.FundPK,A.FundClientPK)/100) else 0 end))  RebateFeeYTD 
	                                from FundClientPosition A 
	                                left join Fund C on A.FundPK = C.FundPK and C.status = 2
	                                left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
	                                left join #tempMFee MF on A.Date = MF.Date and A.FundPK = MF.FundPK and A.FundClientPK = MF.FundClientPK
	                                left join #tempMFee MFee on dbo.fworkingday(A.Date,-1) = MFee.Date and A.FundPK = MFee.FundPK and A.FundClientPK = MFee.FundClientPK
	                                left join InternalCategory E on D.InternalCategoryPK = E.InternalCategoryPK and E.status = 2
	                                where year(A.date) = Year(@DateTo) and A.Date <= @DateTo  
	                                and E.ParentCategoryPK = 'IN' 
	                                group by A.fundPK

                                )M on A.FundPK = M.FundPK

                                where A.Status = 2 and A.FundTypeInternal in (1,2)
                                group by Case when A.FundTypeInternal = 1 and A.type = 1 then B.descone
	                                else case when A.FundTypeInternal = 1 and A.type <> 1 then 'Open Ended - ' + B.DescOne
		                                else case when A.FundTypeInternal = 2 then 'KPD - ' + B.DescOne end end end

                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RevenueFundType" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RevenueFundType" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Revenue Fund Type");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RevenueFundType> rList = new List<RevenueFundType>();
                                        while (dr0.Read())
                                        {
                                            RevenueFundType rSingle = new RevenueFundType();
                                            rSingle.TypeFund = Convert.ToString(dr0["TypeFund"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TypeFund"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["InsAUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InsAUM"]));
                                            rSingle.NetTransactionMTD = Convert.ToDecimal(dr0["RetailNetTransaction"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RetailNetTransaction"]));
                                            rSingle.NetTransactionYTD = Convert.ToDecimal(dr0["RetailNetTransactionYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RetailNetTransactionYTD"]));
                                            rSingle.Revenue = Convert.ToDecimal(dr0["InsNetTransactionYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InsNetTransactionYTD"]));
                                            rSingle.RevenueYTD = Convert.ToDecimal(dr0["RetailNetFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RetailNetFee"]));


                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                        from r in rList
                                        group r by new { } into rGroup
                                        select rGroup;


                                        int incRowExcel = 1; incRowExcel++;
                                        incRowExcel++;
                                        worksheet.Cells[1, 1].Value = "Revenue Per Sales (Individual)";
                                        worksheet.Cells[1, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[4, 1].Value = "Name";
                                        worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[4, 2].Value = "Prima Handayani";
                                        worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                        worksheet.Cells[2, 3].Value = "Reporting Date";
                                        worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                        worksheet.Cells[2, 4].Value = "from";
                                        worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[3, 4].Value = "to";
                                        worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        worksheet.Cells[2, 7].Value = _commissionRpt.ValueDateFrom;
                                        worksheet.Cells[2, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[2, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[2, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[3, 7].Value = _commissionRpt.ValueDateTo;
                                        worksheet.Cells[3, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[3, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[3, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        incRowExcel = incRowExcel + 0;


                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "Type Fund";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "Net Transaction MTD";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Net Transaction YTD";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "Revenue";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Revenue YTD";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            int first = incRowExcel;
                                            int no = 1;


                                            incRowExcel = incRowExcel + 1;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;


                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.TypeFund;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUM;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.NetTransactionMTD;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.NetTransactionYTD;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Revenue;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.RevenueYTD;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    incRowExcel++;
                                                    no++;
                                                }

                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + first.ToString() + ":C" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Value = "SUM";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(F" + first.ToString() + ":F" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                        }


                                        int _startRowDetail = 5;
                                        int _endRowDetail = 11;


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        //worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PERFORMANCE";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Client Statement Report
            else if (_commissionRpt.ReportName.Equals("Client Statement Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            //_paramFund = "FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            string _paramFundClient = "";
                            //_paramFundClient = "FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = " and FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " and FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @" 
                                    Declare @FundPK int
                                    Declare @FundClientPK int
                     
                                    select @fundpk  = FundPK from Fund where status = 2 " + _paramFund + @"
                                    select @FundClientPK  = FundClientPK from FundClient where status = 2 " + _paramFundClient + @"

                                
                                    create table #tmpMonth
                                    (
                                    varMonth nvarchar(100),
                                    intMonth int,
                                    endValueDate datetime,
                                    intYear int,
                                    )

                                    insert into #tmpMonth
                                    select *
                                    from (
                                    Select distinct substring(datename(month,date),1,3) as varMonth, month(date) as intMonth, EOMONTH(date) as endValueDate, year(date) as intYear from CloseNAV
                                    where Date between @Datefrom and @Dateto
                                    and status = 2
                                    --order by year(date), intMonth asc
                                    ) dt
                                    order by intYear, endValueDate

                                    --select *
                                    --from #tmpMonth

                                    if object_id('tempdb..#Result', 'u') is not null drop table #Result                                                 	                         
                                    Create table #Result
                                    (
                                    varMonth nvarchar(100),
                                    intMonth int,
                                    SubsValueDate datetime,
                                    SubsUnits decimal(22,4),
                                    SubsNAV decimal(22,4),
                                    SubsAmount decimal(22,4),
                                    RedValueDate datetime,
                                    RedUnits decimal(22,4),
                                    RedNAV decimal(22,4),
                                    RedAmount decimal(22,4),
                                    PosUnits decimal(22,4),
                                    PosNav decimal(22,4),
                                    PosAmount decimal(22,4)
                                    )

                                    if object_id('tempdb..#ResultFinal', 'u') is not null drop table #ResultFinal                                                                              
                                    Create table #ResultFinal
                                    (
                                    varMonth nvarchar(100),
                                    intMonth int,
                                    SubsValueDate datetime,
                                    SubsUnits decimal(22,4),
                                    SubsNAV decimal(22,4),
                                    SubsAmount decimal(22,4),
                                    RedValueDate datetime,
                                    RedUnits decimal(22,4),
                                    RedNAV decimal(22,4),
                                    RedAmount decimal(22,4),
                                    PosUnits decimal(22,4),
                                    PosNav decimal(22,4),
                                    PosAmount decimal(22,4),
                                    TrxDate datetime
                                    )

                                    if object_id('tempdb..#ClientStatementReport', 'u') is not null drop table #ClientStatementReport                                
                                    Create table #ClientStatementReport
                                    (
                                    FundID nvarchar(100),
                                    ClientName nvarchar(500),
                                    varMonth nvarchar(100),
                                    intMonth int,
                                    SubsValueDate nvarchar(100),
                                    SubsUnits decimal(22,4),
                                    SubsNAV decimal(22,4),
                                    SubsAmount decimal(22,4),
                                    RedValueDate datetime,
                                    RedUnits decimal(22,4),
                                    RedNAV decimal(22,4),
                                    RedAmount decimal(22,4),
                                    PosUnits decimal(22,4),
                                    PosNav decimal(22,4),
                                    PosAmount decimal(22,4),
                                    TrxDate nvarchar(100),
                                    MonthlyReturn decimal(22,4),
                                    BenchMark decimal(22,4),
                                    BenchmarkPercent decimal(22,4)
                                    )

                                    insert into #Result(varMonth,intMonth,SubsValueDate,SubsUnits, SubsNAV,SubsAmount,RedValueDate,RedUnits,RedNAV,RedAmount,PosUnits,PosNav,PosAmount)
                                    Select substring(B.varMonth,1,3),month(A.ValueDate), A.ValueDate, A.TotalUnitAmount,A.NAV, A.TotalCashAmount,'',0,0,0,0,0,0  from ClientSubscription A
                                    inner join #tmpMonth B on Month(A.ValueDate) = intMonth and year(A.ValueDate) = intYear
                                    left join Fund F on A.FundPK = F.FundPK and F.status  = 2
                                    left join FundClient FC on A.FundClientPK  = FC.FundClientPK and FC.status  = 2
                                    where F.FundPK  = @FundPK
                                    and FC.FundClientPK  = @FundClientPK
                                    and A.Status = 2 and Posted = 1
                                    and ValueDate between @Datefrom and @Dateto



                                    insert into #Result(varMonth,intMonth,SubsValueDate,SubsUnits, SubsNAV,SubsAmount,RedValueDate,RedUnits,RedNAV,RedAmount,PosUnits,PosNav,PosAmount)
                                    Select substring(B.varMonth,1,3),month(A.ValueDate),0,0,0,0, A.ValueDate, A.TotalUnitAmount,A.NAV, A.TotalCashAmount,0,0,0  from ClientRedemption A
                                    inner join #tmpMonth B on Month(A.ValueDate) = intMonth and year(A.ValueDate) = intYear
                                    left join Fund F on A.FundPK = F.FundPK and F.status  = 2
                                    left join FundClient FC on A.FundClientPK  = FC.FundClientPK and FC.status  = 2
                                    where F.FundPK  = @FundPK
                                    and FC.FundClientPK  = @FundClientPK
                                    and A.Status = 2 and Posted = 1
                                    and ValueDate between @Datefrom and @Dateto



                                    insert into #ResultFinal(varMonth,intMonth,SubsValueDate,SubsUnits, SubsNAV,SubsAmount,RedValueDate,RedUnits,RedNAV,RedAmount,PosUnits,PosNav,PosAmount,TrxDate)
                                    select varMonth,intMonth,SubsValueDate,sum(SubsUnits) SubsUnits,Avg(SubsNAV) SubsNAV,sum(SubsAmount) SubsAmount ,
                                    RedValueDate,
                                    sum(RedUnits) RedUnits, avg(RedNAV) RedNAV, sum(RedAmount) RedAmount,0,0,0,Case when isnull(SubsValueDate,'') = '' then redValueDate else SubsValueDate end
                                    from #Result
                                    group by varMonth,intMonth,SubsValueDate,RedValueDate
                                    order by intMonth asc


                                    update #ResultFinal set SubsValueDate = null where SubsValueDate = '01/01/1900'
                                    update #ResultFinal set RedValueDate = null where RedValueDate = '01/01/1900'


                                    insert into #ResultFinal(varMonth,intMonth,SubsValueDate,SubsUnits, SubsNAV,SubsAmount,RedValueDate,
                                    RedUnits,RedNAV,RedAmount,PosUnits,PosNav,PosAmount,trxDate)
                                    select varMonth,intMonth,endValueDate,0,0,0,Null,0,0,0,[dbo].[FgetLastUnitAmount] (endValueDate,@FundPK,@FundClientPK),
                                    [dbo].[FgetLastCloseNav] (endValueDate,@FundPK),[dbo].[FgetLastCloseNav] (endValueDate,@FundPK) * [dbo].[FgetLastUnitAmount] (endValueDate,@FundPK,@FundClientPK),
                                    EndValueDate 
                                    from #tmpMonth A
                                    where CONVERT(VARCHAR(10),endValueDate,10)
                                    not in
                                    (
                                    Select CONVERT(VARCHAR(10),SubsValueDate,10) from #ResultFinal
                                    where SubsValueDate is not null
                                    UNION ALL
                                    Select CONVERT(VARCHAR(10),RedValueDate,10) from #ResultFinal
                                    where RedValueDate is not null
                                    )
	
	
                                    Update A Set A.PosUnits = isnull(B.UnitAmount,0) ,A.PosNav =  isnull(C.Nav,0), A.PosAmount = isnull(B.UnitAmount,0) * isnull(C.Nav,0)  
                                    from #ResultFinal A
                                    Left join FundClientPosition B on A.SubsValueDate = B.Date
                                    Left join CloseNAV C on A.SubsValueDate = C.Date and C.status = 2
                                    left join FundClient FC on B.FundClientPK  = FC.FundClientPK and FC.status  = 2
                                    left join Fund F on B.FundPK  = F.FundPK and F.status  = 2
                                    left join Fund F1 on C.FundPK  = F1.FundPK and F1.status  = 2
                                    where F.FundPK  = @FundPK
                                    and FC.FundClientPK  = @FundClientPK
                                    and F1.FundPK  = @FundPK
                                    and A.SubsValueDate is not null

                                    Update A Set A.PosUnits = isnull(B.UnitAmount,0) ,A.PosNav =  isnull(C.Nav,0), A.PosAmount = isnull(B.UnitAmount,0) * isnull(C.Nav,0) , A.SubsValueDate = isnull(A.SubsValueDate,A.RedValueDate) 
                                    from #ResultFinal A
                                    Left join FundClientPosition B on A.RedValueDate = B.Date
                                    Left join CloseNAV C on A.RedValueDate = C.Date and C.status = 2
                                    left join FundClient FC on B.FundClientPK  = FC.FundClientPK and FC.status  = 2
                                    left join Fund F on B.FundPK  = F.FundPK and F.status  = 2
                                    left join Fund F1 on C.FundPK  = F1.FundPK and F1.status  = 2
                                    where F.FundPK  = @FundPK
                                    and FC.FundClientPK  = @FundClientPK
                                    and F1.FundPK  = @FundPK
                                    and A.RedValueDate is not null


                                    Declare @FundID nvarchar(100)
                                    declare @ClientName nvarchar(200)

                                    select @FundID = ID From Fund where FundPK = @FundPK and status = 2
                                    Select @clientName = Name From FundClient where FundClientPK = @FundClientPK and status = 2

                                    insert into #ClientStatementReport
                                    Select @FundID FundID,@clientName ClientName,A.*, case when A.SubsValueDate = EOMONTH(A.SubsValueDate) then isnull([dbo].[FgetMonthlyReturn] (A.SubsValueDate,@FundPK),0) else 0 end MonthlyReturn,
                                    --case when A.SubsValueDate = EOMONTH(A.SubsValueDate) then isnull(dbo.[FgetOpenInd](A.SubsValueDate),0) else 0 end BenchMark,
                                    case when A.SubsValueDate = EOMONTH(A.SubsValueDate) then isnull(dbo.[FgetCloseIndByIndexPK](A.SubsValueDate,B.IndexPK),0) else 0 end BenchMark,
                                    case when A.SubsValueDate = EOMONTH(A.SubsValueDate) then isnull(dbo.[FgetBenchmarkPercent] (A.SubsValueDate,@FundPK),0) else 0 end BenchmarkPercent 
                                    from #ResultFinal A
                                    left join FundIndex B on B.fundPK = @FundPK and B.status = 2
                                    left join benchmarkIndex C on B.IndexPK = C.IndexPK and c.status = 2 and A.SubsValueDate = C.date
                                    order by year(trxDate), intMonth, SubsValueDate

                                    select * 
                                    from #ClientStatementReport 
                                    --where SubsValueDate in (select distinct eomonth(SubsValueDate) from #ClientStatementReport)
                                    order by year(trxDate), intMonth, SubsValueDate ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ClientStatementReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ClientStatementReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Client Statement Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ClientStatementReps> rList = new List<ClientStatementReps>();
                                        while (dr0.Read())
                                        {
                                            ClientStatementReps rSingle = new ClientStatementReps();
                                            rSingle.VarMonth = Convert.ToString(dr0["VarMonth"]);
                                            rSingle.IntMonth = Convert.ToInt32(dr0["IntMonth"]);
                                            rSingle.SubsValueDate = Convert.ToString(dr0["SubsValueDate"]);
                                            rSingle.SubsUnits = Convert.ToDecimal(dr0["SubsUnits"]);
                                            rSingle.SubsNAV = Convert.ToDecimal(dr0["SubsNAV"]);
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"]);
                                            rSingle.RedValueDate = Convert.ToString(dr0["RedValueDate"]);
                                            rSingle.RedUnits = Convert.ToDecimal(dr0["RedUnits"]);
                                            rSingle.RedNAV = Convert.ToDecimal(dr0["RedNAV"]);
                                            rSingle.RedAmount = Convert.ToDecimal(dr0["RedAmount"]);
                                            rSingle.PosUnits = Convert.ToDecimal(dr0["PosUnits"]);
                                            rSingle.PosNAV = Convert.ToDecimal(dr0["PosNAV"]);
                                            rSingle.PosAmount = Convert.ToDecimal(dr0["PosAmount"]);
                                            rSingle.MonthlyReturn = Convert.ToDecimal(dr0["MonthlyReturn"]);
                                            rSingle.Benchmark = Convert.ToDecimal(dr0["Benchmark"]);
                                            rSingle.BenchmarkPercent = Convert.ToDecimal(dr0["BenchmarkPercent"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.InvestmentIncome = Convert.ToDecimal(dr0["BenchmarkPercent"]);

                                            rList.Add(rSingle);

                                        }

                                        var QueryByClientID =
                                         from r in rList
                                         group r by new { r.DateFrom, r.DateTo, r.ClientName, r.FundID } into rGroup
                                         select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByClientID)
                                        {


                                            //Row A = 2
                                            int RowA = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund :";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundID;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Client :";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.ClientName;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;

                                            int _rowX = incRowExcel;
                                            int _rowY = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 2].Value = "SUBSCRIPTION";
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "REDEMPTION";
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Value = "POSITION";
                                            worksheet.Cells["J" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            int _position = incRowExcel;

                                            worksheet.Cells["B" + _rowX + ":L" + _rowY].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _rowX + ":M" + _rowY].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _rowX + ":M" + _rowY].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _rowY + ":L" + _rowY].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;
                                            int RowZ = incRowExcel + 2;
                                            _rB = RowB;
                                            _rC = RowZ;


                                            worksheet.Cells[incRowExcel, 1].Value = "Month";
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Units";
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Net Asset Value per unit";
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;

                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Value (in Rp)";
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Date";
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Units";
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "Net Asset Value per unit";
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Value (in Rp)";
                                            worksheet.Cells[incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Units";
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 11].Value = "Net Asset Value per unit";
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Value (in Rp)";
                                            worksheet.Cells[incRowExcel, 12].Style.WrapText = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (_commissionRpt.ClientStatementType == "With Index")
                                            {
                                                worksheet.Cells[_position, 13].Value = "POSITION END OF MONTH";
                                                worksheet.Cells["M" + _position + ":O" + _position].Merge = true;
                                                worksheet.Cells[_position, 13].Style.Font.Bold = true;
                                                worksheet.Cells[_position, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = "Monthly Return (%)";
                                                worksheet.Cells[incRowExcel, 13].Style.WrapText = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = "Benchmark";
                                                worksheet.Cells[incRowExcel, 14].Style.WrapText = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = "Benchmark (%)";
                                                worksheet.Cells[incRowExcel, 15].Style.WrapText = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells["A" + _position + ":O" + _position].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + _position + ":O" + _position].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["A" + RowB + ":O" + RowZ].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowZ].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowZ].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowZ].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            }
                                            else if (_commissionRpt.ClientStatementType == "Investment Income")
                                            {
                                                worksheet.Cells[_position, 13].Value = "INVESTMENT INCOME";
                                                worksheet.Cells["M" + _position + ":O" + _position].Merge = true;
                                                worksheet.Cells[_position, 13].Style.Font.Bold = true;
                                                worksheet.Cells[_position, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = "Value (in Rp)";
                                                worksheet.Cells[incRowExcel, 13].Style.WrapText = true;
                                                worksheet.Cells["M" + RowB + ":O" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells["A" + _position + ":O" + _position].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + _position + ":O" + _position].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["A" + RowB + ":O" + RowZ].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowZ].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowZ].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowZ].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            }
                                            else if (_commissionRpt.ClientStatementType == "No Index")
                                            {

                                                worksheet.Cells[incRowExcel, 13].Value = "Monthly Return (%)";
                                                worksheet.Cells[incRowExcel, 13].Style.WrapText = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells["A" + RowB + ":M" + RowZ].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":M" + RowZ].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":M" + RowZ].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":M" + RowZ].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells["N" + RowB + ":O" + RowZ].Style.Fill.PatternType = ExcelFillStyle.None;
                                            }

                                            incRowExcel++;


                                            // Row C = 4
                                            int RowC = incRowExcel;
                                            _rD = incRowExcel + 1;
                                            // Untuk Cetak Tebal
                                            string _range = "A" + incRowExcel + ":O" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }
                                            //incRowExcel++;
                                            //area header
                                            var _month = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                //worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                incRowExcel++;
                                                if (_month != rsDetail.VarMonth)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.VarMonth;
                                                }

                                                if (rsDetail.SubsValueDate == null || rsDetail.SubsValueDate == "")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "";
                                                }
                                                else
                                                {
                                                    DateTime _subsValueDate = Convert.ToDateTime(rsDetail.SubsValueDate);

                                                    worksheet.Cells[incRowExcel, 2].Value = _subsValueDate;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                                }

                                                if (rsDetail.SubsUnits == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnits;
                                                }

                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";

                                                if (rsDetail.SubsNAV == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 4].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsNAV;
                                                }

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";


                                                if (rsDetail.SubsAmount == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.SubsAmount;
                                                }

                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                if (rsDetail.RedValueDate == null || rsDetail.RedValueDate == "")
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Value = "";
                                                }
                                                else
                                                {
                                                    DateTime _redValueDate = Convert.ToDateTime(rsDetail.RedValueDate);

                                                    worksheet.Cells[incRowExcel, 6].Value = _redValueDate;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yy";
                                                }

                                                if (rsDetail.RedUnits == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.RedUnits;
                                                }

                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";

                                                if (rsDetail.RedNAV == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.RedNAV;
                                                }

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";



                                                if (rsDetail.RedAmount == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.RedAmount;
                                                }

                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";


                                                if (rsDetail.PosUnits == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 10].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.PosUnits;
                                                }

                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                if (rsDetail.PosNAV == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 11].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.PosNAV;
                                                }



                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";

                                                if (rsDetail.PosAmount == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 12].Value = "-";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.PosAmount;
                                                }

                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                                if (_commissionRpt.ClientStatementType == "With Index")
                                                {

                                                    if (rsDetail.MonthlyReturn == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 13].Value = "-";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.MonthlyReturn / 100;
                                                    }

                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "0.00%";

                                                    if (rsDetail.Benchmark == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 14].Value = "-";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.Benchmark;
                                                    }

                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                                    if (rsDetail.BenchmarkPercent == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 15].Value = "-";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.BenchmarkPercent / 100;
                                                    }

                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "0.00%";


                                                    worksheet.Cells["A" + RowD + ":O" + RowE].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":O" + RowE].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":O" + RowE].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":O" + RowE].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                }
                                                else if (_commissionRpt.ClientStatementType == "Investment Income")
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 13].Value = "";
                                                    worksheet.Cells["M" + incRowExcel + ":O" + incRowExcel].Merge = true;

                                                    worksheet.Cells["A" + RowD + ":O" + RowE].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":O" + RowE].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":O" + RowE].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":O" + RowE].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                }
                                                else if (_commissionRpt.ClientStatementType == "No Index")
                                                {

                                                    if (rsDetail.MonthlyReturn == 0)
                                                    {
                                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 13].Value = "-";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.MonthlyReturn / 100;
                                                    }

                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "0.00%";


                                                    worksheet.Cells["N" + RowD + ":O" + RowE].Style.Fill.PatternType = ExcelFillStyle.None;
                                                    worksheet.Cells["A" + RowD + ":L" + RowE].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":M" + RowE].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":M" + RowE].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + RowD + ":M" + RowE].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                }



                                                _month = rsDetail.VarMonth;
                                            }


                                            incRowExcel++;
                                        }
                                        if (_commissionRpt.ClientStatementType == "With Index")
                                        {
                                            int _RowD = incRowExcel - 1;
                                            worksheet.Cells["A7:A" + _RowD].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A7:A" + _RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A7:A" + _RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A7:A" + _RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B7:E" + _RowD].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B7:E" + _RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B7:B" + _RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E7:E" + _RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F7:I" + _RowD].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F7:I" + _RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F7:F" + _RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I7:I" + _RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J7:L" + _RowD].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["J7:L" + _RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["J7:j" + _RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["l7:L" + _RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["M7:O" + _RowD].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["M7:O" + _RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["M7:M" + _RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["O7:O" + _RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A7:O" + _rD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _rB + ":A" + _rC].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _rB + ":B" + _rC].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _rB + ":F" + _rC].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _rB + ":J" + _rC].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _rB + ":M" + _rC].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["O" + _rB + ":O" + _rC].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        }

                                        int _lastRow = incRowExcel + 2;
                                        worksheet.Cells[_lastRow, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + _lastRow + ":O" + _lastRow].Merge = true;
                                        worksheet.Cells[_lastRow, 1].Style.WrapText = true;
                                        worksheet.Cells[_lastRow, 1].Value =
                                       @"Statements are generated electronically and thus not signed by the investment manager, PT RHB ASSET MANAGEMENT INDONESIA";
                                        _lastRow++;
                                        worksheet.Cells[_lastRow, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + _lastRow + ":O" + _lastRow].Merge = true;
                                        worksheet.Cells[_lastRow, 1].Style.WrapText = true;
                                        worksheet.Cells[_lastRow, 1].Value =
                                       @"Laporan ini dihasilkan secara elektronik dan karenanya tidak di tandatangani oleh Manajer Investasi, PT RHB ASSET MANAGEMENT INDONESIA";


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 CLIENT STATEMENT REPORT";
                                        if (_commissionRpt.ClientStatementType == "Investment Income")
                                        {
                                            worksheet.Column(13).Width = 7;
                                            worksheet.Column(14).Width = 7;
                                            worksheet.Column(15).Width = 7;
                                        }
                                        else
                                        {
                                            worksheet.Column(13).Width = 11;
                                            worksheet.Column(14).Width = 11;
                                            worksheet.Column(15).Width = 11;
                                        }
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = "&8 Jakarta, " + DateTime.Now.ToString("dd MMMM yyyy") + "\n &8&B PT RHB ASSET MANAGEMENT INDONESIA";





                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Radsoft VS BK Report
            else if (_commissionRpt.ReportName.Equals("Radsoft VS BK Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @" 
                          		
DECLARE @DateToMinTwo datetime, @DateToMinOne datetime
set @DateToMinOne = dbo.FWorkingDay(@DateTo,-1)
set @DateToMinTwo = dbo.FWorkingDay(@DateTo,-2)


DECLARE @isHoliday BIT 

SET @isHoliday = dbo.CheckTodayIsHoliday(@DateTo)

declare  @RadsoftVsBKResult table
(
	FundPK int,
	FundName nvarchar(200),
	Groups nvarchar(100),
	MGTFee numeric(22,4)
)


insert into @RadsoftVsBKResult
Select A.FundPK,isnull(D.Name,'NO FUND NAME') FundName 
,isnull(C.ID,'NO MAPPING') Groups
,sum(isnull(A.MFee,0)) MGTFee
from dbo.DailyDataForCommissionRptNew A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK and C.status in (1,2)
left join Fund D on A.FundPK = D.FundPK and D.status in (1,2)
Where A.MFeeDate between @DateFrom and @DateTo
-- PARAM FUND TARO DI SINI

Group by A.FundPK,D.Name,C.ID

Select A.FundPK,A.FundName,A.Groups,A.MGTFee 
,Case when A.Groups = 'IN' then N.unit else case when A.Groups = 'RT' then O.Unit end end 
* isnull(P.NAV,0) AUM
from @RadsoftVsBKResult A
left join
	(
		Select FundPK,sum(isnull(UnitAmount,0)) Unit from FundclientPosition A 
        Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
		left join InternalCategory Q on B.InternalCategoryPK = Q.InternalCategoryPK and Q.status in (1,2)
		where date = case when @isHoliday = 1 
	    then @DateToMinTwo else @DateToMinOne end 
		and Q.ID = 'IN'

" + _paramFund + @"

	group by FundPK
	)N on  A.FundPK = N.FundPK

	left join
	(
		Select FundPK,sum(isnull(UnitAmount,0)) Unit from FundclientPosition A 
        Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
		left join InternalCategory Q on B.InternalCategoryPK = Q.InternalCategoryPK and Q.status in (1,2)
		where date = case when @isHoliday = 1 
	    then @DateToMinTwo else @DateToMinOne end 
		and Q.ID = 'RT'
" + _paramFund + @"

	group by FundPK
	)O on  A.FundPK = O.FundPK
	left join (
		select FundPK,Nav from CloseNAV where status in (1,2)
		and date = case when @isHoliday = 1 then @DateToMinOne else @DateTo end
	)P on A.FundPK = P.FundPK";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RadsoftVSBKReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RadsoftVSBKReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Radsoft VS BK Report");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RadsoftVSBKReport> rList = new List<RadsoftVSBKReport>();
                                        while (dr0.Read())
                                        {
                                            RadsoftVSBKReport rSingle = new RadsoftVSBKReport();
                                            rSingle.Fund = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.Groups = Convert.ToString(dr0["Groups"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Groups"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["MGTFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MGTFee"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));


                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                        from r in rList
                                        group r by new { } into rGroup
                                        select rGroup;


                                        int incRowExcel = 1;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Value = "Date From";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = _commissionRpt.ValueDateFrom;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Value = "Date To";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = _commissionRpt.ValueDateTo;
                                        incRowExcel = incRowExcel + 3;
                                        int _startRowDetail = incRowExcel;
                                        int _startRow = 0;
                                        int _endRowDetail = 0;
                                        int _endRow = 0;
                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 2].Value = "AUM";
                                            worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Mgt Fee";
                                            worksheet.Cells["H" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Retail";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Insti";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "Radsoft";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Valuation";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "Selisih";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Retail";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Insti";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Value = "Radsoft";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Value = "Valuation";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Value = "Selisih";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 1;
                                            _startRow = incRowExcel;

                                            string _fundN = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (_fundN != rsDetail.Fund && _fundN != "")
                                                {
                                                    incRowExcel++;
                                                }
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Fund;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                if (rsDetail.Groups == "IN")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUM;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.MGTFee;
                                                }
                                                if (rsDetail.Groups == "RT")
                                                {
                                                    int _row = incRowExcel - 1;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.AUM;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.MGTFee;

                                                }
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(B" + incRowExcel + "+C" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();

                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(H" + incRowExcel + "+I" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 10].Calculate();


                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                _endRowDetail = incRowExcel + 3;
                                                _endRow = incRowExcel;


                                                _fundN = rsDetail.Fund;
                                            }

                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Total";
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRow + ":B" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();

                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRow + ":C" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRow + ":D" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRow + ":E" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 5].Calculate();

                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRow + ":F" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRow + ":H" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 8].Calculate();

                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRow + ":I" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 9].Calculate();

                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRow + ":J" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 10].Calculate();

                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRow + ":K" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 11].Calculate();

                                        worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRow + ":L" + _endRow + ")";
                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells["A" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRow].Style.Font.Color.SetColor(Color.Red);
                                        worksheet.Cells["L" + _startRowDetail + ":L" + _endRow].Style.Font.Color.SetColor(Color.Red);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                        worksheet.Column(1).Width = 50;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 3;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 RADSOFT VS BK REPORT";


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_commissionRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Fund Unit Ledger
            else if (_commissionRpt.ReportName.Equals("Fund Unit Ledger"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            //string _paramFundClient = "";

                            //if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            //{
                            //    _paramFundClient = " And A.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundClient = "";
                            //}

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
                            	    

                                SELECT  isnull(A.FundPK,'') FundPK
                                ,isnull(B.Name,'') FundName
                                ,isnull(A.MFeePercent,0) MFeePercent
                                ,isnull(D.ID,'') CurrencyID
                                ,A.MfeeDate
                                ,isnull(A.NAV,0) CloseNAV
                                ,SUM(ISNULL(A.SubsUnit,0)) SubsUnit
                                ,SUM(ISNULL(A.SubsAmount,0)) SubsAmount
                                ,SUM(ISNULL(A.RedempUnit,0)) RedempUnit
                                ,SUM(ISNULL(A.RedempAmount,0)) RedempAmount
                                ,SUM(ISNULL(A.UnitAmount,0)) MFeeDateUnit
                                ,SUM(ISNULL(A.AUM,0)) AUM
                                ,SUM(ISNULL(A.MFee,0)) ManagementFee
                                ,SUM(ISNULL(A.AgentFee,0)) SharingFee
                                from [DailyDataForCommissionRptnew] A
                                left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
                                Where A.MfeeDate between @DateFrom and @DateTo 

                                " + _paramFund + @"

                                GROUP BY A.FundPK
                                ,isnull(B.Name,'')
                                ,isnull(A.MFeePercent,0)
                                ,isnull(D.ID,'')
                                ,A.MfeeDate
                                ,isnull(A.NAV,0) 
                                order by A.FundPK,A.MfeeDate
                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundUnitLedger" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundUnitLedger" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fund Unit Ledger");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundUnitLedger> rList = new List<FundUnitLedger>();
                                        while (dr0.Read())
                                        {


                                            FundUnitLedger rSingle = new FundUnitLedger();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["FundPK"]));
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.ManagementFeePercent = Convert.ToDecimal(dr0["MFeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeePercent"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.Date = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.ManagementFeePercent, r.Currency } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND UNIT LEDGER";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeePercent + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            worksheet.Cells[incRowExcel, 7].Value = "(6221) 2783 0889";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                            //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            string _cellSharingFee = "C" + incRowExcel;

                                            worksheet.Cells[incRowExcel, 7].Value = "(6221) 2970 7333";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;



                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Value = "Units";
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Value = "Amount";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "Units";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Management Fee (" + rsHeader.Key.ManagementFeePercent + ")"; ;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Value = "2.5%";
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 10].Value = "FeeShare(" + rsHeader.Key.Percentage + ")"; ;
                                            //worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            //worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":I" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":I" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":I" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowD + ":I" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":I" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempUnit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.MGTFee;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                //worksheet.Cells[incRowExcel, 10].Value = rsDetail.SharingFee;
                                                //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":I" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + StartRow + ":C" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + StartRow + ":D" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + StartRow + ":I" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + StartRow + ":J" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Calculate();
                                            // worksheet.Cells[incRowExcel, 4].Calculate();
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            //worksheet.Cells[incRowExcel, 10].Calculate();
                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel++;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        //worksheet.Column(10).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Client Tracking Report
            else if (_commissionRpt.ReportName.Equals("Client Tracking Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _SellingAgentOnly = "";

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (_commissionRpt.AgentOnly == true)
                            {
                                _SellingAgentOnly = "and B.SACode <> ''";
                            }
                            cmd.CommandText =
                            @"
                          

Declare @DateToMinOne datetime
Declare @DateToMinTwo DATETIME
DECLARE @DateToMinThree DATETIME
DECLARE @UnitDate DATETIME
DECLARE @NAVDate datetime

Set @DateToMinOne = dbo.FWorkingDay(@DateTo,-1)
Set @DateToMinTwo = dbo.FWorkingDay(@DateTo,-2)
Set @DateToMinThree = dbo.FWorkingDay(@DateTo,-3)



SET @UnitDate = CASE WHEN dbo.CheckTodayIsHoliday(@DateTo) = 1 THEN 
					CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinTwo) = 1 THEN 
						@DateToMinThree ELSE @DateToMinTwo END ELSE CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinOne) = 1 THEN
							@DateToMinTwo ELSE @DateToMinOne END END


SET @NAVDate = case when dbo.CheckTodayIsHoliday(@DateTo) = 1 
	then @DateToMinOne else @DateTo END 


	DECLARE @NAV TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(22,8)
)

DECLARE @CFundPK int


Declare A Cursor For
	SELECT FundPK FROM Fund WHERE Status IN (1,2)
Open A
Fetch Next From A
INTO @CFundPK

While @@FETCH_STATUS = 0  
Begin
	
INSERT INTO @NAV
SELECT Date,FundPK,Nav FROM dbo.CloseNAV WHERE Date = 
(
	SELECT MAX(date) FROM CloseNAV WHERE status = 2
	AND Date <= @DateTo AND FundPK = @CFundPK
) AND status = 2 AND FundPK = @CFundPK


	Fetch Next From A 
	into @CFundPK
End	
Close A
Deallocate A

SELECT 
ISNULL(B.Name,'') ClientName
,ISNULL(B.SID,'') SID
,case when B.ClientCategory = 1 then ISNULL(B.NamaDepanInd,'') + ' ' + ISNULL(B.NamaTengahInd,'') + ' ' + ISNULL(B.NamaBelakangInd,'')
else ISNULL(B.NamaPerusahaan,'') end SIDName
,ISNULL(B.ID,'') CIF
,isnull(E.Name,'') AgentName
,isnull(C.Name,'') FundName
,isnull(F.FundType,'') FundType
,isnull(D.ID,'') CurrencyID
,sum(isnull(A.SubsUnit,0)) SalesUnit
,sum(isnull(A.Subsamount,0)) SalesAmount
,sum(isnull(A.RedempUnit,0)) RedempUnit
,sum(isnull(A.RedempAmount,0)) RedempAmount
,sum(isnull(A.SwitchInUnit,0)) SwitchInUnit
,sum(isnull(A.SwitchInAmount,0)) SwitchInAmount
,sum(isnull(A.SwitchOutUnit,0)) SwitchOutUnit
,sum(isnull(A.SwitchOutAmount,0)) SwitchOutAmount
,isnull(F.Unit,0) UnitBalance
,isnull(F.Unit,0) * ISNULL(G.Nav,0) AUM 
,SUM(CASE WHEN @CurrencyType = 'Fee Convert to Rupiah' AND C.CurrencyPK <> 1 THEN ISNULL(A.Mfee,0) * ISNULL(H.Rate,0) ELSE ISNULL(A.Mfee,0) END) ManagementFee
,SUM(CASE WHEN @CurrencyType = 'Fee Convert to Rupiah' AND C.CurrencyPK <> 1 THEN ISNULL(A.AgentFee,0) * ISNULL(H.Rate,0) ELSE ISNULL(A.AgentFee,0) END) TrailFeeAmount
,0 OtherFee
,case when B.ClientCategory = 1 then 'Individual' else 'Institusi' end ClientCategory
,ISNULL(I.DescOne,'FLAT') MFeeType
,ISNULL(J.DescOne,'FLAT') SharingFeeType
,ISNULL(K.Name,'') InternalCategory
,CASE WHEN K.ID = 'RT' THEN 'RETAIL' ELSE 'INSTITUTION' END ParentCategory 
FROM dbo.DailyDataForCommissionRptNew A
LEFT JOIN fundclient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join Currency D on C.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
left join Agent E on B.SellingAgentPK = E.AgentPK and E.status in (1,2)
LEFT JOIN
(
	Select A.FundClientPK,A.FundPK,sum(isnull(UnitAmount,0)) Unit, MV.DescOne FundType from FundclientPosition A 
	Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
	Left Join Fund C on A.FundPK = C.FundPK and C.Status in(1,2)
	left join MasterValue MV on C.Type = MV.Code and MV.ID = 'FundType' and MV.Status in(1,2)
	where date = @UnitDate
--	AND A.FundclientPK = 7077 AND A.FundPK = 61
" + _paramFundClient + _paramFund + _SellingAgentOnly + @"

	GROUP BY A.FundClientPK,A.FundPK,MV.DescOne
)F ON A.FundclientPK = F.FundClientPK AND A.FundPK = F.FundPK
LEFT JOIN @NAV G ON A.FundPK = G.FundPK 
LEFT JOIN dbo.CurrencyRate H ON C.CurrencyPK = H.CurrencyPK AND H.Date = @NAVDate AND H.status IN (1,2)
LEFT JOIN MasterValue I ON A.MFeeType = I.Code AND I.ID = 'FundFeeType' AND I.status IN (1,2)
LEFT JOIN MasterValue J ON A.SharingFeeType = J.Code AND J.ID = 'AgentFeeType' AND J.status IN (1,2)
Left JOIN dbo.InternalCategory K ON B.InternalCategoryPK = K.InternalCategoryPK AND K.status IN (1,2)
WHERE ISNULL(B.Name,'') <> ''
AND A.MFeeDate BETWEEN @DateFrom AND @DateTo
-- AND A.FundclientPK = 7077 AND A.FundPK = 61
" + _paramFundClient + _paramFund + _SellingAgentOnly + @"

GROUP BY
B.Name,B.SID,B.ClientCategory,B.NamaDepanInd,B.NamaTengahInd,B.NamaBelakangInd,B.NamaPerusahaan,B.ID
,E.Name,C.Name,D.ID,F.FundType,I.DescOne,F.Unit,G.NAV,J.DescOne,K.Name,K.ID


";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@CurrencyType", _commissionRpt.CurrencyType);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ClientTrackingReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ClientTrackingReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Client Tracking Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ClientTrackingReport> rList = new List<ClientTrackingReport>();
                                        while (dr0.Read())
                                        {
                                            ClientTrackingReport rSingle = new ClientTrackingReport();
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.SIDName = Convert.ToString(dr0["SIDName"]);
                                            rSingle.CIF = Convert.ToString(dr0["CIF"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.SalesAmount = Convert.ToDecimal(dr0["SalesAmount"]);
                                            rSingle.SalesUnit = Convert.ToDecimal(dr0["SalesUnit"]);
                                            rSingle.RedemptionAmount = Convert.ToDecimal(dr0["RedempAmount"]);
                                            rSingle.RedemptionUnit = Convert.ToDecimal(dr0["RedempUnit"]);
                                            rSingle.SwitchingInUnit = Convert.ToDecimal(dr0["SwitchInUnit"]);
                                            rSingle.SwitchingInAmount = Convert.ToDecimal(dr0["SwitchInAmount"]);
                                            rSingle.SwitchingOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"]);
                                            rSingle.SwitchingOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitBalance"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.ManagementFeeAmount = Convert.ToDecimal(dr0["ManagementFee"]);
                                            rSingle.TrailFeeAmount = Convert.ToDecimal(dr0["TrailFeeAmount"]);
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"]);
                                            rSingle.OtherFee = Convert.ToDecimal(dr0["OtherFee"]);
                                            rSingle.ClientCategory = Convert.ToString(dr0["ClientCategory"]);
                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"]);

                                            rSingle.InternalCategory = Convert.ToString(dr0["InternalCategory"]);
                                            rSingle.ParentCategory = Convert.ToString(dr0["ParentCategory"]);

                                            rList.Add(rSingle);

                                        }

                                        var QueryByClientID =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByClientID)
                                        {

                                            incRowExcel++;
                                            //Row A = 2
                                            int RowA = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                            worksheet.Cells[incRowExcel, 2].Value = _commissionRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date To :";
                                            worksheet.Cells[incRowExcel, 2].Value = _commissionRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                            incRowExcel++;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "Client Name";
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "SID";
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "SIDName";
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Account No/ Client No ";
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Team";
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Fund Name";
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Fund Type";
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Currency";
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Sales Amount";
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Sales Unit";
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Redemption Amount";
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Redemption Unit";
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Switch In Amount";
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Swtitch In Unit";
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 15].Value = "Switch Out Amount";
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 16].Value = "Swtitch Out Unit";
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Merge = true;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 17].Value = "No. of units";
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Merge = true;
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 18].Value = "AUM";
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Merge = true;
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 19].Value = "Management Fee";
                                            worksheet.Cells["S" + RowB + ":S" + RowG].Merge = true;
                                            worksheet.Cells["S" + RowB + ":S" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["S" + RowB + ":S" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 20].Value = "MFee Type";
                                            worksheet.Cells["T" + RowB + ":T" + RowG].Merge = true;
                                            worksheet.Cells["T" + RowB + ":T" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["T" + RowB + ":T" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 21].Value = "Trailer Fee";
                                            worksheet.Cells["U" + RowB + ":U" + RowG].Merge = true;
                                            worksheet.Cells["U" + RowB + ":U" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["U" + RowB + ":U" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //TAMBAHAN
                                            worksheet.Cells[incRowExcel, 22].Value = "Traile Fee Type";
                                            worksheet.Cells["V" + RowB + ":V" + RowG].Merge = true;
                                            worksheet.Cells["V" + RowB + ":V" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["V" + RowB + ":V" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //
                                            worksheet.Cells[incRowExcel, 23].Value = "Transaction Fee";
                                            worksheet.Cells["W" + RowB + ":W" + RowG].Merge = true;
                                            worksheet.Cells["W" + RowB + ":W" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["W" + RowB + ":W" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 24].Value = "Client Category";
                                            worksheet.Cells["X" + RowB + ":X" + RowG].Merge = true;
                                            worksheet.Cells["X" + RowB + ":X" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["X" + RowB + ":X" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 25].Value = "Internal Category";
                                            worksheet.Cells["Y" + RowB + ":Y" + RowG].Merge = true;
                                            worksheet.Cells["Y" + RowB + ":Y" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["Y" + RowB + ":Y" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 26].Value = "Parent Category";
                                            worksheet.Cells["Z" + RowB + ":Z" + RowG].Merge = true;
                                            worksheet.Cells["Z" + RowB + ":Z" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["Z" + RowB + ":Z" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + RowB + ":Z" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":Z" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":Z" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":Z" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel = incRowExcel + 2;
                                            //area header
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SIDName;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.CIF;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.FundType;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CurrencyID;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.SalesAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.SalesUnit;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.RedemptionAmount;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.RedemptionUnit;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.SwitchingInAmount;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.SwitchingInUnit;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.SwitchingOutAmount;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.SwitchingOutUnit;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.0000";


                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.CashBalance;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.ManagementFeeAmount;
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.MFeeType;

                                                worksheet.Cells[incRowExcel, 21].Value = rsDetail.TrailFeeAmount;
                                                worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 22].Value = rsDetail.SharingFeeType;
                                                worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 23].Value = rsDetail.OtherFee;
                                                worksheet.Cells[incRowExcel, 23].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 24].Value = rsDetail.ClientCategory;

                                                worksheet.Cells[incRowExcel, 25].Value = rsDetail.InternalCategory;
                                                worksheet.Cells[incRowExcel, 26].Value = rsDetail.ParentCategory;

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }
                                            int _endRow = incRowExcel - 1;
                                            worksheet.Cells["A" + _endRow + ":Z" + _endRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":Z" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":Z" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        }





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 26];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 45;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).Width = 65;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;
                                        worksheet.Column(21).Width = 20;
                                        worksheet.Column(22).Width = 20;
                                        worksheet.Column(23).Width = 20;
                                        worksheet.Column(24).Width = 20;
                                        worksheet.Column(25).Width = 20;
                                        worksheet.Column(26).Width = 20;

                                        //worksheet.Cells["A3:R14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 CLIENT TRACKING REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();





                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }

        //UNIT REGISTRY RHB
        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {

            #region Monthly Transaction By Fund And InvestorType And FundClient
            if (_unitRegistryRpt.ReportName.Equals("Monthly Transaction By Fund And InvestorType And FundClient"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramAgent = "";
                            string _paramFundClient = "";
                            string _paramDepartment = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And A.DepartmentPK in ( " + _unitRegistryRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            cmd.CommandText =

                               @"
                            

SELECT ClientID,ClientName,A.FundID,Sum(Subs) Subs,Sum(Redemption) Redemption
,Sum(SwitchIn) SwitchIn,Sum(SwitchOut) SwitchOut
,Sum(RetailSubs) RetailSubs,Sum(RetailRedemp) RetailRedemp 
,Sum(InstiSubs) InstiSubs, Sum(InstiRedemp) InstiRedemp
,Sum(RetailSwitchIn) RetailSwitchIn,Sum(RetailSwitchOut) RetailSwitchOut
,Sum(InstiSwitchIn) InstiSwitchIn,Sum(InstiSwitchOut) InstiSwitchOut
From 
(
Select C.ID ClientID,C.name ClientName,B.ID FundID
,Sum(ISNULL(TotalcashAmount,0)) Subs,0 Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM ClientSubscription A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
where ValueDate between @DateFrom and @DateTo and " + _statusSubs + _paramFund + _paramAgent + _paramDepartment + _paramFundClient + @" 
and A.TotalCashAmount > 5
--and Posted = 1  and revised = 0 and A.status = 2 and A.TotalCashAmount > 5
Group by B.ID,C.ID,C.Name

UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,Sum(ISNULL(CashAmount,0)) Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut 
FROM ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
where ValueDate between @DateFrom and @DateTo and " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmount > 5
--and Posted = 1  and revised = 0 and A.status = 2 and A.TotalCashAmount > 5
Group by B.ID,C.ID,C.Name

UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID
,0 Subs,0 Redemption,Sum(ISNULL(A.TotalCashAmountFundTo,0)) SwitchIn,0 SwitchOut ,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM dbo.ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
where ValueDate between @DateFrom and @DateTo and " + _statusSubs + _paramFund + _paramAgent + _paramDepartment + _paramFundClient + @" 
and A.TotalCashAmountFundTo > 5
--and Posted = 1  and revised = 0 and A.status = 2 and A.TotalCashAmount > 5
Group by B.ID,C.ID,C.Name


UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,Sum(ISNULL(A.CashAmount,0)) SwitchOut,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
where ValueDate between @DateFrom and @DateTo and " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + @"
and A.TotalCashAmountFundFrom > 5
--and Posted = 1  and revised = 0 and A.status = 2 and A.TotalCashAmount > 5
Group by B.ID,C.ID,C.Name


UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,0 SwitchOut,sum(ISNULL(TotalCashAmount,0)) RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM ClientSubscription A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
left join InternalCategory D on C.InternalCategoryPK = D.InternalCategoryPK  and D.Status in (1,2)
where ValueDate between @DateFrom and @DateTo and D.ID = 'RT' and " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmount > 5
--and Posted = 1 and  revised = 0 and A.status = 2 and A.TotalCashAmount > 5 and D.ParentCategoryPK = 'RT'
Group by B.ID,C.ID,C.Name


UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,sum(CashAmount) RetailRedemp,0 InstiSubs,0 InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
left join InternalCategory D on C.InternalCategoryPK = D.InternalCategoryPK and D.Status in (1,2)
where ValueDate between @DateFrom and @DateTo and D.ID = 'RT' and " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmount > 5
--and Posted = 1 and  revised = 0 and A.status = 2 and A.TotalCashAmount > 5 and D.ParentCategoryPK = 'RT'
Group by B.ID,C.ID,C.Name


UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp 
,sum(A.TotalCashAmountFundTo)  RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
left join InternalCategory D on C.InternalCategoryPK = D.InternalCategoryPK  and D.Status in (1,2)
where ValueDate between @DateFrom and @DateTo and D.ID = 'RT' and " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmountFundTo > 5
--and Posted = 1 and  revised = 0 and A.status = 2 and A.TotalCashAmount > 5 and D.ParentCategoryPK = 'RT'
Group by B.ID,C.ID,C.Name


UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp 
,0  RetailSwitchIn, sum(A.CashAmount) RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
left join InternalCategory D on C.InternalCategoryPK = D.InternalCategoryPK  and D.Status in (1,2)
where ValueDate between @DateFrom and @DateTo and D.ID = 'RT' and " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmountFundFrom > 5
--and Posted = 1 and  revised = 0 and A.status = 2 and A.TotalCashAmount > 5 and D.ParentCategoryPK = 'RT'
Group by B.ID,C.ID,C.Name

UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,0 RetailRedemp,sum(TotalCashAmount) InstiSubs,0 InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM ClientSubscription A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
left join InternalCategory D on C.InternalCategoryPK = D.InternalCategoryPK and D.Status in (1,2)
where ValueDate between @DateFrom and @DateTo and D.ID = 'IN' and " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmount > 5
--and Posted = 1 and  revised = 0 and A.status = 2 and A.TotalCashAmount > 5 and D.ParentCategoryPK = 'IN'
Group by B.ID,C.ID,C.Name

UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,0 RetailRedemp,0 InstiSubs,sum(CashAmount) InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, 0 InstiSwitchOut
FROM ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
left join InternalCategory D on C.InternalCategoryPK = D.InternalCategoryPK and D.Status in (1,2)
where ValueDate between @DateFrom and @DateTo and D.ID = 'IN' and " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmount > 5
--and Posted = 1 and  revised = 0 and A.status = 2 and A.TotalCashAmount > 5 and D.ParentCategoryPK = 'IN' 
Group by B.ID,C.ID,C.Name


UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,sum(A.TotalCashAmountFundTo) InstiSwitchIn, 0 InstiSwitchOut
FROM dbo.ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
left join InternalCategory D on C.InternalCategoryPK = D.InternalCategoryPK and D.Status in (1,2)
where ValueDate between @DateFrom and @DateTo and D.ID = 'IN' and " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmountFundFrom > 5
--and Posted = 1 and  revised = 0 and A.status = 2 and A.TotalCashAmount > 5 and D.ParentCategoryPK = 'IN' 
Group by B.ID,C.ID,C.Name


UNION ALL

Select C.ID ClientID,C.name ClientName,B.ID FundID,0 Subs,0 Redemption,0 SwitchIn,0 SwitchOut,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp 
, 0 RetailSwitchIn, 0 RetailSwitchOut,0 InstiSwitchIn, sum(A.CashAmount) InstiSwitchOut
FROM dbo.ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
left join InternalCategory D on C.InternalCategoryPK = D.InternalCategoryPK and D.Status in (1,2)
where ValueDate between @DateFrom and @DateTo and D.ID = 'IN' and " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + @" 
and A.TotalCashAmountFundTo > 5
--and Posted = 1 and  revised = 0 and A.status = 2 and A.TotalCashAmount > 5 and D.ParentCategoryPK = 'IN' 
Group by B.ID,C.ID,C.Name

)A
Group by FundID,ClientID,ClientName

                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "MonthlyTransactionByFundAndInvestorTypeAndFundClient" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "MonthlyTransactionByFundAndInvestorTypeAndFundClient" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Monthly Transaction By Fund And InvestorType And FundClient");

                                        int incRowExcel = 1;

                                        //DateTime _date;
                                        //_date = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                        //worksheet.Cells[incRowExcel, 1].Value = _date.ToString("MMMM yyyy") ;
                                        worksheet.Cells[incRowExcel, 1].Value = "Period" + " : " + _unitRegistryRpt.ValueDateFrom + " - " + _unitRegistryRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        incRowExcel++;
                                        //incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Value = "CLIENT";
                                        worksheet.Cells["A2:A3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A2:A3"].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "FUND";
                                        worksheet.Cells["B2:B3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B2:B3"].Merge = true;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 3].Value = "NET TRANSACTION";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C2:F2"].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 7].Value = "RETAIL TRANSACTION";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["G2:J2"].Merge = true;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 11].Value = "INSTI TRANSACTION";
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["K2:N2"].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Value = "SUBSCRIPTION";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "REDEMPTION";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "SWITCH-IN";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "SWITCH-OUT";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "SUBSCRIPTION";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "REDEMPTION";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "SWITCH-IN";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "SWITCH-OUT";
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        worksheet.Cells[incRowExcel, 11].Value = "SUBSCRIPTION";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Value = "REDEMPTION";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Value = "SWITCH-IN";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Value = "SWITCH-OUT";
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;
                                        while (dr0.Read())
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = Convert.ToString(dr0["ClientName"]);
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToString(dr0["FundID"]);
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDecimal(dr0["Subs"]);
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDecimal(dr0["Redemption"]);
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDecimal(dr0["SwitchIn"]);//S-I
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 6].Value = Convert.ToDecimal(dr0["SwitchOut"]);//S-O
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDecimal(dr0["RetailSubs"]);
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 8].Value = Convert.ToDecimal(dr0["RetailRedemp"]);
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 9].Value = Convert.ToDecimal(dr0["RetailSwitchIn"]);//S-I
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 10].Value = Convert.ToDecimal(dr0["RetailSwitchOut"]);//S-O
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 11].Value = Convert.ToDecimal(dr0["InstiSubs"]);
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 12].Value = Convert.ToDecimal(dr0["InstiRedemp"]);
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 13].Value = Convert.ToDecimal(dr0["InstiSwitchIn"]);//S-I
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 14].Value = Convert.ToDecimal(dr0["InstiSwitchOut"]);//S-O
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##";
                                            incRowExcel++;
                                        }


                                        int _lastRow = incRowExcel;
                                        worksheet.Cells["A2" + ":N" + _lastRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A2" + ":N" + _lastRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A2" + ":N" + _lastRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A2" + ":N" + _lastRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        string _rangeA = "A:N" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 14];
                                        worksheet.Column(1).Width = 80;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 25;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n &30&B Monthly Trx By Investor Type And FundClient ";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Historical Transaction Agent All
            else if (_unitRegistryRpt.ReportName.Equals("Historical Transaction Agent All"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            //string _paramFundClient = "";
                            string _paramAgent = "";
                            string _paramAgentSwitch = "";
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                                _paramAgentSwitch = "And AG.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitchOut = "  A.Status = 1  ";
                                _statusSwitchIn = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitchOut = "  A.Status = 3  ";
                                _statusSwitchIn = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  and A.status not in (3,4)";
                                _statusSwitchOut = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                                _statusSwitchIn = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 and A.status not in (3,4) ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4) ";
                                _statusSwitchOut = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 and A.status not in (3,4)";
                                _statusSwitchIn = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                            }
                            cmd.CommandText =
                            @"
                          
DECLARE @Table TABLE
(
	FundClientPK INT,
	FundPK INT,
	AgentPK INT,
	UnitAmount NUMERIC(22,4),
	Date Datetime
)

INSERT INTO @Table 
        ( FundClientPK ,
          FundPK ,
          AgentPK ,
          UnitAmount,
		  Date
        )
SELECT A.FundClientPK,A.FundPK,ISNULL(B.SellingAgentPK,0),ISNULL(A.UnitAmount,0),A.Date FROM dbo.FundClientPosition A
LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
WHERE Date BETWEEN @ValueDateFrom AND @ValueDateTo


SELECT A.FundPK,A.FundClientPK,A.SellingAgentPK,A.SettlementDate,A.Remark,A.AgentFeeAmount, isnull(A.DepartmentName,'') DepartmentName
, isnull(A.AgentName,'') AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID
,A.ClientName,A.CashAmount,A.UnitAmount,A.NetAmount,A.Nav
,SUM(B.UnitAmount) EndBalance 
,FeePercent,FeeAmount
from 
    (  
    Select F.FUndPK,FC.FundClientPK,FC.SellingAgentPK,A.NAVDate SettlementDate,A.Description Remark,
	A.AgentFeeAmount,D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName,NAVDate,'Subscription' Type, 
	Fc.ID ClientID,FC.Name ClientName, CashAmount, TotalUnitAmount UnitAmount ,A.Nav,TotalCashAmount NetAmount
	,A.SubscriptionFeePercent FeePercent, A.SubscriptionFeeAmount FeeAmount 
    from ClientSubscription A 
    left join Fund F on A.FundPK = F.fundPK and f.Status=2  
    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status=2 
    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status=2 
    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status=2 
    where 
    " + _statusSubs + _paramFund + _paramAgent + @" and 
    NAVDate Between @ValueDateFrom and @ValueDateTo 
    UNION ALL   
    Select F.FundPK,FC.FundClientPK,FC.SellingAgentPK,A.PaymentDate SettlementDate,A.Description Remark,
	A.AgentFeeAmount,D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName,
	NAVDate,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, TotalUnitAmount UnitAmount,A.Nav,TotalCashAmount NetAmount 
	,A.redemptionFeePercent FeePercent, A.RedemptionFeeAmount FeeAmount 
  
  
    from ClientRedemption A 
    left join Fund F on A.FundPK = F.fundPK and f.Status=2    
    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status=2   
    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status=2 
    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status=2
    where 
    " + _statusRedemp + _paramFund + _paramAgent + @" and 
    NAVDate Between @ValueDateFrom and @ValueDateTo 
    UNION ALL   
    select F.FundPK, FC.FundClientPK,FC.SellingAgentPK,A.PaymentDate SettlementDate,A.Description Remark,0 AgentFeeAmount,
	D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName, NAVDate, 'SwitchingOut' Type, 
	FC.ID ClientID, FC.Name ClientName, CashAmount, TotalUnitAmountFundFrom TotalUnitAmount, Nav, TotalCashAmountFundFrom NetAmount,
	CASE WHEN A.FeeType = 'OUT' THEN A.SwitchingFeePercent ELSE 0 end FeePercent, 
	CASE WHEN A.FeeType = 'OUT' THEN A.SwitchingFeeAmount ELSE 0 end FeeAmount
    from ClientSwitching A
    left join Fund F on A.FundPKFrom = F.FundPK and F.status in (1,2)
    left join FundClient FC on A.FundClientPK = FC.fundclientPK and FC.status in (1,2)
    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.status = 2
    left join Department D on AG.AgentPK = D.DepartmentPK and D.status = 2
    where
  " + _statusSwitchOut + _paramFund + _paramAgentSwitch + @" and
    NAVDate Between @ValueDateFrom and @ValueDateTo 
    UNION ALL   
    select F.FundPK, FC.FundClientPK,FC.SellingAgentPK,A.PaymentDate SettlementDate,A.Description Remark,0 AgentFeeAmount
	,D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName, NAVDate, 'SwitchingIn' Type, FC.ID ClientID, FC.Name ClientName, 
	CashAmount, TotalUnitAmountFundFrom TotalUnitAmount, Nav, TotalCashAmountFundFrom NetAmount,
	CASE WHEN A.FeeType = 'OUT' THEN A.SwitchingFeePercent ELSE 0 end FeePercent, 
	CASE WHEN A.FeeType = 'OUT' THEN A.SwitchingFeeAmount ELSE 0 end FeeAmount
    from ClientSwitching A
    left join Fund F on A.FundPKTo = F.FundPK and F.status in (1,2)
    left join FundClient FC on A.FundClientPK = FC.fundclientPK and FC.status in (1,2)
    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.status = 2
    left join Department D on AG.AgentPK = D.DepartmentPK and D.status = 2
    where
    " + _statusSwitchIn + _paramFund + _paramAgentSwitch + @" and
    NAVDate Between @ValueDateFrom and @ValueDateTo 
    )A   LEFT JOIN @Table B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK 
	AND A.NAVDate = B.Date

	
    Group by A.FundPK,A.FundClientPK,A.SellingAgentPK,A.SettlementDate,A.Remark,A.AgentFeeAmount,A.DepartmentName,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.CashAmount,A.UnitAmount,A.NetAmount,A.Nav 
,FeePercent,FeeAmount
    order by A.FundName, A.NAVDate Asc";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                            //cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            //cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoricalTransactionAgentAll" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoricalTransactionAgentAll" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Historical Transaction by Agent All");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                            rSingle.SellingAgentPK = Convert.ToInt32(dr0["SellingAgentPK"]);
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.AgentFeeAmount = Convert.ToDecimal(dr0["AgentFeeAmount"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.EndBalance = Convert.ToDecimal(dr0["EndBalance"]);
                                            //rSingle.DepartmentName = Convert.ToString(dr0["DepartmentName"]);
                                            rSingle.DepartmentName = dr0["DepartmentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentName"]);
                                            //rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.AgentName = dr0["AgentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentName"]);
                                            rList.Add(rSingle);
                                        }


                                        var QueryByFundID =
                                           from r in rList
                                           orderby r.AgentName, r.NAVDate ascending
                                           group r by new { r.SellingAgentPK, r.AgentName } into rGroup
                                           select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {




                                            incRowExcel = incRowExcel + 2;


                                            int RowZ = incRowExcel;
                                            incRowExcel = incRowExcel + 4;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Fund Name ";
                                            //worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            //worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Agent Name ";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.AgentName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date From";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date To";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo);
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Balance";
                                            //worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            //worksheet.Cells[incRowExcel, 4].Value = _host.Get_UnitAmountByFundPKandFundClientPK(rsHeader.Key.FundPK, rsHeader.Key.FundClientPK, Convert.ToDateTime(_unitRegistryRpt.ValueDateTo));
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells[incRowExcel, 5].Value = "unit";
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "R/Un realised";
                                            //worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            //worksheet.Cells[incRowExcel, 4].Value = _host.Get_UnitAmountByFundPKandFundClientPK(rsHeader.Key.FundPK, rsHeader.Key.FundClientPK, Convert.ToDateTime(_unitRegistryRpt.ValueDateTo));
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //incRowExcel++;

                                            incRowExcel = incRowExcel + 2;


                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Type";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Fund ID";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Amount (IDR)";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Sales Charged";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":I" + RowB].Merge = true;
                                            worksheet.Cells["H" + RowB + ":I" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 8].Value = "%";
                                            worksheet.Cells[RowG, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 9].Value = "Amount";
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Net Amount";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Net Unit";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Ending Balance";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 14].Value = "Remark";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _aaa = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;


                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "SUB";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else if (rsDetail.Type == "SwitchingIn")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "Switching In";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                }

                                                else if (rsDetail.Type == "SwitchingOut")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "Switching Out";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "RED";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                }

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NAVDate;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance;
                                                }
                                                else if (rsDetail.Type == "SwitchingOut")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance * -1;
                                                }

                                                else if (rsDetail.Type == "SwitchingIn")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance * -1;
                                                }

                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeePercent;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount;
                                                }
                                                else if (rsDetail.Type == "SwitchingOut")
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount * -1;
                                                }

                                                else if (rsDetail.Type == "SwitchingIn")
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount * -1;
                                                }


                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance;
                                                }
                                                else if (rsDetail.Type == "SwitchingIn")
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance * -1;
                                                }

                                                else if (rsDetail.Type == "SwitchingOut")
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance * -1;
                                                }

                                                //int _A = incRowExcel + 1;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.EndBalance;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Remark;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _aaa = incRowExcel;

                                            }



                                            worksheet.Cells["A" + _endRowDetail + ":N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 4].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.000000";
                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A5:N" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 14];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 10;
                                        worksheet.Column(3).Width = 2;
                                        worksheet.Column(4).Width = 60;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 10;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n \n \n &30&B Transaction Report of Client Portfolio";


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Unit Activity For Accounting
            else if (_unitRegistryRpt.ReportName.Equals("Unit Activity For Accounting"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramAgent = "";
                            string _paramFundClient = "";
                            string _paramDepartment = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And A.DepartmentPK in ( " + _unitRegistryRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            cmd.CommandText =

                            @"Select A.NoRow,A.SettlementDate,A.Remark,A.FeeAmount,A.DepartmentName,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.TotalCashAmount,A.TotalUnitAmount from (  
                            Select '1' NoRow, A.NAVDate SettlementDate,A.Description Remark,A.SubscriptionFeeAmount FeeAmount,D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName,NAVDate,'Subscription' Type, Fc.ID ClientID,FC.Name ClientName, TotalCashAmount, TotalUnitAmount   
                            from ClientSubscription A left join Fund F on A.FundPK = F.fundPK and f.Status=2    
                            left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status=2    
                            left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status=2  
                            left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status=2
                            where  " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + _paramDepartment +
                            @" and NAVDate Between @ValueDateFrom and @ValueDateTo  
                            UNION ALL   
                            Select '2' NoRow,A.PaymentDate SettlementDate,A.Description Remark,A.RedemptionFeeAmount FeeAmount,D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName,NAVDate,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName, TotalCashAmount, TotalUnitAmount  
                            from ClientRedemption A left join Fund F on A.FundPK = F.fundPK and f.Status=2    
                            left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status=2    
                            left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status=2  
                            left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status=2 
                            where  " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + _paramDepartment +
                            @"and NAVDate Between @ValueDateFrom and @ValueDateTo 
                            )A   
                            --Group by A.NoRow,A.SettlementDate,A.Remark,A.FeeAmount,A.DepartmentName,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.TotalCashAmount,A.TotalUnitAmount 
                            order by A.NoRow,A.FundID, A.NAVDate Asc ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _unitRegistryRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _unitRegistryRpt.DepartmentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "UnitActivityForAccounting" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "UnitActivityForAccounting" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Unit Activity For Accounting");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.DepartmentName = Convert.ToString(dr0["DepartmentName"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["TotalCashAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["TotalUnitAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Type } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Type;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Period";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = _unitRegistryRpt.ValueDateFrom + " - " + _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";

                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "CIF No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 3].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 5].Value = "Sales Name";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Sales Branch";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Eff Date";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells[incRowExcel, 9].Value = "Net IDR";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 9].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }


                                            worksheet.Cells[incRowExcel, 11].Value = "Remark";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 12].Value = "Status";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Information";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _fundID = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;



                                                if (_fundID != rsDetail.FundID)
                                                {
                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                }

                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                //worksheet.Cells["A" + RowD + ":M" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":M" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DepartmentName;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.NAVDate;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";

                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Remark;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 12].Value = " - ";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 13].Value = " - ";
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _fundID = rsDetail.FundID;
                                            }

                                            worksheet.Cells["A" + _endRowDetail + ":M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        }


                                        incRowExcel++;

                                        //worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        //-----------------------------------
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"Select A.NoRow,A.CurrencyID,A.Type,A.FundID,sum(A.TotalCashAmount)TotalCashAmount,sum(A.TotalUnitAmount)TotalUnitAmount from (  
                                                Select  '1' NoRow,CU.ID CurrencyID,'Subscription' Type ,F.ID FundID,sum (TotalCashAmount)TotalCashAmount,sum (TotalUnitAmount)TotalUnitAmount 
                                                from ClientSubscription A left join Fund F on A.FundPK = F.fundPK and f.Status=2    
                                                left join Currency CU on A.CurrencyPK = CU.CurrencyPK and CU.Status=2  
                                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status=2   
                                                left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status=2  
                                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status=2 
                                                where  " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + _paramDepartment +
                                                @"and NAVDate Between @ValueDateFrom and @ValueDateTo  
                                                Group By F.ID,CU.ID 
                                                UNION ALL  
                                                Select '2' NoRow,CU.ID CurrencyID,'Redemption' Type,F.ID FundID,sum (TotalCashAmount)TotalCashAmount,sum (TotalUnitAmount)TotalUnitAmount   
                                                from ClientRedemption A left join Fund F on A.FundPK = F.fundPK and f.Status=2    
                                                left join Currency CU on A.CurrencyPK = CU.CurrencyPK and CU.Status=2   
                                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status=2   
                                                left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status=2 
                                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status=2 
                                                where  " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + _paramDepartment +
                                                @"and NAVDate Between @ValueDateFrom and @ValueDateTo 
                                                Group By F.ID,CU.ID
                                                )A   
                                                Group by A.NoRow,A.Type,A.FundID,A.CurrencyID
                                                order by A.NoRow,A.Type,A.FundID Asc ";
                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                                                cmd1.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                                                cmd1.Parameters.AddWithValue("@AgentFrom", _unitRegistryRpt.AgentFrom);
                                                cmd1.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);
                                                cmd1.Parameters.AddWithValue("@DepartmentFrom", _unitRegistryRpt.DepartmentFrom);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList1 = new List<UnitRegistryRpt>();
                                                            while (dr1.Read())
                                                            {
                                                                UnitRegistryRpt rSingle1 = new UnitRegistryRpt();
                                                                rSingle1.FundID = Convert.ToString(dr1["FundID"]);
                                                                rSingle1.CashBalance = Convert.ToDecimal(dr1["TotalCashAmount"]);
                                                                rSingle1.UnitBalance = Convert.ToDecimal(dr1["TotalUnitAmount"]);
                                                                rSingle1.Type = Convert.ToString(dr1["Type"]);
                                                                rSingle1.CurrencyID = Convert.ToString(dr1["CurrencyID"]);
                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r1 in rList1
                                                                group r1 by new { r1.Type, r1.NAVDate } into rGroup1
                                                                select rGroup1;

                                                            incRowExcel = incRowExcel + 6;
                                                            int _endRowDetailZ = 0;


                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {
                                                                worksheet.Cells[incRowExcel, 1].Value = "Total " + rsHeader1.Key.Type + " : ";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                incRowExcel = incRowExcel + 2;
                                                                //Row B = 3
                                                                int RowBZ = incRowExcel;
                                                                int RowGZ = incRowExcel + 1;


                                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Merge = true;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                                worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells[incRowExcel, 3].Value = "Amount";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells["C" + RowBZ + ":D" + RowGZ].Merge = true;
                                                                    worksheet.Cells["C" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["C" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells["C" + RowBZ + ":D" + RowGZ].Merge = true;
                                                                    worksheet.Cells["C" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["C" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 5].Value = "Amount";
                                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 6].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Merge = true;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                }


                                                                incRowExcel++;

                                                                // Row C = 4
                                                                int RowCZ = incRowExcel;

                                                                incRowExcel++;
                                                                //area header

                                                                int _noZ = 1;
                                                                int _startRowDetailZ = incRowExcel;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    //Row D = 5
                                                                    int RowDZ = incRowExcel;
                                                                    int RowEZ = incRowExcel + 1;


                                                                    //ThickBox Border

                                                                    if (rsDetail1.Type == "Subscription")
                                                                    {
                                                                        worksheet.Cells["A" + RowBZ + ":E" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + RowBZ + ":E" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet.Cells["A" + RowBZ + ":F" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + RowBZ + ":F" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }

                                                                    //worksheet.Cells["A" + RowD + ":M" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    //worksheet.Cells["A" + RowD + ":M" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _noZ;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundID;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    if (rsDetail1.Type == "Subscription")
                                                                    {
                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.CashBalance;
                                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.CurrencyID;
                                                                        worksheet.Cells[incRowExcel, 5].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.UnitBalance;
                                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.000000";
                                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.CashBalance;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 5].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.CurrencyID;
                                                                        worksheet.Cells[incRowExcel, 6].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    }


                                                                    _endRowDetailZ = incRowExcel;
                                                                    _noZ++;
                                                                    incRowExcel++;

                                                                }


                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells["A" + _endRowDetailZ + ":E" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells["A" + _endRowDetailZ + ":F" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }


                                                                worksheet.Cells[_endRowDetailZ + 1, 4].Style.Numberformat.Format = "#,##0";
                                                                worksheet.Cells[_endRowDetailZ + 1, 4].Formula = "SUM(C" + _startRowDetailZ + ":D" + _endRowDetailZ + ")";
                                                                worksheet.Cells[_endRowDetailZ + 1, 4].Calculate();
                                                                worksheet.Cells[_endRowDetailZ + 1, 4].Style.Font.Bold = true;



                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Numberformat.Format = "#,##0.00";
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Numberformat.Format = "#,##0.000000";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Formula = "SUM(E" + _startRowDetailZ + ":E" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Style.Font.Bold = true;
                                                                }


                                                                incRowExcel++;
                                                            }


                                                            //string _rangeA1 = "A:M" + incRowExcel;
                                                            //using (ExcelRange r = worksheet.Cells[_rangeA1]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                            //{
                                                            //    r.Style.Font.Size = 22;
                                                            //}
                                                        }

                                                    }
                                                }
                                            }
                                        }


                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        string _rangeA = "A:M" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 28;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 2;
                                        worksheet.Column(4).Width = 100;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 60;
                                        worksheet.Column(7).Width = 35;
                                        worksheet.Column(8).Width = 30;
                                        worksheet.Column(9).Width = 2;
                                        worksheet.Column(10).Width = 50;
                                        worksheet.Column(11).Width = 35;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 30;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report \n &28&B Subscription & Redemption";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Net Sales Report
            if (_unitRegistryRpt.ReportName.Equals("Net Sales Report"))
            {
                int incrow = 0;
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText =

                                @"
                               
SELECT A.AMC,A.FundCode,A.FundName,A.FundCCY,SUM(ISNULL(A.RetailSubs,0)) RetailSubs
,SUM(ISNULL(A.RetailRed,0)) RetailRed ,SUM(ISNULL(A.RetailNetSales,0)) RetailNetSales 
,SUM(ISNULL(A.InsSubs,0)) InsSubs ,SUM(ISNULL(A.InsRed,0)) InsRed
,SUM(ISNULL(A.InsNetSales,0)) InsNetSales
,SUM(ISNULL(A.RetailNetSales,0)) + SUM(ISNULL(A.InsNetSales,0)) TotalNetSales
FROM
(
SELECT 'RHBAMI' AMC 
,ISNULL(B.ID,'') FundCode
,ISNULL(B.Name,'') FundName
,ISNULL(C.ID,'') FundCCY
,SUM(ISNULL(A.CashAmount,0)) RetailNetSales
,0 InsNetSales
,SUM(ISNULL(A.CashAmount,0)) RetailSubs
,0 InsSubs
,0 RetailRed
,0 InsRed

FROM dbo.ClientSubscription A 
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND E.ID = 'RT'
GROUP BY B.ID,B.Name,C.ID

UNION ALL

SELECT 'RHBAMI' AMC 
,ISNULL(B.ID,'') FundCode
,ISNULL(B.Name,'') FundName
,ISNULL(C.ID,'') FundCCY
,0 RetailNetSales
,SUM(ISNULL(A.CashAmount,0))  InsNetSales
,0 RetailSubs
,SUM(ISNULL(A.CashAmount,0)) InsSubs
,0 RetailRed
,0 InsRed
FROM dbo.ClientSubscription A 
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND E.ID = 'IN'
GROUP BY B.ID,B.Name,C.ID

UNION ALL

SELECT 'RHBAMI' AMC 
,ISNULL(B.ID,'') FundCode
,ISNULL(B.Name,'') FundName
,ISNULL(C.ID,'') FundCCY
,SUM(ISNULL(A.CashAmount,0)) * -1 RetailNetSales
,0 InsNetSales
,0 RetailSubs
,0 InsSubs
,SUM(ISNULL(A.CashAmount,0)) * -1 RetailRed
,0 InsRed
FROM dbo.ClientRedemption A 
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND E.ID = 'RT'
GROUP BY B.ID,B.Name,C.ID


UNION ALL

SELECT 'RHBAMI' AMC 
,ISNULL(B.ID,'') FundCode
,ISNULL(B.Name,'') FundName
,ISNULL(C.ID,'') FundCCY
,0 RetailNetSales
,SUM(ISNULL(A.CashAmount,0)) * -1 InsNetSales
,0 RetailSubs
,0 InsSubs
,0 RetailRed
,SUM(ISNULL(A.CashAmount,0)) * -1 InsRed
FROM dbo.ClientRedemption A 
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND E.ID = 'IN'
GROUP BY B.ID,B.Name,C.ID

UNION ALL

SELECT 'RHBAMI' AMC 
,ISNULL(B.ID,'') FundCode
,ISNULL(B.Name,'') FundName
,ISNULL(C.ID,'') FundCCY
,SUM(ISNULL(A.cashamount,0)) * -1 RetailNetSales
,0 InsNetSales
,0 RetailSubs
,0 InsSubs
,SUM(ISNULL(A.cashamount,0)) * -1 RetailRed
,0 InsRed
FROM dbo.ClientSwitching A 
LEFT JOIN Fund B ON A.FundPKFrom = B.FundPK AND B.status IN (1,2)
LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND E.ID = 'RT'
GROUP BY B.ID,B.Name,C.ID

UNION ALL

SELECT 'RHBAMI' AMC 
,ISNULL(B.ID,'') FundCode
,ISNULL(B.Name,'') FundName
,ISNULL(C.ID,'') FundCCY
,0 RetailNetSales
,SUM(ISNULL(A.TotalCashAmountFundFrom,0)) * -1 InsNetSales
,0 RetailSubs
,0 InsSubs
,0 RetailRed
,SUM(ISNULL(A.TotalCashAmountFundFrom,0)) * -1 InsRed
FROM dbo.ClientSwitching A 
LEFT JOIN Fund B ON A.FundPKFrom = B.FundPK AND B.status IN (1,2)
LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND E.ID = 'IN'
GROUP BY B.ID,B.Name,C.ID

UNION ALL

SELECT 'RHBAMI' AMC 
,ISNULL(B.ID,'') FundCode
,ISNULL(B.Name,'') FundName
,ISNULL(C.ID,'') FundCCY
,SUM(ISNULL(A.TotalCashAmountFundTo,0))  RetailNetSales
,0 InsNetSales
,SUM(ISNULL(A.TotalCashAmountFundTo,0)) RetailSubs
,0 InsSubs
,0 RetailRed
,0 InsRed
FROM dbo.ClientSwitching A 
LEFT JOIN Fund B ON A.FundPKTo = B.FundPK AND B.status IN (1,2)
LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND E.ID = 'RT'
GROUP BY B.ID,B.Name,C.ID



UNION ALL

SELECT 'RHBAMI' AMC 
,ISNULL(B.ID,'') FundCode
,ISNULL(B.Name,'') FundName
,ISNULL(C.ID,'') FundCCY
,0 RetailNetSales
,SUM(ISNULL(A.TotalCashAmountFundTo,0))  InsNetSales
,0 RetailSubs
,SUM(ISNULL(A.TotalCashAmountFundTo,0)) InsSubs
,0 RetailRed
,0
FROM dbo.ClientSwitching A 
LEFT JOIN Fund B ON A.FundPKTo = B.FundPK AND B.status IN (1,2)
LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
AND E.ID = 'IN'
GROUP BY B.ID,B.Name,C.ID
)A GROUP BY
A.AMC,A.FundCode,A.FundName,A.FundCCY
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NetSalesReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NetSalesReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Net Sales Report");

                                        int incRowExcel = 3;

                                        worksheet.Cells[incRowExcel, 2].Value = "Date From";
                                        worksheet.Cells[incRowExcel, 3].Value = _unitRegistryRpt.ValueDateFrom;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Value = "Date To";
                                        worksheet.Cells[incRowExcel, 3].Value = _unitRegistryRpt.ValueDateTo;
                                        incRowExcel++;
                                        incrow = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 5].Value = "Retail";
                                        worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Style.Border.BorderAround(ExcelBorderStyle.Medium);

                                        worksheet.Cells[incRowExcel, 8].Value = "Instituion";
                                        worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Style.Border.BorderAround(ExcelBorderStyle.Medium);

                                        worksheet.Cells[incRowExcel, 11].Value = "Total Net Sales";
                                        worksheet.Cells["K" + incRowExcel + ":K" + incrow].Merge = true;
                                        worksheet.Cells["K" + incRowExcel + ":K" + incrow].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 1].Value = "RHBAMI";
                                        //incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "AMC";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Code";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 3].Value = "Fund Name";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 4].Value = "Fund CCY";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Medium);

                                        worksheet.Cells[incRowExcel, 5].Value = "Subs";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "Rdm";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "Net Sales";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 8].Value = "Subs";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "Rdm";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "Net Sales";
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        //worksheet.Cells[incRowExcel, 8].Value = "REDEMPTION";
                                        //worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;

                                        while (dr0.Read())
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = Convert.ToString(dr0["AMC"]);
                                            worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToString(dr0["FundCode"]);
                                            worksheet.Cells[incRowExcel, 2].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToString(dr0["FundName"]);
                                            worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToString(dr0["FundCCY"]);
                                            worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDecimal(dr0["RetailSubs"]);
                                            worksheet.Cells[incRowExcel, 5].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Value = Convert.ToDecimal(dr0["RetailRed"]);
                                            worksheet.Cells[incRowExcel, 6].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDecimal(dr0["RetailNetSales"]);
                                            worksheet.Cells[incRowExcel, 7].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 8].Value = Convert.ToDecimal(dr0["InsSubs"]);
                                            worksheet.Cells[incRowExcel, 8].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Value = Convert.ToDecimal(dr0["InsRed"]);
                                            worksheet.Cells[incRowExcel, 9].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Value = Convert.ToDecimal(dr0["InsNetSales"]);
                                            worksheet.Cells[incRowExcel, 10].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 11].Value = Convert.ToDecimal(dr0["TotalNetSales"]);
                                            worksheet.Cells[incRowExcel, 11].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                            incRowExcel++;

                                        }


                                        //int _lastRow = incRowExcel;
                                        //worksheet.Cells["A2" + ":H" + _lastRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["A2" + ":H" + _lastRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["A2" + ":H" + _lastRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["A2" + ":H" + _lastRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //string _rangeA = "A:H" + incRowExcel;
                                        //using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        //{
                                        //    r.Style.Font.Size = 12;
                                        //}

                                        //worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 50;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n\n\n\n\n &30&B Net Sales Report";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Cash Projection
            else if (_unitRegistryRpt.ReportName.Equals("Cash Projection"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = " And FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            cmd.CommandText = @"  
                            
--DECLARE @DateFrom DATETIME
--DECLARE @DateTo DATETIME

--SET @DateFrom = '01/01/19'
--SET @DateTo = '01/10/19'



IF EXISTS (SELECT * 
FROM INFORMATION_SCHEMA.TABLES 
WHERE TABLE_SCHEMA = 'dbo' 
AND  TABLE_NAME = 'ZREPORT_CASHPROJECTION_08')
BEGIN
DROP TABLE ZREPORT_CASHPROJECTION_08
END



DECLARE @CounterDate DATETIME
Declare @CloseNAV numeric(18,4)

DECLARE @result TABLE
(
	Date DATETIME,
	Amount NUMERIC(22,4),
	CashProjection NVARCHAR(200),
	FundPK int
)

DECLARE @CFundPK int

Declare A Cursor For
	SELECT FundPK FROM Fund
	WHERE status = 2 " + _paramFundFrom + @"
	-- PARAM FUND TARO DISINI 
	--AND FundPK IN (22)
Open A
Fetch Next From A
INTO @CFundPK

While @@FETCH_STATUS = 0  
Begin
	Set @CloseNAV = 0
	SET @CounterDate = @DateFrom


	Select @CloseNAV = NAV from CloseNAV where FundPK = @CFundPK and status = 2
	and Date = (
		select Max(date) From CloseNAV where fundPK = @CFundPK and status = 2
	)

	set @CloseNAV = isnull(@CloseNAV,0)

	WHILE @CounterDate <= @DateTo
	BEGIN
	
	IF EXISTS(
		SELECT  @CounterDate,ISNULL(SUM(ISNULL(A.CashAmount,0)),0) Amount, 'Subscription' CashProjection 
		,@CFundPK
		FROM dbo.ClientSubscription A
		LEFT JOIN dbo.ZDT_WorkingDays B ON B.Date = @CounterDate
		WHERE  A.status = 2
		AND A.NAVDate = B.DTM1 AND FundPK = @CFundPK
	)
	BEGIN
		INSERT INTO @result
	        ( Date, Amount, CashProjection, FundPk )
		SELECT  @CounterDate,ISNULL(SUM(ISNULL(A.CashAmount,0)),0) Amount, '1.Subscription' CashProjection 
		,@CFundPK
		FROM dbo.ClientSubscription A
		LEFT JOIN dbo.ZDT_WorkingDays B ON B.Date = @CounterDate
		WHERE  A.status = 2
		AND A.NAVDate = B.DTM1 AND FundPK = @CFundPK
	END
	ELSE
	BEGIN
		INSERT INTO @result
		        ( Date ,
		          Amount ,
		          CashProjection ,
		          FundPK
		        )
		VALUES  ( @CounterDate , -- Date - datetime
		          0 , -- Amount - numeric
		          N'1.Subscription' , -- CashProjection - nvarchar(200)
		          @CFundPK  -- FundPK - int
		        )
	END


	IF EXISTS(
		SELECT @CounterDate,ISNULL(SUM(ISNULL(CashAmount,0)),0) * -1 Amount,'2.Redemption' CashProjection 
		,@CFundPK
		FROM dbo.ClientRedemption A WHERE  status = 2
		AND PaymentDate = @CounterDate
		AND FundPK = @CFundPK
	)
	BEGIN
		INSERT INTO @result
	        ( Date, Amount, CashProjection, FundPk )
		SELECT @CounterDate,
		
		ISNULL(SUM(ISNULL(
			CASE WHEN CashAmount = 0 AND A.UnitAmount > 0 AND ISNULL(A.NAV,0) = 0 THEN A.UnitAmount * @CloseNAV ELSE A.CashAmount END
			,0)),0) * -1 Amount
		
		,'2.Redemption' CashProjection 
		,@CFundPK
		FROM dbo.ClientRedemption A 
		LEFT JOIN dbo.ZDT_WorkingDays B ON A.NAVDate = B.Date
		WHERE  A.status = 2
		AND A.PaymentDate = @CounterDate
		AND A.FundPK = @CFundPK
	END
	ELSE
	BEGIN
		INSERT INTO @result
		        ( Date ,
		          Amount ,
		          CashProjection ,
		          FundPK
		        )
		VALUES  ( @CounterDate, -- Date - datetime
		          0 , -- Amount - numeric
		          N'2.Redemption' , -- CashProjection - nvarchar(200)
		          @CFundPK  -- FundPK - int
		        )
	END

	
	IF EXISTS(
		SELECT @CounterDate,ISNULL(SUM(ISNULL(A.TotalCashAmountFundTo,0)),0) Amount, 'Switch In' CashProjection 
		,@CFundPK
		FROM dbo.ClientSwitching A
		LEFT JOIN dbo.ZDT_WorkingDays B ON B.Date = @CounterDate
		WHERE  A.Status = 2
		AND A.NAVDate = B.DTM1 AND FundPKTo = @CFundPK
	)
	BEGIN
		INSERT INTO @result
		        ( Date ,
		          Amount ,
		          CashProjection ,
		          FundPK
		        )
		SELECT @CounterDate,
		
			ISNULL(SUM(ISNULL(
			CASE WHEN  A.TotalCashAmountFundTo =  0 AND A.UnitAmount > 0 AND ISNULL(A.NAVFundFrom,0) = 0  THEN
				A.UnitAmount * @CloseNAV ELSE A.TotalCashAmountFundTo END
			,0)),0) Amount
		
		, '3.Switch In' CashProjection 
		,@CFundPK
		FROM dbo.ClientSwitching A
		LEFT JOIN dbo.ZDT_WorkingDays B ON B.Date = @CounterDate
		LEFT JOIN dbo.ZDT_WorkingDays C ON A.NAVDate = C.Date
	
		WHERE  A.Status = 2
		AND A.NAVDate = B.DTM1 AND FundPKTo = @CFundPK
	END
	ELSE
	BEGIN
		INSERT INTO @result
		        ( Date ,
		          Amount ,
		          CashProjection ,
		          FundPK
		        )
		VALUES  ( @CounterDate, -- Date - datetime
		          0 , -- Amount - numeric
		          N'3.Switch In' , -- CashProjection - nvarchar(200)
		          @CFundPK  -- FundPK - int
		        )
	END

	IF EXISTS(
		SELECT @CounterDate,
		
		ISNULL(SUM(ISNULL(
			CASE WHEN  A.TotalCashAmountFundFrom =  0 AND A.UnitAmount > 0 AND ISNULL(A.NAVFundFrom,0) = 0  THEN
				A.UnitAmount * @CloseNAV ELSE A.TotalCashAmountFundFrom END
			,0)),0) Amount
		
		, 'Switch Out' CashProjection 
		,@CFundPK
		FROM dbo.ClientSwitching A
		LEFT JOIN dbo.ZDT_WorkingDays B ON A.NAVDate = B.Date
		WHERE  A.Status = 2 AND A.PaymentDate = @CounterDate
		AND A.FundPKFrom = @CFundPK
	)
	BEGIN
		INSERT INTO @result
		        ( Date ,
		          Amount ,
		          CashProjection ,
		          FundPK
		        )
		SELECT @CounterDate,
		
			ISNULL(SUM(ISNULL(
			CASE WHEN  A.TotalCashAmountFundFrom =  0 AND A.UnitAmount > 0 AND ISNULL(A.NAVFundFrom,0) = 0  THEN
				A.UnitAmount * @CloseNAV ELSE A.TotalCashAmountFundFrom END
			,0)),0) Amount
		
		, 'Switch Out' CashProjection 
		,@CFundPK
		FROM dbo.ClientSwitching A
		WHERE  A.Status = 2 AND A.PaymentDate = @CounterDate
		AND A.FundPKFrom = @CFundPK
	END
	ELSE
	BEGIN
	INSERT INTO @result
		        ( Date ,
		          Amount ,
		          CashProjection ,
		          FundPK
		        )
		VALUES  ( @CounterDate, -- Date - datetime
		          0 , -- Amount - numeric
		          N'4.Switch Out' , -- CashProjection - nvarchar(200)
		          @CFundPK  -- FundPK - int
		        )
	END


	SELECT @CounterDate = DT1 FROM dbo.ZDT_WorkingDays
	WHERE Date = @CounterDate 
	
	END

	
	FETCH Next From A 
	INTO @CFundPK
End	
Close A
Deallocate A


SELECT * INTO ZREPORT_CASHPROJECTION_08 
FROM @result


DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
@query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(FORMAT(Date,'dd MMM yy')) +',0) ' + QUOTENAME(FORMAT(Date,'dd MMM yy')) 
            from (SELECT DISTINCT Date FROM @result) A
			order by A.Date
    FOR XML PATH(''), TYPE
    ).value('.', 'NVARCHAR(MAX)') 
,1,1,'')

select @cols = STUFF((SELECT distinct ',' + QUOTENAME(FORMAT(Date,'dd MMM yy')) 
            from @result
				
    FOR XML PATH(''), TYPE
    ).value('.', 'NVARCHAR(MAX)') 
,1,1,'')


set @query = 'SELECT FundID,CashProjection,' + @colsForQuery + ' from 
                (
                SELECT Amount,CashProjection,B.Name FundID,Date FROM ZREPORT_CASHPROJECTION_08 A
				left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
				) x
				pivot 
				(
					SUM(Amount)
					for Date in (' + @cols + ')
				) p 
				order by FundID,CashProjection
			'
EXEC(@Query)	

                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string pdfPath = Tools.ReportsPath + "CashProjection" + "_" + _userID + ".pdf";
                                    string filePath = Tools.ReportsPath + "CashProjection" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }



                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CashProjection";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Cash Projection");

                                        int incRowExcel;
                                        int _endRow = 0;
                                        int _endRowZ = 0;
                                        int incColExcel = 1;
                                        incRowExcel = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _rowCtrp = 0;
                                        int _endRowDetail = 0;
                                        int _endColDetail = 0;


                                        int incRowExcelH = 4;
                                        worksheet.Cells["A" + incRowExcelH + ":C" + incRowExcelH].Merge = true;
                                        worksheet.Cells[incRowExcelH, 1].Value = "PT RHB Asset Management Indonesia";
                                        worksheet.Cells[incRowExcelH, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcelH, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcelH++;
                                        worksheet.Cells["A" + incRowExcelH + ":C" + incRowExcelH].Merge = true;
                                        worksheet.Cells[incRowExcelH, 1].Value = "Wisma Mulia Building, 19th Floor";
                                        worksheet.Cells[incRowExcelH, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcelH++;
                                        worksheet.Cells["A" + incRowExcelH + ":C" + incRowExcelH].Merge = true;
                                        worksheet.Cells[incRowExcelH, 1].Value = "Jl. Jend. Gatot Subroto No.42, Jakarta, 12710";
                                        worksheet.Cells[incRowExcelH, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcelH++;
                                        worksheet.Cells["A" + incRowExcelH + ":C" + incRowExcelH].Merge = true;
                                        worksheet.Cells[incRowExcelH, 1].Value = "Phone No. (6221) 2783 0889";
                                        worksheet.Cells[incRowExcelH, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcelH++;
                                        worksheet.Cells["A" + incRowExcelH + ":C" + incRowExcelH].Merge = true;
                                        worksheet.Cells[incRowExcelH, 1].Value = "Fax No. (6221) 2970 7333";
                                        worksheet.Cells[incRowExcelH, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        incRowExcel = incColExcel + 10;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date From : ";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To : ";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Value = _unitRegistryRpt.FundText;
                                        //incRowExcel++;


                                        // ini buat header
                                        incRowExcel++;
                                        for (int inc1 = 1; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetName(inc1).ToString();
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                            worksheet.Column(incColExcel).Width = 16;
                                            incColExcel++;
                                        }
                                        incRowExcel++;
                                        while (dr0.Read())
                                        {
                                            incColExcel = 1;

                                            for (int inc1 = 1; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                _rowCtrp = incColExcel;
                                                //_endRow = dr0.FieldCount + 2;
                                                //_endRowZ = dr0.FieldCount + 1;
                                                if (incColExcel == 1)
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                    //worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                    worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                                }

                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Column(incRowExcel).Width = 16;
                                                incColExcel++;

                                            }

                                            //if (_rowCtrp > 2)
                                            //{
                                            //    worksheet.Cells[_endRow, _rowCtrp].Formula = "SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + incColExcel + ")";
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Font.Bold = true;
                                            //    worksheet.Cells[_endRow, _rowCtrp].Style.Numberformat.Format = "#,##0";
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //    //worksheet.Cells[16, _rowCtrp].Formula = "SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + "14) * 100 /" + _totalAmount;
                                            //    worksheet.Cells[_endRow, incColExcel].Style.Font.Bold = true;
                                            //    worksheet.Cells[_endRow, _rowCtrp].Style.Numberformat.Format = "#,##0.00";
                                            //}

                                            //worksheet.Cells[4, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells[4, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells[4, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells[4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            _endColDetail = incColExcel - 1;
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells[15, incColExcel].Value = "TOTAL";
                                            worksheet.Cells[15, incColExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(B" + incRowExcel + ":" + _host.GetAlphabet(_endColDetail) + incRowExcel + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                            worksheet.Column(incColExcel).Width = 16;


                                            worksheet.Cells[15, incColExcel].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[15, incColExcel].Value = _totalAmount;
                                            worksheet.Cells[15, incColExcel].Style.Numberformat.Format = "#,##0";
                                            incRowExcel++;
                                        }

                                        incRowExcel = incRowExcel + 2;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Summary Transaction
            else if (_unitRegistryRpt.ReportName.Equals("Summary Transaction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = " And FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            cmd.CommandText = @"  declare @TotalUnitTransacted numeric (22,2)
                            declare @TotalValue numeric (22,2)
                            declare @TxnFrequency int
                            declare @TotalTransactionunitRetail numeric (22,2)
                            declare @TotalvalueRetail numeric (22,2)
                            declare @TxnFrequencyRetail int
                            declare @TotalTransactionunitIns numeric (22,2)
                            declare @TotalvalueIns numeric (22,2)
                            declare @TxnFrequencyIns int

                            declare @table table
                            (
	                            Type nvarchar(20),
	                            TotalUnitTransacted numeric (22,2),
	                            TotalValue numeric (22,2),
	                            TxnFrequency int,
	                            TotalTransactionunitRetail numeric (22,2),
	                            TotalvalueRetail numeric (22,2),
	                            TxnFrequencyRetail int,
	                            TotalTransactionunitIns numeric (22,2),
	                            TotalvalueIns numeric (22,2),
	                            TxnFrequencyIns int
                            )

                            -- subs retail
                            SELECT @TotalTransactionunitRetail = isnull(SUM(isnull(A.TotalUnitAmount,0)),0),
                                   @TotalvalueRetail = isnull(SUM(ISNULL(A.TotalCashAmount,0)),0),
	                               @TxnFrequencyRetail = Count(*)
                            FROM dbo.ClientSubscription A 
                            LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
                            LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
                            LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
                            WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND E.ID = 'RT'

                            -- sub institusi
                            SELECT @TotalTransactionunitIns = isnull(SUM(isnull(A.TotalUnitAmount,0)),0),
                                   @TotalvalueIns = isnull(SUM(ISNULL(A.TotalCashAmount,0)),0),
	                               @TxnFrequencyIns = Count(*)
                            FROM dbo.ClientSubscription A 
                            LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
                            LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
                            LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
                            WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND E.ID = 'IN'

                            insert into @table(Type,TotalUnitTransacted,TotalValue,TxnFrequency,TotalTransactionunitRetail,TotalvalueRetail,TxnFrequencyRetail,TotalTransactionunitIns,TotalvalueIns,TxnFrequencyIns)
                            select 'SUBSCRIPTION' Type,(isnull(@TotalTransactionunitRetail,0) + isnull(@TotalTransactionunitIns,0)),(isnull(@TotalvalueRetail,0) + isnull(@TotalvalueIns,0)),
                            @TxnFrequencyRetail + @TxnFrequencyIns,@TotalTransactionunitRetail,@TotalvalueRetail,@TxnFrequencyRetail,@TotalTransactionunitIns,@TotalvalueIns,@TxnFrequencyIns

                            -- red retail
                            SELECT @TotalTransactionunitRetail = isnull(SUM(isnull(A.UnitAmount,0)),0),
                                   @TotalvalueRetail = isnull(SUM(ISNULL(A.CashAmount,0)),0),
	                               @TxnFrequencyRetail = Count(*)
                            FROM dbo.ClientRedemption A 
                            LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
                            LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
                            LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
                            WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND E.ID = 'RT'

                            -- red ins
                            SELECT @TotalTransactionunitIns = isnull(SUM(isnull(A.UnitAmount,0)),0),
                                   @TotalvalueIns = isnull(SUM(ISNULL(A.CashAmount,0)),0),
	                               @TxnFrequencyIns = Count(*)
                            FROM dbo.ClientRedemption A 
                            LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
                            LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
                            LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
                            WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND E.ID = 'IN'

                            insert into @table(Type,TotalUnitTransacted,TotalValue,TxnFrequency,TotalTransactionunitRetail,TotalvalueRetail,TxnFrequencyRetail,TotalTransactionunitIns,TotalvalueIns,TxnFrequencyIns)
                            select 'REDEMPTION' Type,(isnull(@TotalTransactionunitRetail,0) + isnull(@TotalTransactionunitIns,0)),(isnull(@TotalvalueRetail,0) + isnull(@TotalvalueIns,0)),
                            @TxnFrequencyRetail + @TxnFrequencyIns,@TotalTransactionunitRetail,@TotalvalueRetail,@TxnFrequencyRetail,@TotalTransactionunitIns,@TotalvalueIns,@TxnFrequencyIns


                            -- Switching IN retail
                            SELECT @TotalTransactionunitRetail = isnull(SUM(isnull(A.TotalUnitAmountFundTo,0)),0),
                                   @TotalvalueRetail = isnull(SUM(ISNULL(A.TotalCashAmountFundTo,0)),0),
	                               @TxnFrequencyRetail = Count(*)
                            FROM dbo.ClientSwitching A 
                            LEFT JOIN Fund B ON A.FundPKTo = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
                            LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
                            LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
                            WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND E.ID = 'RT'

                            -- Switching IN ins
                            SELECT @TotalTransactionunitIns = isnull(SUM(isnull(A.TotalUnitAmountFundTo,0)),0),
                                   @TotalvalueIns = isnull(SUM(ISNULL(A.TotalCashAmountFundTo,0)),0),
	                               @TxnFrequencyIns = Count(*)
                            FROM dbo.ClientSwitching A 
                            LEFT JOIN Fund B ON A.FundPKTo = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
                            LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
                            LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
                            WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND E.ID = 'IN'

                            insert into @table(Type,TotalUnitTransacted,TotalValue,TxnFrequency,TotalTransactionunitRetail,TotalvalueRetail,TxnFrequencyRetail,TotalTransactionunitIns,TotalvalueIns,TxnFrequencyIns)
                            select 'SWITCH-IN' Type,(isnull(@TotalTransactionunitRetail,0) + isnull(@TotalTransactionunitIns,0)),(isnull(@TotalvalueRetail,0) + isnull(@TotalvalueIns,0)),
                            @TxnFrequencyRetail + @TxnFrequencyIns,@TotalTransactionunitRetail,@TotalvalueRetail,@TxnFrequencyRetail,@TotalTransactionunitIns,@TotalvalueIns,@TxnFrequencyIns


                            -- Switching out retail
                            SELECT @TotalTransactionunitRetail = isnull(SUM(isnull(A.UnitAmount,0)),0),
                                   @TotalvalueRetail = isnull(SUM(ISNULL(A.CashAmount,0)),0),
	                               @TxnFrequencyRetail = Count(*)
                            FROM dbo.ClientSwitching A 
                            LEFT JOIN Fund B ON A.FundPKFrom = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
                            LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
                            LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
                            WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND E.ID = 'RT'

                            -- Switching Out ins
                            SELECT @TotalTransactionunitIns = isnull(SUM(isnull(A.UnitAmount,0)),0),
                                   @TotalvalueIns = isnull(SUM(ISNULL(A.CashAmount,0)),0),
	                               @TxnFrequencyIns = Count(*)
                            FROM dbo.ClientSwitching A 
                            LEFT JOIN Fund B ON A.FundPKFrom = B.FundPK AND B.status IN (1,2)
                            LEFT JOIN Currency C ON B.CurrencyPK = C.CurrencyPK AND C.status IN (1,2)
                            LEFT JOIN dbo.FundClient D ON A.FundClientPK = D.FundClientPK AND D.status IN (1,2)
                            LEFT JOIN dbo.InternalCategory E ON D.InternalCategoryPK = E.InternalCategoryPK AND E.status IN (1,2)
                            WHERE A.Status = 2 AND A.Posted = 1 AND A.Revised = 0 AND A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND E.ID = 'IN'

                            insert into @table(Type,TotalUnitTransacted,TotalValue,TxnFrequency,TotalTransactionunitRetail,TotalvalueRetail,TxnFrequencyRetail,TotalTransactionunitIns,TotalvalueIns,TxnFrequencyIns)
                            select 'SWITCH-OUT' Type,(isnull(@TotalTransactionunitRetail,0) + isnull(@TotalTransactionunitIns,0)),(isnull(@TotalvalueRetail,0) + isnull(@TotalvalueIns,0)),
                            @TxnFrequencyRetail + @TxnFrequencyIns,@TotalTransactionunitRetail,@TotalvalueRetail,@TxnFrequencyRetail,@TotalTransactionunitIns,@TotalvalueIns,@TxnFrequencyIns

                            select * from @table
                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string pdfPath = Tools.ReportsPath + "SummaryTransaction" + "_" + _userID + ".pdf";
                                    string filePath = Tools.ReportsPath + "SummaryTransaction" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }



                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "Summary Transaction";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Summary Transaction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TrxVolumeAndValue> rList = new List<TrxVolumeAndValue>();
                                        while (dr0.Read())
                                        {
                                            TrxVolumeAndValue rSingle = new TrxVolumeAndValue();
                                            rSingle.Type = dr0["Type"].ToString();
                                            rSingle.TotalUnitTransacted = Convert.ToDecimal(dr0["TotalUnitTransacted"]);
                                            rSingle.TotalValue = Convert.ToDecimal(dr0["TotalValue"]);
                                            rSingle.TxnFrequency = Convert.ToDecimal(dr0["TxnFrequency"]);
                                            rSingle.TotalTransactionUnitRetail = Convert.ToDecimal(dr0["TotalTransactionUnitRetail"]);
                                            rSingle.TotalvalueRetail = Convert.ToDecimal(dr0["TotalvalueRetail"]);
                                            rSingle.TxnFrequencyRetail = Convert.ToDecimal(dr0["TxnFrequencyRetail"]);
                                            rSingle.TotalTransactionUnitIns = Convert.ToDecimal(dr0["TotalTransactionUnitIns"]);
                                            rSingle.TotalvalueIns = Convert.ToDecimal(dr0["TotalvalueIns"]);
                                            rSingle.TxnFrequencyIns = Convert.ToDecimal(dr0["TxnFrequencyIns"]);
                                            rList.Add(rSingle);
                                        }


                                        var QueryByFundID =
                                                from r in rList
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "PT RHB Asset Management Indonesia";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Summary Transaction Report";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "(by Unit-Vale-Freq)";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date From";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date To";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            incRowExcel++;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A7:A8"].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Total";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Retail";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Institusi";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Total Unit Transacted";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Total Value (IDR)";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Txn Frequency";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Total Unit Transacted (Unit) Retail";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Total Value (IDR) Retail";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Txn Frequency Retail";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Total Unit Transacted (Unit) Institusi";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Total Value (IDR) Institusi";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Txn Frequency Institusi";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 2;


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Type;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.TotalUnitTransacted;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TotalValue;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TxnFrequency;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TotalTransactionUnitRetail;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.TotalvalueRetail;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.TxnFrequencyRetail;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.TotalTransactionUnitIns;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TotalvalueIns;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.TxnFrequencyIns;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                incRowExcel++;

                                            }
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B10-B11+B12-B13)";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C10-C11+C12-C13)";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D10+D11+D12+D13)";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E10-E11+E12-E13)";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F10-F11+F12-F13)";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G10+G11+G12+G13)";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H10-H11+H12-H13)";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I10-I11+I12-I13)";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J10+J11+J12+J13)";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        }

                                        worksheet.Cells["A7:J7"].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B8:J8"].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A9:J9"].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A16:J16"].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A16:J16"].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["A7:A16"].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A7:A16"].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D7:D16"].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G7:G16"].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["J7:J16"].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 18;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 13;
                                        worksheet.Column(5).Width = 23;
                                        worksheet.Column(6).Width = 18;
                                        worksheet.Column(7).Width = 13;
                                        worksheet.Column(8).Width = 23;
                                        worksheet.Column(9).Width = 18;
                                        worksheet.Column(10).Width = 13;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Historical Transaction
            else if (_unitRegistryRpt.ReportName.Equals("Historical Transaction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundZ = "";
                            string _paramFundClient = "";
                            string _paramFundClientZ = "";
                            string _paramZeroBalance = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundZ = "And Z.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundZ = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClientZ = "And Z.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClientZ = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitchOut = "  A.Status = 1  ";
                                _statusSwitchIn = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitchOut = "  A.Status = 3  ";
                                _statusSwitchIn = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchOut = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchIn = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchOut = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusSwitchIn = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            if (_unitRegistryRpt.ZeroBalance == true)
                            {
                                _paramZeroBalance = "  B.UnitBalance >= 0 ";
                            }
                            else
                            {
                                _paramZeroBalance = "  B.UnitBalance > 0 ";
                            }
                            cmd.CommandText =
                           @"
                         
DECLARE @DateFromMinOne DATETIME

SET @DateFromMinOne = dbo.FWorkingDay(@ValueDateFrom,-1)

DECLARE @MaxDate datetime

select @MaxDate = Date from FundClientPosition where Date = (
	SELECT MAX(date) from FundClientPosition where Date <= @ValueDateTo
)

----------AREA GET NAV-----------------

DECLARE @NAV TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(18,4)
)


DECLARE @NAVLastDate TABLE
(
	FundPK INT,
	LastDate datetime
)

INSERT INTO @NAVLastDate
        ( FundPK, LastDate )

SELECT FundPK,MAX(Date) FROM CloseNAV WHERE status  = 2 AND Date <= @ValueDateTo
GROUP BY FundPK


INSERT INTO @NAV
        ( LastDate, FundPK, NAV )
SELECT A.LastDate,A.FundPK,B.Nav FROM @NAVLastDate A
LEFT JOIN dbo.CloseNAV B ON A.FundPK = B.FundPK AND A.LastDate = B.Date AND B.status = 2
WHERE B.Date IN(
	SELECT DISTINCT lastDate FROM @NAVLastDate
)


----------AREA GET NAV-----------------



CREATE table #FirstSubs 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstSubs ON #FirstSubs (FundPK,FundClientPK);


INSERT INTO #FirstSubs
        ( FundPK, FundClientPK, ValueDate )

select FundPK,FundClientPK,MIN(ValueDate) from (
select FundPK,FundClientPK,MIN(ValueDate) ValueDate from ClientSubscription A where status = 2 AND posted = 1 and Revised = 0  " + _paramFundClient + @"
GROUP BY FundClientPK,FundPK
union all
select FundPKTo,FundClientPK,MIN(ValueDate) ValueDate from ClientSwitching A where status = 2 AND posted = 1 and Revised = 0 " + _paramFundClient + @"
GROUP BY FundClientPK,FundPKTo
) A
GROUP BY FundClientPK,FundPK


CREATE table #FirstPosition 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstPosition ON #FirstPosition (FundPK,FundClientPK);

insert into #FirstPosition
	 ( FundPK, FundClientPK, ValueDate )

SELECT FundPk,FundClientPK,MIN(Date) FROM dbo.FundClientPosition A
WHERE A.UnitAmount > 0 " + _paramFundClient + @"
 GROUP BY FundClientPK,FundPK


 
CREATE Table #FirstPositionResult 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstPositionResult ON #FirstPositionResult (FundPK,FundClientPK);

INSERT INTO #FirstPositionResult
        ( FundPK ,
          FundClientPK ,
          ValueDate 
        )
SELECT  A.FundPK,A.FundClientPk,A.ValueDate FROM #FirstPosition A
LEFT JOIN #FirstSubs B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
WHERE B.FundPK IS NULL OR A.ValueDate < B.ValueDate



CREATE table #FCPUnit 
(
	FundPK INT,
	FundClientPK INT,
	UnitAmount NUMERIC(22,4),
	Date DATETIME
)

CREATE CLUSTERED INDEX indx_FCPUnit ON #FCPUnit (FundPK,FundClientPK);

INSERT INTO #FCPUnit
        ( FundPK, FundClientPK, UnitAmount ,Date)
SELECT FundPK,FundClientPK,UnitAmount,Date FROM dbo.FundClientPosition A WHERE Date IN(
	SELECT DISTINCT ValueDate FROM #FirstPositionResult
) " + _paramFundClient + @"

CREATE table #Result 
(
	FundPK INT,
	FundClientPK INT,
	UnitAmount NUMERIC(22,4),
	Date DATETIME
)

CREATE CLUSTERED INDEX indx_Result ON #Result (FundPK,FundClientPK);

INSERT INTO #Result
        ( FundPK ,
          FundClientPK ,
          UnitAmount ,
          Date
        )

SELECT A.FundPK,A.FundClientPK,B.UnitAmount,A.ValueDate FROM #FirstPositionResult A
LEFT JOIN #FCPUnit B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK AND A.ValueDate = B.Date
ORDER BY A.FundClientPK ASC



	CREATE TABLE #listFundAndClient 
    (
		FundPK INT,
		FundClientPK INT
	)

	CREATE CLUSTERED INDEX indx_listFundAndClient ON #listFundAndClient (FundPK,FundClientPK);

	INSERT INTO #listFundAndClient
Select distinct A.* From (
	    SELECT F.FUndPK,FC.FundClientPK
	    from ClientSubscription A 
	    left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)  
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
	    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2) 
	    where 
	    " + _statusSubs + _paramFund + _paramFundClient + @" and 
	  
	    valuedate Between @ValueDateFrom and @ValueDateTo 
	    UNION ALL   
	    Select F.FundPK,FC.FundClientPK
	    from ClientRedemption A 
	    left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)    
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
	    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
	    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	    where 
	    " + _statusRedemp + _paramFund + _paramFundClient + @" and 
	
	    valuedate Between @ValueDateFrom and @ValueDateTo 
	    UNION ALL   

	    Select F.FundPK,FC.FundClientPK
	    from ClientSwitching A 
	    left join Fund F on A.FundPKTo = F.fundPK and f.Status in (1,2)    
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
	    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	    where 
	    " + _statusSwitchOut + _paramFund + _paramFundClient + @" and
	    valuedate Between @ValueDateFrom and @ValueDateTo 
	    UNION ALL   
	    Select F.FundPK,FC.FundClientPK
	    from ClientSwitching A 
	    left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2)    
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
	    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	    where 
	    " + _statusSwitchIn + _paramFund + _paramFundClient + @"  and
	    valuedate Between @ValueDateFrom and @ValueDateTo 
) A

CREATE table #tempBegBalance 
(
	FundPK INT,
	FundClientPK INT,
	BegBalance NUMERIC(22,4)
)

CREATE CLUSTERED INDEX indx_tempBegBalance ON #tempBegBalance (FundPK,FundClientPK);

INSERT INTO #tempBegBalance
SELECT A.FundPK,A.FundClientPK
,Case when C.ValueDate < B.Date then 0 ELSE   CASE WHEN ISNULL(B.Date,'') <> '' 
	        THEN CASE WHEN @DateFromMinOne <= B.Date    THEN ISNULL(B.UnitAmount,0) 
		        ELSE ISNULL(D.UnitAmount,0) END ELSE ISNULL(D.UnitAmount,0) END END
FROM #listFundAndClient A
LEFT JOIN #Result B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
LEFT JOIN #FirstSubs C ON A.FundPK = C.FundPK AND A.FundClientPK = C.FundClientPK
left join FundClientPosition D on A.FundPK = D.FundPK and A.FundClientPK = D.FundClientPK and D.date = @DateFromMinOne




CREATE TABLE #Temp 
(
	FundPK INT,
	FundClientPK INT,
	Balance NUMERIC(26,4),
	UnRealized NUMERIC(26,4),
	NAV NUMERIC(18,8),
	AvgNAV NUMERIC(24,12),
	UnitBalance NUMERIC(22,4)
)

CREATE CLUSTERED INDEX indx_temp ON #Temp (FundPK,FundClientPK);

INSERT INTO #Temp
        ( 
			FundPK,
			FundClientPK,
			Balance, 
	        UnRealized ,
	        NAV ,
	        AvgNAV,
	        UnitBalance 
        )
SELECT ISNULL(A.FundPK,0),ISNULL(A.FundClientPK,0)
,CAST( ISNULL(A.UnitAmount,0) * ISNULL(B.NAV,0) AS NUMERIC(26,4))
,CASE WHEN A.AvgNAV = 0 THEN 0 else CAST((ISNULL(B.NAV,0) - ISNULL(A.AvgNAV,0)) * ISNULL(A.UnitAmount,0) AS NUMERIC(26,4)) END
,ISNULL(B.NAV,0)
,CASE WHEN ISNULL(A.AvgNAV,0) > 0 Then CAST(ISNULL(A.AvgNAV,0) AS NUMERIC(22,8)) ELSE 0 END 
,CAST(ISNULL(A.UnitAmount,0) AS NUMERIC(22,4))
FROM dbo.FundClientPosition A 
LEFT JOIN @NAV B ON A.FundPK = B.FundPK 
WHERE A.date = @MaxDate
" + _paramFundClient + @"


SELECT 
A.FundPK,A.FundClientPK,A.SettlementDate,ISNULL(A.Remark,'') Remark
,ISNULL(A.FeeAmount,0) FeeAmount
,ISNULL(A.DepartmentName,'') DepartmentName
,ISNULL(A.AgentName,'') AgentName
,ISNULL(A.FundID,'') FundID
,ISNULL(A.FundName,'') FundName
,ISNULL(A.NAVDate,'') NAVDate
,ISNULL(A.Type,'') Type
,ISNULL(A.ClientID,'') ClientID
,ISNULL(A.ClientName,'') ClientName
,ISNULL(A.CashAmount,0) CashAmount
,ISNULL(A.TotalUnitAmount,0) UnitAmount
,ISNULL(A.NetAmount,0) NetAmount
,0 EndBalance
,ISNULL(B.Balance,0) Balance
,ISNULL(B.UnRealized,0) UnRealized
,ISNULL(A.NAV,0) NAV
,ISNULL(B.NAV,0) CurrentNAV
,ISNULL(B.AvgNAV,0) AvgNAV
,ISNULL(B.UnitBalance,0) UnitBalance
,ISNULL(A.FeePercent,0) FeePercent
,CASE WHEN  ISNULL(C.BegBalance,0) = 0 THEN ISNULL(D.UnitAmount,0) ELSE ISNULL(C.BegBalance,0)END BegBalance
FROM 
(
	SELECT F.FUndPK,FC.FundClientPK,A.NAVDate SettlementDate,A.Description Remark,A.SubscriptionFeeAmount FeeAmount,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
	,'Subscription' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, TotalUnitAmount ,A.Nav,TotalCashAmount NetAmount ,A.subscriptionFeePercent FeePercent
	from ClientSubscription A 
	left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)  
	left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
	left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2) 
	where 
	" + _statusSubs + _paramFund + _paramFundClient + @" and
	valuedate Between @ValueDateFrom and @ValueDateTo  
	UNION ALL   
	Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,A.RedemptionFeeAmount FeeAmount,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
	,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, A.UnitAmount TotalUnitAmount,A.Nav,TotalCashAmount NetAmount ,A.RedemptionFeePercent FeePercent
	from ClientRedemption A 
	left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)    
	left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
	left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
	left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	where 
	" + _statusRedemp + _paramFund + _paramFundClient + @"  and
	valuedate Between @ValueDateFrom and @ValueDateTo 
	UNION ALL   

	Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,
	CASE WHEN FeeType = 'IN' then A.SwitchingFeeAmount ELSE 0 END  FeeAmount
	,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
	,'Switching In' Type, Fc.ID ClientID,FC.Name ClientName, A.TotalCashAmountFundFrom CashAmount, A.TotalUnitAmountFundTo TotalUnitAmount,A.NAVFundTo Nav,A.TotalCashAmountFundTo NetAmount, 
	CASE WHEN FeeType = 'IN' then A.SwitchingFeePercent ELSE 0 END  FeePercent
	from ClientSwitching A 
	left join Fund F on A.FundPKTo = F.fundPK and f.Status in (1,2)    
	left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
	left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	where 
	" + _statusSwitchOut + _paramFund + _paramFundClient + @"  and
	valuedate Between @ValueDateFrom and @ValueDateTo 
	UNION ALL   
	Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,
	CASE WHEN FeeType = 'OUT' then A.SwitchingFeeAmount ELSE 0 END  FeeAmount
	,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
	,'Switching Out' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, A.UnitAmount TotalUnitAmount,A.NAVFundFrom Nav,A.TotalCashAmountFundFrom NetAmount 
	,CASE WHEN FeeType = 'OUT' then A.SwitchingFeePercent ELSE 0 END  FeePercent
	from ClientSwitching A 
	left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2)    
	left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
	left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	where 
	" + _statusSwitchIn + _paramFund + _paramFundClient + @"  and
	valuedate Between @ValueDateFrom and @ValueDateTo 

UNION ALL

SELECT A.FundPK,A.FundClientPK,'01/01/1900' SettlementDate,'' Remark, 0 FeeAmount,'' DepartmentName,'' AgentName 
	,ISNULL(F.ID,'') FundID,ISNULL(F.Name,'') FundName,'' NAVDate
	,' ' Type ,ISNULL(C.ID,'') ClientID, ISNULL(C.Name,'') ClientName,0 cashAmount, 0 UnitAmount,0 NAV
	,0 NetAmount
	,0 FeePercent
 	FROM dbo.FundClientPosition A 
	LEFT JOIN Fund F ON A.FundPK = F.FundPK AND F.status IN (1,2)
	LEFT JOIN FundClient C ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	WHERE date = 
	(
		SELECT MAX(Date) FROM dbo.FundClientPosition A WHERE Date < @ValueDateFrom
	) and  C.fundclientPK is not null " + _paramFund + _paramFundClient + @"  


) A LEFT JOIN #Temp B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
LEFT JOIN #tempBegBalance C ON A.FundPK = C.FundPK  AND A.FundClientPK = C.FundClientPK
LEFT JOIN dbo.FundClientPosition D ON A.fundPK = D.FundPK AND A.FundClientPK = D.FundClientPK AND D.date = @DateFromMinOne
WHERE   " + _paramZeroBalance + @" Order By A.NAVDate asc ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoricalTransaction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoricalTransaction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Historical Transaction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                            rSingle.SettlementDateForTrx = Convert.ToString(dr0["SettlementDate"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.DepartmentName = Convert.ToString(dr0["DepartmentName"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.NAVDateForTrx = Convert.ToString(dr0["NAVDate"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.EndBalance = Convert.ToDecimal(dr0["EndBalance"]);
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.UnRealized = Convert.ToDecimal(dr0["UnRealized"]);
                                            rSingle.CurrentNAV = Convert.ToDecimal(dr0["CurrentNAV"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.AvgNAV = Convert.ToDecimal(dr0["AvgNAV"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitBalance"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.BegBalance = Convert.ToDecimal(dr0["BegBalance"]);
                                            rList.Add(rSingle);
                                        }


                                        var QueryByFundID =
                                           from r in rList
                                               //orderby r.NAVDateForTrx ascending
                                           group r by new { r.FundName, r.ClientName, r.ClientID, r.Balance, r.UnitBalance, r.UnRealized, r.AvgNAV, r.BegBalance, r.CurrentNAV } into rGroup
                                           select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel = incRowExcel + 2;


                                            int RowZ = incRowExcel;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name ";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Client Name ";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ClientName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Period";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " - " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "CIF";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ClientID;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Balance";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Balance;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 7].Value = "Current NAV  : ";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.CurrentNAV;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            decimal _unitBalance = rsHeader.Key.UnitBalance;
                                            worksheet.Cells[incRowExcel, 10].Value = "Unit Balance  : ";
                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.UnitBalance;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 12].Value = "unit";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "R/Un realised";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.UnRealized;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 7].Value = "AVG NAV  : ";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.AvgNAV;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "R/Un realised Percentage";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Formula = "iferror(" + rsHeader.Key.UnRealized + "/" + rsHeader.Key.Balance + ",0)";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,0.0000%";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;


                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //if (rsHeader.Key.Type == "")
                                            //{}
                                            //else
                                            //{}
                                            worksheet.Cells[incRowExcel, 2].Value = "Type";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Amount (IDR)";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Sales Charged";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":G" + RowB].Merge = true;
                                            worksheet.Cells["F" + RowB + ":G" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 6].Value = "%";
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 7].Value = "Amount";
                                            worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Net Amount";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Net Unit";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Ending Balance";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 12].Value = "Remark";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 2].Value = "BEGINNING BALANCE";


                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.BegBalance;


                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                            int _RowA = incRowExcel;

                                            incRowExcel++;
                                            // Row C = 4
                                            int RowC = incRowExcel;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _aaa = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;
                                                int _RowB = 0;

                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":L" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //worksheet.Cells["A" + RowD + ":L" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":L" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                if (rsDetail.Type != "")
                                                {



                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    if (rsDetail.Type == "Subscription")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "SUB";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    else if (rsDetail.Type == "Redemption")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "RED";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                    }
                                                    else if (rsDetail.Type == "Switching In")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "SWITCH IN";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    else if (rsDetail.Type == "Switching Out")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "SWITCH OUT";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                    }

                                                    if (rsDetail.SettlementDateForTrx == "01/01/1900 12:00:00 AM" || rsDetail.SettlementDateForTrx == "1/1/1900 12:00:00 AM")
                                                    {
                                                        //worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.NAVDateForTrx).ToString("dd-MMM-yyyy");
                                                        //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "";

                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "";
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "";
                                                        }
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Value = "";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Value = "";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Value = "";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = "";
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = "";
                                                        }
                                                        //int _A = incRowExcel + 1;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                        if (_no == 1)
                                                        {
                                                            _RowB = _RowA;
                                                        }
                                                        else
                                                        {
                                                            _RowB = incRowExcel - 1;
                                                        }

                                                        if (rsDetail.Type == "Subscription" || rsDetail.Type == "Switching In")
                                                        {

                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                            //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        }
                                                        else if (rsDetail.Type == "Redemption" || rsDetail.Type == "Switching Out")
                                                        {

                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                            //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        }


                                                        worksheet.Cells[incRowExcel, 12].Value = "";
                                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        _no = 0;
                                                    }
                                                    else
                                                    {

                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.NAVDateForTrx).ToString("dd-MMM-yyyy");
                                                        //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashAmount;
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashAmount * -1;
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashAmount;
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashAmount * -1;
                                                        }
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.FeePercent;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail.FeeAmount;
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount;
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount * -1;
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount;
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount * -1;
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.NAV;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnitAmount;
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnitAmount * -1;
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnitAmount;
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnitAmount * -1;
                                                        }
                                                        //int _A = incRowExcel + 1;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                        if (_no == 1)
                                                        {
                                                            _RowB = _RowA;
                                                        }
                                                        else
                                                        {
                                                            _RowB = incRowExcel - 1;
                                                        }



                                                        if (rsDetail.Type == "Subscription" || rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(J" + incRowExcel + "+K" + _RowB + ")";
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                            //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        }
                                                        else if (rsDetail.Type == "Redemption" || rsDetail.Type == "Switching Out")
                                                        {
                                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(J" + incRowExcel + "+K" + _RowB + ")";
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                            //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        }

                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Remark;
                                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }


                                                }
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _aaa = incRowExcel;




                                            }



                                            worksheet.Cells["A" + _endRowDetail + ":L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 4].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[_aaa, 11].Formula = "SUM(K" + _endRowDetail + ":J" + _aaa + ")";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 8].Calculate();
                                            //worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                            incRowExcel++;
                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A5:L" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        package.Workbook.Calculate();

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                        worksheet.Column(1).Width = 8;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 2;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &14&B Transaction Report of Client Portfolio";


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Daily Transaction Report For All
            if (_unitRegistryRpt.ReportName.Equals("Daily Transaction Report For All"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _statusSwitch = "";
                            string _paramFund = "";
                            string _paramAgent = "";
                            string _paramFundClient = "";
                            string _paramDepartment = "";
                            string _paramAgentSwitching = "";
                            string _paramDepartmentSwitching = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                                _paramAgentSwitching = "And AG.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                                _paramAgentSwitching = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            //if (!_host.findString(_unitRegistryRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.DepartmentFrom))
                            //{
                            //    _paramDepartment = "And A.DepartmentPK in ( " + _unitRegistryRpt.DepartmentFrom + " ) ";
                            //    _paramDepartmentSwitching = "And AG.DepartmentPK in ( " + _unitRegistryRpt.DepartmentFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramDepartment = "";
                            //    _paramDepartmentSwitching = "";
                            //}


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitch = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitch = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            //                          
                            cmd.CommandText =
                                @"
                                
                                     Select A.NoRow,A.SettlementDate,A.Remark,A.FeeAmount, A.FeePercent,A.DepartmentName,A.AgentName,A.FundID,A.FundName , A.FundIDFrom, A.FundNameFrom,A.FundToID,A.FundToName,A.NAVDate,A.Type,A.ClientID,A.ClientName,
                                    A.TotalCashAmount,A.TotalUnitAmount, A.TotalCashAmountFundFrom,A.TotalCashAmountFundTo, A.TotalUnitAmountFundFrom,A.TotalUnitAmountFundTo 
                                    ,A.InternalCategory,A.NAV, A.NAVFrom ,  A.NAVTo, A.CashAmount,A.FeeType
                                    from (  
                                    Select '1' NoRow, A.NAVDate SettlementDate,A.Description Remark,A.SubscriptionFeeAmount FeeAmount,A.SubscriptionFeePercent FeePercent,D.Name DepartmentName,
                                    Case when AG.Type = 1 then AG.Name else AH.Name end AgentName,F.ID FundID,F.Name FundName,'' FundIDFrom,''FundToID ,'' FundNameFrom, '' FundToName,NAVDate,'Subscription' Type, Fc.ID ClientID,FC.Name ClientName, TotalCashAmount, TotalUnitAmount ,
                                    0 TotalCashAmountFundFrom,0 TotalCashAmountFundTo, 0 TotalUnitAmountFundFrom,0 TotalUnitAmountFundTo  ,
                                    E.Name InternalCategory, A.NAV NAV, 0 NAVFrom , 0 NAVTo, CashAmount, '' FeeType
                                    from ClientSubscription A 
                                    left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)   
                                    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
                                    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2)  
                                    left join Agent AH on AH.AgentPK = AG.ParentPK and AH.Status in (1,2) and AG.Type = 2
                                    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                                    left join InternalCategory E on E.InternalCategoryPK = FC.InternalCategoryPK and E.Status in (1,2)
                                    where " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + @" and 
                                    NAVDate Between @ValueDateFrom and @ValueDateTo  --and F.FundPK = 1
                                    UNION ALL   
                                    Select '2' NoRow,A.PaymentDate SettlementDate,A.Description Remark,A.RedemptionFeeAmount FeeAmount,A.RedemptionFeePercent FeePercent,D.Name DepartmentName,
                                    Case when AG.Type = 1 then AG.Name else AH.Name end AgentName,F.ID FundID,F.Name FundName,'' FundIDFrom,''FundToID ,'' FundNameFrom, '' FundToName,NAVDate,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName, A.CashAmount TotalCashAmount, TotalUnitAmount  ,
                                    0 TotalCashAmountFundFrom,0 TotalCashAmountFundTo, 0 TotalUnitAmountFundFrom,0 TotalUnitAmountFundTo  ,
                                    E.Name InternalCategory, A.NAV NAV, 0 NAVFrom , 0 NAVTo, CashAmount, '' FeeType
                                    from ClientRedemption A 
                                    left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)   
                                    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
                                    left join Agent AH on AH.AgentPK = AG.ParentPK and AH.Status in (1,2) and AG.Type = 2
                                    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)  
                                    left join InternalCategory E on E.InternalCategoryPK = FC.InternalCategoryPK and E.Status in (1,2)
                                    where " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + @" and 
                                    NAVDate Between @ValueDateFrom and @ValueDateTo --and F.FundPK = 1

                                    UNION ALL   
                                    Select '3' NoRow,A.PaymentDate SettlementDate,A.Description Remark,A.SwitchingFeeAmount FeeAmount,A.SwitchingFeePercent FeePercent,D.Name DepartmentName,
                                    Case when AG.Type = 1 then AG.Name else AH.Name end AgentName,'' FundID,'' FundName,F.ID FundIDfrom,G.ID FundToID ,F.Name FundNameFrom, G.Name FundToName,NAVDate,'Switching' Type, Fc.ID ClientID,FC.Name ClientName,
                                    0 TotalCashAmount, 0 TotalUnitAmount, A.CashAmount TotalCashAmountFundFrom,A.TotalCashAmountFundTo, A.TotalUnitAmountFundFrom,A.TotalUnitAmountFundTo  ,
                                    E.Name InternalCategory, 0 NAV , A.NAVFundFrom NAVFrom , A.NAVFundTo NAVTo, CashAmount , FeeType
                                    from ClientSwitching A 
                                    left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2)  
                                    left join Fund G on A.FundPKTo = G.fundPK and G.Status in (1,2)   
                                    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
                                    left join Agent AH on AH.AgentPK = AG.ParentPK and AH.Status in (1,2) and AG.Type = 2
                                    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)  
                                    left join InternalCategory E on E.InternalCategoryPK = FC.InternalCategoryPK and E.Status in (1,2)
                                    where " + _statusSwitch + _paramFund + _paramAgentSwitching + _paramDepartmentSwitching + _paramFundClient + @" and 
                                    NAVDate Between @ValueDateFrom and @ValueDateTo --and F.FundPK = 1

 
                                    )A   
                                    --Group by A.NoRow,A.SettlementDate,A.Remark,A.FeeAmount,A.DepartmentName,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.TotalCashAmount,A.TotalUnitAmount,A.InternalCategory,A.NAV
                                    order by A.NoRow,A.FundID, A.NAVDate Asc


                                 ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailyTransactionReportforAll" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailyTransactionReportforAll" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Transaction Report for All");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.AgentName = dr0["AgentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentName"]);
                                            rSingle.DepartmentName = dr0["DepartmentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentName"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["TotalCashAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["TotalUnitAmount"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.InternalCategory = Convert.ToString(dr0["InternalCategory"]);

                                            rSingle.FundIDFrom = Convert.ToString(dr0["FundIDFrom"]);
                                            rSingle.FundNameFrom = Convert.ToString(dr0["FundNameFrom"]);
                                            rSingle.FundToID = Convert.ToString(dr0["FundToID"]);
                                            rSingle.FundToName = Convert.ToString(dr0["FundToName"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.NAVFrom = Convert.ToDecimal(dr0["NAVFrom"]);
                                            rSingle.NAVTo = Convert.ToDecimal(dr0["NAVTo"]);
                                            rSingle.TotalCashAmountFundFrom = Convert.ToDecimal(dr0["TotalCashAmountFundFrom"]);
                                            rSingle.TotalCashAmountFundTo = Convert.ToDecimal(dr0["TotalCashAmountFundTo"]);
                                            rSingle.TotalUnitAmountFundFrom = Convert.ToDecimal(dr0["TotalUnitAmountFundFrom"]);
                                            rSingle.TotalUnitAmountFundTo = Convert.ToDecimal(dr0["TotalUnitAmountFundTo"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.FeeType = dr0["FeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FeeType"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Type } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Daily Total Transaction Report For All";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Subscription , Redemption , Switching";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Type;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Period";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = _unitRegistryRpt.ValueDateFrom + " - " + _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";

                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "CIF No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Transaction Type";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "Fund";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = "Client Name";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Merge = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = "Internal Category";
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = "Sales Name";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = "NAV Date";
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = "Fee %";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = "Fee Amount";
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = "Net IDR";
                                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = "NAV";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = "Remark";
                                                worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            }
                                            else if (rsHeader.Key.Type == "Redemption")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Transaction Type";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "Fund";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = "Client Name";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Merge = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = "Internal Category";
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = "Sales Name";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = "NAV Date";
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = "Payment Date";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = "Fee %";
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = "Fee Amount";
                                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = "Net IDR";
                                                worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = "NAV";
                                                worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = "Remark";
                                                worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "FundFrom";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "FundTo";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = "Client Name";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Merge = true;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["D" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = "Internal Category";
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = "Sales Name";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = "NAV Date";
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = "Payment Date";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = "Fee Type";
                                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = "Fee %";
                                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = "Fee Amount";
                                                worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = "Net IDR From";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = "Unit From";
                                                worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = "NAV From";
                                                worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 16].Value = "Net IDR From";
                                                worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                                worksheet.Cells["P" + RowB + ":P" + RowG].Merge = true;
                                                worksheet.Cells["P" + RowB + ":P" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["P" + RowB + ":P" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 17].Value = "Unit To";
                                                worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                                worksheet.Cells["Q" + RowB + ":Q" + RowG].Merge = true;
                                                worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 18].Value = "NAV To";
                                                worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                                worksheet.Cells["R" + RowB + ":R" + RowG].Merge = true;
                                                worksheet.Cells["R" + RowB + ":R" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["R" + RowB + ":R" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 19].Value = "Remark";
                                                worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                                worksheet.Cells["S" + RowB + ":S" + RowG].Merge = true;
                                                worksheet.Cells["S" + RowB + ":S" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["S" + RowB + ":S" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }




                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _fundID = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;



                                                //if (_fundID != rsDetail.FundID)
                                                //{
                                                //    worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //}

                                                //ThickBox Border
                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }
                                                else if (rsDetail.Type == "Redemption")
                                                {
                                                    worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells["A" + RowB + ":S" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowB + ":S" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }


                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Type;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundID;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InternalCategory;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AgentName;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVDate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.FeePercent;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.FeeAmount;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.Nav;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.Remark;
                                                    worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                }
                                                else if (rsDetail.Type == "Redemption")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Type;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundID;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InternalCategory;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AgentName;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVDate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.SettlementDate;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.FeePercent;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.FeeAmount;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.Nav;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.Remark;
                                                    worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundIDFrom;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundToID;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InternalCategory;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AgentName;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVDate;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.SettlementDate;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.FeeType;
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.FeePercent;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.FeeAmount;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalCashAmountFundFrom;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalUnitAmountFundFrom;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.NAVFrom;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.TotalCashAmountFundTo;
                                                    worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.TotalUnitAmountFundTo;
                                                    worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.NAVTo;
                                                    worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.Remark;
                                                    worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                }


                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _fundID = rsDetail.FundID;
                                            }
                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else if (rsHeader.Key.Type == "Redemption")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":O" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":S" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }

                                        }




                                        incRowExcel++;

                                        //-----------------------------------
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                //                                              
                                                cmd1.CommandText =
                                                @"
                                                Select A.NoRow,A.CurrencyID,A.Type,A.FundID,A.FundIDTo,sum(A.TotalCashAmountFundTo)TotalCashAmountFundTo,sum(A.TotalUnitAmountFundTo)TotalUnitAmountFundTo,sum(A.TotalCashAmount)TotalCashAmount,sum(A.TotalUnitAmount)TotalUnitAmount from ( 
                                                Select  '1' NoRow,CU.ID CurrencyID,'Subscription' Type ,F.ID FundID,G.ID FundIDTo,sum (0)TotalCashAmountFundTo,sum (0)TotalUnitAmountFundTo,
                                                sum (TotalCashAmount)TotalCashAmount,sum (TotalUnitAmount)TotalUnitAmount 
                                                from ClientSubscription A 
                                                left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2) 
                                                left join Fund G on A.FundPK = G.fundPK and G.Status in (1,2)   
                                                left join Currency CU on A.CurrencyPK = CU.CurrencyPK and CU.Status in (1,2)   
                                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                                left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2)  
                                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                                                where " + _statusSubs + _paramFund + _paramAgent + _paramFundClient + _paramDepartment + @" and 
                                                NAVDate Between @ValueDateFrom and @ValueDateTo  
                                                Group By F.ID,CU.ID,G.ID
                                                UNION ALL   
                                                Select '2' NoRow,CU.ID CurrencyID,'Redemption' Type,F.ID FundID,G.ID FundIDTo,sum (0)TotalCashAmountFundTo,sum (0)TotalUnitAmountFundTo,
                                                sum (CashAmount)TotalCashAmount,sum (UnitAmount)TotalUnitAmount
                                                from ClientRedemption A 
                                                left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)    
                                                left join Fund G on A.FundPK = G.fundPK and G.Status in (1,2) 
                                                left join Currency CU on A.CurrencyPK = CU.CurrencyPK and CU.Status in (1,2)    
                                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                                left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2)  
                                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                                                where  " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient + _paramDepartment + @" and 
                                                NAVDate Between @ValueDateFrom and @ValueDateTo  
                                                Group By F.ID,CU.ID,G.ID
                                                UNION ALL   
                                                Select '3' NoRow,CU.ID CurrencyID,'Switching' Type,F.ID FundID,G.ID FundIDTo,sum (TotalCashAmountFundTo)TotalCashAmountFundTo,sum (TotalUnitAmountFundTo)TotalUnitAmountFundTo,
                                                sum (CashAmount)TotalCashAmount,sum (Unitamount)TotalUnitAmount
                                                from ClientSwitching A 
                                                left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2) 
                                                left join Fund G on A.FundPKTo = G.fundPK and G.Status in (1,2)    
                                                left join Currency CU on A.CurrencyPK = CU.CurrencyPK and CU.Status in (1,2)    
                                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)    
                                                left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
                                                left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                                                where  " + _statusSwitch + _paramFund + _paramAgentSwitching + _paramFundClient + _paramDepartmentSwitching + @" and 
                                                NAVDate Between @ValueDateFrom and @ValueDateTo  
                                                Group By F.ID,CU.ID,G.ID
                                                )A   
                                                Group by A.NoRow,A.Type,A.FundID,A.FundIDTo,A.CurrencyID
                                                order by A.NoRow,A.Type,A.FundID Asc
                                                ";
                                                cmd1.CommandTimeout = 0;

                                                cmd1.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                                                cmd1.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                                                cmd1.Parameters.AddWithValue("@AgentFrom", _unitRegistryRpt.AgentFrom);
                                                cmd1.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);
                                                cmd1.Parameters.AddWithValue("@DepartmentFrom", _unitRegistryRpt.DepartmentFrom);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList1 = new List<UnitRegistryRpt>();
                                                            while (dr1.Read())
                                                            {
                                                                UnitRegistryRpt rSingle1 = new UnitRegistryRpt();
                                                                rSingle1.FundID = Convert.ToString(dr1["FundID"]);
                                                                rSingle1.FundIDTo = Convert.ToString(dr1["FundIDTo"]);
                                                                rSingle1.CashBalance = Convert.ToDecimal(dr1["TotalCashAmount"]);
                                                                rSingle1.UnitBalance = Convert.ToDecimal(dr1["TotalUnitAmount"]);
                                                                rSingle1.TotalCashAmountFundTo = Convert.ToDecimal(dr1["TotalCashAmountFundTo"]);
                                                                rSingle1.TotalUnitAmountFundTo = Convert.ToDecimal(dr1["TotalUnitAmountFundTo"]);
                                                                rSingle1.Type = Convert.ToString(dr1["Type"]);
                                                                rSingle1.CurrencyID = Convert.ToString(dr1["CurrencyID"]);
                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r1 in rList1
                                                                group r1 by new { r1.Type, r1.NAVDate } into rGroup1
                                                                select rGroup1;

                                                            incRowExcel = incRowExcel + 6;
                                                            int _endRowDetailZ = 0;


                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {
                                                                worksheet.Cells[incRowExcel, 1].Value = "Total " + rsHeader1.Key.Type + " : ";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                incRowExcel = incRowExcel + 2;
                                                                //Row B = 3
                                                                int RowBZ = incRowExcel;
                                                                int RowGZ = incRowExcel + 1;


                                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Merge = true;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 3].Value = " ";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 4].Value = "Amount";
                                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 5].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                }
                                                                else if (rsHeader1.Key.Type == "Redemption")
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 3].Value = " ";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 5].Value = "Amount";
                                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 6].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Merge = true;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Fund From";
                                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Merge = true;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["B" + RowBZ + ":B" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 3].Value = "Fund To";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Merge = true;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["C" + RowBZ + ":C" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 4].Value = "Unit From";
                                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Merge = true;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["D" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 5].Value = "Amount From";
                                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 6].Value = "Unit To";
                                                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Merge = true;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 7].Value = "Amount To";
                                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                                    worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Merge = true;
                                                                    worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 8].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                                    worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Merge = true;
                                                                    worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                                }


                                                                incRowExcel++;

                                                                // Row C = 4
                                                                int RowCZ = incRowExcel;

                                                                incRowExcel++;
                                                                //area header

                                                                int _noZ = 1;
                                                                int _startRowDetailZ = incRowExcel;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    //Row D = 5
                                                                    int RowDZ = incRowExcel;
                                                                    int RowEZ = incRowExcel + 1;


                                                                    //ThickBox Border

                                                                    if (rsDetail1.Type == "Subscription")
                                                                    {
                                                                        worksheet.Cells["A" + RowBZ + ":E" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + RowBZ + ":E" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }
                                                                    else if (rsDetail1.Type == "Redemption")
                                                                    {
                                                                        worksheet.Cells["A" + RowBZ + ":F" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + RowBZ + ":F" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet.Cells["A" + RowBZ + ":H" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells["A" + RowBZ + ":H" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    }

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _noZ;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    if (rsDetail1.Type == "Subscription")
                                                                    {
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundID;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail1.CashBalance;
                                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.CurrencyID;
                                                                        worksheet.Cells[incRowExcel, 5].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    }
                                                                    else if (rsDetail1.Type == "Redemption")
                                                                    {
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundID;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail1.UnitBalance;
                                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.CashBalance;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.CurrencyID;
                                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundID;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.FundIDTo;
                                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail1.UnitBalance;
                                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.CashBalance;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.TotalUnitAmountFundTo;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail1.TotalCashAmountFundTo;
                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail1.CurrencyID;
                                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    }


                                                                    _endRowDetailZ = incRowExcel;
                                                                    _noZ++;
                                                                    incRowExcel++;

                                                                }


                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells["A" + _endRowDetailZ + ":E" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }
                                                                else if (rsHeader1.Key.Type == "Redemption")
                                                                {
                                                                    worksheet.Cells["A" + _endRowDetailZ + ":F" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells["A" + _endRowDetailZ + ":H" + _endRowDetailZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }






                                                                if (rsHeader1.Key.Type == "Subscription")
                                                                {
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Formula = "SUM(D" + _startRowDetailZ + ":D" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Font.Bold = true;
                                                                }
                                                                else if (rsHeader1.Key.Type == "Redemption")
                                                                {

                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Numberformat.Format = "#,##0.000000";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Formula = "SUM(D" + _startRowDetailZ + ":D" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Font.Bold = true;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Formula = "SUM(E" + _startRowDetailZ + ":E" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Style.Font.Bold = true;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Numberformat.Format = "#,##0.000000";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Formula = "SUM(D" + _startRowDetailZ + ":D" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 4].Style.Font.Bold = true;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Formula = "SUM(E" + _startRowDetailZ + ":E" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 5].Style.Font.Bold = true;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 6].Style.Numberformat.Format = "#,##0.000000";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 6].Formula = "SUM(F" + _startRowDetailZ + ":F" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 6].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 6].Style.Font.Bold = true;

                                                                    worksheet.Cells[_endRowDetailZ + 1, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 7].Formula = "SUM(G" + _startRowDetailZ + ":G" + _endRowDetailZ + ")";
                                                                    worksheet.Cells[_endRowDetailZ + 1, 7].Calculate();
                                                                    worksheet.Cells[_endRowDetailZ + 1, 7].Style.Font.Bold = true;
                                                                }


                                                                incRowExcel++;
                                                            }


                                                            //string _rangeA1 = "A:M" + incRowExcel;
                                                            //using (ExcelRange r = worksheet.Cells[_rangeA1]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                            //{
                                                            //    r.Style.Font.Size = 22;
                                                            //}
                                                        }

                                                    }
                                                }
                                            }
                                        }


                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        string _rangeA = "A:T" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 20];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 50;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 35;
                                        worksheet.Column(8).Width = 35;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 15;
                                        worksheet.Column(15).Width = 25;
                                        worksheet.Column(16).Width = 25;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report For All \n &28&B Subscription , Redemption , Switching";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Unit Allocation (All Fund)
            if (_unitRegistryRpt.ReportName.Equals("Unit Allocation"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"
                            
                            declare @InvestorTypeByFund table
                            (
                            FundPK int,
                            InvestorType int,
                            Nav numeric(22,8)
                            )

                            declare @FCP table
                            (
                            FundPK int,
                            InvestorType int,
                            UnitAmount numeric(22,8),
                            Nav numeric(22,8),
                            Total numeric(22,8)
                            )

                            insert into @InvestorTypeByFund
                            select A.FundPK,Code,C.Nav from Fund A
                            left join MasterValue B on B.status in (1,2) and B.ID = 'ClientCategory' 
                            left join CloseNAV C on A.FundPK = C.FundPK and C.Date = @Date
                            where A.status in (1,2) " + _paramFund + @"

                           insert into @FCP
                            select A.FundPK,Case when E.ID = 'RT' then 1 else 2 end InvestorType,sum(A.UnitAmount) UnitAmount,B.Nav,sum(A.UnitAmount) * B.Nav Amount from FundClientPosition A
                            left join CloseNAV B on A.FundPK = B.FundPK and B.Date = @Date
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
							left join InternalCategory E on D.InternalCategoryPK = E.InternalCategoryPK and E.status in (1,2)
                            where A.Date = dbo.FWorkingDay(@Date,-1)  " + _paramFund + @" 
                            group by A.FundPK,E.ID,B.Nav


                            select C.ID FundName, Case when A.InvestorType = 1 then 'Retail' else 'Institution' end InvestorType,isnull(B.UnitAmount,0) UnitAmount,
                            isnull(A.Nav,0) Nav,isnull(B.Total,0) AUM  from @InvestorTypeByFund A
                            left join @FCP B on A.FundPK = B.FundPK and A.InvestorType = B.InvestorType
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            order by C.ID

                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "UnitAllocation" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "UnitAllocation" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegsitryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("All Fund Unit Position");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitAllocation> rList = new List<UnitAllocation>();
                                        while (dr0.Read())
                                        {

                                            UnitAllocation rSingle = new UnitAllocation();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InvestorType = Convert.ToString(dr0["InvestorType"]);
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        //int _date;
                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "ALL FUND UNIT POSITION";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Date             :";
                                        worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //_date = incRowExcel;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Instrument :";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "FUND NAME";
                                            worksheet.Cells[incRowExcel, 2].Value = "CATEGORY / SEGMENT";
                                            worksheet.Cells[incRowExcel, 3].Value = "UNIT";
                                            worksheet.Cells[incRowExcel, 4].Value = "NAV / UNIT";
                                            worksheet.Cells[incRowExcel, 5].Value = "NAV";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //int _date;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _fundID = "";

                                            incRowExcel++;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                int RowB = incRowExcel;
                                                int RowG = incRowExcel + 1;
                                                worksheet.Cells["A" + RowB + ":E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":E" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":E" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":E" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                if (_fundID == rsDetail.FundName)
                                                {
                                                    worksheet.Cells[RowB, 1].Value = "";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[RowB, 1].Value = rsDetail.FundName;
                                                }


                                                worksheet.Cells["A" + RowB + ":A" + RowB].Merge = true;
                                                worksheet.Cells["A" + RowB + ":A" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["A" + RowB + ":A" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[RowB, 2].Value = rsDetail.InvestorType;

                                                worksheet.Cells[RowB, 3].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[RowB, 3].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[RowB, 4].Value = rsDetail.NAV;
                                                worksheet.Cells[RowB, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[RowB, 5].Value = rsDetail.AUM;
                                                worksheet.Cells[RowB, 5].Style.Numberformat.Format = "#,##0.00";

                                                if (rsDetail.InvestorType == "Retail")
                                                {
                                                    worksheet.Cells[RowB, 6].Value = rsDetail.UnitAmount;
                                                    worksheet.Cells[RowB, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[RowB, 8].Value = rsDetail.AUM;
                                                    worksheet.Cells[RowB, 8].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[RowB, 7].Value = rsDetail.UnitAmount;
                                                    worksheet.Cells[RowB, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[RowB, 9].Value = rsDetail.AUM;
                                                    worksheet.Cells[RowB, 9].Style.Numberformat.Format = "#,##0.00";
                                                }

                                                _endRowDetail = incRowExcel + 1;
                                                incRowExcel++;
                                                _fundID = rsDetail.FundName;
                                            }
                                            incRowExcel = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Total All";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Total Institution";

                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Total Retail";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 0;
                                        worksheet.Column(7).Width = 0;
                                        worksheet.Column(8).Width = 0;
                                        worksheet.Column(9).Width = 0;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Daily Sales Report
            if (_unitRegistryRpt.ReportName.Equals("Daily Sales Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
--declare @valuedate datetime
--set @valuedate = '07/20/2020'

declare @FirstOfMonth datetime
declare @FirstOfPrevMonth datetime
declare @DateOfPrevMonth datetime

SELECT @FirstOfMonth =  DATEADD(m, DATEDIFF(m, 0, @valuedate), 0)
SELECT @FirstOfPrevMonth = DATEADD(Month,-1,@FirstOfMonth)
SELECT @DateOfPrevMonth = case when DAY(@valuedate) in (28,29) and Month(@valuedate) = 2 then EOMONTH(DATEADD(Month,-1,@valuedate))
									when DAY(@valuedate) in (31) then DATEADD(Month,-1,EOMONTH(@valuedate))
										else DATEADD(Month,-1,@valuedate)	end			


--select @DateOfPrevMonth

Declare @InternalCategory Table
(
InternalCategoryPK int,
CategoryName nvarchar(100),
AutoNo int
)



Insert into @InternalCategory
select InternalCategoryPK,
case when InternalCategoryPK in (12) then 'RHBSI'
		when InternalCategoryPK in (1) then 'Banking' 
			when InternalCategoryPK in (2) then 'Non-Banking' 
				when InternalCategoryPK in (11) then 'Insurance-Unit Link' 
					when InternalCategoryPK in (5,7,13,14,23,24) then 'Agency/other'
						else 'INSTI' end,
case when InternalCategoryPK in (12) then 1
		when InternalCategoryPK in (1) then 2
			when InternalCategoryPK in (2) then 3 
				when InternalCategoryPK in (11) then 4
					when InternalCategoryPK in (5,7,13,14,23,24) then 5
						else 6 end
from InternalCategory where status in (1,2)



select A.CategoryName Channel,
case when DAY(@valuedate) = 1 then CAST(DAY(@valuedate) as nvarchar(2)) + 'st' 
		when DAY(@valuedate) = 2 then CAST(DAY(@valuedate) as nvarchar(2)) + 'nd' 
			when DAY(@valuedate) = 3 then CAST(DAY(@valuedate) as nvarchar(2)) + 'rd'
				else  CAST(DAY(@valuedate) as nvarchar(2)) + 'th' end 'YTD',

isnull(B.TotalCashAmount,0) GrossSales,isnull(C.TotalCashAmount,0) GrossSalesMonthBefore
,isnull(E.TotalCashAmount,0) NETSales,isnull(G.TotalCashAmount,0) NETSalesMonthBefore ,
case when A.CategoryName = 'INSTI' then 'INSTI' else 'INDIVIDUAL' end Type ,@DateOfPrevMonth PrevMonth,@valuedate ThisMonth
from @InternalCategory A
left join (

select C.CategoryName,sum(TotalCashAmount) TotalCashAmount from ClientSubscription A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join @InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK
where ValueDate between @FirstOfMonth and @valuedate and A.status = 2 and A.Posted = 1
group by C.CategoryName
) B on A.CategoryName COLLATE DATABASE_DEFAULT = B.CategoryName COLLATE DATABASE_DEFAULT

left join (

select C.CategoryName,sum(TotalCashAmount) TotalCashAmount from ClientSubscription A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join @InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK
where ValueDate between @FirstOfPrevMonth and @DateOfPrevMonth and A.status = 2 and A.Posted = 1
group by C.CategoryName
) C on A.CategoryName COLLATE DATABASE_DEFAULT = C.CategoryName COLLATE DATABASE_DEFAULT


left join (

		select D.CategoryName,sum(TotalCashAmount) TotalCashAmount from (
			select C.CategoryName,sum(TotalCashAmount) TotalCashAmount from ClientSubscription A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join @InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK
			where ValueDate between @FirstOfMonth and @valuedate and A.status = 2 and A.Posted = 1
			group by C.CategoryName
			union all
			select C.CategoryName,sum(TotalCashAmount) * -1 TotalCashAmount from ClientRedemption A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join @InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK
			where ValueDate between @FirstOfMonth and @valuedate and A.status = 2 and A.Posted = 1
			group by C.CategoryName
		) D
		group by D.CategoryName


) E on A.CategoryName COLLATE DATABASE_DEFAULT = E.CategoryName COLLATE DATABASE_DEFAULT

left join (

		select F.CategoryName,sum(TotalCashAmount) TotalCashAmount from (
			select C.CategoryName,sum(TotalCashAmount) TotalCashAmount from ClientSubscription A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join @InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK
			where ValueDate between  @FirstOfPrevMonth and @DateOfPrevMonth  and A.status = 2 and A.Posted = 1
			group by C.CategoryName
			union all
			select C.CategoryName,sum(TotalCashAmount) * -1 TotalCashAmount from ClientRedemption A
			left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
			left join @InternalCategory C on B.InternalCategoryPK = C.InternalCategoryPK
			where ValueDate between  @FirstOfPrevMonth and @DateOfPrevMonth  and A.status = 2 and A.Posted = 1
			group by C.CategoryName
		) F
		group by F.CategoryName


) G on A.CategoryName COLLATE DATABASE_DEFAULT = G.CategoryName COLLATE DATABASE_DEFAULT

group by AutoNo,A.CategoryName,B.TotalCashAmount,C.TotalCashAmount
,E.TotalCashAmount,G.TotalCashAmount
order by AutoNo








";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@valuedate", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailySalesReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailySalesReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Daily Sales Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailySalesReport> rList = new List<DailySalesReport>();
                                        while (dr0.Read())
                                        {

                                            DailySalesReport rSingle = new DailySalesReport();
                                            rSingle.Channel = Convert.ToString(dr0["Channel"]);
                                            rSingle.YTD = Convert.ToString(dr0["YTD"]);
                                            rSingle.GrossSalesMonthBefore = Convert.ToDecimal(dr0["GrossSalesMonthBefore"]);
                                            rSingle.GrossSales = Convert.ToDecimal(dr0["GrossSales"]);
                                            rSingle.NETSalesMonthBefore = Convert.ToDecimal(dr0["NETSalesMonthBefore"]);
                                            rSingle.NETSales = Convert.ToDecimal(dr0["NETSales"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.PrevMonth = Convert.ToString(dr0["PrevMonth"]);
                                            rSingle.ThisMonth = Convert.ToString(dr0["ThisMonth"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.Type, r.PrevMonth, r.ThisMonth } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int _prevMonthExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "GROSS SALES";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "NET SALES (IDR)";
                                        worksheet.Cells["I" + incRowExcel + ":M" + incRowExcel].Merge = true;
                                        worksheet.Cells["I" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "ALL PRODUCT";
                                        //worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        //worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        //worksheet.Cells[incRowExcel, 1].Value = "PERIOD   " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " TO " + Convert.ToDateTime(_CustodianRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        //worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        //worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        //incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        string MonthNumber = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).AddMonths(-1).ToString("MMM yy");

                                        worksheet.Cells[incRowExcel, 1].Value = "Channel";
                                        worksheet.Cells[incRowExcel, 2].Value = "YTD";
                                        _prevMonthExcel = incRowExcel;

                                        //worksheet.Cells[incRowExcel, 3].Value = MonthNumber;
                                        //worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("MMM yy");
                                        //worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("MMM yy") + " Target";
                                        worksheet.Cells[incRowExcel, 6].Value = "MOM Dif";
                                        worksheet.Cells[incRowExcel, 7].Value = "MOM %";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 9].Value = MonthNumber;

                                        //worksheet.Cells[incRowExcel, 10].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("MMM yy");
                                        //worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("MMM yy") + " Target";
                                        worksheet.Cells[incRowExcel, 12].Value = "MOM Dif";
                                        worksheet.Cells[incRowExcel, 13].Value = "MOM %";


                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            worksheet.Cells[_prevMonthExcel, 3].Value = Convert.ToDateTime(rsHeader.Key.PrevMonth).ToString("MMM yy");
                                            worksheet.Cells[_prevMonthExcel, 4].Value = Convert.ToDateTime(rsHeader.Key.ThisMonth).ToString("MMM yy");
                                            worksheet.Cells[_prevMonthExcel, 5].Value = Convert.ToDateTime(rsHeader.Key.ThisMonth).ToString("MMM yy") + " Target";

                                            worksheet.Cells[_prevMonthExcel, 9].Value = Convert.ToDateTime(rsHeader.Key.PrevMonth).ToString("MMM yy");
                                            worksheet.Cells[_prevMonthExcel, 10].Value = Convert.ToDateTime(rsHeader.Key.ThisMonth).ToString("MMM yy");
                                            worksheet.Cells[_prevMonthExcel, 11].Value = Convert.ToDateTime(rsHeader.Key.ThisMonth).ToString("MMM yy") + " Target";



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Channel;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.YTD;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.GrossSalesMonthBefore;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.GrossSales;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = "";

                                                worksheet.Cells[incRowExcel, 6].Formula = "=D" + incRowExcel + "-C" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 7].Formula = "=F" + incRowExcel + "/C" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.NETSalesMonthBefore;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NETSales;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = "";

                                                worksheet.Cells[incRowExcel, 12].Formula = "=J" + incRowExcel + "-I" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 13].Formula = "=L" + incRowExcel + "/I" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            if (rsHeader.Key.Type == "INDIVIDUAL")
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 3].Calculate();

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();

                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Formula = "=D" + incRowExcel + "-C" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 6].Calculate();

                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 7].Formula = "=F" + incRowExcel + "/C" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 7].Calculate();

                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Calculate();

                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Calculate();

                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Formula = "=J" + incRowExcel + "-I" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 12].Calculate();

                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 13].Formula = "=L" + incRowExcel + "/I" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 13].Calculate();

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);

                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            }







                                        }


                                        incRowExcel++;

                                        int RowB = incRowExcel - 1;
                                        int RowG = incRowExcel - 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + RowG + ":C" + RowB + ")";
                                        worksheet.Cells[incRowExcel, 3].Calculate();

                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + RowG + ":D" + RowB + ")";
                                        worksheet.Cells[incRowExcel, 4].Calculate();

                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 6].Formula = "=D" + incRowExcel + "-C" + incRowExcel;
                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00%";
                                        worksheet.Cells[incRowExcel, 7].Formula = "=F" + incRowExcel + "/C" + incRowExcel;
                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + RowG + ":I" + RowB + ")";
                                        worksheet.Cells[incRowExcel, 9].Calculate();

                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + RowG + ":J" + RowB + ")";
                                        worksheet.Cells[incRowExcel, 10].Calculate();

                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 12].Formula = "=J" + incRowExcel + "-I" + incRowExcel;
                                        worksheet.Cells[incRowExcel, 12].Calculate();

                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00%";
                                        worksheet.Cells[incRowExcel, 13].Formula = "=L" + incRowExcel + "/I" + incRowExcel;
                                        worksheet.Cells[incRowExcel, 13].Calculate();

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);

                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 13].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 13];
                                        worksheet.Column(1).Width = 21;
                                        worksheet.Column(2).Width = 21;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 21;
                                        worksheet.Column(11).Width = 21;
                                        worksheet.Column(12).Width = 21;
                                        worksheet.Column(13).Width = 21;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Daily Sales Report";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion
            else
            {
                return false;
            }
        }

        public void ClientSubscription_PostingBySelected(string _usersID, DateTime _dateFrom, DateTime _dateTo, bool _bitManageUR, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {
            try
            {
                string paramClientSubscriptionSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientSubscriptionSelected = " And ClientSubscriptionPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientSubscriptionSelected = " And ClientSubscriptionPK in (0) ";
                }


                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _parambitManageUR = "";

                        if (_bitManageUR == true)
                        {
                            _parambitManageUR = "Where A.status = 2 and A.Posted = 0 and A.ClientSubscriptionPK in (select PK from ZManage_UR where Selected = 1 and Type = 1 and Date between @DateFrom and @DateTo) ";
                        }
                        else
                        {
                            _parambitManageUR = "Where A.status = 2 and Posted = 0 and ValueDate between @DateFrom and @Dateto   " + paramClientSubscriptionSelected;
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        Declare @CClientSubscriptionPK int
                        Declare @CNAVDate datetime
                        Declare @CTotalUnitAmount numeric(18,8)
                        Declare @CUnitAmount numeric(18,8)
                        Declare @CTotalCashAmount numeric(22,4)
                        Declare @CCashAmount numeric(18,4)
                        Declare @CAgentFeeAmount numeric(18,4)
                        Declare @CSubscriptionFeeAmount numeric(18,4)
                        Declare @CFundClientPK int
                        Declare @CFundClientID nvarchar(100) 
                        Declare @CFundClientName nvarchar(300) 
                        Declare @CFundCashRefPK	int
                        Declare @CFundPK int
                        

                        Declare @TotalFeeAmount numeric(18,4)
                        Declare @TrxFrom nvarchar(200)
                        Declare @TransactionPK nvarchar(200)

                        Declare @SubscriptionAcc int Declare @PayableSubsAcc int Declare  @PendingSubscription int
                        Declare @PeriodPK int Declare @BankPK int Declare @BankCurrencyPK int 
                        Declare @FundJournalPK int 

                        DECLARE A CURSOR FOR 
	                        Select FundPK,ClientSubscriptionPK,NAVDate,isnull(TotalUnitAmount,0),isnull(TotalCashAmount,0),isnull(UnitAmount,0),isnull(CashAmount,0),
	                        isnull(AgentFeeAmount,0),isnull(SubscriptionFeeAmount,0),
	                        A.FundClientPK,B.ID,B.Name,CashRefPK, A.EntryUsersID,A.TransactionPK
	 
	                        From ClientSubscription A Left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
                            " + _parambitManageUR + @"
	                        --Where A.status = 2 and Posted = 0 and ValueDate between @DateFrom and @Dateto and A.Selected = 1
	
                        Open A
                        Fetch Next From A
                        Into @CFundPK,@CClientSubscriptionPK,@CNAVDate,@CTotalUnitAmount,@CTotalCashAmount,@CUnitAmount,@CCashAmount,@CAgentFeeAmount,@CSubscriptionFeeAmount,
	                         @CFundClientPK,@CFundClientID,@CFundClientName,@CFundCashRefPK,@TrxFrom,@TransactionPK

                        While @@FETCH_STATUS = 0
                        Begin
	                        
	                        -- LOGIC FUND CLIENT POSITION
	                        if Exists(select * from FundClientPosition    
	                        where Date = @CNavDate and FundClientPK = @CFundClientPK and FundPK = @CFundPK)    
	                        begin    
		                        Update FundClientPosition set CashAmount = CashAmount  + @CCashAmount,    
		                        UnitAmount = UnitAmount + @CTotalUnitAmount where Date = @CNavDate and FundClientPK = @CFundClientPK    
		                        and FundPK = @CFundPK    
	                        end    
	                        else    
	                        begin    
	   
			                        INSERT INTO  FundClientPosition (Date,FundClientPK,FundPK,CashAmount,UnitAmount)    
			                        select @CNavDate,@CFundClientPK,@CFundPK,@CCashAmount,@CTotalUnitAmount  
		
	                        end      

                                  Declare @LastNAV numeric(22,8)
		                           Declare @SubsUnit numeric(22,8)
		                        
				                    set @SubsUnit = @CTotalUnitAmount
		                          

                                    Declare @UnitPrevious numeric(22,8)
                                    Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
                                    where FundClientPK = @CFundClientPK and FundPK = @CFundPK
                                   
                                    set @UnitPrevious = isnull(@UnitPrevious,0)

                                     if exists(
                                        Select * from FundClientPositionSummary where FundClientPK = @CFundClientPK and FundPK = @CFundPK
                                    )BEGIN
                                       update fundclientpositionsummary
		                               set Unit = Unit + @SubsUnit
		                               where FundClientPK = @CFundClientPK and FundPK = @CFundPK

                                    END
                                    ELSE
                                    BEGIN
                                          Insert into FundClientPositionSummary (FundPK,FundClientPK,Unit)
                                        Select @CFundPK,@CFundClientPK,@SubsUnit
                                    END

   
                               
                                    --Buy = 1,
                                    --Sell = 2,
                                    --Adjustment = 3,
                                    --SwitchingIn = 5,
                                    --SwitchingOut = 6

                                    insert into [FundClientPositionLog]
                                               ([UserId]
                                               ,[FundClientPK]
                                               ,[TransactionPK]
                                               ,[ClientTransactionPK]
                                               ,[UnitPrevious]
                                               ,[UnitChanges]
                                               ,[UnitAfter]
                                               ,[IsBoTransaction]
                                               ,[TransactionType]
                                               ,[Description]
                                                ,[FundPK])
                                    Select @PostedBy,@CFundClientPK,@TransactionPK,@CClientSubscriptionPK,@UnitPrevious,@SubsUnit,@UnitPrevious + @SubsUnit,
                                   Case when @TrxFrom = 'rdo' then 0 else 1 end,1,'Posting Subscription',@CFundPK



	                        update clientsubscription    
	                        set PostedBy = @PostedBy,PostedTime = @PostedTime,Posted = 1,Lastupdate = @PostedTime    
	                        where ClientSubscriptionPK = @CClientSubscriptionPK and Status = 2    

	   
	                        Declare @counterDate datetime      
	                        set @counterDate = @CNavDate      
	                        while @counterDate < (select dbo.fworkingday(max(valueDate),1)  from EndDayTrails)    
	                        BEGIN    
		                        set @counterDate = dbo.fworkingday(@counterDate,1)      
		                        if Exists(select * from FundClientPosition    
		                        where Date = @counterDate and FundClientPK = @CFundClientPK and FundPK = @CFundPK)    
		                        BEGIN
			                        update fundClientPosition set UnitAmount = UnitAmount  + @CTotalUnitAmount,CashAmount = CashAmount + @CCashAmount    
			                        where FundClientPK = @CFundClientPK and FundPK = @CFundPK and Date = @counterDate 
		                        END
		                        ELSE
		                        BEGIN
		                        INSERT INTO  FundClientPosition (Date,FundClientPK,FundPK,CashAmount,UnitAmount)    
			                        select @counterDate,@CFundClientPK,@CFundPK,@CCashAmount,@CTotalUnitAmount 
		                        END
	                        END    
	   
	
                        Fetch next From A 
                        Into @CFundPK,@CClientSubscriptionPK,@CNAVDate,@CTotalUnitAmount,@CTotalCashAmount,@CUnitAmount,@CCashAmount,@CAgentFeeAmount,@CSubscriptionFeeAmount,
	                         @CFundClientPK,@CFundClientID,@CFundClientName,@CFundCashRefPK,@TrxFrom,@TransactionPK
                        end
                        Close A
                        Deallocate A
                        ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@PostedBy", _usersID);
                        cmd.Parameters.AddWithValue("@PostedTime", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }
        public void ClientRedemption_PostingBySelected(string _usersID, DateTime _dateFrom, DateTime _dateTo, bool _bitManageUR, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {
            try
            {
                string paramClientRedemptionSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientRedemptionSelected = " And ClientRedemptionPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientRedemptionSelected = " And ClientRedemptionPK in (0) ";
                }

                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        string _parambitManageUR = "";

                        if (_bitManageUR == true)
                        {
                            _parambitManageUR = "Where A.status = 2  and A.Posted = 0 and A.ClientRedemptionPK in (select PK from ZManage_UR where Selected = 1 and Type = 2 and Date between @DateFrom and @DateTo) ";
                        }
                        else
                        {
                            _parambitManageUR = "Where A.status = 2 and Posted = 0 and ValueDate between @DateFrom and @DateTo " + paramClientRedemptionSelected;
                        }


                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
       
    Declare @CClientRedemptionPK int
    Declare @CNAVDate datetime
    Declare @CPaymentDate datetime
    Declare @CTotalUnitAmount numeric(18,8)
    Declare @CUnitAmount numeric(18,8)
    Declare @CTotalCashAmount numeric(22,4)
    Declare @CCashAmount numeric(18,4)
    Declare @CAgentFeeAmount numeric(18,4)
    Declare @CRedemptionFeeAmount numeric(18,4)
    Declare @CFundClientPK int
    Declare @CFundClientID nvarchar(100) 
    Declare @CFundClientName nvarchar(300) 
    Declare @CFundCashRefPK	int
    Declare @CFundPK int
    Declare @CHistoryPK int
    Declare @TotalFeeAmount numeric(18,4)
    Declare @TempAmount numeric(18,4)
    
    Declare @RedemptionAcc int Declare @PayableRedemptionAcc int Declare @PayableRedemptionFee int
    Declare @PeriodPK int Declare @BankPK int Declare @BankCurrencyPK int 
    Declare @FundJournalPK int 



    DECLARE A CURSOR FOR 
    Select FundPK,ClientRedemptionPK,NAVDate,PaymentDate,isnull(sum(TotalUnitAmount),0)
	,isnull(sum(TotalCashAmount),0),isnull(sum(UnitAmount),0),isnull(sum(CashAmount),0),
    isnull(sum(AgentFeeAmount),0),isnull(sum(RedemptionFeeAmount),0),
    A.FundClientPK,B.ID,B.Name,CashRefPK,A.HistoryPK
	 
    From ClientRedemption A Left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
    " + _parambitManageUR + @"
    --Where A.status = 2 and Posted = 0 and ValueDate between @DateFrom and @DateTo and A.Selected = 1


	Group by FundPK,ClientRedemptionPK,NAVDate,PaymentDate,A.FundClientPK,B.ID,B.Name,CashRefPK,A.HistoryPK
	
    Open A
    Fetch Next From A
    Into @CFundPK,@CClientRedemptionPK,@CNAVDate,@CPaymentDate,@CTotalUnitAmount,@CTotalCashAmount,@CUnitAmount,@CCashAmount,@CAgentFeeAmount,@CRedemptionFeeAmount,
    @CFundClientPK,@CFundClientID,@CFundClientName,@CFundCashRefPK,@CHistoryPK

    While @@FETCH_STATUS = 0
    Begin


	-- LOGIC FUND CLIENT POSITION
	if Exists(select * from FundClientPosition    
	where Date = @CNavDate and FundClientPK = @CFundClientPK and FundPK = @CFundPK)    
	begin    
		Update FundClientPosition set CashAmount = CashAmount  - @CCashAmount,    
		UnitAmount = UnitAmount - @CUnitAmount where Date = @CNavDate and FundClientPK = @CFundClientPK    
		and FundPK = @CFundPK    
	end    
	else    
	begin    
		if Exists(Select * from FundClientPosition where Date <= @CNavDate and year(date) = year(@DateFrom)     
		and FundClientPK = @CFundClientPK and FundPK = @CFundPK)    
 
		Begin    
			INSERT INTO  FundClientPosition (Date,FundClientPK,FundPK,CashAmount,UnitAmount)     
			Select @CNavDate,@CFundClientPK,@CFundPK,CashAmount - @CCashAmount,UnitAmount - @CUnitAmount From FundClientPosition    
			Where Date = (    
				select MAX(Date) MaxDate from FundClientPosition where FundClientPK = @CFundClientPK and FundPK = @CFundPK and Date <= @CNavDate    
				and year(date) = year(@CNavDate)    
				)  and FundPK = @CFundPK and FundClientPK = @CFundClientPK
		End 
		else 
		Begin    
			INSERT INTO  FundClientPosition (Date,FundClientPK,FundPK,CashAmount,UnitAmount)    
			select @CNavDate,@CFundClientPK,@CFundPK,@CCashAmount,@CTotalUnitAmount  
		end 
	end      

                
    Declare @LastNAV numeric(22,8)
		Declare @RedemptUnit numeric(22,8)


        Declare @OldRedemptUnit numeric(22,8)
        Declare @OldUnitAmount numeric(22,8)
        Declare @OldNAVDate datetime
        Declare @OldFundPK int
        Declare @OldFundClientPK int
        Declare @OldCashAmount numeric(24,4)
        Declare @OldNAV numeric(18,8)
        Declare @TrxFrom nvarchar(100)
        Declare @TransactionPK nvarchar(200)
        Select @OldFundPK = FundPK,@OldFundClientPK = FundClientPK, @OldNAVDate = NAVDate,@OldNAV = NAV,@TrxFrom = EntryUsersID,
        @TransactionPK = TransactionPK
        From ClientRedemption where ClientRedemptionPK = @CClientRedemptionPK and HistoryPK = @CHistoryPK

        Select @OldUnitAmount = UnitChanges * -1 from FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
        and ClientTransactionPK = @CClientRedemptionPK and TransactionType = 2 and ID =
        (
            Select max(ID) From FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                                and ClientTransactionPK = @CClientRedemptionPK and TransactionType = 2
        )

        Set @OldCashAmount = 0


		Select @LastNAV  = NAV
		from CloseNAV where Date = 
		(
		Select Max(date) From CloseNAV Where FundPK = @OldFundPK and status = 2 and Date < @OldNAVDate
		) and status = 2 and FundPK = @OldFundPK

		set @LastNAV = isnull(@LastNAV,1)
		set @OldRedemptUnit = 0
		IF @OldCashAmount > 0 and @oldNAV = 0
		BEGIN
			set @OldRedemptUnit = @OldCashAmount / @LastNAV
		END
		ELSE
		BEGIN
			set @OldRedemptUnit = @OldUnitAmount
		END

        Declare @UnitPrevious numeric(22,8)
        Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
        where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK

        update fundclientpositionsummary
		set Unit = Unit + isnull(@OldRedemptUnit,0)
		where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK
                               
        --Buy = 1,
        --Sell = 2,
        --Adjustment = 3,
        --SwitchingIn = 5,
        --SwitchingOut = 6

        insert into [FundClientPositionLog]
                    ([UserId]
                    ,[FundClientPK]
                    ,[TransactionPK]
                    ,[ClientTransactionPK]
                    ,[UnitPrevious]
                    ,[UnitChanges]
                    ,[UnitAfter]
                    ,[IsBoTransaction]
                    ,[TransactionType]
                    ,[Description]
                    ,[FundPK])
        Select @PostedBy,@OldFundClientPK, @TransactionPK,@CClientRedemptionPK,@UnitPrevious,@OldRedemptUnit,@UnitPrevious + @OldRedemptUnit
        ,case when @TrxFrom = 'rdo' then 0 else 1 end
        ,2,'Posting Redemption Old Data Revise',@OldFundPK


		set @RedemptUnit = @CUnitAmount
		                        

        set @RedemptUnit = @RedemptUnit * -1

        Select @UnitPrevious = @UnitPrevious + @OldRedemptUnit

        set @UnitPrevious = isnull(@UnitPrevious,0)

        update fundclientpositionsummary
		set Unit = Unit + @RedemptUnit
		where FundClientPK = @CFundClientPK and FundPK = @CFundPK
                                    
                               
        --Buy = 1,
        --Sell = 2,
        --Adjustment = 3,
        --SwitchingIn = 5,
        --SwitchingOut = 6

        insert into [FundClientPositionLog]
                    ([UserId]
                    ,[FundClientPK]
                    ,[TransactionPK]
                    ,[ClientTransactionPK]
                    ,[UnitPrevious]
                    ,[UnitChanges]
                    ,[UnitAfter]
                    ,[IsBoTransaction]
                    ,[TransactionType]
                    ,[Description]
                    ,[FundPK])
        Select @PostedBy,@CFundClientPK,@TransactionPK,@CClientRedemptionPK,@UnitPrevious,@RedemptUnit,@UnitPrevious + @RedemptUnit
        ,case when @TrxFrom = 'rdo' then 0 else 1 end,2,'Posting Redemption',@CFundPK



	update clientRedemption    
	set PostedBy = @PostedBy,PostedTime = @PostedTime,Posted = 1,Lastupdate = @PostedTime    
	where ClientRedemptionPK = @CClientRedemptionPK and Status = 2    

	   
	Declare @counterDate datetime      
	set @counterDate = @CNavDate      
	while @counterDate < (select dbo.fworkingday(max(valueDate),1)  from EndDayTrails)    
	BEGIN    
	set @counterDate = dbo.fworkingday(@counterdate,1)      
	update fundClientPosition set UnitAmount = UnitAmount  - @CUnitAmount,CashAmount = CashAmount - @CCashAmount    
	where FundClientPK = @CFundClientPK and FundPK = @CFundPK and Date = @counterDate end    
	   
	
    Fetch next From A 
    Into @CFundPK,@CClientRedemptionPK,@CNAVDate,@CPaymentDate,@CTotalUnitAmount,
	        @CTotalCashAmount,@CUnitAmount,@CCashAmount,@CAgentFeeAmount,@CRedemptionFeeAmount,
	        @CFundClientPK,@CFundClientID,@CFundClientName,@CFundCashRefPK,@CHistoryPK
    end
    Close A
    Deallocate A



                        ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@PostedBy", _usersID);
                        cmd.Parameters.AddWithValue("@PostedTime", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }
        public void ClientSwitching_PostingBySelected(string _usersID, DateTime _dateFrom, DateTime _dateTo, bool _bitManageUR, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {
            try
            {

                string paramClientSwitchingSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientSwitchingSelected = " And ClientSwitchingPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientSwitchingSelected = " And ClientSwitchingPK in (0) ";
                }

                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        string _parambitManageUR = "";

                        if (_bitManageUR == true)
                        {
                            _parambitManageUR = "Where A.status = 2   and A.Posted = 0 and A.ClientSwitchingPK in (select PK from ZManage_UR where Selected = 1 and Type = 3 and Date between @DateFrom and @DateTo) ";
                        }
                        else
                        {
                            _parambitManageUR = "where  A.Status = 2 and Posted  = 0 and Revised  = 0  and ValueDate between @datefrom and @dateto " + paramClientSwitchingSelected;
                        }

                        cmd.CommandText =
                           @"
declare @CashAmountFundFrom numeric(22,2)
declare @CashAmountFundTo numeric(22,2)
declare @SwitchingFeeAmount numeric(22,2)
declare @TotalCashAmountFundFrom numeric(22,2)
declare @TotalCashAmountFundTo numeric(22,2)
declare @TotalUnitAmountFundFrom numeric(22,4)
declare @TotalUnitAmountFundTo numeric(22,4)
declare @ValueDate datetime
declare @FundClientPK int
declare @FundPKFrom int
declare @FundPKTo int
declare @ClientSwitchingPK int
Declare @HistoryPK int
declare @TrxFrom nvarchar(200)
declare @TransactionPK nvarchar(200)
Declare @FeeType nvarchar(100)
Declare @FundClientID nvarchar(200)
Declare @FundClientName nvarchar(200)
Declare @NAVDate datetime
Declare @PaymentDate datetime
Declare @UnitAmount numeric(22,4)

declare @BankPK int
declare @BankCurrencyPK int


Declare @SubscriptionAcc int Declare @PayableSubsAcc int Declare  @PendingSubscription int
Declare @RedemptionAcc int Declare @PayableRedemptionAcc int Declare @PayableSwitchingFee int

Declare @PeriodPK int 
Declare @FundjournalPK int

Select @PeriodPK = PeriodPK From Period Where @DateFrom Between DateFrom and DateTo and Status = 2     


DECLARE A CURSOR FOR 
select TotalCashAmountFundFrom,TotalCashAmountFundTo, TotalUnitAmountFundFrom,
TotalUnitAmountFundTo,FundPKFrom, FundPKTo,A.FundClientPK,ValueDate, ClientSwitchingPK, A.EntryUsersID ,TransactionPK, A.HistoryPK,FeeType
,SwitchingFeeAmount,PaymentDate,NAVDate,B.ID,B.Name,CashAmount,UnitAmount
from ClientSwitching A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
" + _parambitManageUR + @"
--where  A.Status = 2 and A.Selected = 1 and Posted  = 0 and Revised  = 0  and ValueDate between @datefrom and @dateto
	
Open A
Fetch Next From A
Into @TotalCashAmountFundFrom,@TotalCashAmountFundTo, @TotalUnitAmountFundFrom,@TotalUnitAmountFundTo,@FundPKFrom, @FundPKTo,@FundClientPK
,@ValueDate,@ClientSwitchingPK,@TrxFrom, @TransactionPK,@HistoryPK,@FeeType,@SwitchingFeeAmount,@PaymentDate,@NAVDate
,@FundClientID,@FundClientName,@CashAmountFundFrom,@UnitAmount


While @@FETCH_STATUS = 0
BEGIN


if Exists(Select *from FundClientPosition where date = @ValueDate and FundClientPK = @FundClientPK and FundPK = @FundPKTo)
begin 
Update FundClientPosition set CashAmount = CashAmount + @TotalCashAmountFundTo, 
UnitAmount = UnitAmount + @TotalUnitAmountFundTo where Date = @ValueDate and FundClientPK = @FundClientPK 
and FundPK = @FundPKTo 
end 
else 
begin
INSERT INTO  FundClientPosition (Date,FundClientPK,FundPK,CashAmount,UnitAmount) 
select @ValueDate,@FundClientPK,@FundPKTo,@TotalCashAmountFundTo,@TotalUnitAmountFundTo 
end


Update FundClientPosition set  
UnitAmount = UnitAmount - @UnitAmount where Date = @ValueDate and FundClientPK = @FundClientPK 
and FundPK = @FundPKFrom 

        Declare @LastNAV numeric(22,8)
		Declare @SubsUnit numeric(22,8)
		                        
		set @SubsUnit = @TotalUnitAmountFundTo
		                          

        Declare @UnitPrevious numeric(22,8)
        Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
        where FundClientPK = @FundClientPK and FundPK = @FundPKTo
        set @UnitPrevious = isnull(@UnitPrevious,0)
                               

        if exists(
            Select * from FundClientPositionSummary where FundClientPK = @FundClientPK and FundPK = @FundPKTo
        )BEGIN
        update fundclientpositionsummary
		set Unit = Unit + @SubsUnit
		where FundClientPK = @FundClientPK and FundPK = @FundPKTo
        END
        ELSE
        BEGIN
                Insert into FundClientPositionSummary (FundPK,FundClientPK,Unit)
            Select @FundPKTo,@FundClientPK,@SubsUnit
        END


                                
                               
        --Buy = 1,
        --Sell = 2,
        --Adjustment = 3,
        --SwitchingIn = 5,
        --SwitchingOut = 6

        insert into [FundClientPositionLog]
                    ([UserId]
                    ,[FundClientPK]
                    ,[TransactionPK]
                    ,[ClientTransactionPK]
                    ,[UnitPrevious]
                    ,[UnitChanges]
                    ,[UnitAfter]
                    ,[IsBoTransaction]
                    ,[TransactionType]
                    ,[Description]
                    ,[FundPK])
        Select @PostedBy,@FundClientPK, @TransactionPK,@ClientSwitchingPK,@UnitPrevious,@SubsUnit,@UnitPrevious + @SubsUnit
        ,Case when @TrxFrom = 'rdo' then 0 else 1 end,5,'Posting Switching In',@FundPKTo



		Declare @SwitchingUnit numeric(22,8)


        Declare @OldSwitchingUnit numeric(22,8)
        Declare @OldUnitAmount numeric(22,8)
        Declare @OldNAVDate datetime
        Declare @OldFundPK int
        Declare @OldFundClientPK int
        Declare @OldCashAmount numeric(24,4)
        Declare @OldNAV numeric(18,8)
                                   
        Select @OldFundPK = FundPKFrom,@OldFundClientPK = FundClientPK, @OldNAVDate = NAVDate,@OldNAV = NAVFundFrom, @TrxFrom = EntryUsersID,@TransactionPK  = TransactionPK
        From ClientSwitching where ClientSwitchingPK = @ClientSwitchingPK and HistoryPK = @HistoryPK

        Select @OldUnitAmount = UnitChanges * -1 from FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
        and ClientTransactionPK = @ClientSwitchingPK and TransactionType = 6 and ID =
        (
            Select max(ID) From FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                                and ClientTransactionPK = @ClientSwitchingPK and TransactionType = 6
        )

        Set @OldCashAmount = 0


		Select @LastNAV  = NAV
		from CloseNAV where Date = 
		(
		Select Max(date) From CloseNAV Where FundPK = @OldFundPK and status = 2 and Date < @OldNAVDate
		) and status = 2 and FundPK = @OldFundPK

		set @LastNAV = isnull(@LastNAV,1)
		set @OldSwitchingUnit = 0
		IF @OldCashAmount > 0 and @oldNAV = 0
		BEGIN
			set @OldSwitchingUnit = @OldCashAmount / @LastNAV
		END
		ELSE
		BEGIN
			set @OldSwitchingUnit = @OldUnitAmount
		END

        Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
        where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK

        update fundclientpositionsummary
		set Unit = Unit + isnull(@OldSwitchingUnit,0)
		where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK
                               
        --Buy = 1,
        --Sell = 2,
        --Adjustment = 3,
        --SwitchingIn = 5,
        --SwitchingOut = 6

        insert into [FundClientPositionLog]
                    ([UserId]
                    ,[FundClientPK]
                    ,[TransactionPK]
                    ,[ClientTransactionPK]
                    ,[UnitPrevious]
                    ,[UnitChanges]
                    ,[UnitAfter]
                    ,[IsBoTransaction]
                    ,[TransactionType]
                    ,[Description]
                    ,[FundPK])
        Select @PostedBy,@OldFundClientPK,@TransactionPK ,@ClientSwitchingPK,@UnitPrevious,@OldSwitchingUnit,@UnitPrevious + @OldSwitchingUnit
        ,Case when @TrxFrom = 'rdo' then 0 else 1 end,6,'Posting Switching Out Old Data Revise',@OldFundPK

		                         
		set @SwitchingUnit = @TotalUnitAmountFundFrom
		                          

        set @SwitchingUnit = @SwitchingUnit * -1

        Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
        where FundClientPK = @FundClientPK and FundPK = @FundPKFrom

        set @UnitPrevious = isnull(@UnitPrevious,0)

        update fundclientpositionsummary
		set Unit = Unit + isnull(@SwitchingUnit,0)
		where FundClientPK = @FundClientPK and FundPK = @FundPKFrom
                               
        --Buy = 1,
        --Sell = 2,
        --Adjustment = 3,
        --SwitchingIn = 5,
        --SwitchingOut = 6

        insert into [FundClientPositionLog]
                    ([UserId]
                    ,[FundClientPK]
                    ,[TransactionPK]
                    ,[ClientTransactionPK]
                    ,[UnitPrevious]
                    ,[UnitChanges]
                    ,[UnitAfter]
                    ,[IsBoTransaction]
                    ,[TransactionType]
                    ,[Description]
                    ,[FundPK])
        Select @PostedBy,@FundClientPK,@TransactionPK,@ClientSwitchingPK,@UnitPrevious,@SwitchingUnit,@UnitPrevious + @SwitchingUnit,
    case when @TrxFrom = 'rdo' then 0 else 1 end,6,'Posting Switching out',@FundPKFrom





Declare @counterDateFrom datetime    
Declare @counterDateTo datetime      
set @counterDateFrom = @ValueDate  
set @counterDateTo = @ValueDate    
                            
while @counterDateTo < (select dbo.fworkingday(max(valueDate),1)  from EndDayTrails)    
BEGIN    
	set @counterDateTo = dateadd(day,0,dbo.FWorkingDay(@counterDateTo,1))     
 
	if Exists(Select *from FundClientPosition where date = @counterDateTo and FundClientPK = @FundClientPK and FundPK = @FundPKTo)
	begin 
	update fundClientPosition set UnitAmount = UnitAmount  + @TotalUnitAmountFundTo,CashAmount = CashAmount + @TotalCashAmountFundTo    
	where FundClientPK = @FundClientPK and FundPK = @FundPKTo and Date = @counterDateTo 
	end 
	else 
	begin
	INSERT INTO  FundClientPosition (Date,FundClientPK,FundPK,CashAmount,UnitAmount) 
	select @counterDateTo,@FundClientPK,@FundPKTo,@TotalCashAmountFundTo,@TotalUnitAmountFundTo 
	END
END

while @counterDateFrom < (select dbo.fworkingday(max(valueDate),1)  from EndDayTrails)    
BEGIN    
set @counterDateFrom = dbo.FWorkingDay(@counterDateFrom,1)     
update fundClientPosition set UnitAmount = UnitAmount  - @UnitAmount,CashAmount = CashAmount - @TotalCashAmountFundFrom    
where FundClientPK = @FundClientPK and FundPK = @FundPKFrom and Date = @counterDateFrom 
END



update ClientSwitching 
set PostedBy = @PostedBy,PostedTime = @PostedTime,Posted = 1,Lastupdate = @PostedTime 
where ValueDate = @ValueDate and FundClientPK = @FundClientPK 
and FundPKFrom = @FundPKFrom and FundPKTo = @FundPKTo and Status = 2 and Posted  = 0 and Revised = 0 and ClientSwitchingPK = @ClientSwitchingPK

Fetch next From A 
Into @TotalCashAmountFundFrom,@TotalCashAmountFundTo, @TotalUnitAmountFundFrom,@TotalUnitAmountFundTo,@FundPKFrom, 
@FundPKTo,@FundClientPK,@ValueDate,@ClientSwitchingPK,@TrxFrom, @TransactionPK,@HistoryPK,@FeeType
,@SwitchingFeeAmount,@PaymentDate,@NAVDate
,@FundClientID,@FundClientName,@CashAmountFundFrom,@UnitAmount
END
Close A
Deallocate A 
                            ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@PostedBy", _usersID);
                        cmd.Parameters.AddWithValue("@PostedTime", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }
        public void ClientSubscription_Revise(ClientSubscription _clientSubscription)
        {

            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText =
                        @"


                        select * from FundClientPosition 
                        where Date = @Date and FundClientPK = @FundClientPK and FundPK = @FundPK 
                        if @@rowCount > 0 
                        begin 
                        Update FundClientPosition set CashAmount = CashAmount - @CashAmount, 
                        UnitAmount = UnitAmount - @UnitAmount where Date = @Date and FundClientPK = @FundClientPK 
                        and FundPK = @FundPK 
                        end 
                        
                         Declare @MaxClientSubscriptionPK int 
                        
                         Select @MaxClientSubscriptionPK = ISNULL(MAX(ClientSubscriptionPK),0) + 1 From ClientSubscription   
                         INSERT INTO [dbo].[ClientSubscription]  
                         ([ClientSubscriptionPK],[HistoryPK] ,[Status],[Notes], [NAVDate] ,[ValueDate],
                          [NAV] ,[FundPK], [FundClientPK] , [CashRefPK] , [Description] ,
                         [CashAmount] ,[UnitAmount] ,[TotalCashAMount] ,[TotalUnitAmount] ,[SubscriptionFeePercent] ,[SubscriptionFeeAmount] ,
                         [AgentPK] ,[AgentFeePercent],[AgentFeeAmount],[CurrencyPK],[DepartmentPK],[AutoDebitDate],[Type],
                         [EntryUsersID],[EntryTime],[LastUpdate],[BitImmediateTransaction],[FeeType],[TransactionPK],[IsFrontSync])
                        
                         SELECT @MaxClientSubscriptionPK,1,1,'Pending Revised' ,[NAVDate] ,
                         [ValueDate],[NAV] ,[FundPK],[FundClientPK] ,
                         [CashRefPK] ,[Description] ,[CashAmount] ,[UnitAmount] ,[TotalCashAMount] ,[TotalUnitAmount] ,
                         [SubscriptionFeePercent] ,[SubscriptionFeeAmount] ,[AgentPK] ,[AgentFeePercent],[AgentFeeAmount],[CurrencyPK],[DepartmentPK],[AutoDebitDate],[Type],
                         [EntryUsersID],[EntryTime] , @RevisedTime, [BitImmediateTransaction],[FeeType],[TransactionPK],0
                         FROM ClientSubscription  
                         WHERE ClientSubscriptionPK = @ClientSubscriptionPK   and status = 2 and posted = 1 
                       
                        
                        update ClientSubscription 
                        set RevisedBy = @RevisedBy,RevisedTime = @RevisedTime,Revised = 1 , status = 3 , IsFrontSync = 0
                        where ClientSubscriptionPK = @ClientSubscriptionPK and Status = 2 and posted = 1 
                        
                        Declare @counterDate datetime " +
                        "set @counterDate = @Date  " +
                        "while @counterDate < (select max(date) from fundClientPosition where FundClientPK = @FundClientPK and FundPK = @FundPK) " +
                        "BEGIN " +
                        "set @counterDate = dbo.fworkingday(@counterDate,1) \n " +
                        "update fundClientPosition set UnitAmount = UnitAmount - @UnitAmount,CashAmount = CashAmount - @CashAmount " +
                        "where FundClientPK = @FundClientPK and FundPK = @FundPK and Date = @counterDate end "
                        + @"
                        
                                    Declare @LastNAV numeric(22,8)
		                           Declare @SubsUnit numeric(22,8)


                                    Declare @OldSubsUnit numeric(22,8)
                                    Declare @OldUnitAmount numeric(22,8)
                                    Declare @OldNAVDate datetime
                                    Declare @OldFundPK int
                                    Declare @OldFundClientPK int
                                    Declare @OldCashAmount numeric(24,4)
                                    Declare @OldNAV numeric(18,8)
                                    Declare @TrxFrom nvarchar(200)
                                    Declare @TransactionPK nvarchar(200)

                                    Select @OldFundPK = FundPK,@OldFundClientPK = FundClientPK, @OldNAVDate = NAVDate,@oldNAV = NAV
                                    ,@TrxFrom = EntryUsersID, @TransactionPK = TransactionPK
                                    From ClientSubscription where ClientSubscriptionPK = @PK and HistoryPK = @HistoryPK

                                    Select @OldUnitAmount = UnitChanges * -1 from FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                     and ClientTransactionPK = @PK and TransactionType = 1 and ID =
                                    (
                                        Select max(ID) From FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                                                         and ClientTransactionPK = @PK and TransactionType = 1
                                    )


				                   set @OldSubsUnit = @OldUnitAmount
		                      

                                    Declare @UnitPrevious numeric(22,8)
                                    Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
                                    where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK

                                    set @UnitPrevious = isnull(@UnitPrevious,0)

                                   update fundclientpositionsummary
		                           set Unit = Unit + @OldSubsUnit
		                           where FundClientPK = @FundClientPK and FundPK = @FundPK

                               
                                    --Buy = 1,
                                    --Sell = 2,
                                    --Adjustment = 3,
                                    --SwitchingIn = 5,
                                    --SwitchingOut = 6

                                    insert into [FundClientPositionLog]
                                               ([UserId]
                                               ,[FundClientPK]
                                               ,[TransactionPK]
                                               ,[ClientTransactionPK]
                                               ,[UnitPrevious]
                                               ,[UnitChanges]
                                               ,[UnitAfter]
                                               ,[IsBoTransaction]
                                               ,[TransactionType]
                                               ,[Description]
                                                ,[FundPK])
                                    Select @RevisedBy,@OldFundClientPK,@TransactionPK,@PK,@UnitPrevious,@OldSubsUnit,@UnitPrevious + @OldSubsUnit
                                    ,Case when @TrxFrom = 'rdo' then 0 else 1 end,1,'Revise Subscription Old Data Revise',@OldFundPK
                        
                        ";

                        cmd.Parameters.AddWithValue("@Date", _clientSubscription.ValueDate);
                        cmd.Parameters.AddWithValue("@FundClientPK", _clientSubscription.FundClientPK);
                        cmd.Parameters.AddWithValue("@FundPK", _clientSubscription.FundPK);
                        cmd.Parameters.AddWithValue("@CashAmount", _clientSubscription.TotalCashAmount);
                        cmd.Parameters.AddWithValue("@UnitAmount", _clientSubscription.TotalUnitAmount);
                        cmd.Parameters.AddWithValue("@RevisedBy", _clientSubscription.RevisedBy);
                        cmd.Parameters.AddWithValue("@RevisedTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@ClientSubscriptionPK", _clientSubscription.ClientSubscriptionPK);
                        cmd.Parameters.AddWithValue("@PK", _clientSubscription.ClientSubscriptionPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _clientSubscription.HistoryPK);
                        cmd.ExecuteNonQuery();
                    }
                }
            }



            catch (Exception err)
            {
                throw err;
            }

        }

        public void ClientRedemption_Revise(ClientRedemption _clientRedemption)
        {

            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText =
                        @"                        


                                    if exists(select * from FundClientPosition 
                                    where Date = @Date and FundClientPK = @FundClientPK and FundPK = @FundPK 
                                    )
                                    begin 
                                        Update FundClientPosition set CashAmount = CashAmount + @CashAmount, 
                                        UnitAmount = UnitAmount + @UnitAmount where Date = @Date and FundClientPK = @FundClientPK 
                                        and FundPK = @FundPK 
                                    end 
                         
                                     Declare @MaxClientRedemptionPK int 
                       
                                     Select @MaxClientRedemptionPK = ISNULL(MAX(ClientRedemptionPK),0) + 1 From ClientRedemption   
                                     INSERT INTO [dbo].[ClientRedemption]  
                                     ([ClientRedemptionPK],[HistoryPK] ,[Status],[Notes], [NAVDate] ,[ValueDate],
                                     [PaymentDate],[BitRedemptionAll], [NAV] ,[FundPK], [FundClientPK] , [CashRefPK] ,[Description] ,
                                     [CashAmount] ,[UnitAmount] ,[TotalCashAMount] ,[TotalUnitAmount] ,[RedemptionFeePercent] ,[RedemptionFeeAmount] ,
                                     [AgentPK] ,[AgentFeePercent],[AgentFeeAmount],[CurrencyPK],
                                     [DepartmentPK],[Type],[BankRecipientPK],[TransferType],[FeeType],
                                     [EntryUsersID],[EntryTime],[LastUpdate],[TransactionPK],[IsFrontSync])
                       
                                     SELECT @MaxClientRedemptionPK,1,1,'Pending Revised' ,[NAVDate] ,
                                     [ValueDate],[PaymentDate],[BitRedemptionAll],[NAV] ,[FundPK],[FundClientPK] ,
                                     [CashRefPK] ,[Description] ,[CashAmount] ,[UnitAmount] ,[TotalCashAMount] ,[TotalUnitAmount] ,
                                     [RedemptionFeePercent] ,[RedemptionFeeAmount] ,[AgentPK] ,[AgentFeePercent],[AgentFeeAmount],[CurrencyPK],
                                     [DepartmentPK],[Type],[BankRecipientPK],[TransferType],[FeeType],
                                     [EntryUsersID],[EntryTime] , @RevisedTime,[TransactionPK],0
                                     FROM ClientRedemption   
                                     WHERE ClientRedemptionPK = @ClientRedemptionPK   and status = 2 and posted = 1  
                        
                        
                                update ClientRedemption 
                                set RevisedBy = @RevisedBy,RevisedTime = @RevisedTime,Revised = 1, status = 3 , IsFrontSync = 0
                                where ClientRedemptionPK = @ClientRedemptionPK and Status = 2 and posted = 1 
                        
                                Declare @counterDate datetime 
                                set @counterDate = @Date 
                                while @counterDate < (select max(date) from fundClientPosition where FundClientPK = @FundClientPK and FundPK = @FundPK )
                                BEGIN " +
                                "set @counterDate = dbo.fworkingday(@counterDate,1) \n " +
                                @"update fundClientPosition set UnitAmount = UnitAmount + @UnitAmount,CashAmount = CashAmount + @CashAmount
                                where FundClientPK = @FundClientPK and FundPK = @FundPK and Date = @counterDate end 

                                  Declare @LastNAV numeric(22,8)
		                           Declare @RedemptUnit numeric(22,8)


                                    Declare @OldRedemptUnit numeric(22,8)
                                    Declare @OldUnitAmount numeric(22,8)
                                    Declare @OldNAVDate datetime
                                    Declare @OldFundPK int
                                    Declare @OldFundClientPK int
                                    Declare @OldCashAmount numeric(24,4)
                                    Declare @OldNAV numeric(18,8)
                                    Declare @TrxFrom nvarchar(200)
                                    Declare @TransactionPK nvarchar(200)
                                    Select @OldFundPK = FundPK,@OldFundClientPK = FundClientPK, @OldNAVDate = NAVDate,@oldNAV = NAV,@TransactionPK = TransactionPK,@TrxFrom = EntryUsersID
                                    From ClientRedemption where ClientRedemptionPK = @PK and HistoryPK = @HistoryPK

                                    Select @OldUnitAmount = UnitChanges * -1 from FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                    and ClientTransactionPK = @PK and TransactionType = 2 and ID =
                                    (
                                        Select max(ID) from FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                                                        and ClientTransactionPK = @PK and TransactionType = 2
                                    )

                                    Set @OldCashAmount = 0


		                           Select @LastNAV  = NAV
		                           from CloseNAV where Date = 
		                           (
			                        Select Max(date) From CloseNAV Where FundPK = @OldFundPK and status = 2 and Date < @OldNAVDate
		                           ) and status = 2 and FundPK = @OldFundPK

		                           set @LastNAV = isnull(@LastNAV,1)
		                           set @OldRedemptUnit = 0
		                           IF @OldCashAmount > 0 and @oldNAV = 0
		                           BEGIN
				                        set @OldRedemptUnit = @OldCashAmount / @LastNAV
		                           END
		                           ELSE
		                           BEGIN
				                        set @OldRedemptUnit = @OldUnitAmount
		                           END

                                    Declare @UnitPrevious numeric(22,8)
                                    Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
                                    where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK
                                    set @UnitPrevious = isnull(@UnitPrevious,0)

                                    --Buy = 1,
                                    --Sell = 2,
                                    --Adjustment = 3,
                                    --SwitchingIn = 5,
                                    --SwitchingOut = 6

                                    insert into [FundClientPositionLog]
                                               ([UserId]
                                               ,[FundClientPK]
                                               ,[TransactionPK]
                                               ,[ClientTransactionPK]
                                               ,[UnitPrevious]
                                               ,[UnitChanges]
                                               ,[UnitAfter]
                                               ,[IsBoTransaction]
                                               ,[TransactionType]
                                               ,[Description]
                                                ,[FundPK])
                                    Select @RevisedBy,@OldFundClientPK,@TransactionPK,@PK,@UnitPrevious,@OldRedemptUnit,@UnitPrevious + @OldRedemptUnit
                                    ,Case when @TrxFrom = 'rdo' then 0 else 1 end,2,'Revise Redemption Old Data Revise',@OldFundPK

                                    insert into [FundClientPositionLog]
                                               ([UserId]
                                               ,[FundClientPK]
                                               ,[TransactionPK]
                                               ,[ClientTransactionPK]
                                               ,[UnitPrevious]
                                               ,[UnitChanges]
                                               ,[UnitAfter]
                                               ,[IsBoTransaction]
                                               ,[TransactionType]
                                               ,[Description]
                                                ,[FundPK])
                                    Select @RevisedBy,@OldFundClientPK,@TransactionPK,@MaxClientRedemptionPK,@UnitPrevious + @OldRedemptUnit,@OldRedemptUnit * -1,@UnitPrevious + @OldRedemptUnit + (@OldRedemptUnit *-1)
                                    ,Case when @TrxFrom = 'rdo' then 0 else 1 end,2,'Revise Redemption',@OldFundPK



";

                        cmd.Parameters.AddWithValue("@Date", _clientRedemption.ValueDate);
                        cmd.Parameters.AddWithValue("@FundClientPK", _clientRedemption.FundClientPK);
                        cmd.Parameters.AddWithValue("@FundPK", _clientRedemption.FundPK);
                        cmd.Parameters.AddWithValue("@CashAmount", _clientRedemption.TotalCashAmount);
                        cmd.Parameters.AddWithValue("@UnitAmount", _clientRedemption.UnitAmount);
                        cmd.Parameters.AddWithValue("@RevisedBy", _clientRedemption.RevisedBy);
                        cmd.Parameters.AddWithValue("@RevisedTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@ClientRedemptionPK", _clientRedemption.ClientRedemptionPK);
                        cmd.Parameters.AddWithValue("@UpdateUsersID", _clientRedemption.RevisedBy);
                        cmd.Parameters.AddWithValue("@PK", _clientRedemption.ClientRedemptionPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _clientRedemption.HistoryPK);
                        cmd.ExecuteNonQuery();
                    }


                }
            }



            catch (Exception err)
            {
                throw err;
            }

        }

        public void ClientSwitching_Revise(string _usersID, ClientSwitching _clientSwitching)
        {

            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText =
                        @"
                            declare @TotalUnitAmountFundFrom numeric(22,4)
                            declare @TotalUnitAmountFundTo numeric(22,4)
                            declare @ValueDate datetime
                            declare @FundPKFrom int
                            declare @FundPKTo int
                            declare @MaxClientSwitchingPK int
                            declare @FundClientPK int

                            select @TotalUnitAmountFundFrom=unitamount,@TotalUnitAmountFundTo=TotalUnitAmountFundTo,
                            @ValueDate = NAVDate, @FundPKFrom = FundPKFrom, @FundPKTo = FundPKTo, @FundClientPK = FundClientPK
                            from ClientSwitching where  Status = 2 and clientSwitchingPK = @ClientSwitchingPK and Posted  = 1 and Revised  = 0 

                            if Exists(Select *from FundClientPosition where date = @ValueDate and FundClientPK = @FundClientPK and FundPK = @FundPKTo)
                            begin 
                            Update FundClientPosition set  
                            UnitAmount = UnitAmount - @TotalUnitAmountFundTo where Date = @ValueDate and FundClientPK = @FundClientPK 
                            and FundPK = @FundPKTo 
                            end 

                            if Exists(Select *from FundClientPosition where date = @ValueDate and FundClientPK = @FundClientPK and FundPK = @FundPKFrom)
                            begin 
                            Update FundClientPosition set  
                            UnitAmount = UnitAmount + @TotalUnitAmountFundFrom where Date = @ValueDate and FundClientPK = @FundClientPK 
                            and FundPK = @FundPKFrom 
                            end 
                            


                            Select @MaxClientSwitchingPK = ISNULL(MAX(ClientSwitchingPK),0) + 1 From ClientSwitching   
                            INSERT INTO [dbo].[ClientSwitching]  
                            ([ClientSwitchingPK],[HistoryPK] ,[Status],[Notes], [NAVDate] ,[ValueDate],
                            [PaymentDate], [NAVFundFrom] ,[NAVFundTo] ,[FundPKFrom],[FundPKTo], [FundClientPK] , [CashRefPKFrom] ,[CashRefPKTo] ,[BitSwitchingAll], [Description] ,
                            [CashAmount] ,[UnitAmount] ,[TotalCashAmountFundFrom] ,[TotalCashAmountFundTo] ,
                            [TotalUnitAmountFundFrom] ,[TotalUnitAmountFundTo] ,[SwitchingFeePercent] ,[SwitchingFeeAmount],[CurrencyPK],
                            [TransferType],[FeeType],[FeeTypeMethod],
                            [EntryUsersID],[EntryTime],[LastUpdate],IsProcessed,[IsFrontSync],userswitchingPK,TransactionPK)
                        
                            SELECT @MaxClientSwitchingPK,1,1,'Pending Revised' ,[NAVDate] ,
                            [ValueDate],[PaymentDate],[NAVFundFrom],[NAVFundTo] ,[FundPKFrom],[FundPKTo],[FundClientPK] ,
                            [CashRefPKFrom] ,[CashRefPKTo] ,[BitSwitchingAll],[Description] ,[CashAmount] ,[UnitAmount] ,[TotalCashAmountFundFrom] ,[TotalCashAmountFundTo] ,[TotalUnitAmountFundFrom] ,[TotalUnitAmountFundTo] ,
                            [SwitchingFeePercent] ,[SwitchingFeeAmount] ,[CurrencyPK],
                            [TransferType],[FeeType],[FeeTypeMethod],
                            [EntryUsersID],[EntryTime] ,@RevisedTime,0,0,userswitchingPK,TransactionPK 
                            FROM ClientSwitching  
                            where ClientSwitchingPK = @ClientSwitchingPK

                            update ClientSwitching 
                            set RevisedBy = @RevisedBy,RevisedTime = @RevisedTime,Revised = 1,Lastupdate = @RevisedTime, status = 3 ,IsFrontSync = 0
                            where  clientSwitchingPK = @ClientSwitchingPK and Status = 2 and Revised = 0 and Posted  = 1

                            Declare @counterDateFrom datetime    
                            Declare @counterDateTo datetime      
                            set @counterDateFrom = @ValueDate  
                            set @counterDateTo = @ValueDate  

                            while @counterDateTo < 
                            (select max(date) from fundClientPosition where FundClientPK = @FundClientPK)    
                            BEGIN 
                                set @counterDateTo = dbo.FWorkingDay(@counterDateTo,1)    
		                        update fundClientPosition set UnitAmount = UnitAmount  - @TotalUnitAmountFundTo    
		                        where FundClientPK = @FundClientPK and FundPK = @FundPKTo and Date = @counterDateTo 
	                            
                            END

                            while @counterDateFrom < (select max(date) from fundClientPosition where FundClientPK = @FundClientPK)    
                            BEGIN    
	                            set @counterDateFrom = dbo.FWorkingDay(@counterDateFrom,1)    
	                            update fundClientPosition set UnitAmount = UnitAmount  + @TotalUnitAmountFundFrom 
	                            where FundClientPK = @FundClientPK and FundPK = @FundPKFrom and Date = @counterDateFrom 
                            END

                                    Declare @LastNAV numeric(22,8)
		                           Declare @SubsUnit numeric(22,8)


                                    Declare @OldSubsUnit numeric(22,8)
                                    Declare @OldUnitAmount numeric(22,8)
                                    Declare @OldNAVDate datetime
                                    Declare @OldFundPK int
                                    Declare @OldFundClientPK int
                                    Declare @OldCashAmount numeric(24,4)
                                    Declare @OldNAV numeric(18,8)
                                    Declare @TrxFrom nvarchar(200)
                                    declare @TransactionPK  nvarchar(200)
                                    Select @OldFundPK = FundPKFrom,@OldFundClientPK = FundClientPK, @OldNAVDate = NAVDate,@oldNAV = NAVFundFrom,@TrxFrom = EntryUsersID,@TransactionPK  = TransactionPK
                                    From ClientSwitching where ClientSwitchingPK = @PK and HistoryPK = @HistoryPK

                                    Select @OldUnitAmount = UnitChanges * -1 from FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                     and ClientTransactionPK = @PK and TransactionType = 6 and ID =
                                    (
                                        Select max(ID) From FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                                                         and ClientTransactionPK = @PK and TransactionType = 6
                                    )

				                   set @OldSubsUnit = @OldUnitAmount
		                      

                                    Declare @UnitPrevious numeric(22,8)
                                    Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
                                    where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK

                                   --update fundclientpositionsummary
		                           --set Unit = Unit + @OldSubsUnit
		                           --where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK
                               
                                    --Buy = 1,
                                    --Sell = 2,
                                    --Adjustment = 3,
                                    --SwitchingIn = 5,
                                    --SwitchingOut = 6

                                    insert into [FundClientPositionLog]
                                               ([UserId]
                                               ,[FundClientPK]
                                               ,[TransactionPK]
                                               ,[ClientTransactionPK]
                                               ,[UnitPrevious]
                                               ,[UnitChanges]
                                               ,[UnitAfter]
                                               ,[IsBoTransaction]
                                               ,[TransactionType]
                                               ,[Description]
                                                ,[FundPK])
                                    Select @RevisedBy,@OldFundClientPK,@TransactionPK,@PK,@UnitPrevious,@OldSubsUnit,@UnitPrevious + @OldSubsUnit,
                                    Case when @TrxFrom = 'rdo' then 0 else 1 end,6,'Revise Switching Out Old Data Revise',@OldFundPK

                                    insert into [FundClientPositionLog]
                                               ([UserId]
                                               ,[FundClientPK]
                                               ,[TransactionPK]
                                               ,[ClientTransactionPK]
                                               ,[UnitPrevious]
                                               ,[UnitChanges]
                                               ,[UnitAfter]
                                               ,[IsBoTransaction]
                                               ,[TransactionType]
                                               ,[Description]
                                                ,[FundPK])
                                    Select @RevisedBy,@OldFundClientPK,@TransactionPK,@MaxClientSwitchingPK,@UnitPrevious + @OldSubsUnit,@OldSubsUnit * -1,@UnitPrevious + @OldSubsUnit + (@OldSubsUnit *-1)
                                    ,Case when @TrxFrom = 'rdo' then 0 else 1 end,6,'Revise Switching Out',@OldFundPK


                                    Select @OldFundPK = FundPKTo,@OldFundClientPK = FundClientPK, @OldNAVDate = NAVDate,@oldNAV = NAVFundTo,@TrxFrom = EntryUsersID,@TransactionPK  = TransactionPK
                                    From ClientSwitching where ClientSwitchingPK = @PK and HistoryPK = @HistoryPK

                                    Select @OldUnitAmount = UnitChanges * -1 from FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                    and ClientTransactionPK = @PK and TransactionType = 5 and ID =
                                    (
                                        Select max(ID) From FundClientPositionLog where FundClientPK = @OldFundClientPK and FundPK = @oldFundPK
                                                                         and ClientTransactionPK = @PK and TransactionType = 5
                                    )


				                   set @OldSubsUnit = @OldUnitAmount
		                      

                                    Select @UnitPrevious = isnull(Unit,0) From FundClientPositionSummary
                                    where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK

                                   update fundclientpositionsummary
		                           set Unit = Unit + @OldSubsUnit
		                           where FundClientPK = @OldFundClientPK and FundPK = @OldFundPK
                               
                                    --Buy = 1,
                                    --Sell = 2,
                                    --Adjustment = 3,
                                    --SwitchingIn = 5,
                                    --SwitchingOut = 6

                                    insert into [FundClientPositionLog]
                                               ([UserId]
                                               ,[FundClientPK]
                                               ,[TransactionPK]
                                               ,[ClientTransactionPK]
                                               ,[UnitPrevious]
                                               ,[UnitChanges]
                                               ,[UnitAfter]
                                               ,[IsBoTransaction]
                                               ,[TransactionType]
                                               ,[Description]
                                                ,[FundPK])
                                    Select @RevisedBy,@OldFundClientPK,@TransactionPK ,@PK,@UnitPrevious,@OldSubsUnit,@UnitPrevious + @OldSubsUnit
                                    ,Case when @TrxFrom = 'rdo' then 0 else 1 end,5,'Revise Switching IN Old Data Revise',@OldFundPK

                                    insert into [FundClientPositionLog]
                                               ([UserId]
                                               ,[FundClientPK]
                                               ,[TransactionPK]
                                               ,[ClientTransactionPK]
                                               ,[UnitPrevious]
                                               ,[UnitChanges]
                                               ,[UnitAfter]
                                               ,[IsBoTransaction]
                                               ,[TransactionType]
                                               ,[Description]
                                                ,[FundPK])
                                    Select @RevisedBy,@OldFundClientPK,@TransactionPK ,@MaxClientSwitchingPK,@UnitPrevious + @OldSubsUnit,@OldSubsUnit * -1,@UnitPrevious + @OldSubsUnit + (@OldSubsUnit *-1)
                                    ,Case when @TrxFrom = 'rdo' then 0 else 1 end,5,'Revise Switching IN',@OldFundPK

                        ";

                        cmd.Parameters.AddWithValue("@RevisedBy", _usersID);
                        cmd.Parameters.AddWithValue("@RevisedTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@ClientSwitchingPK", _clientSwitching.ClientSwitchingPK);
                        cmd.Parameters.AddWithValue("@PK", _clientSwitching.ClientSwitchingPK);
                        cmd.Parameters.AddWithValue("@HistoryPK", _clientSwitching.HistoryPK);
                        cmd.ExecuteNonQuery();
                    }
                }
            }



            catch (Exception err)
            {
                throw err;
            }

        }

        public int EndDayTrails_Generate(string _usersID, DateTime _valueDate)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
 
                        Declare @MSG nvarchar (Max)   
                        Declare @PeriodPK int                  
                        Declare @maxEndDayTrailsPK int    
                        Declare @DateYesterday datetime 
                        Declare @DefaultCashAtBankPK int

                        set @DefaultCashAtBankPK = 3

                        Select  @DateYesterday  = ValueDate From enddaytrails
                        where status = 2 and valuedate =(
                        Select Max(valueDate) From EnddayTrails where status = 2 and ValueDate < @ValueDate
                        )

                        Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  and status = 2                
                        Select @maxEndDayTrailsPK = ISNULL(EndDayTrailsPK,0) + 1 from EndDayTrails     

                        set @maxEndDayTrailsPK = isnull(@maxEndDayTrailsPK,1)               

                        
                        Insert into EndDayTrails(EndDayTrailsPK,HistoryPK,Status,ValueDate,BitValidate,LogMessages
                        ,EntryUsersID,EntryTime,LastUpdate)                    
                        Select @maxEndDayTrailsPK,1,1,@ValueDate,0,'',@UsersID,@LastUpdate,@LastUpdate  

                        ---- NEW -----
                        if Not Exists(              
                        Select * from CloseNAV where Status = 2 and date = @DateYesterday             
                        )              
                        BEGIN              
                        Set @MSG = 'MISSING DATA: Close NAV Yesterday'              
                        Update EndDayTrails set BitValidate = 0,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1               
                        Select @maxEndDayTrailsPK LastPK                   
                        RETURN;                   
                        END              

                        -- COPY FUND CLIENT POSITION --    
    
                  
if not exists(
	select * from FundClientPosition where date = dbo.FWorkingDay(@ValueDate, 1)
)
BEGIN

    
Declare @CPFundPK int           
Declare A Cursor For              
Select FundPK From Fund Where status = 2              
Open  A              
Fetch Next From  A              
into @CPFundPK              
While @@Fetch_Status = 0              
BEGIN              
Insert into FundClientPosition(Date,FundClientPk,FundPK,CashAmount,UnitAmount,LastUpdate)              
Select dbo.FWorkingDay(@ValueDate, 1),FundClientPK,FundPK,CashAmount,UnitAmount,@LastUpdate              
From FundClientPosition where Date = @ValueDate and FundPK = @CPFundPK           
Fetch next From A                   
Into @CPFundPK              
END                  
Close A                  
Deallocate A


END    




UPDATE A 
SET A.AvgNAV = dbo.FGetAVGForFundClientPosition(@ValueDate,A.FundClientPK,A.FundPK), A.AUM = ISNULL(C.UnitAmount,0) * ISNULL(B.Nav,0)
FROM FundClientPosition A
    LEFT JOIN CloseNAV B on A.FUndPK = B.FundPK and B.status = 2 and B.date = @ValueDate
    LEFT JOIN FundClientPosition C ON A.FundPK = C.FundPK AND A.FundClientPK = C.FundClientPK AND C.Date = @DateYesterday
WHERE A.Date = @ValueDate

UPDATE A 
SET A.AUM = ISNULL(B.AUM,0), A.AvgNAV = ISNULL(B.AvgNAV,0) 
FROM dbo.FundClientPositionSummary A
    LEFT JOIN dbo.FundClientPosition B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK AND B.Date  = @ValueDate
                        -- REGULER INSTRUCTION

                        Declare @ClientSubscriptionPK int
                        Declare @ClientRedemptionPK int
                        Declare @DateWorkingTo datetime

                        set @DateWorkingTo = dbo.FWorkingDay(@ValueDate, 1)

                        Create table #dayTemp
                        (
                        IntDay  int
                        )

                        WHILE (@Valuedate < @DateWorkingTo)
                        BEGIN
                        set @Valuedate = DATEADD(day,1,@Valuedate)
                        insert into #dayTemp
                        Select day(@Valuedate)
                        END

                        select @ClientSubscriptionPK = isnull(max(ClientSubscriptionPK),0)  + 1 from ClientSubscription
                        select @ClientRedemptionPK = isnull(max(ClientRedemptionPK),0)  + 1 from ClientRedemption
    
                        INSERT INTO [dbo].[ClientSubscription]    
                        ([ClientSubscriptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate],   
                        [NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount],   
                        [SubscriptionFeePercent],[SubscriptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[Type],[AutoDebitDate],[EntryUsersID],[EntryTime],[LastUpdate])   
                        select @ClientSubscriptionPK + ROW_NUMBER() OVER(ORDER BY A.FundClientPK ASC),1,1,@DateWorkingTo,@DateWorkingTo,   
                        0,FundPK,A.FundClientPK,FundCashRefPK,1,'',GrossAmount,0,NetAmount,0,    
                        FeePercent,FeeAmount,isnull(B.SellingAgentPK,0),0,0,2,@ValueDate,@UsersID,@LastUpdate,@LastUpdate    
                        From RegulerInstruction A 
                        left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2
                        where AutoDebitDate in (
                        select IntDay From #dayTemp
                        ) and  A.status = 2 and A.TrxType = 1

                        INSERT INTO [dbo].[ClientRedemption]    
                        ([ClientRedemptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate],   
                        [NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount],   
                        [RedemptionFeePercent],[RedemptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[BankRecipientPK],[Type],[EntryUsersID],[EntryTime],[LastUpdate])   
                        select @ClientRedemptionPK + ROW_NUMBER() OVER(ORDER BY A.FundClientPK ASC),1,1,@DateWorkingTo,@DateWorkingTo,   
                        0,FundPK,A.FundClientPK,FundCashRefPK,1,'',GrossAmount,0,NetAmount,0,    
                        FeePercent,FeeAmount,isnull(B.SellingAgentPK,0),0,0,BankRecipientPK,2,@UsersID,@LastUpdate,@LastUpdate    
                        From RegulerInstruction A left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2
                        where AutoDebitDate in (
                        select IntDay From #dayTemp
                        ) and  A.status = 2 and A.TrxType = 2


                        Update EndDayTrails set BitValidate = 1,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1                    

                        Select @maxEndDayTrailsPK LastPK     
                             
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public List<FundClient> FundClient_Select(int _status)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<FundClient> L_FundClient = new List<FundClient>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_status != 9)
                        {
                            cmd.CommandText = "select  case when FC.status=1 then 'PENDING' else Case When FC.status = 2 then 'APPROVED' else Case when FC.Status = 3 then 'VOID' else 'WAITING' END END END StatusDesc,A.ID SellingAgentID,mv1.DescOne KodeKotaInd1Desc,mv2.DescOne KodeKotaInd2Desc,mv3.DescOne KodeKotaInsDesc, " +
                            "mv4.DescOne OtherKodeKotaInd1Desc,mv5.DescOne OtherKodeKotaInd2Desc,mv6.DescOne OtherKodeKotaInd3Desc, " +
                            "mv7.DescOne ClientCategoryDesc,mv8.DescOne InvestorTypeDesc,mv9.DescOne JenisKelaminDesc, " +
                            "mv10.DescOne StatusPerkawinanDesc,mv11.DescOne PekerjaanDesc,mv12.DescOne PendidikanDesc, " +
                            "mv13.DescOne AgamaDesc,mv14.DescOne PenghasilanIndDesc,mv15.DescOne SumberDanaIndDesc, " +
                            "mv16.DescOne MaksudTujuanIndDesc,mv17.DescOne DomisiliDesc,mv18.DescOne TipeDesc, " +
                            "mv19.DescOne KarakteristikDesc,mv20.DescOne PenghasilanInstitusiDesc, " +
                            "mv21.DescOne SumberDanaInstitusiDesc,mv22.DescOne MaksudTujuanInstitusiDesc, mv41.DescOne CountryOfBirthDesc, " +

                            "mv42.DescOne CountryofCorrespondenceDesc, mv43.DescOne CountryofDomicileDesc, " +
                            "mv44.DescOne CountryofEstablishmentDesc, mv45.DescOne CountryofCompanyDesc, mv46.DescOne CompanyCityNameDesc, " +

                            "mv24.DescOne NegaraDesc,mv25.DescOne NationalityDesc,mv26.DescOne PropinsiDesc,mv27.DescOne OtherPropinsiInd1Desc,mv28.DescOne OtherPropinsiInd2Desc,mv29.DescOne OtherPropinsiInd3Desc, " +
                            "mv30.DescOne OtherNegaraInd1Desc,mv31.DescOne OtherNegaraInd2Desc,mv32.DescOne OtherNegaraInd3Desc,isnull(IC.Name,'') InternalCategoryID, " +
                            "mv33.DescOne InvestorsRiskProfileDesc,mv34.DescOne AssetOwnerDesc,mv35.DescOne StatementTypeDesc,mv36.DescOne fatcaDesc,mv37.DescOne TINIssuanceCountryDesc,mv38.DescOne BankCountry1Desc,mv39.DescOne BankCountry2Desc,mv40.DescOne BankCountry3Desc,mv47.DescOne KodeKotaKantorIndDesc,mv48.DescOne KodePropinsiKantorIndDesc,mv49.DescOne KodeCountryofKantorDesc,mv50.DescOne KodeDomisiliPropinsiDesc," +
                            "mv53.DescOne AgamaOfficer1Desc,mv54.DescOne AgamaOfficer2Desc,mv55.DescOne AgamaOfficer3Desc,mv56.DescOne AgamaOfficer4Desc," +
                            "BC1.BICode BIMemberCode1,BC2.BICode BIMemberCode2,BC3.BICode BIMemberCode3,BC4.SInvestID BICCode1Name,BC5.SInvestID BICCode2Name,BC6.SInvestID BICCode3Name, mv51.DescOne LegalityDesc, mv52.DescOne BeneficialWorkDesc, case when fc.ClientOnBoard = 1 then 'Conventional Walk-in' else case when fc.ClientOnBoard = 2 then 'Online' else case when fc.ClientOnBoard = 3 then 'Referral' else '' end end end ClientOnBoardDesc" +
                            "  case when fc.ClientOnBoard = 1 then 'Conventional Walk-in' else case when fc.ClientOnBoard = 2 then 'Online' else case when fc.ClientOnBoard = 3 then 'Referral' else '' end end end ClientOnBoardDesc, " +
                            "* from FundClient fc  " +
                            "left join Agent A on fc.SellingAgentPK = A.AgentPK and A.status = 2 " +
                            "left join MasterValue mv1 on fc.KodeKotaInd1 = mv1.Code and mv1.ID = 'CityRHB' and mv1.status = 2 " +
                            "left join MasterValue mv2 on fc.KodeKotaInd2 = mv2.Code and  mv2.ID = 'CityRHB' and mv2.status = 2 " +
                            "left join MasterValue mv3 on fc.KodeKotaIns = mv3.Code and  mv3.ID = 'CityRHB' and mv3.status = 2 " +
                            "left join MasterValue mv4 on fc.OtherKodeKotaInd1 = mv4.Code and mv4.ID = 'CityRHB' and mv4.status = 2 " +
                            "left join MasterValue mv5 on fc.OtherKodeKotaInd2 = mv5.Code and mv5.ID = 'CityRHB' and mv5.status = 2 " +
                            "left join MasterValue mv6 on fc.OtherKodeKotaInd3 = mv6.Code and mv6.ID = 'CityRHB' and mv6.status = 2 " +
                            "left join MasterValue mv7 on fc.ClientCategory = mv7.code  and  mv7.ID = 'ClientCategory' and mv7.status = 2 " +
                            "left join MasterValue mv8 on fc.InvestorType = mv8.code and  mv8.ID = 'ClientType' and mv8.status = 2 " +
                            "left join MasterValue mv9 on fc.JenisKelamin = mv9.code and  mv9.ID = 'Sex' and mv9.status = 2 " +
                            "left join MasterValue mv10 on fc.StatusPerkawinan = mv10.code and  mv10.ID = 'MaritalStatus' and mv10.status = 2 " +
                            "left join MasterValue mv11 on fc.Pekerjaan = mv11.code and  mv11.ID = 'Occupation' and mv11.status = 2 " +
                            "left join MasterValue mv12 on fc.Pendidikan = mv12.code and  mv12.ID = 'EducationalBackground' and mv12.status = 2 " +
                            "left join MasterValue mv13 on fc.Agama = mv13.code and  mv13.ID = 'Religion' and mv13.status = 2 " +
                            "left join MasterValue mv14 on fc.PenghasilanInd = mv14.code and  mv14.ID = 'IncomeIND' and mv14.status = 2 " +
                            "left join MasterValue mv15 on fc.SumberDanaInd = mv15.code and  mv15.ID = 'IncomeSourceIND' and mv15.status = 2 " +
                            "left join MasterValue mv16 on fc.MaksudTujuanInd = mv16.code and  mv16.ID = 'InvestmentObjectivesIND' and mv16.status = 2 " +
                            "left join MasterValue mv17 on fc.Domisili = mv17.code and  mv17.ID = 'Domicile' and mv17.status = 2 " +
                            "left join MasterValue mv18 on fc.Tipe = mv18.code and  mv18.ID = 'CompanyType' and mv18.status = 2 " +
                            "left join MasterValue mv19 on fc.Karakteristik = mv19.code and  mv19.ID = 'CompanyCharacteristic' and mv19.status = 2 " +
                            "left join MasterValue mv20 on fc.PenghasilanInstitusi = mv20.code and  mv20.ID = 'IncomeINS' and mv20.status = 2 " +
                            "left join MasterValue mv21 on fc.SumberDanaInstitusi = mv21.code and  mv21.ID = 'IncomeSourceIND' and mv21.status = 2 " +
                            "left join MasterValue mv22 on fc.MaksudTujuanInstitusi = mv22.code and  mv22.ID = 'InvestmentObjectivesINS' and mv22.status = 2 " +
                            "left join MasterValue mv24 on fc.Negara = mv24.code and  mv24.ID = 'SDICountry' and mv24.status = 2 " +
                            "left join MasterValue mv25 on fc.Nationality = mv25.code and  mv25.ID = 'SDICountry' and mv25.status = 2 " +
                            "left join MasterValue mv26 on fc.Propinsi = mv26.code and  mv26.ID = 'SDIProvince' and mv26.status = 2 " +
                            "left join MasterValue mv27 on fc.OtherPropinsiInd1 = mv27.code and  mv27.ID = 'SDIProvince' and mv27.status = 2 " +
                            "left join MasterValue mv28 on fc.OtherPropinsiInd2 = mv28.code and  mv28.ID = 'SDIProvince' and mv28.status = 2 " +
                            "left join MasterValue mv29 on fc.OtherPropinsiInd3 = mv29.code and  mv29.ID = 'SDIProvince' and mv29.status = 2 " +
                            "left join MasterValue mv30 on fc.OtherNegaraInd1 = mv30.code and  mv30.ID = 'SDICountry' and mv30.status = 2 " +
                            "left join MasterValue mv31 on fc.OtherNegaraInd2 = mv31.code and  mv31.ID = 'SDICountry' and mv31.status = 2 " +
                            "left join MasterValue mv32 on fc.OtherNegaraInd3 = mv32.code and  mv32.ID = 'SDICountry' and mv32.status = 2 " +
                            "left join InternalCategory IC on fc.InternalCategoryPK = IC.InternalCategoryPK and IC.status = 2 " +
                            "left join MasterValue mv33 on fc.InvestorsRiskProfile = mv33.code and  mv33.ID = 'InvestorsRiskProfile' and mv33.status = 2 " +
                            "left join MasterValue mv34 on fc.AssetOwner = mv34.code and  mv34.ID = 'AssetOwner' and mv34.status = 2 " +
                            "left join MasterValue mv35 on fc.StatementType = mv35.code and  mv35.ID = 'StatementType' and mv35.status = 2 " +
                            "left join MasterValue mv36 on fc.fatca = mv36.code and  mv36.ID = 'FATCA' and mv36.status = 2 " +
                            "left join MasterValue mv37 on fc.TINIssuanceCountry = mv37.code and  mv37.ID = 'SDICountry' and mv37.status = 2 " +
                            "left join MasterValue mv38 on fc.BankCountry1 = mv38.code and  mv38.ID = 'SDICountry' and mv38.status = 2 " +
                            "left join MasterValue mv39 on fc.BankCountry2 = mv39.code and  mv39.ID = 'SDICountry' and mv39.status = 2 " +
                            "left join MasterValue mv40 on fc.BankCountry3 = mv40.code and  mv40.ID = 'SDICountry' and mv40.status = 2 " +
                            "left join MasterValue mv41 on fc.CountryOfBirth = mv41.code and  mv41.ID = 'SDICountry' and mv41.status = 2 " +
                            "left join MasterValue mv42 on fc.CountryofCorrespondence = mv42.code and  mv42.ID = 'SDICountry' and mv42.status = 2 " +
                            "left join MasterValue mv43 on fc.CountryofDomicile = mv43.code and  mv43.ID = 'SDICountry' and mv43.status = 2 " +
                            "left join MasterValue mv44 on fc.CountryofEstablishment = mv44.code and  mv44.ID = 'SDICountry' and mv44.status = 2 " +
                            "left join MasterValue mv45 on fc.CountryofCompany = mv45.code and  mv45.ID = 'SDICountry' and mv45.status = 2 " +
                            "left join MasterValue mv46 on fc.CompanyCityName = mv46.Code and mv46.ID = 'CityRHB' and mv46.status = 2 " +
                            "left join MasterValue mv47 on fc.KodeKotaKantorInd = mv42.code and  mv47.ID = 'CityRHB' and mv47.status = 2 " +
                            "left join MasterValue mv48 on fc.KodePropinsiKantorInd = mv48.code and  mv48.ID = 'SDIProvince' and mv48.status = 2 " +
                            "left join MasterValue mv49 on fc.KodeCountryofKantor = mv49.code and  mv49.ID = 'SDICountry' and mv49.status = 2 " +
                            "left join MasterValue mv50 on fc.KodeDomisiliPropinsi = mv50.code and  mv50.ID = 'SDIProvince' and mv50.status = 2 " +
                            "left join MasterValue mv51 on fc.Legality = mv51.code and  mv51.ID = 'Legality' and mv51.status = 2 " +
                            "left join MasterValue mv52 on fc.BeneficialWork = mv52.code and  mv52.ID = 'Occupation' and mv52.status = 2 " +

                            "left join MasterValue mv53 on fc.Agama = mv53.code and  mv53.ID = 'Religion' and mv53.status = 2 " +
                            "left join MasterValue mv54 on fc.Agama = mv54.code and  mv54.ID = 'Religion' and mv54.status = 2 " +
                            "left join MasterValue mv55 on fc.Agama = mv55.code and  mv55.ID = 'Religion' and mv55.status = 2 " +
                            "left join MasterValue mv56 on fc.Agama = mv56.code and  mv56.ID = 'Religion' and mv56.status = 2 " +

                            " left join Bank BC1 on fc.NamaBank1 = BC1.BankPK and BC1.status = 2  " +
                            " left join Bank BC2 on fc.NamaBank2 = BC2.BankPK and BC2.status = 2  " +
                            " left join Bank BC3 on fc.NamaBank3 = BC3.BankPK and BC3.status = 2  " +
                            " left join Bank BC4 on fc.NamaBank1 = BC4.BankPK and BC4.status = 2  " +
                            " left join Bank BC5 on fc.NamaBank2 = BC5.BankPK and BC5.status = 2  " +
                            " left join Bank BC6 on fc.NamaBank3 = BC6.BankPK and BC6.status = 2  " +
                            "where  FC.status = @status and FC.BitIsSuspend = 0  and (FC.DormantDate is null or FC.DormantDate = '01/01/1900') ";
                            cmd.Parameters.AddWithValue("@status", _status);
                        }
                        else
                        {
                            cmd.CommandText = "select case when FC.status=1 then 'PENDING' else Case When FC.status = 2 then 'APPROVED' else Case when FC.Status = 3 then 'VOID' else 'WAITING' END END END StatusDesc,A.ID SellingAgentID,mv1.DescOne KodeKotaInd1Desc,mv2.DescOne KodeKotaInd2Desc,mv3.DescOne KodeKotaInsDesc, " +
                             "mv4.DescOne OtherKodeKotaInd1Desc,mv5.DescOne OtherKodeKotaInd2Desc,mv6.DescOne OtherKodeKotaInd3Desc, " +
                             "mv7.DescOne ClientCategoryDesc,mv8.DescOne InvestorTypeDesc,mv9.DescOne JenisKelaminDesc, " +
                             "mv10.DescOne StatusPerkawinanDesc,mv11.DescOne PekerjaanDesc,mv12.DescOne PendidikanDesc, " +
                             "mv13.DescOne AgamaDesc,mv14.DescOne PenghasilanIndDesc,mv15.DescOne SumberDanaIndDesc, " +
                             "mv16.DescOne MaksudTujuanIndDesc,mv17.DescOne DomisiliDesc,mv18.DescOne TipeDesc, " +
                             "mv19.DescOne KarakteristikDesc,mv20.DescOne PenghasilanInstitusiDesc, " +
                             "mv21.DescOne SumberDanaInstitusiDesc,mv22.DescOne MaksudTujuanInstitusiDesc, mv41.DescOne CountryOfBirthDesc, " +

                            "mv42.DescOne CountryofCorrespondenceDesc, mv43.DescOne CountryofDomicileDesc, " +
                            "mv44.DescOne CountryofEstablishmentDesc, mv45.DescOne CountryofCompanyDesc, mv46.DescOne CompanyCityNameDesc, " +

                             "mv24.DescOne NegaraDesc,mv25.DescOne NationalityDesc,mv26.DescOne PropinsiDesc,mv27.DescOne OtherPropinsiInd1Desc,mv28.DescOne OtherPropinsiInd2Desc,mv29.DescOne OtherPropinsiInd3Desc, " +
                             "mv30.DescOne OtherNegaraInd1Desc,mv31.DescOne OtherNegaraInd2Desc,mv32.DescOne OtherNegaraInd3Desc,isnull(IC.Name,'') InternalCategoryID, " +
                             "mv33.DescOne InvestorsRiskProfileDesc,mv34.DescOne AssetOwnerDesc,mv35.DescOne StatementTypeDesc,mv36.DescOne fatcaDesc,mv37.DescOne TINIssuanceCountryDesc,mv38.DescOne BankCountry1Desc,mv39.DescOne BankCountry2Desc,mv40.DescOne BankCountry3Desc,mv47.DescOne KodeKotaKantorIndDesc,mv48.DescOne KodePropinsiKantorIndDesc,mv49.DescOne KodeCountryofKantorDesc,mv50.DescOne KodeDomisiliPropinsiDesc," +
                                "BC1.BICode BIMemberCode1,BC2.BICode BIMemberCode2,BC3.BICode BIMemberCode3,BC4.SInvestID BICCode1Name,BC5.SInvestID BICCode2Name,BC6.SInvestID BICCode3Name, mv51.DescOne LegalityDesc, mv52.DescOne BeneficialWorkDesc, case when fc.ClientOnBoard = 1 then 'Conventional Walk-in' else case when fc.ClientOnBoard = 2 then 'Online' else case when fc.ClientOnBoard = 3 then 'Referral' else '' end end end ClientOnBoardDesc" +
                                "mv53.DescOne AgamaOfficer1Desc,mv54.DescOne AgamaOfficer2Desc,mv55.DescOne AgamaOfficer3Desc,mv56.DescOne AgamaOfficer4Desc," +
                             "* from FundClient fc  " +
                             "left join Agent A on fc.SellingAgentPK = A.AgentPK and A.status = 2 " +
                             "left join MasterValue mv1 on fc.KodeKotaInd1 = mv1.Code and mv1.ID = 'CityRHB' and mv1.status = 2 " +
                             "left join MasterValue mv2 on fc.KodeKotaInd2 = mv2.Code and  mv2.ID = 'CityRHB' and mv2.status = 2 " +
                             "left join MasterValue mv3 on fc.KodeKotaIns = mv3.Code and  mv3.ID = 'CityRHB' and mv3.status = 2 " +
                             "left join MasterValue mv4 on fc.OtherKodeKotaInd1 = mv4.Code and mv4.ID = 'CityRHB' and mv4.status = 2 " +
                             "left join MasterValue mv5 on fc.OtherKodeKotaInd2 = mv5.Code and mv5.ID = 'CityRHB' and mv5.status = 2 " +
                             "left join MasterValue mv6 on fc.OtherKodeKotaInd3 = mv6.Code and mv6.ID = 'CityRHB' and mv6.status = 2 " +
                             "left join MasterValue mv7 on fc.ClientCategory = mv7.code  and  mv7.ID = 'ClientCategory' and mv7.status = 2 " +
                             "left join MasterValue mv8 on fc.InvestorType = mv8.code and  mv8.ID = 'ClientType' and mv8.status = 2 " +
                             "left join MasterValue mv9 on fc.JenisKelamin = mv9.code and  mv9.ID = 'Sex' and mv9.status = 2 " +
                             "left join MasterValue mv10 on fc.StatusPerkawinan = mv10.code and  mv10.ID = 'MaritalStatus' and mv10.status = 2 " +
                             "left join MasterValue mv11 on fc.Pekerjaan = mv11.code and  mv11.ID = 'Occupation' and mv11.status = 2 " +
                             "left join MasterValue mv12 on fc.Pendidikan = mv12.code and  mv12.ID = 'EducationalBackground' and mv12.status = 2 " +
                             "left join MasterValue mv13 on fc.Agama = mv13.code and  mv13.ID = 'Religion' and mv13.status = 2 " +
                             "left join MasterValue mv14 on fc.PenghasilanInd = mv14.code and  mv14.ID = 'IncomeIND' and mv14.status = 2 " +
                             "left join MasterValue mv15 on fc.SumberDanaInd = mv15.code and  mv15.ID = 'IncomeSourceIND' and mv15.status = 2 " +
                             "left join MasterValue mv16 on fc.MaksudTujuanInd = mv16.code and  mv16.ID = 'InvestmentObjectivesIND' and mv16.status = 2 " +
                             "left join MasterValue mv17 on fc.Domisili = mv17.code and  mv17.ID = 'Domicile' and mv17.status = 2 " +
                             "left join MasterValue mv18 on fc.Tipe = mv18.code and  mv18.ID = 'CompanyType' and mv18.status = 2 " +
                             "left join MasterValue mv19 on fc.Karakteristik = mv19.code and  mv19.ID = 'CompanyCharacteristic' and mv19.status = 2 " +
                             "left join MasterValue mv20 on fc.PenghasilanInstitusi = mv20.code and  mv20.ID = 'IncomeINS' and mv20.status = 2 " +
                             "left join MasterValue mv21 on fc.SumberDanaInstitusi = mv21.code and  mv21.ID = 'IncomeSourceIND' and mv21.status = 2 " +
                             "left join MasterValue mv22 on fc.MaksudTujuanInstitusi = mv22.code and  mv22.ID = 'InvestmentObjectivesINS' and mv22.status = 2 " +
                             "left join MasterValue mv24 on fc.Negara = mv24.code and  mv24.ID = 'SDICountry' and mv24.status = 2 " +
                             "left join MasterValue mv25 on fc.Nationality = mv25.code and  mv25.ID = 'Nationality' and mv25.status = 2 " +
                             "left join MasterValue mv26 on fc.Propinsi = mv26.code and  mv26.ID = 'SDIProvince' and mv26.status = 2 " +
                             "left join MasterValue mv27 on fc.OtherPropinsiInd1 = mv27.code and  mv27.ID = 'SDIProvince' and mv27.status = 2 " +
                             "left join MasterValue mv28 on fc.OtherPropinsiInd2 = mv28.code and  mv28.ID = 'SDIProvince' and mv28.status = 2 " +
                             "left join MasterValue mv29 on fc.OtherPropinsiInd3 = mv29.code and  mv29.ID = 'SDIProvince' and mv29.status = 2 " +
                             "left join MasterValue mv30 on fc.OtherNegaraInd1 = mv30.code and  mv30.ID = 'SDICountry' and mv30.status = 2 " +
                             "left join MasterValue mv31 on fc.OtherNegaraInd2 = mv31.code and  mv31.ID = 'SDICountry' and mv31.status = 2 " +
                             "left join MasterValue mv32 on fc.OtherNegaraInd3 = mv32.code and  mv32.ID = 'SDICountry' and mv32.status = 2 " +
                             "left join InternalCategory IC on fc.InternalCategoryPK = IC.InternalCategoryPK and IC.status = 2 " +
                             "left join MasterValue mv33 on fc.InvestorsRiskProfile = mv33.code and  mv33.ID = 'InvestorsRiskProfile' and mv33.status = 2 " +
                             "left join MasterValue mv34 on fc.AssetOwner = mv34.code and  mv34.ID = 'AssetOwner' and mv34.status = 2 " +
                             "left join MasterValue mv35 on fc.StatementType = mv35.code and  mv35.ID = 'StatementType' and mv35.status = 2 " +
                             "left join MasterValue mv36 on fc.fatca = mv36.code and  mv36.ID = 'FATCA' and mv36.status = 2 " +
                             "left join MasterValue mv37 on fc.TINIssuanceCountry = mv37.code and  mv37.ID = 'SDICountry' and mv37.status = 2 " +
                             "left join MasterValue mv38 on fc.BankCountry1 = mv38.code and  mv38.ID = 'SDICountry' and mv38.status = 2 " +
                             "left join MasterValue mv39 on fc.BankCountry2 = mv39.code and  mv39.ID = 'SDICountry' and mv39.status = 2 " +
                             "left join MasterValue mv40 on fc.BankCountry3 = mv40.code and  mv40.ID = 'SDICountry' and mv40.status = 2 " +
                             "left join MasterValue mv41 on fc.CountryOfBirth = mv41.code and  mv41.ID = 'SDICountry' and mv41.status = 2 " +
                             "left join MasterValue mv42 on fc.CountryofCorrespondence = mv42.code and  mv42.ID = 'SDICountry' and mv42.status = 2 " +
                            "left join MasterValue mv43 on fc.CountryofDomicile = mv43.code and  mv43.ID = 'SDICountry' and mv43.status = 2 " +
                            "left join MasterValue mv44 on fc.CountryofEstablishment = mv44.code and  mv44.ID = 'SDICountry' and mv44.status = 2 " +
                            "left join MasterValue mv45 on fc.CountryofCompany = mv45.code and  mv45.ID = 'SDICountry' and mv45.status = 2 " +
                             "left join MasterValue mv46 on fc.CompanyCityName = mv46.Code and mv46.ID = 'CityRHB' and mv46.status = 2 " +
                            "left join MasterValue mv47 on fc.KodeKotaKantorInd = mv42.code and  mv47.ID = 'CityRHB' and mv47.status = 2 " +
                            "left join MasterValue mv48 on fc.KodePropinsiKantorInd = mv48.code and  mv48.ID = 'SDIProvince' and mv48.status = 2 " +
                            "left join MasterValue mv49 on fc.KodeCountryofKantor = mv49.code and  mv49.ID = 'SDICountry' and mv49.status = 2 " +
                            "left join MasterValue mv50 on fc.KodeDomisiliPropinsi = mv50.code and  mv50.ID = 'SDIProvince' and mv50.status = 2 " +
                            "left join MasterValue mv51 on fc.Legality = mv51.code and  mv51.ID = 'Legality' and mv51.status = 2 " +
                            "left join MasterValue mv52 on fc.BeneficialWork = mv52.code and  mv52.ID = 'Occupation' and mv52.status = 2 " +

                            "left join MasterValue mv53 on fc.Agama = mv53.code and  mv53.ID = 'Religion' and mv53.status = 2 " +
                            "left join MasterValue mv54 on fc.Agama = mv54.code and  mv54.ID = 'Religion' and mv54.status = 2 " +
                            "left join MasterValue mv55 on fc.Agama = mv55.code and  mv55.ID = 'Religion' and mv55.status = 2 " +
                            "left join MasterValue mv56 on fc.Agama = mv56.code and  mv56.ID = 'Religion' and mv56.status = 2 " +

                             " left join Bank BC1 on fc.NamaBank1 = BC1.BankPK and BC1.status = 2  " +
                             " left join Bank BC2 on fc.NamaBank2 = BC2.BankPK and BC2.status = 2  " +
                             " left join Bank BC3 on fc.NamaBank3 = BC3.BankPK and BC3.status = 2  " +
                            " left join Bank BC4 on fc.NamaBank1 = BC4.BankPK and BC4.status = 2  " +
                            " left join Bank BC5 on fc.NamaBank2 = BC5.BankPK and BC5.status = 2  " +
                            " left join Bank BC6 on fc.NamaBank3 = BC6.BankPK and BC6.status = 2  where FC.BitIsSuspend = 0 and (FC.DormantDate is null or FC.DormantDate = '01/01/1900') ";
                        }

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_FundClient.Add(setFundClient(dr));
                                }
                            }
                            return L_FundClient;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public HighRiskMonitoring HighRiskMonitoring_ValidateMaxUnitFundAndIncomePerAnnum(string _usersID, decimal _cashAmount, int _fundPK, DateTime _valueDate, int _fundClientPK)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                    
CREATE Table #Reason (Result int, Reason nvarchar(max))

    Declare @MaxUnit numeric (18,6)
    Declare @UnitAmount numeric (18,6)
    Declare @LastNav numeric (18,6)
    select @LastNav = [dbo].[FgetLastCloseNav](@ValueDate,@FundPK)
    select @LastNav = case when @LastNav = 0 then 1000 else @LastNav end 

    select @UnitAmount = sum(Unit) from (
    select sum(UnitAmount) Unit from fundclientPosition where FundPK = @FundPK and Date = @ValueDate
    union all
    select sum(CashAmount/@LastNav) Unit from ClientSubscription where status not in (3,4)and ValueDate = @ValueDate and FundPK = @FundPK
    union all
    select sum(case when UnitAmount = 0 then CashAmount/@LastNav else UnitAmount End) * -1 Unit from ClientRedemption where status not in (3,4)and ValueDate = @ValueDate and FundPK = @FundPK
    union all
    select sum(case when UnitAmount = 0 then CashAmount/@LastNav else UnitAmount End) * -1 Unit from ClientSwitching where status not in (3,4)and ValueDate = @ValueDate and FundPKFrom = @FundPK
    union all
    select sum(case when UnitAmount = 0 then CashAmount/@LastNav else UnitAmount End) Unit from ClientSwitching where status not in (3,4)and ValueDate = @ValueDate and FundPKTo = @FundPK
    union all 
    Select @Amount/@LastNav Unit     
                       
    ) A
    Select @MaxUnit = MaxUnits from Fund where FundPK = @FundPK and status in (1,2)

    IF (@UnitAmount >= @MaxUnit)
    BEGIN
	    Insert into #Reason (Result,Reason)
	    select 1 Result,'Total Unit Subscription Fund : ' + CONVERT(varchar, CAST(@UnitAmount AS money), 1) + ' and Max Unit Fund : ' +  CONVERT(varchar, CAST(@MaxUnit AS money), 1) Reason
    END
    
	DECLARE @IncomePerAnnum numeric(32,0)
    select @IncomePerAnnum = IncomePerAnnum from (
    select case when Code = 1 then 9999999 
    else case when Code = 2 then 50000000 
    else case when Code = 3 then 100000000 
    else case when Code = 4 then 500000000
    else case when Code = 5 then 1000000000
    else  9990000000 end end end end end  IncomePerAnnum from FundClient A 
    left join MasterValue B on A.PenghasilanInd = B.Code and B.ID = 'IncomeIND' and B.Status in (1,2)
    where FundClientPK = @FundClientPK and A.Status =2 and ClientCategory = 1
    union all
    select  case when Code = 1 then 99999999999 
    else case when Code = 2 then 500000000000 
    else case when Code = 3 then 1000000000000
    else case when Code = 4 then 5000000000000
    else case when Code = 5 then 6000000000000
    else  9000000000000 end end end end END * 0.8 IncomePerAnnum from FundClient A 
    left join MasterValue B on A.AssetFor1Year = B.Code and B.ID = 'AssetIns' and B.Status in (1,2)
    where FundClientPK = @FundClientPK and A.Status = 2 and ClientCategory = 2
    ) A


	DECLARE @TrxSubsAYear NUMERIC(22,0)
	DECLARE @TrxRedempAYear NUMERIC(22,0)
	DECLARE @ClientCategory INT 
	DECLARE @DateMinOne DATETIME
		DECLARE @DateMinTwo DATETIME
		DECLARE @TotalAUMInsti NUMERIC(22,0)
	SELECT @ClientCategory = ClientCategory FROM FundClient WHERE FundClientPK = @FundClientPK AND Status IN (1,2)

	IF(@ClientCategory = 1)
	BEGIN
		SELECT @TrxSubsAYear = SUM(ISNULL(CashAmount,0)) FROM dbo.ClientSubscription A WHERE status <> 3 AND Year(A.ValueDate) = Year(@ValueDate)
		AND FundClientPK = @FundClientPK
		SELECT @TrxRedempAYear = SUM(ISNULL(CashAmount,0))  FROM dbo.ClientRedemption A WHERE status <> 3 AND Year(A.ValueDate) = Year(@ValueDate)
		AND FundClientPK = @FundClientPK

		
	END

	ELSE
	BEGIN
		
		SET @DateMinOne = dbo.FWorkingDay(@ValueDate,-1)
		SET @DateMinTwo = dbo.FWorkingDay(@ValueDate,-2)
		SELECT @TotalAUMInsti = SUM(ISNULL(A.UnitAmount,0) * ISNULL(@LastNav,0)) FROM FundClientPosition A 
		WHERE A.Date = @DateMinTwo
		AND A.FundClientPK = @FundClientPK

		
	END
	SET @TrxSubsAYear = ISNULL(@TrxSubsAYear,0)
		SET @TrxRedempAYear = ISNULL(@TrxRedempAYear,0)
		SET @TotalAUMInsti = ISNULL(@TotalAUMInsti,0)

    IF (@Amount + @TrxSubsAYear - @TrxRedempAYear + @TotalAUMInsti > @IncomePerAnnum)
    BEGIN
    Declare @Reason nvarchar(500)
    Declare @PK int
                        
    set @Reason = 'Total Amount Subscription For this Year : ' + CONVERT(varchar, CAST(@Amount + @TrxSubsAYear - @TrxRedempAYear + @TotalAUMInsti AS money), 1) + ' and Max Income Per Annum : ' +  CONVERT(varchar, CAST(@IncomePerAnnum AS money), 1) + ' / Year'

    Insert into #Reason (Result,Reason)
    select 1 Result, @Reason


    END


    IF EXISTS(select Result,Reason from #Reason)
    BEGIN
	    DECLARE @combinedString VARCHAR(MAX)
	    SELECT @combinedString = COALESCE(@combinedString + '; ', '') + Reason
	    FROM #Reason
	    SELECT 1 Result,'Add Cancel, Please Check : ' + @combinedString as Reason
    END
    ELSE
    BEGIN
	    select 0 Result, '' Reason
    END
                           ";

                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        cmd.Parameters.AddWithValue("@Amount", _cashAmount);
                        cmd.Parameters.AddWithValue("@FundClientPK", _fundClientPK);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return new HighRiskMonitoring()
                                {
                                    Result = dr["Result"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr["Result"]),
                                    Reason = dr["Reason"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Reason"]),

                                };
                            }
                            else
                            {
                                return new HighRiskMonitoring()
                                {
                                    Result = 0,
                                    Reason = "",

                                };
                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }



    }
}