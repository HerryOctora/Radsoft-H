using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;using RFSRepository;


namespace RFSRepositoryOne
{
    public class CustomClient10Reps
    {
        Host _host = new Host();

        private class AUMComparison
        {
            public string FundID { get; set; }
            public string Date { get; set; }
            public decimal NavCustody { get; set; }
            public decimal NavVestanium { get; set; }
            public decimal Diff { get; set; }

        }

        private class UnitComparison
        {
            public string FundID { get; set; }
            public string Date { get; set; }
            public decimal UnitCustody { get; set; }
            public decimal UnitVestanium { get; set; }
            public decimal Diff { get; set; }

        }

        private class AUMHarian
        {

            public string FundName { get; set; }
            public string FundType { get; set; }
            public decimal NABPERUnit { get; set; }
            public decimal NilaiAktivaBersih { get; set; }
            public decimal Urutan { get; set; }

        }



        private class WindowRedemption
        {

            public string ClientName { get; set; }
            public string Bulan { get; set; }
            public string DividenDate { get; set; }
            public string MaxRedemptDate { get; set; }
            public string Priority { get; set; }
            public string FundName { get; set; }
            public string Period { get; set; }
            public string MaturityDate { get; set; }
            public string BankCustody { get; set; }

        }

        private class ProductAgencySummary
        {

            public string Type { get; set; }
            public string BankCustodiID { get; set; }
            public decimal BankCustodiFee { get; set; }
            public string TypeFund { get; set; }
            public string FundName { get; set; }
            public string EffectiveDate { get; set; }
            public string Agent { get; set; } 
            public decimal Rate { get; set; }
            public decimal AUM { get; set; }

        }



        public class ProductSummaryRpt
        {
            public string FundName { get; set; }
            public string CurrencyID { get; set; }
            public decimal Unit { get; set; }
            public decimal AUM { get; set; }
            public decimal ManagementFee { get; set; }
            public decimal SharingFee { get; set; }
            public decimal MFeePercent { get; set; }
            public string SInvestCode { get; set; }
            public string BankCustody { get; set; }
            public string FundType { get; set; }
            public string MFeeType { get; set; }
            public string SharingFeeType { get; set; }

        }
        public class SummaryTransactionMonitoring
        {
            public string SID { get; set; }
            public string Name { get; set; }
            public string Type { get; set; }
            public string FundRiskProfile { get; set; }
            public string InvestorsRisk { get; set; }
            public string KYCRiskProfile { get; set; }
            public string TransactionType { get; set; }
            public string GrossAnnualIncome { get; set; }
            public string NamaBankNorek { get; set; }
            public string TotalTransaksi { get; set; }
            public string TotalTransaksiBatasAtasGrossAnnualIncome { get; set; }

        }


        public class SalesTracking
        {
            public string AgentName { get; set; }
            public string FundType { get; set; }
            public decimal AUMDateFrom { get; set; }
            public decimal SalesAmount { get; set; }
            public decimal RedemptionAmount { get; set; }
            public decimal AUMDateTo { get; set; }
            public decimal ManagementFee { get; set; }
            public decimal TrailerFee { get; set; }
            public decimal TransactionFee { get; set; }
            public decimal RedempAmount { get; set; }
            public decimal AUM { get; set; }
            public decimal TrailFeeAmount { get; set; }
        }

        public class MonitoringFee
        {
            public string Produk { get; set; }
            public string FundTypeName { get; set; }
            public int FundType { get; set; }
            public int Currency { get; set; }
            public string CurrencyID { get; set; }
            public decimal AvgAUM { get; set; }
            public decimal AUM { get; set; }
            public decimal AUMweek { get; set; }
            public decimal AVGAUMweek { get; set; }
            public decimal AUMPercent { get; set; }
            public decimal AVGAUMPercent { get; set; }
            public decimal ManagementFee { get; set; }
            public decimal TrailerFee { get; set; }
            public decimal Nett { get; set; }
            public decimal NettPercent { get; set; }

        }

        public class ScoringNasabah
        {
            public string ClientName { get; set; }
            public string InvestorType { get; set; }
            public string Pekerjaan { get; set; }
            public string Jabatan { get; set; }
            public string KYCRiskprofile { get; set; }
            public int KYCRiskprofileScore { get; set; }
            public string Negara { get; set; }
            public int NegaraScore { get; set; }
            public string Kota { get; set; }
            public int KotaScore { get; set; }
            public string DistributionChannel { get; set; }
            public int DistributionChannelScore { get; set; }
            public string Product { get; set; }
            public decimal ProductScore { get; set; }

        }


        public class SummaryDailyAum
        {
            public DateTime Date { get; set; }
            public decimal AUM { get; set; }
            public decimal KursTengah { get; set; }
        }


        public class SchedulerCheckingCustom10
        {
            public string BKFrom { get; set; }
            public string Type { get; set; }
            public string FundFrom { get; set; }
            public string NAVFrom { get; set; }
            public string Unitisasi { get; set; }
            public string JumlahGagalUnitisasi { get; set; }
            public string AVGNav { get; set; }
            public string JumlahGagalNAV { get; set; }
            public string BKTo { get; set; }
            public string FundTo { get; set; }
            public string NAVTo { get; set; }
        }


        public string FundClient_GenerateNewClientID(int _investorType, int _fundClientPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //RCORE
                        cmd.CommandText = @" 							
                                        Declare @NewClientID  nvarchar(100)    
                                        Declare @MaxClientID  int
                                    
                                        select @MaxClientID =   max(convert(int,ID))  + 1 from FundClient where  status in (1,2) and id not like '%[a-zA-Z]%' and ID <> ''
							            select @maxClientID = isnull(@MaxClientID,1)
							
							            declare @LENdigit int
							            select @LENdigit = LEN(@maxClientID) 
							
							            If @LENdigit = 1
							            BEGIN
								            set @NewClientID =  '00000' + CAST(@MaxClientID as nvarchar) 
                                        END
							            If @LENdigit = 2
							            BEGIN
								            set @NewClientID =  '0000' + CAST(@MaxClientID as nvarchar) 
                                        END
							            If @LENdigit = 3
							            BEGIN
								            set @NewClientID =  '000' + CAST(@MaxClientID as nvarchar) 
                                        END
							            If @LENdigit = 4
							            BEGIN
								            set @NewClientID =  '00' + CAST(@MaxClientID as nvarchar) 
                                        END
							            If @LENdigit = 5
							            BEGIN
								            set @NewClientID =  '0' + CAST(@MaxClientID as nvarchar) 
                                        END
                                        If @LENdigit = 6
                                        BEGIN
	                                        set @NewClientID =    CAST(@MaxClientID as nvarchar) 
                                        END
							            Select @NewClientID NewClientID
                       ";
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["NewClientID"]);
                            }
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int EndDayTrails_Generate(string _usersID, DateTime _valueDate)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        //cmd.CommandText = @"

                        //                        Declare @MSG nvarchar (Max)   
                        //                        Declare @PeriodPK int                  
                        //                        Declare @maxEndDayTrailsPK int    
                        //                        Declare @DateYesterday datetime 
                        //                        Declare @DefaultCashAtBankPK int

                        //                        set @DefaultCashAtBankPK = 3

                        //                        Select  @DateYesterday  = ValueDate From enddaytrails
                        //                        where status = 2 and valuedate =(
                        //                        Select Max(valueDate) From EnddayTrails where status = 2 and ValueDate < @ValueDate
                        //                        )

                        //                        Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  and status = 2                
                        //                        Select @maxEndDayTrailsPK = ISNULL(max(EndDayTrailsPK),0) + 1 from EndDayTrails     

                        //                        set @maxEndDayTrailsPK = isnull(@maxEndDayTrailsPK,1)               


                        //                        Insert into EndDayTrails(EndDayTrailsPK,HistoryPK,Status,ValueDate,BitValidate,LogMessages
                        //                        ,EntryUsersID,EntryTime,LastUpdate)                    
                        //                        Select @maxEndDayTrailsPK,1,1,@ValueDate,0,'',@UsersID,@LastUpdate,@LastUpdate  

                        //                        ---- NEW -----
                        //                        if Not Exists(              
                        //                        Select * from CloseNAV where Status = 2 and date = @DateYesterday             
                        //                        )              
                        //                        BEGIN              
                        //                        Set @MSG = 'MISSING DATA: Close NAV Yesterday'              
                        //                        Update EndDayTrails set BitValidate = 0,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1               
                        //                        Select @maxEndDayTrailsPK LastPK                   
                        //                        RETURN;                   
                        //                        END              

                        //                        -- COPY FUND CLIENT POSITION --    

                        //                        UPDATE A
                        //                        SET A.AvgNAV = dbo.FGetAVGForFundClientPosition(@ValueDate, A.FundClientPK, A.FundPK), A.AUM = ISNULL(C.UnitAmount, 0) * ISNULL(B.Nav, 0)
                        //                        FROM FundClientPosition A
                        //                            LEFT JOIN CloseNAV B on A.FUndPK = B.FundPK and B.status = 2 and B.date = @ValueDate
                        //                            LEFT JOIN FundClientPosition C ON A.FundPK = C.FundPK AND A.FundClientPK = C.FundClientPK AND C.Date = @DateYesterday
                        //                        WHERE A.Date = @ValueDate

                        //                        if not exists(
                        //                            select * from FundClientPosition where date = dbo.FWorkingDay(@ValueDate, 1)
                        //                        )
                        //                        BEGIN


                        //                        Declare @CPFundPK int
                        //                        Declare A Cursor For
                        //                        Select FundPK From Fund Where status = 2
                        //                        Open A
                        //                        Fetch Next From A
                        //                        into @CPFundPK
                        //                        While @@Fetch_Status = 0
                        //                        BEGIN
                        //                        Insert into FundClientPosition(Date, FundClientPk, FundPK, CashAmount, UnitAmount, LastUpdate, AvgNAV)
                        //                        Select dbo.FWorkingDay(@ValueDate, 1),FundClientPK,FundPK,CashAmount,UnitAmount,@LastUpdate,AvgNAV
                        //                        From FundClientPosition where Date = @ValueDate and FundPK = @CPFundPK
                        //                        Fetch next From A
                        //                        Into @CPFundPK
                        //                        END
                        //                        Close A
                        //                        Deallocate A


                        //                        END



                        //                        --UPDATE A
                        //                        --SET A.AUM = ISNULL(B.AUM, 0), A.AvgNAV = ISNULL(B.AvgNAV, 0)
                        //                         --FROM dbo.FundClientPositionSummary A
                        //                        --LEFT JOIN dbo.FundClientPosition B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK AND B.Date = @ValueDate

                        //                        -- REGULER INSTRUCTION

                        //                        Declare @ClientSubscriptionPK int
                        //                        Declare @ClientRedemptionPK int
                        //                        Declare @DateWorkingTo datetime

                        //                        set @DateWorkingTo = dbo.FWorkingDay(@ValueDate, 1)

                        //                        Create table #dayTemp
                        //                        (
                        //                        IntDay  int
                        //                        )

                        //                        WHILE (@Valuedate < @DateWorkingTo)
                        //                        BEGIN
                        //                        set @Valuedate = DATEADD(day,1,@Valuedate)
                        //                        insert into #dayTemp
                        //                        Select day(@Valuedate)
                        //                        END

                        //                        select @ClientSubscriptionPK = isnull(max(ClientSubscriptionPK),0)  + 1 from ClientSubscription
                        //                        select @ClientRedemptionPK = isnull(max(ClientRedemptionPK),0)  + 1 from ClientRedemption

                        //                        INSERT INTO [dbo].[ClientSubscription]    
                        //                        ([ClientSubscriptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate],   
                        //                        [NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount],   
                        //                        [SubscriptionFeePercent],[SubscriptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[Type],[AutoDebitDate],[EntryUsersID],[EntryTime],[LastUpdate])   
                        //                        select @ClientSubscriptionPK + ROW_NUMBER() OVER(ORDER BY A.FundClientPK ASC),1,1,@DateWorkingTo,@DateWorkingTo,   
                        //                        0,FundPK,A.FundClientPK,FundCashRefPK,1,'',GrossAmount,0,NetAmount,0,    
                        //                        FeePercent,FeeAmount,isnull(B.SellingAgentPK,0),0,0,2,@ValueDate,@UsersID,@LastUpdate,@LastUpdate    
                        //                        From RegulerInstruction A 
                        //                        left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2
                        //                        where AutoDebitDate in (
                        //                        select IntDay From #dayTemp
                        //                        ) and  A.status = 2 and A.TrxType = 1

                        //                        INSERT INTO [dbo].[ClientRedemption]    
                        //                        ([ClientRedemptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate],   
                        //                        [NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount],   
                        //                        [RedemptionFeePercent],[RedemptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[BankRecipientPK],[Type],[EntryUsersID],[EntryTime],[LastUpdate])   
                        //                        select @ClientRedemptionPK + ROW_NUMBER() OVER(ORDER BY A.FundClientPK ASC),1,1,@DateWorkingTo,@DateWorkingTo,   
                        //                        0,FundPK,A.FundClientPK,FundCashRefPK,1,'',GrossAmount,0,NetAmount,0,    
                        //                        FeePercent,FeeAmount,isnull(B.SellingAgentPK,0),0,0,BankRecipientPK,2,@UsersID,@LastUpdate,@LastUpdate    
                        //                        From RegulerInstruction A left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2
                        //                        where AutoDebitDate in (
                        //                        select IntDay From #dayTemp
                        //                        ) and  A.status = 2 and A.TrxType = 2


                        //                        Update EndDayTrails set BitValidate = 1,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1                    

                        //                        Select @maxEndDayTrailsPK LastPK     

                        //                        ";
                        cmd.CommandText = @"
 
                        Declare @MSG nvarchar (Max)   
                        Declare @PeriodPK int                  
                        Declare @maxEndDayTrailsPK int    
                        Declare @DateYesterday datetime 
                        Declare @DefaultCashAtBankPK int

                        set @DefaultCashAtBankPK = 3

                        Select  @DateYesterday  = ValueDate From enddaytrails
                        where status = 2 and valuedate =(
                        Select Max(valueDate) From EnddayTrails where status = 2 and ValueDate < @ValueDate
                        )

                        Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  and status = 2                
                        Select @maxEndDayTrailsPK = ISNULL(max(EndDayTrailsPK),0) + 1 from EndDayTrails     

                        set @maxEndDayTrailsPK = isnull(@maxEndDayTrailsPK,1)               

                        
                        Insert into EndDayTrails(EndDayTrailsPK,HistoryPK,Status,ValueDate,BitValidate,LogMessages
                        ,EntryUsersID,EntryTime,LastUpdate)                    
                        Select @maxEndDayTrailsPK,1,1,@ValueDate,0,'',@UsersID,@LastUpdate,@LastUpdate  

                        ---- NEW -----
                        if Not Exists(              
                        Select * from CloseNAV where Status = 2 and date = @DateYesterday             
                        )              
                        BEGIN              
                        Set @MSG = 'MISSING DATA: Close NAV Yesterday'              
                        Update EndDayTrails set BitValidate = 0,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1               
                        Select @maxEndDayTrailsPK LastPK                   
                        RETURN;                   
                        END              

                        -- CALCULATE AVG AND COPY FUND CLIENT POSITION --    
                        BEGIN
	                        Declare @CFundClientPK int,@CFundPK int
	                        DECLARE @RunningAmount NUMERIC(22, 8) 
	                        DECLARE @RunningBalance NUMERIC(22, 8) 
	                        DECLARE @RunningAvgPrice NUMERIC(22, 8) 
	                        DECLARE @COUNTER INT

	                        DECLARE @BegPeriodPK INT 

	                        SELECT @BegPeriodPK = periodpk 
	                        FROM   period 
	                        WHERE  Dateadd(yy, Datediff(yy, 0, Dateadd(year, -1, @ValueDate)) + 1, -1) 
			                        BETWEEN datefrom 
				                        AND dateto 
			                        AND status = 2 

	                        SELECT @PeriodPK = periodpk 
	                        FROM   period 
	                        WHERE  @ValueDate BETWEEN datefrom AND dateto 
			                        AND status = 2 

	                        DECLARE @Mode INT -- ntar mode Ambil dari Setup Accounting         
	                        SET @Mode = 1 -- 1 = priority Buy, 2 = priority Sell         
	                        set @COUNTER = 1

	                        Create table #AVGRecalculation 
		                        ( 
			                        IdentInt int null,
			                        [runningamount]   [NUMERIC](22, 8) NULL, 
			                        [runningbalance]  [NUMERIC](22, 8) NULL, 
			                        [runningavgprice] [NUMERIC](22, 8) NULL, 
			                        FundClientPK int,
			                        FundPK int,
			                        [valuedate]       [DATETIME] NULL, 
			                        [volume]          [NUMERIC](22, 8) NULL, 
			                        [amount]          [NUMERIC](22, 8) NULL, 
			                        [price]           [NUMERIC](22, 8) NULL, 
			                        [trxtype]         [INT] NULL
		                        ) 
	                        CREATE CLUSTERED INDEX indx_AVGRecalculation ON #AVGRecalculation (FundPK,FundClientPK);

	                        Create table #AVGResultList
	                        (
		                        Date Datetime,
		                        FundClientPK int,
		                        FundPK int
	                        )
	                        CREATE CLUSTERED INDEX indx_AVGResultList ON #AVGResultList (FundPK,FundClientPK);

	                        Create table #AVGResult
	                        (
		                        FundClientPK int,
		                        FundPK int,
		                        AVGNav numeric(22,8)
	                        )
	                        CREATE CLUSTERED INDEX indx_AVGResult ON #AVGResult (FundPK,FundClientPK);

		                        INSERT INTO #AVGRecalculation(runningamount,runningbalance,runningavgprice,FundClientPK,FundPK,valuedate,volume,amount,price,trxtype) 
			                        SELECT Cast(0 AS NUMERIC(22, 8)) RunningAmount, 
					                        Cast(0 AS NUMERIC(22, 8)) RunningBalance, 
					                        Cast(0 AS NUMERIC(22, 8)) RunningAvgPrice, 
					                        * 
			                        FROM   (SELECT FundClientPK,FundPK,'12/31/2000'        ValueDate, 
							                        unitamount, 
							                        unitamount * avgnav Amount, 
							                        avgnav              Price, 
							                        1                   TrxType 
					                        FROM   fundclientpositionendyear 
					                        WHERE   periodpk = @PeriodPK  and status = 2
					                        UNION ALL 
					                        SELECT FundClientPK,FundPK,valuedate, 
							                        totalunitamount, 
							                        totalcashamount, 
							                        nav, 
							                        1 
					                        FROM   clientsubscription 
					                        WHERE   posted = 1 
							                        AND revised = 0 
							                        AND status = 2 
							                        AND Year(valuedate) = Year(@ValueDate) 
					 					                        and isnull(NOTES,'') <> 'Cutoff'
					                        UNION ALL 
					                        SELECT FundClientPK,FundPK,valuedate, 
							                        unitamount, 
							                        cashamount, 
							                        nav, 
							                        2 
					                        FROM   clientredemption 
					                        WHERE   posted = 1 
							                        AND revised = 0 
							                        AND status = 2 
							                        AND Year(valuedate) = Year(@ValueDate) 
					                        UNION ALL 
					                        SELECT FundClientPK,FundPKTo,valuedate, 
							                        totalunitamountfundto, 
							                        totalcashamountfundto, 
							                        navfundto NAV, 
							                        1 
					                        FROM   clientswitching 
					                        WHERE   posted = 1 
							                        AND revised = 0 
							                        AND status = 2 
							                        AND Year(valuedate) = Year(@ValueDate) 
					                        UNION ALL 
					                        SELECT FundClientPK,FundPKFrom,valuedate, 
							                        unitamount, 
							                        unitamount * navfundfrom, 
							                        navfundfrom NAV, 
							                        2 
					                        FROM   clientswitching 
					                        WHERE   posted = 1 
							                        AND revised = 0 
							                        AND status = 2 
							                        AND Year(valuedate) = Year(@ValueDate)) dt 
					 

	                        Declare A Cursor For
		                        Select Distinct  FundClientPK,FundPK from FundClientPosition where Date = @ValueDate
	                        Open A
	                        Fetch Next From A
	                        Into @CFundClientPK,@CFundPK

	                        While @@FETCH_STATUS = 0  
	                        BEGIN	
		                        SET @RunningAmount = 0 
		                        SET @RunningBalance = 0 
		                        SET @RunningAvgPrice = 0;
			                        WITH q 
						                        AS (SELECT TOP 1000000000 * 
							                        FROM   #AVGRecalculation where FundPK = @CFundPK and FundCLientPK = @CFundClientPK
							                        ORDER  BY valuedate,trxtype ASC) 


				                        UPDATE q 
				                        SET    @RunningBalance = runningbalance = @RunningBalance + ( 
															                        volume * CASE 
																		                        WHEN 
																                        trxtype = 1 THEN 1 
																		                        ELSE -1 
																	                        END ), 
						                        @RunningAmount = runningamount = @RunningAmount + CASE WHEN 
														                        trxtype 
														                        = 
														                        1 
														                        THEN 
														                        amount ELSE -volume 
														                        * 
														                        @RunningAvgPrice 
														                        END, 
						                        @RunningAvgPrice = runningavgprice = 
											                        CASE 
											                        WHEN trxtype = 1 THEN 
												                        CASE 
												                        WHEN @RunningBalance 
														                        = 0 
												                        THEN 
												                        0 
												                        ELSE @RunningAmount 
														                        / 
														                        @RunningBalance 
												                        END 
											                        ELSE @RunningAvgPrice 
											                        END,
						                        @COUNTER = IdentInt = @Counter + 1 
	


		                        Fetch Next From A 
		                        into @CFundClientPK,@CFundPK
	                        End	
	                        Close A
	                        Deallocate A



	                        insert into #AVGResultList
	                        Select max(ValueDate),FundClientPK,FundPK From #AVGRecalculation 
	                        where valuedate <= @ValueDate
	                        group by FundClientPK,FundPK


	                        DECLARE 
		                        @XDate date,
		                        @XFundPK int, 
		                        @XFundClientPK int
 
	                        DECLARE A CURSOR FOR 
		                        SELECT * from #AVGResultList
 
	                        OPEN A
 
	                        FETCH NEXT FROM A INTO 
		                        @XDate,@XFundClientPK,@XFundPK
 
	                        WHILE @@FETCH_STATUS = 0
		                        BEGIN
        
			                        insert into #AVGResult
			                        Select top 1 A.FundClientPK,A.FundPK,isnull(A.runningavgprice,0) From #AVGRecalculation A
			                        where A.FundClientPK = @XFundClientPK and A.FundPK = @XFundPK and A.valuedate = @XDate
			                        order by IdentInt desc
		
		
			                        FETCH NEXT FROM A INTO @XDate,@XFundClientPK,@XFundPK 
		                        END
 
	                        CLOSE A
 
	                        DEALLOCATE A

	                        --Select FundPk,Fundclientpk From #AVGResult 
	                        --group by fundpk,fundclientpk
	                        --having count(*) > 1
	                        --order by FundClientPK,FundPK

	                        --PROSES KE TABLE FUNDCLIENTPOSITION

	                        Update A Set A.AvgNAV =  isnull(B.AVGNav,0)  From FundClientPosition A
	                        left join #AVGResult B on A.FundPK = B.FundPK and A.FundClientPK = B.FundClientPK 
	                        where A.Date = @ValueDate 
                        END

                     
                        if not exists(
	                        select * from FundClientPosition where date = dbo.FWorkingDay(@ValueDate, 1)
                        )
                        BEGIN

    
                        Declare @CPFundPK int           
                        Declare A Cursor For              
	                        Select FundPK From Fund Where status = 2              
                        Open  A              
                        Fetch Next From  A              
                        into @CPFundPK              
                        While @@Fetch_Status = 0              
                        BEGIN              
	                        Insert into FundClientPosition(Date,FundClientPk,FundPK,CashAmount,UnitAmount,LastUpdate,AvgNAV)              
	                        Select dbo.FWorkingDay(@ValueDate, 1),FundClientPK,FundPK,CashAmount,UnitAmount,@LastUpdate,AvgNAV              
	                        From FundClientPosition where Date = @ValueDate and FundPK = @CPFundPK           
                        Fetch next From A                   
                        Into @CPFundPK              
                        END                  
                        Close A                  
                        Deallocate A


                        END    



                        --UPDATE A 
                        --SET A.AUM = ISNULL(B.AUM,0), A.AvgNAV = ISNULL(B.AvgNAV,0) 
                        --FROM dbo.FundClientPositionSummary A
                        --LEFT JOIN dbo.FundClientPosition B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK AND B.Date  = @ValueDate

                        -- REGULER INSTRUCTION

                        Declare @ClientSubscriptionPK int
                        Declare @ClientRedemptionPK int
                        Declare @DateWorkingTo datetime

                        set @DateWorkingTo = dbo.FWorkingDay(@ValueDate, 1)

                        Create table #dayTemp
                        (
                        IntDay  int
                        )

                        WHILE (@Valuedate < @DateWorkingTo)
                        BEGIN
                        set @Valuedate = DATEADD(day,1,@Valuedate)
                        insert into #dayTemp
                        Select day(@Valuedate)
                        END

                        select @ClientSubscriptionPK = isnull(max(ClientSubscriptionPK),0)  + 1 from ClientSubscription
                        select @ClientRedemptionPK = isnull(max(ClientRedemptionPK),0)  + 1 from ClientRedemption
    
                        INSERT INTO [dbo].[ClientSubscription]    
                        ([ClientSubscriptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate],   
                        [NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount],   
                        [SubscriptionFeePercent],[SubscriptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[Type],[AutoDebitDate],[EntryUsersID],[EntryTime],[LastUpdate])   
                        select @ClientSubscriptionPK + ROW_NUMBER() OVER(ORDER BY A.FundClientPK ASC),1,1,@DateWorkingTo,@DateWorkingTo,   
                        0,FundPK,A.FundClientPK,FundCashRefPK,1,'',GrossAmount,0,NetAmount,0,    
                        FeePercent,FeeAmount,isnull(B.SellingAgentPK,0),0,0,2,@ValueDate,@UsersID,@LastUpdate,@LastUpdate    
                        From RegulerInstruction A 
                        left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2
                        where AutoDebitDate in (
                        select IntDay From #dayTemp
                        ) and  A.status = 2 and A.TrxType = 1

                        INSERT INTO [dbo].[ClientRedemption]    
                        ([ClientRedemptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate],   
                        [NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount],   
                        [RedemptionFeePercent],[RedemptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[BankRecipientPK],[Type],[EntryUsersID],[EntryTime],[LastUpdate])   
                        select @ClientRedemptionPK + ROW_NUMBER() OVER(ORDER BY A.FundClientPK ASC),1,1,@DateWorkingTo,@DateWorkingTo,   
                        0,FundPK,A.FundClientPK,FundCashRefPK,1,'',GrossAmount,0,NetAmount,0,    
                        FeePercent,FeeAmount,isnull(B.SellingAgentPK,0),0,0,BankRecipientPK,2,@UsersID,@LastUpdate,@LastUpdate    
                        From RegulerInstruction A left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2
                        where AutoDebitDate in (
                        select IntDay From #dayTemp
                        ) and  A.status = 2 and A.TrxType = 2


                        Update EndDayTrails set BitValidate = 1,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1                    

                        Select @maxEndDayTrailsPK LastPK    
                             
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public void ClientSubscription_PostingBySelected(string _usersID, DateTime _dateFrom, DateTime _dateTo, bool _bitManageUR, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {
            try
            {
                string paramClientSubscriptionSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientSubscriptionSelected = " And ClientSubscriptionPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientSubscriptionSelected = " And ClientSubscriptionPK in (0) ";
                }


                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _parambitManageUR = "";

                        if (_bitManageUR == true)
                        {
                            _parambitManageUR = "Where A.status = 2 and A.Posted = 0 and A.ClientSubscriptionPK in (select PK from ZManage_UR where Selected = 1 and Date between @DateFrom and @DateTo) ";
                        }
                        else
                        {
                            _parambitManageUR = "Where A.status = 2 and Posted = 0 and ValueDate between @DateFrom and @Dateto  " + paramClientSubscriptionSelected;
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        BEGIN TRY
                        BEGIN TRANSACTION

                        DECLARE @MaxDate datetime
                        select @MaxDate = dbo.fworkingday(max(valueDate),1)  from EndDayTrails where status = 2


                        DECLARE @CounterDate DATETIME
                        SET @CounterDate = @DateFrom


                        DECLARE @TableSub TABLE
                        (
	                        NAVDate DATETIME,
	                        TotalUnitAmount NUMERIC(26,8),
	                        FundClientPK INT,
	                        FundPK INT
                        )

                        INSERT INTO @TableSub
                                ( NAVDate ,
                                  TotalUnitAmount ,
                                  FundClientPK ,
                                  FundPK
                                )
                        SELECT A.NAVDate,SUM(ISNULL(A.TotalUnitAmount,0)),A.FundClientPK,A.FundPK FROM dbo.ClientSubscription A
                        " + _parambitManageUR + @"
                        GROUP BY A.NAVDate,A.FundClientPK,A.FundPK

                        WHILE @CounterDate <= @MaxDate
                        BEGIN
	                        UPDATE C SET C.UnitAmount = C.UnitAmount  +  isnull(A.TotalUnitAmount,0) 
	                        From @TableSub A 
	                        INNER JOIN dbo.FundClientPosition C ON C.Date = @CounterDate AND A.FundPK = C.FundPK AND A.FundClientPK = C.FundClientPK
	                        WHERE A.NAVDate BETWEEN @DateFrom AND @CounterDate AND A.NAVDate <= @DateTo



	                        INSERT INTO  FundClientPosition (Date,FundClientPK,FundPK,CashAmount,UnitAmount)    
	                        SELECT @CounterDate,A.FundClientPK,A.FundPK,0, isnull(A.TotalUnitAmount,0)
	                        From @TableSub A 
	                        left JOIN dbo.FundClientPosition C ON C.Date = @CounterDate  AND A.FundPK = C.FundPK AND A.FundClientPK = C.FundClientPK
	                        WHERE A.NAVDate BETWEEN @DateFrom AND @CounterDate AND A.NAVDate <= @DateTo AND C.FundClientPositionPK IS null


	                        SET @CounterDate = dbo.FWorkingDay(@CounterDate,1)
                        END	

                        update A
                        set PostedBy = @PostedBy,PostedTime = @PostedTime,Posted = 1,Lastupdate = @PostedTime   from clientsubscription  A 
                         " + _parambitManageUR + @"

                        COMMIT TRANSACTION;	
                        END TRY

                        BEGIN CATCH
                        SELECT ERROR_MESSAGE() AS Result;
                        SELECT @@TRANCOUNT
                        IF @@TRANCOUNT > 0
	                        ROLLBACK TRANSACTION;
                        END CATCH;




                        ";


                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@PostedBy", _usersID);
                        cmd.Parameters.AddWithValue("@PostedTime", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public void ClientRedemption_PostingBySelected(string _usersID, DateTime _dateFrom, DateTime _dateTo, bool _bitManageUR, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {
            try
            {

                string paramClientRedemptionSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientRedemptionSelected = " And ClientRedemptionPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientRedemptionSelected = " And ClientRedemptionPK in (0) ";
                }

                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        string _parambitManageUR = "";

                        if (_bitManageUR == true)
                        {
                            _parambitManageUR = "Where A.status = 2   and A.Posted = 0 and A.ClientRedemptionPK in (select PK from ZManage_UR where Selected = 1 and Type = 2 and Date between @DateFrom and @DateTo) ";
                        }
                        else
                        {
                            _parambitManageUR = "Where A.status = 2 and Posted = 0 and ValueDate between @DateFrom and @DateTo " + paramClientRedemptionSelected;
                        }


                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        BEGIN TRY
                        BEGIN TRANSACTION

                        DECLARE @MaxDate datetime
                        select @MaxDate = dbo.fworkingday(max(valueDate),1)  from EndDayTrails  where status = 2



                        DECLARE @TableRed TABLE
                        (
	                        NAVDate DATETIME,
	                        TotalUnitAmount NUMERIC(26,8),
	                        FundClientPK INT,
	                        FundPK INT
                        )

                        INSERT INTO @TableRed
                                ( NAVDate ,
                                  TotalUnitAmount ,
                                  FundClientPK ,
                                  FundPK
                                )
                        SELECT A.NAVDate,SUM(ISNULL(A.UnitAmount,0)),A.FundClientPK,A.FundPK FROM dbo.ClientRedemption A
                        " + _parambitManageUR + @"
                        GROUP BY A.NAVDate,A.FundClientPK,A.FundPK

                        DECLARE @CounterDate DATETIME
                        SET @CounterDate = @DateFrom

                        WHILE @CounterDate <= @MaxDate
                        BEGIN
	                        UPDATE C SET C.UnitAmount = C.UnitAmount  -  isnull(A.TotalUnitAmount,0) 
	                        From @TableRed A 
	                        INNER JOIN dbo.FundClientPosition C ON C.Date = @CounterDate AND A.FundPK = C.FundPK AND A.FundClientPK = C.FundClientPK
	                        WHERE A.NAVDate BETWEEN @DateFrom AND @CounterDate AND A.NAVDate <= @DateTo

	                        SET @CounterDate = dbo.FWorkingDay(@CounterDate,1)
                        END	

                        update A
                        set PostedBy = @PostedBy,PostedTime = @PostedTime,Posted = 1,Lastupdate = @PostedTime    from ClientRedemption   A
                         " + _parambitManageUR + @"


                        COMMIT TRANSACTION;	
                        END TRY

                        BEGIN CATCH
                        SELECT ERROR_MESSAGE() AS Result;
                        SELECT @@TRANCOUNT
                        IF @@TRANCOUNT > 0
	                        ROLLBACK TRANSACTION;
                        END CATCH;




                        ";

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@PostedBy", _usersID);
                        cmd.Parameters.AddWithValue("@PostedTime", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public void ClientSwitching_PostingBySelected(string _usersID, DateTime _dateFrom, DateTime _dateTo, bool _bitManageUR, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {
            try
            {

                string paramClientSwitchingSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientSwitchingSelected = " And ClientSwitchingPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientSwitchingSelected = " And ClientSwitchingPK in (0) ";
                }


                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        string _parambitManageUR = "";

                        if (_bitManageUR == true)
                        {
                            _parambitManageUR = "Where A.status = 2   and A.Posted = 0 and A.ClientSwitchingPK in (select PK from ZManage_UR where Selected = 1 and Type = 3 and Date between @DateFrom and @DateTo) ";
                        }
                        else
                        {
                            _parambitManageUR = "where  A.Status = 2 and Posted  = 0 and Revised  = 0  and ValueDate between @datefrom and @dateto " + paramClientSwitchingSelected;
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText =
                           @"
                        BEGIN TRY
                        BEGIN TRANSACTION

                        DECLARE @MaxDate datetime
                        select @MaxDate = dbo.fworkingday(max(valueDate),1)  from EndDayTrails  where status = 2



                        DECLARE @TableSI TABLE
                        (
	                        NAVDate DATETIME,
	                        TotalUnitAmountFundTo NUMERIC(26,8),
	                        FundClientPK INT,
	                        FundPKTo INT
                        )

                        INSERT INTO @TableSI
                                ( NAVDate ,
                                  TotalUnitAmountFundTo ,
                                  FundClientPK ,
                                  FundPKTo
                                )
                        SELECT A.NAVDate,SUM(ISNULL(A.TotalUnitAmountFundTo,0)),A.FundClientPK,A.FundPKTo FROM dbo.ClientSwitching A
                        " + _parambitManageUR + @"
                        GROUP BY A.NAVDate,A.FundClientPK,A.FundPKTo



                        DECLARE @TableSO TABLE
                        (
	                        NAVDate DATETIME,
	                        UnitAmount NUMERIC(26,8),
	                        FundClientPK INT,
	                        FundPKFrom INT
                        )

                        INSERT INTO @TableSO
                                ( NAVDate ,
                                  UnitAmount ,
                                  FundClientPK ,
                                  FundPKFrom
                                )
                        SELECT A.NAVDate,SUM(ISNULL(A.UnitAmount,0)),A.FundClientPK,A.FundPKFrom FROM dbo.ClientSwitching A
                         " + _parambitManageUR + @"
                        GROUP BY A.NAVDate,A.FundClientPK,A.FundPKFrom



                        DECLARE @CounterDate DATETIME
                        SET @CounterDate = @DateFrom

                        WHILE @CounterDate <= @MaxDate
                        BEGIN
	                        UPDATE C SET C.UnitAmount = C.UnitAmount  +  isnull(A.TotalUnitAmountFundTo,0) 
	                        From @TableSI A 
	                        INNER JOIN dbo.FundClientPosition C ON C.Date = @CounterDate AND A.FundPKTo = C.FundPK AND A.FundClientPK = C.FundClientPK
	                        WHERE A.NAVDate BETWEEN @DateFrom AND @CounterDate AND A.NAVDate <= @DateTo
	


	                        UPDATE C SET C.UnitAmount = C.UnitAmount  -  isnull(A.UnitAmount,0) 
	                        From @TableSO A 
	                        INNER JOIN dbo.FundClientPosition C ON C.Date = @CounterDate AND A.FundPKFrom = C.FundPK AND A.FundClientPK = C.FundClientPK
	                        WHERE A.NAVDate BETWEEN @DateFrom AND @CounterDate AND A.NAVDate <= @DateTo
	


	                        INSERT INTO  FundClientPosition (Date,FundClientPK,FundPK,CashAmount,UnitAmount)    
	                        SELECT @CounterDate,A.FundClientPK,A.FundPKTo,0, isnull(A.TotalUnitAmountFundTo,0)
	                        From @TableSI A 
	                        left JOIN dbo.FundClientPosition C ON C.Date = @CounterDate  AND A.FundPKTo = C.FundPK AND A.FundClientPK = C.FundClientPK
	                        WHERE A.NAVDate BETWEEN @DateFrom AND @CounterDate AND A.NAVDate <= @DateTo AND C.FundClientPositionPK IS null


	                        SET @CounterDate = dbo.FWorkingDay(@CounterDate,1)
                        END	

                        update   A
                        set PostedBy = @PostedBy,PostedTime = @PostedTime,Posted = 1,Lastupdate = @PostedTime    from ClientSwitching A
                          " + _parambitManageUR + @"

                        COMMIT TRANSACTION;	
                        END TRY

                        BEGIN CATCH
                        SELECT ERROR_MESSAGE() AS Result;
                        SELECT @@TRANCOUNT
                        IF @@TRANCOUNT > 0
	                        ROLLBACK TRANSACTION;
                        END CATCH;";

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@PostedBy", _usersID);
                        cmd.Parameters.AddWithValue("@PostedTime", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }
        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            #region Historical Transaction Agent All
            if (_unitRegistryRpt.ReportName.Equals("Historical Transaction Agent All"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundFrom = "";
                            string _paramFundTo = "";
                            //string _paramFundClient = "";
                            string _paramAgent = "";
                            string _paramAgentSwitch = "";
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundFrom = "And A.FundPKFrom in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundTo = "And A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                                _paramAgentSwitch = "And AG.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitchOut = "  A.Status = 1  ";
                                _statusSwitchIn = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitchOut = "  A.Status = 3  ";
                                _statusSwitchIn = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  and A.status not in (3,4)";
                                _statusSwitchOut = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                                _statusSwitchIn = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 and A.status not in (3,4) ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4) ";
                                _statusSwitchOut = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 and A.status not in (3,4)";
                                _statusSwitchIn = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                            }
                            cmd.CommandText =
                            @"
                          
SELECT A.FundPK,A.FundClientPK,A.SellingAgentPK,A.SettlementDate,A.Remark,A.AgentFeeAmount, isnull(A.DepartmentName,'') DepartmentName, isnull(A.AgentName,'') AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.CashAmount,A.UnitAmount,A.NetAmount,A.Nav,[dbo].[FgetLastUnitAmount] (A.NAVDate,A.FundPK,A.FundClientPK) EndBalance 
,FeePercent,FeeAmount
from 
    (  
    Select F.FUndPK,FC.FundClientPK,FC.SellingAgentPK,A.NAVDate SettlementDate,A.Description Remark,
	A.AgentFeeAmount,D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName,NAVDate,'Subscription' Type, 
	Fc.ID ClientID,FC.Name ClientName, CashAmount, TotalUnitAmount UnitAmount ,A.Nav,TotalCashAmount NetAmount
	,A.SubscriptionFeePercent FeePercent, A.SubscriptionFeeAmount FeeAmount 
    from ClientSubscription A 
    left join Fund F on A.FundPK = F.fundPK and f.Status=2  
    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status=2 
    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status=2 
    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status=2 
    where 
    " + _statusSubs + _paramFund + _paramAgent + @" and 
    valuedate Between @ValueDateFrom and @ValueDateTo 
    UNION ALL   
    Select F.FundPK,FC.FundClientPK,FC.SellingAgentPK,A.PaymentDate SettlementDate,A.Description Remark,
	A.AgentFeeAmount,D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName,
	NAVDate,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, TotalUnitAmount UnitAmount,A.Nav,TotalCashAmount NetAmount 
	,A.redemptionFeePercent FeePercent, A.RedemptionFeeAmount FeeAmount 
  
  
    from ClientRedemption A 
    left join Fund F on A.FundPK = F.fundPK and f.Status=2    
    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status=2   
    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status=2 
    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status=2
    where 
    " + _statusRedemp + _paramFund + _paramAgent + @" and 
    valuedate Between @ValueDateFrom and @ValueDateTo 
    UNION ALL   
    select F.FundPK, FC.FundClientPK,FC.SellingAgentPK,A.PaymentDate SettlementDate,A.Description Remark,0 AgentFeeAmount,
	D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName, NAVDate, 'SwitchingOut' Type, 
	FC.ID ClientID, FC.Name ClientName, CashAmount, TotalUnitAmountFundFrom TotalUnitAmount, Nav, TotalCashAmountFundFrom NetAmount,
	CASE WHEN A.FeeType = 'OUT' THEN A.SwitchingFeePercent ELSE 0 end FeePercent, 
	CASE WHEN A.FeeType = 'OUT' THEN A.SwitchingFeeAmount ELSE 0 end FeeAmount
    from ClientSwitching A
    left join Fund F on A.FundPKFrom = F.FundPK and F.status in (1,2)
    left join FundClient FC on A.FundClientPK = FC.fundclientPK and FC.status in (1,2)
    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.status = 2
    left join Department D on AG.AgentPK = D.DepartmentPK and D.status = 2
    where
    " + _statusSwitchOut + _paramFundFrom + _paramAgentSwitch + @" and
    valuedate Between @ValueDateFrom and @ValueDateTo 
    UNION ALL   
    select F.FundPK, FC.FundClientPK,FC.SellingAgentPK,A.PaymentDate SettlementDate,A.Description Remark,0 AgentFeeAmount
	,D.Name DepartmentName,AG.Name AgentName,F.ID FundID,F.Name FundName, NAVDate, 'SwitchingIn' Type, FC.ID ClientID, FC.Name ClientName, 
	CashAmount, TotalUnitAmountFundFrom TotalUnitAmount, Nav, TotalCashAmountFundFrom NetAmount,
	CASE WHEN A.FeeType = 'OUT' THEN A.SwitchingFeePercent ELSE 0 end FeePercent, 
	CASE WHEN A.FeeType = 'OUT' THEN A.SwitchingFeeAmount ELSE 0 end FeeAmount
    from ClientSwitching A
    left join Fund F on A.FundPKTo = F.FundPK and F.status in (1,2)
    left join FundClient FC on A.FundClientPK = FC.fundclientPK and FC.status in (1,2)
    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.status = 2
    left join Department D on AG.AgentPK = D.DepartmentPK and D.status = 2
    where
    " + _statusSwitchIn + _paramFundTo + _paramAgentSwitch + @" and
    valuedate Between @ValueDateFrom and @ValueDateTo 
    )A   
    order by A.FundName, A.NAVDate Asc";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoricalTransactionAgentAll" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoricalTransactionAgentAll" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Historical Transaction by Agent All");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                            rSingle.SellingAgentPK = Convert.ToInt32(dr0["SellingAgentPK"]);
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.AgentFeeAmount = Convert.ToDecimal(dr0["AgentFeeAmount"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.EndBalance = Convert.ToDecimal(dr0["EndBalance"]);
                                            //rSingle.DepartmentName = Convert.ToString(dr0["DepartmentName"]);
                                            rSingle.DepartmentName = dr0["DepartmentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentName"]);
                                            //rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.AgentName = dr0["AgentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentName"]);
                                            rList.Add(rSingle);
                                        }


                                        var QueryByFundID =
                                           from r in rList
                                           orderby r.AgentName, r.NAVDate ascending
                                           group r by new { r.SellingAgentPK, r.AgentName } into rGroup
                                           select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {




                                            incRowExcel = incRowExcel + 2;


                                            int RowZ = incRowExcel;
                                            incRowExcel = incRowExcel + 4;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Fund Name ";
                                            //worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            //worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Agent Name ";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.AgentName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date From";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date To";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo);
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Balance";
                                            //worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            //worksheet.Cells[incRowExcel, 4].Value = _host.Get_UnitAmountByFundPKandFundClientPK(rsHeader.Key.FundPK, rsHeader.Key.FundClientPK, Convert.ToDateTime(_unitRegistryRpt.ValueDateTo));
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells[incRowExcel, 5].Value = "unit";
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "R/Un realised";
                                            //worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            //worksheet.Cells[incRowExcel, 4].Value = _host.Get_UnitAmountByFundPKandFundClientPK(rsHeader.Key.FundPK, rsHeader.Key.FundClientPK, Convert.ToDateTime(_unitRegistryRpt.ValueDateTo));
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //incRowExcel++;

                                            incRowExcel = incRowExcel + 2;


                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Type";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Fund ID";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Amount (IDR)";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Sales Charged";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":I" + RowB].Merge = true;
                                            worksheet.Cells["H" + RowB + ":I" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 8].Value = "%";
                                            worksheet.Cells[RowG, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 9].Value = "Amount";
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Net Amount";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Net Unit";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Ending Balance";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 14].Value = "Remark";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _aaa = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;


                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "SUB";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else if (rsDetail.Type == "SwitchingIn")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "Switching In";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                }

                                                else if (rsDetail.Type == "SwitchingOut")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "Switching Out";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "RED";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                }

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NAVDate;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance;
                                                }
                                                else if (rsDetail.Type == "SwitchingOut")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance * -1;
                                                }

                                                else if (rsDetail.Type == "SwitchingIn")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance * -1;
                                                }

                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeePercent;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount;
                                                }
                                                else if (rsDetail.Type == "SwitchingOut")
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount * -1;
                                                }

                                                else if (rsDetail.Type == "SwitchingIn")
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount * -1;
                                                }


                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.000000";

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance;
                                                }
                                                else if (rsDetail.Type == "SwitchingIn")
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance * -1;
                                                }

                                                else if (rsDetail.Type == "SwitchingOut")
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.UnitBalance * -1;
                                                }

                                                //int _A = incRowExcel + 1;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.EndBalance;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Remark;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _aaa = incRowExcel;

                                            }



                                            worksheet.Cells["A" + _endRowDetail + ":N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 4].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.000000";
                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A5:N" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 14];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 10;
                                        worksheet.Column(3).Width = 2;
                                        worksheet.Column(4).Width = 60;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 10;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n \n \n &30&B Transaction Report of Client Portfolio";


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Indication By Agent
            else if (_unitRegistryRpt.ReportName.Equals("Indication By Agent"))
            {
                try
                {
                    int _rowAgent, _rowFundType, _rowStartFundType, _rowStartTotal, _rowLast, _rowStartAgent;
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramAgent = "";
                            string _paramAgentSwitch = "";
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _statusSwitch = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And B.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                                _paramAgentSwitch = "And C.SellingAgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                                _paramAgentSwitch = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = " and A.Status = 1  ";
                                _statusRedemp = " and A.Status = 1  ";
                                _statusSwitch = " and A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = " and A.Status = 3  ";
                                _statusRedemp = " and A.Status = 3  ";
                                _statusSwitch = " and A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }


                            cmd.CommandText =
                               // NON SWITCHING IDR
                               @"--declare @datefrom date 
                                --declare @dateto date

                                --set @datefrom = '2020-03-01'
                                --set @dateto = '2020-03-31'

                                --drop table #LastNAV
                                --drop table #tableFund

                                create table #LastNAV
                                (
	                                FundPK int,
	                                NAV numeric(22,8),
	                                valuedate date
                                )
                                CREATE CLUSTERED INDEX IX_LastNAV ON #LastNAV (FundPK,valuedate);   

                                create table #tableFund
                                (
	                                FundPK int
                                )
                                CREATE CLUSTERED INDEX IX_tableFund ON #tableFund (FundPK);  

                                declare @date date

                                insert into #tableFund(FundPK)
                                select distinct FundPK from Fund where status = 2

                                set @date = @datefrom

                                while @date <= @dateto
                                begin

	                                insert into #LastNAV(FundPK,NAV,valuedate)

	                                select A.FundPK,A.Nav,@date date from CloseNAV A 
	                                inner join (
	                                select  A.FundPK,max(date) date From CloseNAV A 
	                                    left join Fund B on A.FundPK = B.FundPK and B.Status = 2 where date <= @Date and A.status = 2
	                                    group by A.FundPK
	                                    ) B on A.Date = B.date and A.FundPK = B.FundPK
                                    where A.status = 2

	                                set @date = dateadd(day,1,@date)
                                end


                                select FundID,FundName,AgentName,FundType,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID,'Non Switching' Switching from ClientSubscription A
                                left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                where Valuedate between @DateFrom and @DateTo
                                " + _paramFund + _paramAgent + _statusSubs + @" 
                                --and A.Status = 2 and A.Posted = 1 and A.Revised = 0 
                                and E.CurrencyPk = 1
                                union all
                                select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * F.NAV else CashAmount end RedAmount,E.ID CurrencyID,'Non Switching' Switching from ClientRedemption A
                                left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
								left join #LastNAV F on A.ValueDate = F.valuedate and A.FundPK = F.FundPK
                                where A.Valuedate between @DateFrom and @DateTo 
                                " + _paramFund + _paramAgent + _statusSubs + @" 
                                --and A.Status = 2 and A.Posted = 1 and A.Revised = 0 
                                and E.CurrencyPk = 1
                        
                                ) A
                                group by FundID,FundName,AgentName,FundType,CurrencyID,switching
                                order By AgentName ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "IndicationByAgent" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "IndicationByAgent" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Indication By Agent");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.SellingAgentID = Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Subscription = Convert.ToDecimal(dr0["SubsAmount"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["RedAmount"]);
                                            rSingle.Netting = Convert.ToDecimal(dr0["Nett"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.Switching = Convert.ToString(dr0["Switching"]);
                                            rList.Add(rSingle);

                                        }



                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.SellingAgentID, r.FundType, r.CurrencyID, r.Switching } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        int _colCurrency = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Detail Net New Cash by Selling Agency ";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyName();
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Period " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " to " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                        worksheet.Row(incRowExcel).Height = 45;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 6].Value = "Phone";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + _host.Get_CompanyPhone();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Fax No";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + _host.Get_CompanyFax();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 3;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Print Date";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Time";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Non Switching";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        _colCurrency = incRowExcel;


                                        incRowExcel++;

                                        var _agent = "";
                                        var _currency = "";
                                        worksheet.Row(incRowExcel).Height = 25;
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;

                                        incRowExcel++;
                                        _rowStartTotal = incRowExcel;
                                        _rowLast = 0;
                                        _rowStartAgent = 0;
                                        _rowAgent = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            //incRowExcel++;

                                            //Bikin NON SWITCHING

                                            _rowFundType = 0;


                                            if (_agent != rsHeader.Key.SellingAgentID)
                                            {
                                                _rowAgent = incRowExcel;
                                                _currency = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[_colCurrency, 2].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[_colCurrency, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Selling Agency";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.SellingAgentID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupBySellingAgentByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader.Key.SellingAgentID, rsHeader.Key.CurrencyID, _unitRegistryRpt.Status);
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                incRowExcel++;
                                                _rowStartAgent = incRowExcel;
                                            }

                                            _rowFundType = incRowExcel;

                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FundType;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByFundTypeByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader.Key.SellingAgentID, rsHeader.Key.FundType, rsHeader.Key.CurrencyID, _unitRegistryRpt.Status);
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //incRowExcel++;


                                            //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;
                                            //area header
                                            _rowStartFundType = incRowExcel;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //ThickBox Border

                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subscription;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Redemption;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Netting;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                _rowLast = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _agent = rsHeader.Key.SellingAgentID;

                                            }


                                            worksheet.Cells[_rowFundType, 7].Formula = "SUM(G" + _rowStartFundType + ":G" + _rowLast + ")";


                                            if (_rowAgent != 0 && _agent == rsHeader.Key.SellingAgentID)
                                            {
                                                worksheet.Cells[_rowAgent, 7].Formula = "SUM(G" + _rowStartAgent + ":G" + _rowLast + ")/2";
                                            }

                                        }
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                        //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowStartTotal + ":G" + _rowLast + ")/3";

                                        //worksheet.Cells["G" + _rowStartTotal + ":G" + incRowExcel].Calculate();

                                        worksheet.Calculate();

                                        incRowExcel++;

                                        incRowExcel++;

                                        // NON SWITCHING USD



                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =
                                               // NON SWITCHING USD
                                               @"--declare @datefrom date 
                                                --declare @dateto date

                                                --set @datefrom = '2020-03-01'
                                                --set @dateto = '2020-03-31'

                                                --drop table #LastNAV
                                                --drop table #tableFund

                                                create table #LastNAV
                                                (
	                                                FundPK int,
	                                                NAV numeric(22,8),
	                                                valuedate date
                                                )
                                                CREATE CLUSTERED INDEX IX_LastNAV ON #LastNAV (FundPK,valuedate);   

                                                create table #tableFund
                                                (
	                                                FundPK int
                                                )
                                                CREATE CLUSTERED INDEX IX_tableFund ON #tableFund (FundPK);  

                                                declare @date date

                                                insert into #tableFund(FundPK)
                                                select distinct FundPK from Fund where status = 2

                                                set @date = @datefrom

                                                while @date <= @dateto
                                                begin

	                                                insert into #LastNAV(FundPK,NAV,valuedate)

	                                                select A.FundPK,A.Nav,@date date from CloseNAV A 
	                                                inner join (
	                                                select  A.FundPK,max(date) date From CloseNAV A 
	                                                 left join Fund B on A.FundPK = B.FundPK and B.Status = 2 where date <= @Date and A.status = 2
	                                                 group by A.FundPK
	                                                 ) B on A.Date = B.date and A.FundPK = B.FundPK
                                                    where A.status = 2

	                                                set @date = dateadd(day,1,@date)
                                                end


                                                select FundID,FundName,AgentName,FundType,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                                select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID,'Non Switching' Switching from ClientSubscription A
                                                left join Fund B on A.FundPK = B.FundPK and B.Status  in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo 
												" + _paramFund + _paramAgent + _statusSubs + @"  
												and E.CurrencyPk <> 1
                                                union all
                                                select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * F.NAV else CashAmount end RedAmount,E.ID CurrencyID,'Non Switching' Switching from ClientRedemption A
                                                left join Fund B on A.FundPK = B.FundPK and B.Status  in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
												left join #LastNAV F on A.ValueDate = F.valuedate and A.FundPK = F.FundPK
                                                where A.Valuedate between @DateFrom and @DateTo 
												" + _paramFund + _paramAgent + _statusRedemp + @"  
												and E.CurrencyPk <> 1
                        
                                                ) A
                                                group by FundID,FundName,AgentName,FundType,CurrencyID,switching
                                                order By AgentName ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    if (dr1.HasRows)
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList1 = new List<UnitRegistryRpt>();
                                                            while (dr1.Read())
                                                            {
                                                                UnitRegistryRpt rSingle1 = new UnitRegistryRpt();
                                                                rSingle1.SellingAgentID = Convert.ToString(dr1["AgentName"]);
                                                                rSingle1.FundType = Convert.ToString(dr1["FundType"]);
                                                                rSingle1.FundID = Convert.ToString(dr1["FundID"]);
                                                                rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                                rSingle1.Subscription = Convert.ToDecimal(dr1["SubsAmount"]);
                                                                rSingle1.Redemption = Convert.ToDecimal(dr1["RedAmount"]);
                                                                rSingle1.Netting = Convert.ToDecimal(dr1["Nett"]);
                                                                rSingle1.CurrencyID = Convert.ToString(dr1["CurrencyID"]);
                                                                rSingle1.Switching = Convert.ToString(dr1["Switching"]);
                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r1 in rList1
                                                                group r1 by new { r1.SellingAgentID, r1.FundType, r1.CurrencyID, r1.Switching } into rGroup1
                                                                select rGroup1;

                                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                            _colCurrency = incRowExcel;

                                                            incRowExcel++;

                                                            worksheet.Row(incRowExcel).Height = 25;
                                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                            worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                                            incRowExcel++;

                                                            var _agent1 = "";
                                                            var _currency1 = "";

                                                            _rowStartTotal = incRowExcel;
                                                            _rowLast = 0;
                                                            _rowStartAgent = 0;
                                                            _rowAgent = 0;

                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {



                                                                _rowFundType = 0;
                                                                //Bikin SWITCHING

                                                                if (_agent1 != rsHeader1.Key.SellingAgentID)
                                                                {
                                                                    _rowAgent = incRowExcel;
                                                                    _currency1 = rsHeader1.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Value = rsHeader1.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Selling Agency";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader1.Key.SellingAgentID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                    //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupBySellingAgentByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader1.Key.SellingAgentID, rsHeader1.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    incRowExcel++;
                                                                    _rowStartAgent = incRowExcel;
                                                                }

                                                                _rowFundType = incRowExcel;

                                                                worksheet.Cells[incRowExcel, 2].Value = "Fund Type";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader1.Key.FundType;
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByFundTypeByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader1.Key.SellingAgentID, rsHeader1.Key.FundType, rsHeader1.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                //incRowExcel++;


                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                incRowExcel++;
                                                                //area header
                                                                _rowStartFundType = incRowExcel;

                                                                int _no = 1;
                                                                int _startRowDetail = incRowExcel;
                                                                //int _endRowDetail = 0;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    //ThickBox Border

                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail1.FundID;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail1.FundName;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Subscription;
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Redemption;
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Netting;
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                    _rowLast = incRowExcel;
                                                                    _no++;
                                                                    incRowExcel++;
                                                                    _agent1 = rsHeader1.Key.SellingAgentID;

                                                                }

                                                                worksheet.Cells[_rowFundType, 7].Formula = "SUM(G" + _rowStartFundType + ":G" + _rowLast + ")";


                                                                if (_rowAgent != 0 && _agent1 == rsHeader1.Key.SellingAgentID)
                                                                {
                                                                    worksheet.Cells[_rowAgent, 7].Formula = "SUM(G" + _rowStartAgent + ":G" + _rowLast + ")/2";
                                                                }
                                                            }

                                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                            //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency1, _unitRegistryRpt.Status);
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;


                                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowStartTotal + ":G" + _rowLast + ")/3";


                                                            worksheet.Calculate();

                                                            incRowExcel++;

                                                        }

                                                    }
                                                }
                                            }
                                        }

                                        incRowExcel++;

                                        //SWITCHING IDR
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =
                                                @"
                                                --declare @datefrom date 
                                                --declare @dateto date

                                                --set @datefrom = '2020-03-01'
                                                --set @dateto = '2020-03-31'

                                                --drop table #LastNAV
                                                --drop table #tableFund

                                                create table #LastNAV
                                                (
	                                                FundPK int,
	                                                NAV numeric(22,8),
	                                                valuedate date
                                                )
                                                CREATE CLUSTERED INDEX IX_LastNAV ON #LastNAV (FundPK,valuedate);   

                                                create table #tableFund
                                                (
	                                                FundPK int
                                                )
                                                CREATE CLUSTERED INDEX IX_tableFund ON #tableFund (FundPK);  

                                                declare @date date

                                                insert into #tableFund(FundPK)
                                                select distinct FundPK from Fund where status = 2

                                                set @date = @datefrom

                                                while @date <= @dateto
                                                begin

	                                                insert into #LastNAV(FundPK,NAV,valuedate)

	                                                select A.FundPK,A.Nav,@date date from CloseNAV A 
	                                                inner join (
	                                                select  A.FundPK,max(date) date From CloseNAV A 
	                                                 left join Fund B on A.FundPK = B.FundPK and B.Status = 2 where date <= @Date and A.status = 2
	                                                 group by A.FundPK
	                                                 ) B on A.Date = B.date and A.FundPK = B.FundPK
                                                    where A.status = 2

	                                                set @date = dateadd(day,1,@date)
                                                end

                                                select FundID,FundName,AgentName,FundType,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                                select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * F.NAV else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKTo = B.FundPK and B.Status  in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
												left join #LastNAV F on A.ValueDate = F.valuedate and A.FundPKFrom = F.FundPK
                                                where A.Valuedate between @DateFrom and @DateTo " + _paramFund + _paramAgentSwitch + _statusSwitch + @" and E.CurrencyPK = 1
                                                union all
                                                select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * F.NAV else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKFrom = B.FundPK and B.Status  in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
												left join #LastNAV F on A.ValueDate = F.valuedate and A.FundPKFrom = F.FundPK
                                                where A.Valuedate between @DateFrom and @DateTo " + _paramFund + _paramAgentSwitch + _statusSwitch + @" and E.CurrencyPK = 1

                                                ) A
                                                group by FundID,FundName,AgentName,FundType,CurrencyID,switching
                                                order By AgentName ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    if (dr2.HasRows)
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList2 = new List<UnitRegistryRpt>();
                                                            while (dr2.Read())
                                                            {
                                                                UnitRegistryRpt rSingle2 = new UnitRegistryRpt();
                                                                rSingle2.SellingAgentID = Convert.ToString(dr2["AgentName"]);
                                                                rSingle2.FundType = Convert.ToString(dr2["FundType"]);
                                                                rSingle2.FundID = Convert.ToString(dr2["FundID"]);
                                                                rSingle2.FundName = Convert.ToString(dr2["FundName"]);
                                                                rSingle2.Subscription = Convert.ToDecimal(dr2["SubsAmount"]);
                                                                rSingle2.Redemption = Convert.ToDecimal(dr2["RedAmount"]);
                                                                rSingle2.Netting = Convert.ToDecimal(dr2["Nett"]);
                                                                rSingle2.CurrencyID = Convert.ToString(dr2["CurrencyID"]);
                                                                rSingle2.Switching = Convert.ToString(dr2["Switching"]);
                                                                rList2.Add(rSingle2);

                                                            }


                                                            var QueryByFundID2 =
                                                                from r2 in rList2
                                                                group r2 by new { r2.SellingAgentID, r2.FundType, r2.CurrencyID, r2.Switching } into rGroup2
                                                                select rGroup2;

                                                            worksheet.Cells[incRowExcel, 1].Value = "Switching";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                            _colCurrency = incRowExcel;

                                                            incRowExcel++;

                                                            worksheet.Row(incRowExcel).Height = 25;
                                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                            worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                                            incRowExcel++;

                                                            var _agent2 = "";
                                                            var _currency2 = "";


                                                            _rowStartTotal = incRowExcel;
                                                            _rowLast = 0;
                                                            _rowStartAgent = 0;
                                                            _rowAgent = 0;

                                                            foreach (var rsHeader2 in QueryByFundID2)
                                                            {


                                                                _rowFundType = 0;

                                                                //Bikin SWITCHING

                                                                if (_agent2 != rsHeader2.Key.SellingAgentID)
                                                                {
                                                                    _rowAgent = incRowExcel;
                                                                    _currency2 = rsHeader2.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Value = rsHeader2.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Selling Agency";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader2.Key.SellingAgentID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                    //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupBySellingAgentByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader2.Key.SellingAgentID, rsHeader2.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    incRowExcel++;
                                                                    _rowStartAgent = incRowExcel;
                                                                }

                                                                _rowFundType = incRowExcel;

                                                                worksheet.Cells[incRowExcel, 2].Value = "Fund Type";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader2.Key.FundType;
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByFundTypeByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader2.Key.SellingAgentID, rsHeader2.Key.FundType, rsHeader2.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                //incRowExcel++;


                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                incRowExcel++;
                                                                //area header
                                                                _rowStartFundType = incRowExcel;

                                                                int _no = 1;
                                                                int _startRowDetail = incRowExcel;
                                                                //int _endRowDetail = 0;
                                                                foreach (var rsDetail2 in rsHeader2)
                                                                {
                                                                    //ThickBox Border

                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail2.FundID;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail2.FundName;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail2.Subscription;
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail2.Redemption;
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail2.Netting;
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                    _rowLast = incRowExcel;
                                                                    _no++;
                                                                    incRowExcel++;
                                                                    _agent2 = rsHeader2.Key.SellingAgentID;

                                                                }

                                                                worksheet.Cells[_rowFundType, 7].Formula = "SUM(G" + _rowStartFundType + ":G" + _rowLast + ")";


                                                                if (_rowAgent != 0 && _agent2 == rsHeader2.Key.SellingAgentID)
                                                                {
                                                                    worksheet.Cells[_rowAgent, 7].Formula = "SUM(G" + _rowStartAgent + ":G" + _rowLast + ")/2";
                                                                }

                                                            }
                                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                            //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency2, _unitRegistryRpt.Status);
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;

                                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowStartTotal + ":G" + _rowLast + ")/3";
                                                            worksheet.Calculate();

                                                            incRowExcel++;


                                                        }

                                                    }
                                                }
                                            }
                                        }

                                        incRowExcel++;

                                        //SWITCHING USD



                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =
                                                @"
                                                --declare @datefrom date 
                                                --declare @dateto date

                                                --set @datefrom = '2020-03-01'
                                                --set @dateto = '2020-03-31'

                                                --drop table #LastNAV
                                                --drop table #tableFund

                                                create table #LastNAV
                                                (
	                                                FundPK int,
	                                                NAV numeric(22,8),
	                                                valuedate date
                                                )
                                                CREATE CLUSTERED INDEX IX_LastNAV ON #LastNAV (FundPK,valuedate);   

                                                create table #tableFund
                                                (
	                                                FundPK int
                                                )
                                                CREATE CLUSTERED INDEX IX_tableFund ON #tableFund (FundPK);  

                                                declare @date date

                                                insert into #tableFund(FundPK)
                                                select distinct FundPK from Fund where status = 2

                                                set @date = @datefrom

                                                while @date <= @dateto
                                                begin

	                                                insert into #LastNAV(FundPK,NAV,valuedate)

	                                                select A.FundPK,A.Nav,@date date from CloseNAV A 
	                                                inner join (
	                                                select  A.FundPK,max(date) date From CloseNAV A 
	                                                 left join Fund B on A.FundPK = B.FundPK and B.Status = 2 where date <= @Date and A.status = 2
	                                                 group by A.FundPK
	                                                 ) B on A.Date = B.date and A.FundPK = B.FundPK
                                                    where A.status = 2

	                                                set @date = dateadd(day,1,@date)
                                                end


                                                select FundID,FundName,AgentName,FundType,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                                select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * F.NAV else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKTo = B.FundPK and B.Status  in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
												left join #LastNAV F on A.ValueDate = F.valuedate and A.FundPKFrom = F.FundPK
                                                where A.Valuedate between @DateFrom and @DateTo " + _paramFund + _paramAgentSwitch + _statusSwitch + @" and E.CurrencyPK <> 1
                                                union all
                                                select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * F.NAV else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKFrom = B.FundPK and B.Status  in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
												left join #LastNAV F on A.ValueDate = F.valuedate and A.FundPKFrom = F.FundPK
                                                where A.Valuedate between @DateFrom and @DateTo " + _paramFund + _paramAgentSwitch + _statusSwitch + @" and E.CurrencyPK <> 1

                                                ) A
                                                group by FundID,FundName,AgentName,FundType,CurrencyID,switching
                                                order By AgentName ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {
                                                    if (dr3.HasRows)
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList3 = new List<UnitRegistryRpt>();
                                                            while (dr3.Read())
                                                            {
                                                                UnitRegistryRpt rSingle3 = new UnitRegistryRpt();
                                                                rSingle3.SellingAgentID = Convert.ToString(dr3["AgentName"]);
                                                                rSingle3.FundType = Convert.ToString(dr3["FundType"]);
                                                                rSingle3.FundID = Convert.ToString(dr3["FundID"]);
                                                                rSingle3.FundName = Convert.ToString(dr3["FundName"]);
                                                                rSingle3.Subscription = Convert.ToDecimal(dr3["SubsAmount"]);
                                                                rSingle3.Redemption = Convert.ToDecimal(dr3["RedAmount"]);
                                                                rSingle3.Netting = Convert.ToDecimal(dr3["Nett"]);
                                                                rSingle3.CurrencyID = Convert.ToString(dr3["CurrencyID"]);
                                                                rSingle3.Switching = Convert.ToString(dr3["Switching"]);
                                                                rList3.Add(rSingle3);

                                                            }


                                                            var QueryByFundID3 =
                                                                from r3 in rList3
                                                                group r3 by new { r3.SellingAgentID, r3.FundType, r3.CurrencyID, r3.Switching } into rGroup3
                                                                select rGroup3;

                                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                            _colCurrency = incRowExcel;

                                                            incRowExcel++;

                                                            worksheet.Row(incRowExcel).Height = 25;
                                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                            worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                                            incRowExcel++;

                                                            var _agent3 = "";
                                                            var _currency3 = "";


                                                            _rowStartTotal = incRowExcel;
                                                            _rowLast = 0;
                                                            _rowStartAgent = 0;
                                                            _rowAgent = 0;

                                                            foreach (var rsHeader3 in QueryByFundID3)
                                                            {


                                                                _rowFundType = 0;


                                                                //Bikin SWITCHING

                                                                if (_agent3 != rsHeader3.Key.SellingAgentID)
                                                                {
                                                                    _rowAgent = incRowExcel;
                                                                    _currency3 = rsHeader3.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Value = rsHeader3.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Selling Agency";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader3.Key.SellingAgentID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                    //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupBySellingAgentByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader3.Key.SellingAgentID, rsHeader3.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    incRowExcel++;
                                                                    _rowStartAgent = incRowExcel;
                                                                }

                                                                _rowFundType = incRowExcel;

                                                                worksheet.Cells[incRowExcel, 2].Value = "Fund Type";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader3.Key.FundType;
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByFundTypeByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader3.Key.SellingAgentID, rsHeader3.Key.FundType, rsHeader3.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                //incRowExcel++;


                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                incRowExcel++;
                                                                //area header
                                                                _rowStartFundType = incRowExcel;

                                                                int _no = 1;
                                                                int _startRowDetail = incRowExcel;
                                                                //int _endRowDetail = 0;
                                                                foreach (var rsDetail3 in rsHeader3)
                                                                {
                                                                    //ThickBox Border

                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail3.FundID;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail3.FundName;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail3.Subscription;
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail3.Redemption;
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail3.Netting;
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                    _rowLast = incRowExcel;
                                                                    _no++;
                                                                    incRowExcel++;
                                                                    _agent3 = rsHeader3.Key.SellingAgentID;

                                                                }
                                                                worksheet.Cells[_rowFundType, 7].Formula = "SUM(G" + _rowStartFundType + ":G" + _rowLast + ")";


                                                                if (_rowAgent != 0 && _agent3 == rsHeader3.Key.SellingAgentID)
                                                                {
                                                                    worksheet.Cells[_rowAgent, 7].Formula = "SUM(G" + _rowStartAgent + ":G" + _rowLast + ")/2";
                                                                }

                                                            }


                                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                            //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency3, _unitRegistryRpt.Status);
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;

                                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rowStartTotal + ":G" + _rowLast + ")/3";
                                                            worksheet.Calculate();

                                                            incRowExcel++;


                                                        }
                                                    }

                                                }
                                            }
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 7];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 34;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B INDICATION BY AGENT";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Indication By Product
            if (_unitRegistryRpt.ReportName.Equals("Indication By Product"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _statusSwitch = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And B.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And C.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = " and A.Status = 1  ";
                                _statusRedemp = " and A.Status = 1  ";
                                _statusSwitch = " and A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = " and A.Status = 3  ";
                                _statusRedemp = " and A.Status = 3  ";
                                _statusSwitch = " and A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }


                            cmd.CommandText =
                                // NON SWITCHING IDR
                               @"select FundID,FundName,FundClientID,FundClientName,FundType,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                select B.ID FundID,B.Name FundName,'' FundClientID,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID,'Non Switching' Switching from ClientSubscription A
                                left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                where Valuedate between @DateFrom and @DateTo " + _paramFund + _paramFundClient + _statusSubs + @" and E.CurrencyPk = 1
                                union all
                                select B.ID FundID,B.Name FundName,'' FundClientID,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID,'Non Switching' Switching from ClientRedemption A
                                left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                where Valuedate between @DateFrom and @DateTo " + _paramFund + _paramFundClient + _statusRedemp + @" and E.CurrencyPk = 1
                        
                                ) A
                                group by FundID,FundName,FundClientID,FundClientName,FundType,CurrencyID,switching
                                order By FundType ";





                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "IndicationByProduct" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "IndicationByProduct" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Indication By Product");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientID = Convert.ToString(dr0["FundClientID"]);
                                            rSingle.ClientName = Convert.ToString(dr0["FundClientName"]);
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Subscription = Convert.ToDecimal(dr0["SubsAmount"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["RedAmount"]);
                                            rSingle.Netting = Convert.ToDecimal(dr0["Nett"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.Switching = Convert.ToString(dr0["Switching"]);
                                            rList.Add(rSingle);

                                        }



                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundID, r.FundType, r.CurrencyID, r.Switching } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        int _colCurrency = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Detail Net New Cash by Product ";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyName();
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Period " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " to " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                        worksheet.Row(incRowExcel).Height = 45;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 6].Value = "Phone";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + _host.Get_CompanyPhone();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Fax No";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + _host.Get_CompanyFax();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 3;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Print Date";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Time";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Font.Bold = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Non Switching";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        _colCurrency = incRowExcel;


                                        incRowExcel++;

                                        var _FundType = "";
                                        var _currency = "";
                                        worksheet.Row(incRowExcel).Height = 25;
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;

                                        incRowExcel++;



                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            //incRowExcel++;

                                            //Bikin NON SWITCHING

                                            if (_FundType != rsHeader.Key.FundType)
                                            {
                                                _currency = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[_colCurrency, 2].Value = rsHeader.Key.CurrencyID;
                                                worksheet.Cells[_colCurrency, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FundType;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByFundTypeProductByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader.Key.FundType, rsHeader.Key.CurrencyID, _unitRegistryRpt.Status);
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FundID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByFundByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader.Key.FundID, rsHeader.Key.CurrencyID, _unitRegistryRpt.Status);
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FundID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByFundByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader.Key.FundID, rsHeader.Key.CurrencyID, _unitRegistryRpt.Status);
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            }


                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //incRowExcel++;


                                            //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //ThickBox Border

                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientID;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subscription;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Redemption;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Netting;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                _no++;
                                                incRowExcel++;
                                                _FundType = rsHeader.Key.FundType;

                                            }



                                        }
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                        worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;



                                        incRowExcel++;

                                        incRowExcel++;

                                        // NON SWITCHING USD



                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =
                                                    // NON SWITCHING USD
                                               @"select FundID,FundName,FundClientID,FundClientName,FundType,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                                select B.ID FundID,B.Name FundName,'' FundClientID,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID,'Non Switching' Switching from ClientSubscription A
                                                left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo " + _paramFund + _paramFundClient + _statusSubs + @" and E.CurrencyPk <> 1
                                                union all
                                                select B.ID FundID,B.Name FundName,'' FundClientID,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID,'Non Switching' Switching from ClientRedemption A
                                                left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo " + _paramFund + _paramFundClient + _statusRedemp + @" and E.CurrencyPk <> 1
                        
                                                ) A
                                                group by FundID,FundName,FundClientID,FundClientName,FundType,CurrencyID,switching
                                                order By FundType ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    if (dr1.HasRows)
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList1 = new List<UnitRegistryRpt>();
                                                            while (dr1.Read())
                                                            {
                                                                UnitRegistryRpt rSingle1 = new UnitRegistryRpt();
                                                                rSingle1.ClientID = Convert.ToString(dr1["FundClientID"]);
                                                                rSingle1.ClientName = Convert.ToString(dr1["FundClientName"]);
                                                                rSingle1.FundType = Convert.ToString(dr1["FundType"]);
                                                                rSingle1.FundID = Convert.ToString(dr1["FundID"]);
                                                                rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                                rSingle1.Subscription = Convert.ToDecimal(dr1["SubsAmount"]);
                                                                rSingle1.Redemption = Convert.ToDecimal(dr1["RedAmount"]);
                                                                rSingle1.Netting = Convert.ToDecimal(dr1["Nett"]);
                                                                rSingle1.CurrencyID = Convert.ToString(dr1["CurrencyID"]);
                                                                rSingle1.Switching = Convert.ToString(dr1["Switching"]);
                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r1 in rList1
                                                                group r1 by new { r1.FundID, r1.FundType, r1.CurrencyID, r1.Switching } into rGroup1
                                                                select rGroup1;

                                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                            _colCurrency = incRowExcel;

                                                            incRowExcel++;

                                                            worksheet.Row(incRowExcel).Height = 25;
                                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                            worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                                            incRowExcel++;

                                                            var _FundType1 = "";
                                                            var _currency1 = "";
                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {




                                                                //Bikin SWITCHING

                                                                if (_FundType1 != rsHeader1.Key.FundType)
                                                                {
                                                                    _currency1 = rsHeader1.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Value = rsHeader1.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader1.Key.FundType;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByFundTypeProductByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader1.Key.FundType, rsHeader1.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader1.Key.FundID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByFundByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader1.Key.FundID, rsHeader1.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader1.Key.FundID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByFundByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader1.Key.FundID, rsHeader1.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                }

                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                //incRowExcel++;


                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                incRowExcel++;
                                                                //area header

                                                                int _no = 1;
                                                                int _startRowDetail = incRowExcel;
                                                                //int _endRowDetail = 0;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    //ThickBox Border

                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail1.ClientID;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail1.ClientName;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Subscription;
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Redemption;
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Netting;
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                    _no++;
                                                                    incRowExcel++;
                                                                    _FundType1 = rsHeader1.Key.FundType;

                                                                }

                                                            }

                                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                            worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency1, _unitRegistryRpt.Status);
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                            incRowExcel++;




                                                        }

                                                    }
                                                }
                                            }
                                        }

                                        incRowExcel++;

                                        //SWITCHING IDR
                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {
                                                cmd2.CommandText =
                                                @"select FundID,FundName,FundClientID,FundClientName,FundType,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                                select B.ID FundID,B.Name FundName,'' FundClientID,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKTo = B.FundPK and B.Status in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo " + _paramFund + _paramFundClient + _statusSwitch + @" and E.CurrencyPK = 1
                                                union all
                                                select B.ID FundID,B.Name FundName,'' FundClientID,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKFrom = B.FundPK and B.Status in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo " + _paramFund + _paramFundClient + _statusSwitch + @" and E.CurrencyPK = 1

                                                ) A
                                                group by FundID,FundName,FundClientID,FundClientName,FundType,CurrencyID,switching
                                                order By FundType ";
                                                cmd2.CommandTimeout = 0;

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                cmd2.ExecuteNonQuery();


                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {

                                                    if (dr2.HasRows)
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList2 = new List<UnitRegistryRpt>();
                                                            while (dr2.Read())
                                                            {
                                                                UnitRegistryRpt rSingle2 = new UnitRegistryRpt();
                                                                rSingle2.ClientID = Convert.ToString(dr2["FundClientID"]);
                                                                rSingle2.ClientName = Convert.ToString(dr2["FundClientName"]);
                                                                rSingle2.FundType = Convert.ToString(dr2["FundType"]);
                                                                rSingle2.FundID = Convert.ToString(dr2["FundID"]);
                                                                rSingle2.FundName = Convert.ToString(dr2["FundName"]);
                                                                rSingle2.Subscription = Convert.ToDecimal(dr2["SubsAmount"]);
                                                                rSingle2.Redemption = Convert.ToDecimal(dr2["RedAmount"]);
                                                                rSingle2.Netting = Convert.ToDecimal(dr2["Nett"]);
                                                                rSingle2.CurrencyID = Convert.ToString(dr2["CurrencyID"]);
                                                                rSingle2.Switching = Convert.ToString(dr2["Switching"]);
                                                                rList2.Add(rSingle2);

                                                            }


                                                            var QueryByFundID2 =
                                                                from r2 in rList2
                                                                group r2 by new { r2.FundID, r2.FundType, r2.CurrencyID, r2.Switching } into rGroup2
                                                                select rGroup2;

                                                            worksheet.Cells[incRowExcel, 1].Value = "Switching";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                            _colCurrency = incRowExcel;

                                                            incRowExcel++;

                                                            worksheet.Row(incRowExcel).Height = 25;
                                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                            worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                                            incRowExcel++;

                                                            var _FundType2 = "";
                                                            var _currency2 = "";
                                                            foreach (var rsHeader2 in QueryByFundID2)
                                                            {




                                                                //Bikin SWITCHING

                                                                if (_FundType2 != rsHeader2.Key.FundType)
                                                                {
                                                                    _currency2 = rsHeader2.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Value = rsHeader2.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader2.Key.FundType;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByFundTypeProductByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader2.Key.FundType, rsHeader2.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader2.Key.FundID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByFundByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader2.Key.FundID, rsHeader2.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader2.Key.FundID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByFundByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader2.Key.FundID, rsHeader2.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                }

                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                //incRowExcel++;


                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                incRowExcel++;
                                                                //area header

                                                                int _no = 1;
                                                                int _startRowDetail = incRowExcel;
                                                                //int _endRowDetail = 0;
                                                                foreach (var rsDetail2 in rsHeader2)
                                                                {
                                                                    //ThickBox Border

                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail2.ClientID;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ClientName;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail2.Subscription;
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail2.Redemption;
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail2.Netting;
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                    _no++;
                                                                    incRowExcel++;
                                                                    _FundType2 = rsHeader2.Key.FundType;

                                                                }



                                                            }
                                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                            worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency2, _unitRegistryRpt.Status);
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                            incRowExcel++;


                                                        }

                                                    }
                                                }
                                            }
                                        }

                                        incRowExcel++;

                                        //SWITCHING USD



                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon3.Open();
                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                            {
                                                cmd3.CommandText =
                                                @"select FundID,FundName,FundClientID,FundClientName,FundType,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                                select B.ID FundID,B.Name FundName,'' FundClientID,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKTo = B.FundPK and B.Status in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo " + _paramFund + _paramFundClient + _statusSwitch + @" and E.CurrencyPK <> 1
                                                union all
                                                select B.ID FundID,B.Name FundName,'' FundClientID,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKFrom = B.FundPK and B.Status in (1,2)
                                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                                left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo " + _paramFund + _paramFundClient + _statusSwitch + @" and E.CurrencyPK <> 1

                                                ) A
                                                group by FundID,FundName,FundClientID,FundClientName,FundType,CurrencyID,switching
                                                order By FundType ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                cmd3.ExecuteNonQuery();


                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {
                                                    if (dr3.HasRows)
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList3 = new List<UnitRegistryRpt>();
                                                            while (dr3.Read())
                                                            {
                                                                UnitRegistryRpt rSingle3 = new UnitRegistryRpt();
                                                                rSingle3.ClientID = Convert.ToString(dr3["FundClientID"]);
                                                                rSingle3.ClientName = Convert.ToString(dr3["FundClientName"]);
                                                                rSingle3.FundType = Convert.ToString(dr3["FundType"]);
                                                                rSingle3.FundID = Convert.ToString(dr3["FundID"]);
                                                                rSingle3.FundName = Convert.ToString(dr3["FundName"]);
                                                                rSingle3.Subscription = Convert.ToDecimal(dr3["SubsAmount"]);
                                                                rSingle3.Redemption = Convert.ToDecimal(dr3["RedAmount"]);
                                                                rSingle3.Netting = Convert.ToDecimal(dr3["Nett"]);
                                                                rSingle3.CurrencyID = Convert.ToString(dr3["CurrencyID"]);
                                                                rSingle3.Switching = Convert.ToString(dr3["Switching"]);
                                                                rList3.Add(rSingle3);

                                                            }


                                                            var QueryByFundID3 =
                                                                from r3 in rList3
                                                                group r3 by new { r3.FundID, r3.FundType, r3.CurrencyID, r3.Switching } into rGroup3
                                                                select rGroup3;

                                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                            _colCurrency = incRowExcel;

                                                            incRowExcel++;

                                                            worksheet.Row(incRowExcel).Height = 25;
                                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                            worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                            worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                                            incRowExcel++;

                                                            var _FundType3 = "";
                                                            var _currency3 = "";
                                                            foreach (var rsHeader3 in QueryByFundID3)
                                                            {




                                                                //Bikin SWITCHING

                                                                if (_FundType3 != rsHeader3.Key.FundType)
                                                                {
                                                                    _currency3 = rsHeader3.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Value = rsHeader3.Key.CurrencyID;
                                                                    worksheet.Cells[_colCurrency, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader3.Key.FundType;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByFundTypeProductByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader3.Key.FundType, rsHeader3.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader3.Key.FundID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByFundByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader3.Key.FundID, rsHeader3.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Product ID";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader3.Key.FundID;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByFundByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, rsHeader3.Key.FundID, rsHeader3.Key.CurrencyID, _unitRegistryRpt.Status);
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                }

                                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                //incRowExcel++;


                                                                //worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Netting;
                                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                incRowExcel++;
                                                                //area header

                                                                int _no = 1;
                                                                int _startRowDetail = incRowExcel;
                                                                //int _endRowDetail = 0;
                                                                foreach (var rsDetail3 in rsHeader3)
                                                                {
                                                                    //ThickBox Border

                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                    //area detail
                                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ClientID;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail3.ClientName;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail3.Subscription;
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail3.Redemption;
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail3.Netting;
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                    _no++;
                                                                    incRowExcel++;
                                                                    _FundType3 = rsHeader3.Key.FundType;

                                                                }


                                                            }


                                                            worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                            worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSwitchingByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency3, _unitRegistryRpt.Status);
                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                                            incRowExcel++;


                                                        }
                                                    }

                                                }
                                            }
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 7];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 34;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B INDICATION BY PRODUCT";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Indication Summary
            if (_unitRegistryRpt.ReportName.Equals("Indication Summary"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _statusSwitch = "";


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = " and A.Status = 1  ";
                                _statusRedemp = " and A.Status = 1  ";
                                _statusSwitch = " and A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = " and A.Status = 3  ";
                                _statusRedemp = " and A.Status = 3  ";
                                _statusSwitch = " and A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }

                            //                    

                            cmd.CommandText =

                                @"
                            select AgentID,AgentName,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                            select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.ID else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.ID  else '' end end  AgentID,
                            case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end  AgentName,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID,'Non Switch' Switching from ClientSubscription A
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                            where Valuedate between @DateFrom and @DateTo " + _statusSubs + @" 
                            union all
                            select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.ID else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.ID  else '' end end  AgentID,
                            case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end  AgentName,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID,'Non Switch' Switching from ClientRedemption A
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                            where Valuedate between @DateFrom and @DateTo " + _statusRedemp + @" 

                            union all
                            select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.ID else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.ID  else '' end end  AgentID,
                            case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end  AgentName,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switch' Switching from ClientSwitching A
                            left join Fund B on A.FundPKTo = B.FundPK and B.Status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                            where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @" 
                            union all
                            select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.ID else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.ID  else '' end end  AgentID,
                            case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end  AgentName,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switch' Switching from ClientSwitching A
                            left join Fund B on A.FundPKFrom = B.FundPK and B.Status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                            where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @" 

                            ) A
                            group by AgentID,AgentName,CurrencyID,switching
                            order By AgentName";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "IndicationSummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "IndicationSummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Indication Summary");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.SellingAgentID = Convert.ToString(dr0["AgentID"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.Subscription = Convert.ToDecimal(dr0["SubsAmount"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["RedAmount"]);
                                            rSingle.Netting = Convert.ToDecimal(dr0["Nett"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.Switching = Convert.ToString(dr0["Switching"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryBySellingAgentID =
                                            from r in rList
                                            group r by new { r.CurrencyID, r.Switching } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Detail Net New Cash Summary";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyName();
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Period " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " to " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                        worksheet.Row(incRowExcel).Height = 45;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 6].Value = "Phone";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + _host.Get_CompanyPhone();
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Fax No";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + _host.Get_CompanyFax();
                                        incRowExcel = incRowExcel + 1;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Print Date";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Time";
                                        worksheet.Cells[incRowExcel, 7].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                        incRowExcel++;
                                        foreach (var rsHeader in QueryBySellingAgentID)
                                        {

                                            incRowExcel = incRowExcel + 2;
                                            if (rsHeader.Key.Switching == "Switching")
                                            {
                                                //ThickBox Border
                                                //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Switching;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CurrencyID;

                                                incRowExcel++;

                                                worksheet.Row(incRowExcel).Height = 25;
                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = "Selling Agency ID";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "Selling Agency Name";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;


                                            }
                                            else
                                            {
                                                //ThickBox Border
                                                //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Switching;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CurrencyID;

                                                incRowExcel++;

                                                worksheet.Row(incRowExcel).Height = 25;
                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = "Selling Agency ID";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "Selling Agency Name";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;

                                            }


                                            incRowExcel++;

                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsDetail.Switching == "Switching")
                                                {
                                                    //ThickBox Border
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SellingAgentID;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AgentName;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subscription;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Redemption;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Netting;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                                }
                                                else
                                                {
                                                    //ThickBox Border
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.SellingAgentID;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AgentName;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subscription;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Redemption;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Netting;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;


                                            }
                                            //worksheet.Cells["A" + _endRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            incRowExcel++;

                                        }

                                        //-----------------------------------
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {

                                                //                          
                                                cmd1.CommandText =

                                                    @"select FundID,FundName,sum(SubsAmount) SubsAmount,sum(RedAmount) RedAmount,sum(SubsAmount - RedAmount) Nett,CurrencyID,Switching from (
                                                select B.ID FundID,B.Name FundName,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID,'Non Switch' Switching from ClientSubscription A
                                                left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo " + _statusSubs + @" 
                                                union all
                                                select B.ID FundID,B.Name FundName,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID,'Non Switch' Switching from ClientRedemption A
                                                left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo  " + _statusRedemp + @" 

                                                union all
                                                select B.ID FundID,B.Name FundName,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switch' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKTo = B.FundPK and B.Status in (1,2)
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @" 
                                                union all
                                                select B.ID FundID,B.Name FundName,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switch' Switching from ClientSwitching A
                                                left join Fund B on A.FundPKFrom = B.FundPK and B.Status in (1,2)
                                                left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                                                where Valuedate between @DateFrom and @DateTo  " + _statusSwitch + @" 

                                                ) A
                                                group by FundID,FundName,CurrencyID,switching
                                                order By FundID";
                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {
                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList1 = new List<UnitRegistryRpt>();
                                                            while (dr1.Read())
                                                            {
                                                                UnitRegistryRpt rSingle1 = new UnitRegistryRpt();
                                                                //rSingle1.SellingAgentID = Convert.ToString(dr0["SellingAgent"]);

                                                                rSingle1.ProductID = Convert.ToString(dr1["FundID"]);
                                                                rSingle1.ProductName = Convert.ToString(dr1["FundName"]);
                                                                rSingle1.Subscription = Convert.ToDecimal(dr1["SubsAmount"]);
                                                                rSingle1.Redemption = Convert.ToDecimal(dr1["RedAmount"]);
                                                                rSingle1.Netting = Convert.ToDecimal(dr1["Nett"]);
                                                                rSingle1.CurrencyID = Convert.ToString(dr1["CurrencyID"]);
                                                                rSingle1.Switching = Convert.ToString(dr1["Switching"]);
                                                                rList1.Add(rSingle1);

                                                            }

                                                            var QueryBySellingAgentID1 =
                                                                from r in rList1
                                                                group r by new { r.CurrencyID, r.Switching } into rGroup
                                                                select rGroup;

                                                            incRowExcel = incRowExcel + 2;

                                                            foreach (var rsHeader1 in QueryBySellingAgentID1)
                                                            {

                                                                incRowExcel++;
                                                                if (rsHeader1.Key.Switching == "Switching")
                                                                {
                                                                    //ThickBox Border
                                                                    //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.Switching;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.CurrencyID;

                                                                    incRowExcel++;

                                                                    worksheet.Row(incRowExcel).Height = 25;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "No";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 2].Value = "Fund ID";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;



                                                                }
                                                                else
                                                                {
                                                                    //ThickBox Border
                                                                    //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.Switching;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.CurrencyID;

                                                                    incRowExcel++;

                                                                    worksheet.Row(incRowExcel).Height = 25;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "No";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 2].Value = "Fund ID";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 6].Value = "Redemption";
                                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells[incRowExcel, 7].Value = "Netting";
                                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;

                                                                }


                                                                incRowExcel++;

                                                                //area header

                                                                int _no = 1;
                                                                int _startRowDetailZ = incRowExcel;
                                                                int _endRowDetailZ = 0;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    if (rsDetail1.Switching == "Switching")
                                                                    {
                                                                        //ThickBox Border
                                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        //area detail
                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.ProductID;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Subscription;
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Redemption;
                                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Netting;
                                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                                                    }
                                                                    else
                                                                    {
                                                                        //ThickBox Border
                                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        //area detail
                                                                        worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.ProductID;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Subscription;
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Redemption;
                                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Netting;
                                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                    }

                                                                    _endRowDetailZ = incRowExcel;
                                                                    _no++;
                                                                    incRowExcel++;


                                                                }
                                                                //worksheet.Cells["A" + _endRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetailZ + ":G" + _endRowDetailZ + ")";
                                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                                incRowExcel++;

                                                            }

                                                            //incRowExcel = incRowExcel + 2;

                                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                                            incRowExcel++;
                                                            //-----------------------------------
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 7];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 35;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 34;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report For All \n &28&B Subscription , Redemption , Switching";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Detail Transaction
            if (_unitRegistryRpt.ReportName.Equals("Detail Transaction"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramAgent = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And B.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And C.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _statusSwitch = "";

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = " and A.Status = 1  ";
                                _statusRedemp = " and A.Status = 1  ";
                                _statusSwitch = " and A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = " and A.Status = 3  ";
                                _statusRedemp = " and A.Status = 3  ";
                                _statusSwitch = " and A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }


                            cmd.CommandText =

                             @" 
                            select TransactionDate,AgentType,ClientName,FundID,FundName,TransactionAmount,TransactionUnit,FeeAmount,NetAmount,CurrencyID,TransactionType, FundType,TransactionCurrency,AgentID,AgentName,Source from (
                            select case when C.SACode <> '' then 'Indirect' else 'Direct' end AgentType,A.ValueDate TransactionDate,F.Name ClientName,B.ID FundID,B.Name FundName,CashAmount TransactionAmount, A.TotalUnitAmount TransactionUnit,isnull(A.SubscriptionFeeAmount,0) FeeAmount,TotalCashAmount NetAmount,G.ID CurrencyID,'SUBSCRIPTION' TransactionType,D.DescOne FundType,E.ID TransactionCurrency,case when C.SACode <> '' then C.SACode else C.IFUACode end AgentID,case when C.SACode <> '' then C.Name else 'MANDIRI MANAJEMEN INVESTASI' end AgentName,H.DescOne Source from ClientSubscription A
                            left join Fund B on A.FundPK = B.FundPK and B.Status  in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                            left join FundClient F on A.FundClientPK = F.FundClientPK and F.Status = 2
                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.Status = 2
                            left join MasterValue H on A.Type = H.Code and H.status = 2 and H.ID = 'SubscriptionType'

                            where Valuedate between @DateFrom and @DateTo
                            " + _paramFund + _paramAgent + _statusSubs + @"


                            union all
                            select case when C.SACode <> '' then 'Indirect' else 'Direct' end  AgentType,A.ValueDate TransactionDate,F.Name ClientName,B.ID FundID,B.Name FundName,CashAmount TransactionAmount, A.UnitAmount TransactionUnit,isnull(A.RedemptionFeeAmount,0) FeeAmount,TotalCashAmount NetAmount,G.ID CurrencyID,'REDEMPTION' TransactionType,D.DescOne FundType,E.ID TransactionCurrency,case when C.SACode <> '' then C.SACode else C.IFUACode end AgentID,case when C.SACode <> '' then C.Name else 'MANDIRI MANAJEMEN INVESTASI' end AgentName,H.DescOne Source from ClientRedemption A
                            left join Fund B on A.FundPK = B.FundPK and B.Status  in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                            left join FundClient F on A.FundClientPK = F.FundClientPK and F.Status = 2
                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.Status = 2
                            left join MasterValue H on A.Type = H.Code and H.status = 2 and H.ID = 'SubscriptionType'

                            where Valuedate between @DateFrom and @DateTo 
                            " + _paramFund + _paramAgent + _statusRedemp + @"
                            union all
                            select case when C.SACode <> '' then 'Indirect' else 'Direct' end AgentType,A.ValueDate TransactionDate,F.Name ClientName,B.ID FundID,B.Name FundName,CashAmount TransactionAmount, A.TotalUnitAmountFundTo TransactionUnit,case when FeeType = 'Out' then 0 else isnull(A.SwitchingFeeAmount,0) end FeeAmount,TotalCashAmountFundTo NetAmount,G.ID CurrencyID,'SWITCHING IN' TransactionType,D.DescOne FundType,E.ID TransactionCurrency,case when C.SACode <> '' then C.SACode else C.IFUACode end AgentID,case when C.SACode <> '' then C.Name else 'MANDIRI MANAJEMEN INVESTASI' end AgentName,H.DescOne Source from ClientSwitching A
                            left join Fund B on A.FundPKTo = B.FundPK and B.Status  in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                            left join FundClient F on A.FundClientPK = F.FundClientPK and F.Status = 2
                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.Status = 2
                            left join MasterValue H on A.Type = H.Code and H.status = 2 and H.ID = 'SubscriptionType'

                            where Valuedate between @DateFrom and @DateTo
                            " + _paramFund + _paramAgent + _statusSwitch + @"
                            union all
                            select case when C.SACode <> '' then 'Indirect' else 'Direct' end AgentType,A.ValueDate TransactionDate,F.Name ClientName,B.ID FundID,B.Name FundName,CashAmount TransactionAmount, A.UnitAmount TransactionUnit,case when FeeType = 'Out' then isnull(A.SwitchingFeeAmount,0) else 0 end FeeAmount,TotalCashAmountFundFrom NetAmount,G.ID CurrencyID,'SWITCHING OUT' TransactionType,D.DescOne FundType,E.ID TransactionCurrency,case when C.SACode <> '' then C.SACode else C.IFUACode end AgentID,case when C.SACode <> '' then C.Name else 'MANDIRI MANAJEMEN INVESTASI' end AgentName,H.DescOne Source from ClientSwitching A
                            left join Fund B on A.FundPKFrom = B.FundPK and B.Status  in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                            left join FundClient F on A.FundClientPK = F.FundClientPK and F.Status = 2
                            left join Currency G on B.CurrencyPK = G.CurrencyPK and G.Status = 2
                            left join MasterValue H on A.Type = H.Code and H.status = 2 and H.ID = 'SubscriptionType'
                            where Valuedate between @DateFrom and @DateTo
                            " + _paramFund + _paramAgent + _statusSwitch + @"
                            ) A
                            group by TransactionDate,AgentType,ClientName,FundID,FundName,TransactionAmount,TransactionUnit,FeeAmount,NetAmount,CurrencyID,TransactionType, FundType,TransactionCurrency,AgentID,AgentName,Source
                            order By FundID
                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DetailTransaction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DetailTransaction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Detail Transaction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.TransactionDate = Convert.ToDateTime(dr0["TransactionDate"]);
                                            rSingle.InternalCategory = Convert.ToString(dr0["AgentType"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.TransactionAmount = Convert.ToDecimal(dr0["TransactionAmount"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.TransactionUnit = Convert.ToDecimal(dr0["TransactionUnit"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.TransactionType = Convert.ToString(dr0["TransactionType"]);
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.TransactionCurrency = Convert.ToString(dr0["TransactionCurrency"]);
                                            rSingle.Source = Convert.ToString(dr0["Source"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Radsoft Transaction Unit";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;


                                            int _startRowDetail = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);

                                            worksheet.Cells[incRowExcel, 1].Value = "Transaction Date";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Internal Category";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Agent";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 4].Value = "Customer";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Product Name";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Transaction Amount";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 7].Value = "Transaction Net Amount";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "Transaction Fee";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Transaction Unit";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Product Currency";
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 11].Value = "Transaction Type";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 12].Value = "Product Type";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "Transaction Currency";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Style.WrapText = true;

                                            worksheet.Cells[incRowExcel, 14].Value = "SOURCE";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;

                                            //area header

                                            int _no = 1;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //ThickBox Border

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.TransactionDate).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InternalCategory;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.TransactionAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.NetAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TransactionUnit;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.CurrencyID;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.TransactionType;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.FundType;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.TransactionCurrency;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Source;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }

                                            worksheet.Cells["A" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 14];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 40;
                                        worksheet.Column(5).Width = 60;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 22;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 12;
                                        worksheet.Column(11).Width = 17;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 12;
                                        worksheet.Column(14).Width = 15;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B INDICATION BY AGENT";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region AUM Comparison
            if (_unitRegistryRpt.ReportName.Equals("AUM Comparison"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            cmd.CommandText =
                                @"
                                declare @DateMinOne datetime

                                set @DateMinOne = dbo.FWorkingDay(@DateFrom,-1)

                                Select A.ID FundID,@DateFrom Date,isnull(B.UnitSystem,0) * dbo.FgetLastCloseNav(@datefrom,A.FundPK) AUMSystem, isnull(C.AUM,0) AUMCustodi 
                                from Fund A
                                left join
                                (
	                                Select FundPK,sum(isnull(UnitAmount,0)) UnitSystem from fundclientPosition A
	                                where A.date = (
		                                Select max(date) from fundclientPosition where date <= @DateMinOne
	                                )
	                                group by A.FundPK
                                )B on A.FundPK = B.FundPK
                                left join 
                                (
	                                select  FundPK,AUM from CloseNAV
	                                where date =
	                                (
		                                Select max(date) from closeNAv where date <= @DateFrom
	                                ) and status in (1,2)

                                )C on A.FundPK = C.FundPK
                                where A.status = 2 " + _paramFund;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@dateFrom", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AUMComparison" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AUMComparison" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AUM Comparison");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AUMComparison> rList = new List<AUMComparison>();
                                        while (dr0.Read())
                                        {
                                            AUMComparison rSingle = new AUMComparison();

                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"]);
                                            rSingle.NavCustody = dr0["AUMCustodi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMCustodi"]);
                                            rSingle.NavVestanium = dr0["AUMSystem"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMSystem"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;

                                        worksheet.Row(incRowExcel).Height = 80;
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Style.WrapText = true;
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Merge = true;
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Top;


                                        //worksheet.Cells[incRowExcel, 1].Value = "Period " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " to " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Phone No";
                                        worksheet.Cells[incRowExcel, 7].Value = " : ";
                                        worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyPhone();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 6].Value = "Fax No";
                                        worksheet.Cells[incRowExcel, 7].Value = " : ";
                                        worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyFax();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "AUM Reconcile";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 30;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "NAV";
                                        worksheet.Cells[incRowExcel, 2].Value = " : ";
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 8].Value = "Print Date";
                                        worksheet.Cells[incRowExcel, 9].Value = " : ";
                                        worksheet.Cells[incRowExcel, 10].Value = Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 8].Value = "Time";
                                        worksheet.Cells[incRowExcel, 9].Value = " : ";
                                        worksheet.Cells[incRowExcel, 10].Value = Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 8].Value = "Pages";
                                        worksheet.Cells[incRowExcel, 9].Value = " : ";
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Style.Font.Bold = true;

                                        incRowExcel = incRowExcel + 2;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            //int _A = incRowExcel;
                                            //incRowExcel++;


                                            //worksheet.Row(incRowExcel).Height = 25;
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Product Code";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "NAV Date";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV Custody";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "NAV Radsoft";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Dif";
                                            worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Bold = true;
                                            incRowExcel++;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //ThickBox Border

                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy"); ;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NavCustody;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NavVestanium;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 8].Formula = "SUM(E" + incRowExcel + "-F" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;

                                                _no++;
                                                incRowExcel++;


                                            }
                                            //worksheet.Cells["A" + _endRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells[incRowExcel, 2].Value = "Grand Total :";
                                            ////worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            ////worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            ////worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            ////worksheet.Cells[incRowExcel, 7].Calculate();
                                            ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                            //incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }



                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:J" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                        }



                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 5;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 35;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 35;
                                        worksheet.Column(7).Width = 5;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 5;
                                        worksheet.Column(10).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B INDICATION BY AGENT";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();




                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Unit Comparison
            if (_unitRegistryRpt.ReportName.Equals("Unit Comparison"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }



                            cmd.CommandText =

                                @"
                                -----------UNIT


                            declare @DateMinOne datetime

                            set @DateMinOne = dbo.FWorkingDay(@DateFrom,-1)


                            Select A.ID FundID,@DateFrom Date,isnull(B.UnitSystem,0) UnitSystem, isnull(C.OutstandingUnitIssued,0) UnitCustodi 
                            from Fund A
                            left join
                            (
	                            Select FundPK,sum(isnull(UnitAmount,0)) UnitSystem from fundclientPosition A
	                            where A.date = (
		                            Select max(date) from fundclientPosition where date <= @DateMinOne
	                            )
	                            group by A.FundPK
                            )B on A.FundPK = B.FundPK
                            left join 
                            (
	                            select  Code,OutstandingUnitIssued from Fxd11Data
	                            where date = @DateFrom
	
                            )C on A.NKPDName = C.Code
                            where A.status = 2 " + _paramFund;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@dateFrom", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "UnitComparison" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "UnitComparison" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Unit Comparison");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitComparison> rList = new List<UnitComparison>();
                                        while (dr0.Read())
                                        {
                                            UnitComparison rSingle = new UnitComparison();

                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"]);
                                            rSingle.UnitCustody = dr0["UnitCustodi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["UnitCustodi"]);
                                            rSingle.UnitVestanium = dr0["UnitSystem"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["UnitSystem"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;

                                        worksheet.Row(incRowExcel).Height = 80;
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Style.WrapText = true;
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Merge = true;
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Top;


                                        //worksheet.Cells[incRowExcel, 1].Value = "Period " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " to " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Value = "Phone No";
                                        worksheet.Cells[incRowExcel, 7].Value = " : ";
                                        worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyPhone();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 6].Value = "Fax No";
                                        worksheet.Cells[incRowExcel, 7].Value = " : ";
                                        worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyFax();
                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "UNIT RECONCILE";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 30;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 8].Value = "Print Date";
                                        worksheet.Cells[incRowExcel, 9].Value = " : ";
                                        worksheet.Cells[incRowExcel, 10].Value = Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 8].Value = "Time";
                                        worksheet.Cells[incRowExcel, 9].Value = " : ";
                                        worksheet.Cells[incRowExcel, 10].Value = Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Style.Font.Bold = true;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 8].Value = "Pages";
                                        worksheet.Cells[incRowExcel, 9].Value = " : ";
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Style.Font.Bold = true;

                                        incRowExcel = incRowExcel + 2;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            //int _A = incRowExcel;
                                            //incRowExcel++;


                                            //worksheet.Row(incRowExcel).Height = 25;
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Product Code";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Date";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Unit Custody";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Unit Radsoft";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Dif";
                                            worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Bold = true;
                                            incRowExcel++;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //ThickBox Border

                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.Date).ToString("dd-MMM-yyyy"); ;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.UnitCustody;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.UnitVestanium;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 8].Formula = "SUM(E" + incRowExcel + "-F" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;

                                                _no++;
                                                incRowExcel++;


                                            }
                                            //worksheet.Cells["A" + _endRowDetail + ":K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells[incRowExcel, 2].Value = "Grand Total :";
                                            ////worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            ////worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            ////worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            ////worksheet.Cells[incRowExcel, 7].Calculate();
                                            ////worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                            //incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }



                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:J" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                        }



                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 5;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 35;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 35;
                                        worksheet.Column(7).Width = 5;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 5;
                                        worksheet.Column(10).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B INDICATION BY AGENT";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();




                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region NAV Harian
            if (_unitRegistryRpt.ReportName.Equals("NAV Harian"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }



                            cmd.CommandText =

                                @"
                              

Select 
case when isnull(C.DescOne,'') = 'EQUITY FUND' then 1
when isnull(C.DescOne,'') = 'MIXED ASSET FUND' then 2
when isnull(C.DescOne,'') = 'FIXED INCOME FUND' then 3
when isnull(C.DescOne,'') = 'MONEY MARKET FUND' then 4
when isnull(C.DescOne,'') = 'STRUCTURED FUND : CAPITAL PROTECTED FUND' then 5
when isnull(C.DescOne,'') = 'PRIVATE EQUITY FUND' then 6
when isnull(C.DescOne,'') = 'DISCETIONARY FUND' then 7
when isnull(C.DescOne,'') = 'CIC ASSET BACKED SECURITIES' then 8
when isnull(C.DescOne,'') = 'STRUCTURED FUND : INDEX FUND' then 9
when isnull(C.DescOne,'') = 'REAL ESTATE INVESTMENT TRUST' then 10
when isnull(C.DescOne,'') = 'EXCHANGE TRADED FUND' then 11
else 12
end Urutan,

case when B.FundTypeInternal = '1' 
then  isnull(C.DescOne,'') 
else isnull(D.DescOne,'') 
end ReksadanaType,
isnull(B.Name,'') FundName,isnull(A.NAV,0) NABPerUnit,isnull ([dbo].[Get_CurrencyRate](A.Date,B.CurrencyPK),0) rate,

case when B.CurrencyPK = 1 then isnull(A.AUM,0) 
when B.CurrencyPK not in (1) then isnull (A.AUM * [dbo].[Get_CurrencyRate](A.Date,B.CurrencyPK),0) else 1 end NilaiAktivaBersih 
from CloseNAV A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left join MasterValue C on C.Code = B.Type and C.id = 'fundType' and C.status in (1,2)
left join MasterValue D on D.Code = B.FundTypeInternal and D.id = 'FundTypeInternal' and D.status in (1,2)
                               
where A.status in (1,2) and A.Date = @Date 
" + _paramFund + @" 
UNION ALL



select case when isnull(C.DescOne,'') = 'EQUITY FUND' then 1
when isnull(C.DescOne,'') = 'MIXED ASSET FUND' then 2
when isnull(C.DescOne,'') = 'FIXED INCOME FUND' then 3
when isnull(C.DescOne,'') = 'MONEY MARKET FUND' then 4
when isnull(C.DescOne,'') = 'STRUCTURED FUND : CAPITAL PROTECTED FUND' then 5
when isnull(C.DescOne,'') = 'PRIVATE EQUITY FUND' then 6
when isnull(C.DescOne,'') = 'DISCETIONARY FUND' then 7
when isnull(C.DescOne,'') = 'CIC ASSET BACKED SECURITIES' then 8
when isnull(C.DescOne,'') = 'STRUCTURED FUND : INDEX FUND' then 9
when isnull(C.DescOne,'') = 'REAL ESTATE INVESTMENT TRUST' then 10
when isnull(C.DescOne,'') = 'EXCHANGE TRADED FUND' then 11
else 12
end Urutan,

case when B.FundTypeInternal = '1' 
then  isnull(C.DescOne,'') 
else isnull(D.DescOne,'') 
end ReksadanaType,
isnull(B.Name,'') FundName,0 NABPerUnit,isnull ([dbo].[Get_CurrencyRate](@Date,B.CurrencyPK),0) rate,

0 NilaiAktivaBersih 
 from Fund A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left join MasterValue C on C.Code = B.Type and C.id = 'fundType' and C.status in (1,2)
left join MasterValue D on D.Code = B.FundTypeInternal and D.id = 'FundTypeInternal' and D.status in (1,2)
where A.FundPK not in
(
	Select FundPK from CLoseNAV where status in (1,2) and Date = @Date
) and (@date < A.MaturityDate  or A.MaturityDate = '01/01/1900') and A.status in (1,2)
" + _paramFund + @" 

order by Urutan asc";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NAVHarian" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NAVHarian" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("NAV HARIAN");




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AUMHarian> rList = new List<AUMHarian>();
                                        while (dr0.Read())
                                        {
                                            AUMHarian rSingle = new AUMHarian();


                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.FundType = Convert.ToString(dr0["ReksadanaType"]);
                                            rSingle.NABPERUnit = dr0["NABPerUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NABPerUnit"]);
                                            rSingle.NilaiAktivaBersih = dr0["NilaiAktivaBersih"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NilaiAktivaBersih"]);
                                            rSingle.Urutan = dr0["Urutan"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Urutan"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.Urutan, r.FundName
                                            group r by new { r.FundType, r.Urutan } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Dana Kelolaan PT Mandiri Manajemen Investasi";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Nilai Aktiva Bersih per Unit & Nilai Aktiva Bersih ";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Posisi per" + " " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Total Nilai Dana Kelolaan";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        int _rowTotalIDR = incRowExcel;


                                        worksheet.Cells[incRowExcel, 4].Value = "IDR ";
                                        worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_TotalDanaKelolaan(_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";



                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Total Produk Kelolaan";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_TotalProduk_NAVHarian(_unitRegistryRpt.ValueDateFrom, _paramFund) + " " + "Produk";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 4].Value = "Kurs";
                                        worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_Kurs(_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";



                                        incRowExcel = incRowExcel + 2;

                                        var _FundType = "";
                                        worksheet.Cells[incRowExcel, 1].Value = " ";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = " ";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = " ";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "NAB PER Unit";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Nilai Aktiva Bersih";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                        incRowExcel++;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            if (_FundType != rsHeader.Key.FundType)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundType;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;

                                            }



                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;

                                            //worksheet.Row(incRowExcel).Height = 25;

                                            incRowExcel++;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //ThickBox Border

                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                //area detail


                                                worksheet.Cells[incRowExcel, 2].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NABPERUnit;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NilaiAktivaBersih;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";





                                                _endRowDetail = incRowExcel;
                                                _no++;

                                                incRowExcel++;


                                            }
                                            //incRowExcel = incRowExcel - 1;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;






                                            worksheet.Row(incRowExcel).Height = 25;
                                            worksheet.Cells[incRowExcel, 3].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            incRowExcel++;
                                            _FundType = rsHeader.Key.FundType;

                                            //incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }



                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:E" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 15;
                                        }



                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 5];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 7;
                                        worksheet.Column(3).Width = 105;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 35;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B INDICATION BY AGENT";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();




                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Window Redemption
            else if (_unitRegistryRpt.ReportName.Equals("Window Redemption"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = " and A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            cmd.CommandText =
                                @" 
                                    Create table #A
                                    (
                                    FundClientName nvarchar(100),
                                    Bulan nvarchar(50),
                                    DividenDate nvarchar(50),
                                    MaxRedemptDate nvarchar(50),
                                    Period nvarchar(50),
                                    Priority nvarchar(50),
                                    FundName nvarchar(100),
                                    IntMonth int,
                                    )
                                    declare @MaxDateEDT datetime

                                    select @MaxDateEDT = max(valueDate) from EndDayTrails where status = 2
                                    and valueDate <= @Datefrom

                                    set @MaxDateEDT = DBO.FWorkingDay(@MaxDateEDT,1)


                                    Insert into #A
                                    select case when B.SACode <> '' then B.Name else case when  CHARINDEX('non-aperd',B.Description) > 0 then B.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName, REPLACE(RIGHT(CONVERT(VARCHAR(20), D.DividenDate, 106), 8), ' ', '-') Bulan, 
                                    day(D.DividenDate) DividenDate
                                    , Case when month(D.MaxRedemptionDate) = month(D.DividenDate) then cast(day(D.MaxRedemptionDate) as nvarchar(10)) else CONVERT(VARCHAR(6),D.MaxRedemptionDate ,106)  end MaxRedemptDate
                                    ,E.DescOne Period,month(D.DividenDate) + year(D.DividenDate) Priority,
                                    F.Name FundName, month(D.DividenDate) IntMonth
                                    from FundClientPosition A
                                    left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                                    left join FundWindowRedemption C on A.FundPK = C.FundPK And C.status in (1,2)
                                    left join FundWindowRedemptionDetail D on C.FundWindowRedemptionPK = D.FundWindowRedemptionPK 
                                    left join MasterValue E on C.PaymentPeriod = E.Code and E.id = 'FundWindowRedemptionPeriod' and E.status in (1,2)
                                    left join Fund F on C.FundPK = F.FundPK and F.status in (1,2)
                                    where A.date = @MaxDateEDT
                                    and A.FundPK in
                                    (
	                                    Select Distinct FundPK from FundWindowRedemption where status = 2
                                    )
                                    and D.DividenDate between @DateFrom and @DateTo
                                    " + _paramFund + _paramFundClient + @" order by B.Name,priority


                                    select distinct FundClientName,Bulan,DividenDate,MaxRedemptDate,Period,Priority,FundName,IntMonth from #A order by IntMonth,FundClientName,FundName
                                    ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "WindowRedemption" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "WindowRedemption" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Window Redemption");

                                        int incRowExcel = 2;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<WindowRedemption> rList = new List<WindowRedemption>();
                                        while (dr0.Read())
                                        {
                                            WindowRedemption rSingle = new WindowRedemption();
                                            rSingle.ClientName = Convert.ToString(dr0["FundClientName"]);
                                            rSingle.Bulan = Convert.ToString(dr0["Bulan"]);
                                            rSingle.DividenDate = Convert.ToString(dr0["DividenDate"]);
                                            rSingle.MaxRedemptDate = Convert.ToString(dr0["MaxRedemptDate"]);
                                            rSingle.Priority = Convert.ToString(dr0["Priority"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Period = Convert.ToString(dr0["Period"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.ClientName } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 2].Value = "Jadwal Window Redemption & Dividend Distribution RD Terproteksi";
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Font.Size = 14;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 2].Value = "Selling Agent : " + rsHeader.Key.ClientName;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Font.Bold = true;
                                            incRowExcel++;

                                            int _startBorder = incRowExcel;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Jadwal Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 6].Merge = true;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Merge = true;


                                            worksheet.Cells[incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 2].Value = "Bulan";
                                            worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Batas Akhir Input WR";
                                            worksheet.Cells[incRowExcel, 6].Value = "Tanggal NAV(T)";
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "Tanggal Deviden";
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "Freq";
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Merge = true;


                                            incRowExcel++;

                                            int no = 1;

                                            var QueryByFundID =
                                                 from r2 in rsHeader
                                                 group r2 by new { r2.Bulan } into rGroup2
                                                 select rGroup2;

                                            int _endBorder = 0;
                                            foreach (var rsHeader2 in QueryByFundID)
                                            {

                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader2.Key.Bulan;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Merge = true;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Merge = true;

                                                incRowExcel++;

                                                foreach (var rsDetail in rsHeader2)
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.MaxRedemptDate;
                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    if (rsDetail.MaxRedemptDate == "" || rsDetail.MaxRedemptDate == null)
                                                    {
                                                        worksheet.Cells[incRowExcel, 6].Value = "";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.DividenDate;
                                                    }

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.DividenDate;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Period;
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Merge = true;

                                                    incRowExcel++;
                                                }
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Merge = true;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Merge = true;
                                                _endBorder = incRowExcel;
                                                incRowExcel++;
                                            }

                                            worksheet.Cells["B" + _startBorder + ":I" + _endBorder].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + _startBorder + ":I" + _endBorder].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + _startBorder + ":I" + _endBorder].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + _startBorder + ":I" + _endBorder].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                            incRowExcel = incRowExcel + 2;
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 3;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 55;
                                        worksheet.Column(4).Width = 3;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 10;
                                        worksheet.Column(8).Width = 3;
                                        worksheet.Column(9).Width = 10;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 WINDOW REDEMPTION";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Account Statement
            else if (_unitRegistryRpt.ReportName.Equals("Account Statement"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundClient = "";

                            string _paramZeroBalance = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitchOut = "  A.Status = 1  ";
                                _statusSwitchIn = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitchOut = "  A.Status = 3  ";
                                _statusSwitchIn = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchOut = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchIn = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchOut = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusSwitchIn = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }

                            if (_unitRegistryRpt.ZeroBalance == true)
                            {
                                _paramZeroBalance = " And A.UnitAmount >= 0 ";
                            }
                            else
                            {
                                _paramZeroBalance = " And A.UnitAmount > 0 ";
                            }

                            cmd.CommandText =
                           @"
                         
                                          
                            select E.AlamatInd1 Address,E.SID SID,E.IFUACode IFUA,E.ID Account,
                            case when MovementBalance is null then G.Name else FundName end FundName,
                            case when MovementBalance is null then E.ID else ClientID end ClientID,
                            case when MovementBalance is null then E.Name else ClientName end ClientName,
                            case when MovementBalance is null then dbo.fgetlastCloseNav(@ValueDateTo,A.FundPK) else CurrentNAV end NAV, 
                            [dbo].[FGetAVGForFundClientPosition](@ValueDateTo,A.FundclientPK,A.FundPK) AvgNAV,
                            dbo.fgetlastCloseNav(@ValueDateTo,A.FundPK) * dbo.FgetLastUnitAmount(@ValueDateTo,A.FundPK,A.FundClientPK)  EndingBalance,
                            case when MovementBalance is null then UnitAmount else Ending end Ending,
                            case when dbo.CheckTodayIsHoliday(@ValueDateFrom) = 1 then dbo.FgetLastUnitAmount(dbo.fworkingday(@ValueDateFrom,-1),A.FundPK,A.FundClientPK) else dbo.FgetLastUnitAmount(@ValueDateFrom,A.FundPK,A.FundClientPK) end BeginningBalance,
                            case when MovementBalance is null then 0 else Ending - dbo.FgetLastUnitAmount(@ValueDateFrom,A.FundPK,A.FundClientPK) end MovementBalance,
                            (dbo.FgetLastCloseNav(@ValueDateTo,A.FundPK) - [dbo].[FGetAVGForFundClientPosition](@ValueDateTo,A.FundclientPK,A.FundPK)) * dbo.FgetLastUnitAmount(@ValueDateTo,A.FundPK,A.FundClientPK) Unrealized
                            from FundClientPosition A 
                            left join FundClient E on A.FundClientPK = E.FundClientPK and E.Status in (1,2)  
                            left join Fund G on A.FundPK = G.FundPK and G.Status in (1,2) 
                            left join (
                            SELECT A.FundClientPK,A.FundPK,A.FundName ,A.ClientID,A.ClientName
                            , DBO.FgetLastCloseNav(@ValueDateTo,A.FundPK) * dbo.FgetLastUnitAmount(@ValueDateTo,A.FundPK,A.FundClientPK) EndingBalance
                            , CASE WHEN  [dbo].[FGetAVGForFundClientPosition](@ValueDateTo,A.FundclientPK,A.FundPK) <= 0 THEN 0 ELSE 
                            (DBO.FgetLastCloseNav(@ValueDateTo,A.FundPK) * dbo.FgetLastUnitAmount(@ValueDateTo,A.FundPK,A.FundClientPK)) - 
                            (dbo.FgetLastUnitAmount(@ValueDateTo,A.FundPK,A.FundClientPK) *  [dbo].[FGetAVGForFundClientPosition](@ValueDateTo,A.FundclientPK,A.FundPK)) END UnRealized
                            , DBO.FgetLastCloseNav(@ValueDateTo,A.FundPK)  CurrentNAV

                            , CASE WHEN  [dbo].[FGetAVGForFundClientPosition](@ValueDateTo,A.FundclientPK,A.FundPK) <= 0 then 0 ELSE
                            [dbo].[FGetAVGForFundClientPosition](@ValueDateTo,A.FundclientPK,A.FundPK) end  AvgNAV
                            , dbo.FgetLastUnitAmount(@ValueDateTo,A.FundPK,A.FundClientPK) Ending
                            ,dbo.FgetLastUnitAmount(dbo.FWorkingDay(@ValueDateFrom,-1),A.FundPK,A.FundClientPK) BeginningBalance, sum(case when A.Type = 'Redemption' then A.TotalUnitAmount * -1 else A.TotalUnitAmount end) MovementBalance, 0 Realized
                            FROM (  
                            Select F.FUndPK,FC.FundClientPK,A.NAVDate SettlementDate,A.Description Remark,A.SubscriptionFeeAmount FeeAmount,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
                            ,'Subscription' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, TotalUnitAmount ,A.Nav,TotalCashAmount NetAmount ,A.subscriptionFeePercent FeePercent
                            from ClientSubscription A 
                            left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)  
                            left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
                            left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
                            left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2) 
                            where 
                            " + _statusSubs + _paramFund + _paramFundClient + @" and 
                            A.status <> 3 and
                            valuedate Between @ValueDateFrom and @ValueDateTo  --and A.status = 2 and F.fundPK = 1
                            UNION ALL   
                            Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,A.RedemptionFeeAmount FeeAmount,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
                            ,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, A.UnitAmount TotalUnitAmount,A.Nav,TotalCashAmount NetAmount ,A.RedemptionFeePercent FeePercent
                            from ClientRedemption A 
                            left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)    
                            left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
                            left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
                            left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                            where 
                            " + _statusRedemp + _paramFund + _paramFundClient + @" and 
                            A.status <> 3 and
                            valuedate Between @ValueDateFrom and @ValueDateTo --and A.status = 2 and F.fundPK = 1
                            UNION ALL   

                            Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,
                            CASE WHEN FeeType = 'IN' then A.SwitchingFeeAmount ELSE 0 END  FeeAmount
                            ,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
                            ,'Switching In' Type, Fc.ID ClientID,FC.Name ClientName, A.TotalCashAmountFundFrom CashAmount, A.TotalUnitAmountFundTo TotalUnitAmount,A.NAVFundTo Nav,A.TotalCashAmountFundTo NetAmount, 
                            CASE WHEN FeeType = 'IN' then A.SwitchingFeePercent ELSE 0 END  FeePercent
                            from ClientSwitching A 
                            left join Fund F on A.FundPKTo = F.fundPK and f.Status in (1,2)    
                            left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
                            left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
                            left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                            where 
                            " + _statusSwitchOut + _paramFund + _paramFundClient + @" and 
                            A.status <> 3 and
                            valuedate Between @ValueDateFrom and @ValueDateTo --and A.status = 2 and F.fundPK = 1
                            UNION ALL   
                            Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,
                            CASE WHEN FeeType = 'OUT' then A.SwitchingFeeAmount ELSE 0 END  FeeAmount
                            ,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
                            ,'Switching Out' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, A.UnitAmount TotalUnitAmount,A.NAVFundFrom Nav,A.TotalCashAmountFundFrom NetAmount 
                            ,CASE WHEN FeeType = 'OUT' then A.SwitchingFeePercent ELSE 0 END  FeePercent
                            from ClientSwitching A 
                            left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2)    
                            left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
                            left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
                            left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
                            where 
                            " + _statusSwitchIn + _paramFund + _paramFundClient + @" and 
                            A.status <> 3 and
                            valuedate Between @ValueDateFrom and @ValueDateTo --and A.status = 2 and F.fundPK = 1
                            )A  

                            WHERE A.FundPK IS NOT null 
                            group by A.FundName,A.ClientID,A.ClientName,A.FundPK,A.FundClientPK

                            ) F on A.FundClientPK = F.FundClientPK and A.FundPK = F.FundPK
 
                            where A.Date = dbo.fworkingday(@ValueDateTo,-1) " + _paramFund + _paramFundClient + _paramZeroBalance;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountStatement" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccountStatement" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Statement");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.Address = Convert.ToString(dr0["Address"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Account = Convert.ToString(dr0["Account"]);
                                            rSingle.BeginningBalance = Convert.ToDecimal(dr0["BeginningBalance"]);
                                            rSingle.MovementBalance = Convert.ToDecimal(dr0["MovementBalance"]);
                                            rSingle.Ending = Convert.ToDecimal(dr0["Ending"]);
                                            rSingle.AvgNav = Convert.ToDecimal(dr0["AvgNav"]);
                                            //rSingle.NAVDate = Convert.ToDateTime(dr0["NavDate"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.EndingBalance = Convert.ToDecimal(dr0["EndingBalance"]);
                                            //rSingle.Realized = Convert.ToDecimal(dr0["Realized"]);
                                            rSingle.Unrealized = Convert.ToDecimal(dr0["Unrealized"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Address, r.SID, r.IFUA, r.ClientName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 2;
                                        int _startRowDetail = 0;
                                        int _endRowDetail = 0;
                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account Statement";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Row(incRowExcel).Height = 60;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Value = "Date From";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + _unitRegistryRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date To";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "SID";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + rsHeader.Key.SID;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "IFUA";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + rsHeader.Key.IFUA;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 11].Value = "Print Date";
                                            worksheet.Cells[incRowExcel, 14].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + rsHeader.Key.ClientName;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 11].Value = "Time";
                                            worksheet.Cells[incRowExcel, 14].Value = " : " + Convert.ToDateTime(_dateTimeNow).ToString("hh:mm:ss");
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "Summary Investment Product";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 3;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Product Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Account";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 5].Value = "Unit Balance";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 8].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Ending Balance";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Average NAV";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 14].Value = "Unrealized Gain/(Loss)";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 5].Value = "Beginning";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Movement";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Ending";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;
                                            //area header

                                            _startRowDetail = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Account;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BeginningBalance;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.MovementBalance;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Ending;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.EndingBalance;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.AvgNav;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Unrealized;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;


                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Total :";
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";


                                            worksheet.Cells["A" + _startRowDetail + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "This is computer generated and signature no required ";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Harap periksa Laporan ini. Terhitung 4 (empat) bulan sejak laporan ini diterbitkan dan tidak terdapat tanggapan atau sanggahan, maka laporan ini dinyatakan telah sesuai.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Row(incRowExcel).Height = 60;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Row(incRowExcel).Height = 60;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyPhone();
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            //worksheet.Cells["I" + _RowA + ":J" + _RowA].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["I" + _RowB + ":J" + _RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["I" + _RowA + ":J" + _RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["I" + _RowA + ":J" + _RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                            incRowExcel = incRowExcel + 2;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 2, 14];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 55;
                                        worksheet.Column(3).Width = 0;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 18;
                                        worksheet.Column(6).Width = 18;
                                        worksheet.Column(7).Width = 18;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 0;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 0;
                                        worksheet.Column(13).Width = 0;
                                        worksheet.Column(14).Width = 25;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n   &15&B ACCOUNT STATEMENT \n";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border


                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 RADSOFT";
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Product & Agency Summary
            else if (_unitRegistryRpt.ReportName.Equals("Product & Agency Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramAgent = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }



                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =
                            @"
                                
                            Declare @FundPK int
                            Declare @DateToMinTwo datetime, @DateToMinOne datetime
                            set @DateToMinOne = dbo.FWorkingDay(@date,-1)
                            set @DateToMinTwo = dbo.FWorkingDay(@date,-2)


                            CREATE TABLE #A
                            (
                            FundPK int,
                            EffectiveDate datetime,
                            Rate numeric(18,4),
                            CustodiRate numeric(18,4)
                            )


                            Declare A Cursor For   

                            select A.FundPK from Fund A where A.status in (1,2) " + _paramFund + @"

                            Open A                  
                            Fetch Next From A                  
                            Into @FundPK
                            While @@FETCH_STATUS = 0                  
                            Begin     
                            IF EXISTS(select * from FundFeeSetup where FundPK = @FundPK and status in (1,2)
	                            and Date = (
	                            Select max(date) from FundFeeSetup where date <= @date and status in (1,2) and FundPK = @FundPK
	                            ))
                            BEGIN
	                            insert into #A(FundPK,EffectiveDate,Rate,CustodiRate)
	                            select FundPK,Date,MiFeePercent,0 from FundFeeSetup where FundPK = @FundPK and status in (1,2)
	                            and Date = (
	                            Select max(date) from FundFeeSetup where date <= @date and status in (1,2) and FundPK = @FundPK
	                            )
                            END
                            ELSE IF EXISTS(select * from FundFee where FundPK = @FundPK and status in (1,2)
	                            and Date = (
	                            Select max(date) from FundFee where date <= @date and status in (1,2) and FundPK = @FundPK
	                            ))
                            BEGIN
	                            insert into #A(FundPK,EffectiveDate,Rate,CustodiRate)
	                            select FundPK,Date,ManagementFeePercent,CustodiFeePercent from FundFee where FundPK = @FundPK and status in (1,2)
	                            and Date = (
	                            Select max(date) from FundFee where date <= @date and status in (1,2) and FundPK = @FundPK
	                            )
                            END
                            ELSE
                            BEGIN
	                            insert into #A(FundPK,EffectiveDate,Rate,CustodiRate)
	                            select FundPK,EffectiveDate,ManagementFeePercent,CustodyFeePercent from Fund where FundPK = @FundPK and status in (1,2)
                            END

                            Fetch next From A Into @FundPK      
                            END                  
                            Close A                  
                            Deallocate A   

                            select 'Management Fee' Type,D.Name BankCustodiID,A.CustodiRate/100 BankCustodiFee,
                            E.DescOne TypeFund,B.ID FundName,A.EffectiveDate,Rate/100 Rate,isnull(F.Unit * G.Nav,0) AUM   from #A A
                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.Status in (1,2)
                            left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
                            left join MasterValue E on B.Type = E.Code and E.ID = 'FundType' and E.status in (1,2) 
                            left join
	                            (
		                            Select FundPK,sum(isnull(UnitAmount,0)) Unit,Date from FundclientPosition A 
                                    Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
		                            where date = case when dbo.CheckTodayIsHoliday(@date) = 1 
		                            then @DateToMinTwo else @DateToMinOne end 

		                            group by FundPK,Date
	                            )F on  A.FundPK = F.FundPK 
	                            left join (
		                            select FundPK,Nav from CloseNAV where status in (1,2)
		                            and date = case when dbo.CheckTodayIsHoliday(@date) = 1 then @DateToMinOne else @date end
	                            )G on A.FundPK = G.FundPK
                            where B.status in (1,2) " + _paramFund + @"
                            order by B.ID ";

                            cmd.CommandTimeout = 0;
                            //cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ProductandAgencySummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ProductandAgencySummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Product & Agency Summary");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ProductAgencySummary> rList = new List<ProductAgencySummary>();
                                        while (dr0.Read())
                                        {
                                            ProductAgencySummary rSingle = new ProductAgencySummary();
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.BankCustodiID = Convert.ToString(dr0["BankCustodiID"]);
                                            rSingle.BankCustodiFee = Convert.ToDecimal(dr0["BankCustodiFee"]);
                                            rSingle.TypeFund = Convert.ToString(dr0["TypeFund"]);
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.EffectiveDate = Convert.ToString(dr0["EffectiveDate"]);
                                            rSingle.Rate = Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Type } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        int RowA = 0;
                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Management & Sharing Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 24;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel++;

                                            RowA = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "Type";
                                            worksheet.Cells[incRowExcel, 2].Value = "Bank Kustodi";
                                            worksheet.Cells[incRowExcel, 3].Value = "Bank Kustodi Fee";
                                            worksheet.Cells[incRowExcel, 4].Value = "Type";
                                            worksheet.Cells[incRowExcel, 5].Value = "Product";
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "Effective Date";
                                            worksheet.Cells[incRowExcel, 8].Value = "Rate";
                                            worksheet.Cells[incRowExcel, 9].Value = "AUM";

                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 16;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);
                                            // Row C = 4

                                            incRowExcel++;
                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Type;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.BankCustodiID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodiFee;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000%";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TypeFund;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundName;
                                                worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.EffectiveDate).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Rate;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000%";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";



                                                worksheet.Cells["A" + RowA + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowA + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowA + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowA + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowA + ":I" + incRowExcel].Style.Font.Size = 12;
                                                incRowExcel++;
                                            }

                                        }




                                        incRowExcel++;

                                        //-----------------------------------
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                //                                              
                                                cmd1.CommandText =
                                                @"
                                                select 'Agency Fee' Type,B.Name Agent,C.ID FundName,A.Date EffectiveDate,MiFeePercent/100 Rate  from AgentFeeSetup A
                                                left join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
                                                left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                                                where A.status in (1,2) and Date =
                                                (
                                                select max(Date) from AgentFeeSetup D where A.AgentPK = D.AgentPK and A.FundPK = D.FundPK and D.status in (1,2) 
                                                and D.Date <= @Date
                                                ) " + _paramFund + _paramAgent + @" order by C.ID ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateTo);
                                                //cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<ProductAgencySummary> rList1 = new List<ProductAgencySummary>();
                                                            while (dr1.Read())
                                                            {
                                                                ProductAgencySummary rSingle1 = new ProductAgencySummary();
                                                                rSingle1.Type = Convert.ToString(dr1["Type"]);
                                                                rSingle1.Agent = Convert.ToString(dr1["Agent"]);
                                                                rSingle1.FundName = dr1["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["FundName"]);
                                                                rSingle1.EffectiveDate = Convert.ToString(dr1["EffectiveDate"]);
                                                                rSingle1.Rate = Convert.ToDecimal(dr1["Rate"]);
                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r1 in rList1
                                                                group r1 by new { } into rGroup1
                                                                select rGroup1;

                                                            int _endRowDetailZ = 0;


                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {

                                                                RowA = incRowExcel;

                                                                worksheet.Cells[incRowExcel, 1].Value = "Type";
                                                                worksheet.Cells[incRowExcel, 2].Value = "Agent";
                                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                worksheet.Cells[incRowExcel, 4].Value = "Fund";
                                                                worksheet.Cells[incRowExcel, 5].Value = "Effective Date";
                                                                worksheet.Cells[incRowExcel, 6].Value = "Rate";


                                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Font.Bold = true;
                                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Font.Size = 18;
                                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);
                                                                incRowExcel++;
                                                                //area header

                                                                int _startRowDetailZ = incRowExcel;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {

                                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail1.Type;
                                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail1.Agent;
                                                                    worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail1.FundName;
                                                                    worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail1.EffectiveDate).ToString("dd-MMM-yyyy");
                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Rate;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000%";


                                                                    _endRowDetailZ = incRowExcel;


                                                                    worksheet.Cells["A" + RowA + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + RowA + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + RowA + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + RowA + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells["A" + RowA + ":F" + incRowExcel].Style.Font.Size = 12;
                                                                    incRowExcel++;

                                                                }

                                                                incRowExcel++;
                                                            }


                                                        }

                                                    }
                                                }
                                            }
                                        }


                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;


                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 44;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report For All \n &28&B Subscription , Redemption , Switching";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Internal Proprietary
            else if (_unitRegistryRpt.ReportName.Equals("Internal Proprietary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFundClient = "";


                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = " and A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            cmd.CommandText =
                                @"
                                Declare @DateToMinTwo datetime, @DateToMinOne datetime
                                set @DateToMinOne = dbo.FWorkingDay(@date,-1)
                                set @DateToMinTwo = dbo.FWorkingDay(@date,-2)


                                select B.Name ClientName, C.ID ProdID,D.ID ProdCCY,G.Unit * F.Nav AumMMI,G.Unit UnitMMI,
                                F.Nav  NavProduct,F.Nav * E.Unit NavAmount ,E.Unit UnitProduct,G.Unit/E.Unit PercentProduct
                                from fundclientposition A
                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                                left join Fund C on A.FundPK = C.FundPK and C.status in (1,2) 
                                left join Currency D on C.CurrencyPK = D.CurrencyPK and C.status in (1,2) 
                                left join
	                                (
		                                Select FundPK,A.FundClientPK,isnull(UnitAmount,0) Unit from FundclientPosition A 
                                        Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
		                                where date = case when dbo.CheckTodayIsHoliday(@date) = 1 
		                                then @DateToMinTwo else @DateToMinOne end 

	                                )G on  A.FundPK = G.FundPK and A.FundClientPK = G.FundClientPK
                                left join
	                                (
		                                Select FundPK,sum(isnull(UnitAmount,0)) Unit from FundclientPosition A 
                                        Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
		                                where date = case when dbo.CheckTodayIsHoliday(@date) = 1 
		                                then @DateToMinTwo else @DateToMinOne end 
		                   

		                                group by FundPK
	                                )E on  A.FundPK = E.FundPK
	                                left join (
		                                select FundPK,Nav from CloseNAV where status in (1,2)
		                                and date = case when dbo.CheckTodayIsHoliday(@date) = 1 then @DateToMinOne else @date end
	                                )F on A.FundPK = F.FundPK
                                where  A.date = dbo.fworkingday(@date,-1) and A.UnitAmount > 0 " + _paramFundClient + @"
                                 ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "InternalProprietary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "InternalProprietary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Internal Proprietary");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.ProdID = Convert.ToString(dr0["ProdID"]);
                                            rSingle.ProdCCY = Convert.ToString(dr0["ProdCCY"]);
                                            rSingle.AumMMI = Convert.ToDecimal(dr0["AumMMI"]);
                                            rSingle.UnitMMI = Convert.ToDecimal(dr0["UnitMMI"]);
                                            rSingle.NavProduct = Convert.ToDecimal(dr0["NavProduct"]);
                                            rSingle.NavAmount = Convert.ToDecimal(dr0["NavAmount"]);
                                            rSingle.UnitProduct = Convert.ToDecimal(dr0["UnitProduct"]);
                                            rSingle.PercentProduct = Convert.ToDecimal(dr0["PercentProduct"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.ClientName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        int _endRow = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.ClientName;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";

                                            incRowExcel = incRowExcel + 2;
                                            int _startRow = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "PRD ID";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "PRD CCY";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "AUM MMI";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "UNIT MMI";
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "NAV PRODUCT";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "NAV AMOUNT";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "UNIT PRODUCT";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "% PRODUCT";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Gray);
                                            incRowExcel++;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ProdID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ProdCCY;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AumMMI;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.UnitMMI;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NavProduct;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NavAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitProduct;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.PercentProduct;
                                                //worksheet.Cells[incRowExcel, 8].Formula = "SUM(C" + incRowExcel + ":F" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 8].Calculate();
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.0000%";

                                                _endRow = incRowExcel;
                                                incRowExcel++;
                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;


                                            worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        }

                                        string _rangeA = "A:H" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 20;
                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 8];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 40;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report For All \n &28&B Subscription , Redemption , Switching";


                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &23&B INTERNAL PROPRIETARY";
                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Window Redemption And Dividend
            else if (_unitRegistryRpt.ReportName.Equals("Window Redemption And Dividend"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = " and A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            cmd.CommandText =
                                @" 
                                    Create table #A
                                    (
                                    FundClientName nvarchar(100),
                                    Bulan nvarchar(50),
                                    DividenDate nvarchar(50),
                                    MaxRedemptDate nvarchar(50),
                                    Period nvarchar(50),
                                    Priority nvarchar(50),
                                    FundName nvarchar(100),
                                    IntMonth int,
                                    MaturityDate nvarchar(50),
                                    BankCustody nvarchar(50),
                                    )
                                    declare @MaxDateEDT datetime

                                    select @MaxDateEDT = max(valueDate) from EndDayTrails where status = 2
                                    and valueDate <= @DateTo

                                    set @MaxDateEDT = DBO.FWorkingDay(@MaxDateEDT,1)


                                    Insert into #A
                                    select case when B.SACode <> '' then B.Name else case when  CHARINDEX('non-aperd',B.Description) > 0 then B.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName, REPLACE(RIGHT(CONVERT(VARCHAR(20), D.DividenDate, 106), 8), ' ', '-') Bulan, 
                                    day(D.DividenDate) DividenDate
                                    , Case when month(D.MaxRedemptionDate) = month(D.DividenDate) then cast(day(D.MaxRedemptionDate) as nvarchar(10)) else CONVERT(VARCHAR(6),D.MaxRedemptionDate ,106)  end MaxRedemptDate
                                    ,E.DescOne Period,month(D.DividenDate) + year(D.DividenDate) Priority,
                                    F.Name FundName, month(D.DividenDate) IntMonth, CONVERT(VARCHAR(20),  MaturityDate, 106), H.ID BankCustody
                                    from FundClientPosition A
                                    left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                                    left join FundWindowRedemption C on A.FundPK = C.FundPK And C.status in (1,2)
                                    left join FundWindowRedemptionDetail D on C.FundWindowRedemptionPK = D.FundWindowRedemptionPK 
                                    left join MasterValue E on C.PaymentPeriod = E.Code and E.id = 'FundWindowRedemptionPeriod' and E.status in (1,2)
                                    left join Fund F on C.FundPK = F.FundPK and F.status in (1,2)
									left join BankBranch G on F.BankBranchPK = G.BankBranchPK and G.Status in(1,2)
									left join Bank H on G.BankPK = H.BankPK and H.Status in(1,2)
                                    where A.date = @MaxDateEDT
                                    and A.FundPK in
                                    (
	                                    Select Distinct FundPK from FundWindowRedemption where status = 2
                                    )
                                    and D.DividenDate between @DateFrom and @DateTo
									
                                    " + _paramFund + _paramFundClient + @" 
									order by B.Name,priority


                                    select distinct FundClientName,Bulan,DividenDate,MaxRedemptDate,Period,Priority,FundName,IntMonth,MaturityDate, BankCustody 
                                    ,case when len(dividenDate) > 2 then 1 else cast(isnull(left(dividendate,2),0) as int) end urutan
                                    from #A 
                                    order by IntMonth,urutan,FundClientName,FundName
                                    ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "WindowRedemptionAndDividend" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "WindowRedemptionAndDividend" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Window Redemption And Dividend");

                                        int incRowExcel = 2;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<WindowRedemption> rList = new List<WindowRedemption>();
                                        while (dr0.Read())
                                        {
                                            WindowRedemption rSingle = new WindowRedemption();
                                            rSingle.ClientName = Convert.ToString(dr0["FundClientName"]);
                                            rSingle.Bulan = Convert.ToString(dr0["Bulan"]);
                                            rSingle.DividenDate = Convert.ToString(dr0["DividenDate"]);
                                            rSingle.MaxRedemptDate = Convert.ToString(dr0["MaxRedemptDate"]);
                                            rSingle.Priority = Convert.ToString(dr0["Priority"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Period = Convert.ToString(dr0["Period"]);
                                            rSingle.BankCustody = Convert.ToString(dr0["BankCustody"]);
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;
                                        string _dateFrom = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM");
                                        string _dateTo = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd MMMM");
                                        string _year = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("yyyy");

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 2].Value = "Jadwal Window Redemption & Dividend Distribution RD Terproteksi";
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Font.Size = 14;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Periode : " + _dateFrom + " sd " + _dateTo + " " + _year;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Font.Size = 14;

                                            incRowExcel = incRowExcel + 2;

                                            //worksheet.Cells[incRowExcel, 2].Value = "Selling Agent : " + rsHeader.Key.ClientName;
                                            //worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Merge = true;
                                            //worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Style.Font.Bold = true;
                                            incRowExcel++;

                                            int _startBorder = incRowExcel;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 2].Value = "Bulan";
                                            worksheet.Cells[incRowExcel, 3].Value = "Product Name";
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Batas Akhir Input WR";
                                            worksheet.Cells[incRowExcel, 5].Value = "Tanggal NAV(T)";
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "Tanggal Dividen";
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "Tanggal Maturity";
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "Freq";
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 9].Value = "Selling Agent";
                                            worksheet.Cells[incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Bank Kustodi";
                                            worksheet.Cells[incRowExcel, 10].Style.WrapText = true;


                                            incRowExcel++;

                                            int no = 1;

                                            var QueryByFundID =
                                                 from r2 in rsHeader
                                                 group r2 by new { r2.Bulan } into rGroup2
                                                 select rGroup2;

                                            int _endBorder = 0;
                                            foreach (var rsHeader2 in QueryByFundID)
                                            {

                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader2.Key.Bulan;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 10].Merge = true;

                                                incRowExcel++;

                                                foreach (var rsDetail in rsHeader2)
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                    worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.MaxRedemptDate;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    if (rsDetail.MaxRedemptDate == "" || rsDetail.MaxRedemptDate == null)
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Value = "";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DividenDate;
                                                    }
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.DividenDate;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Period;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClientName;
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 9].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.BankCustody;
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    incRowExcel++;
                                                }
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Merge = true;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Merge = true;
                                                _endBorder = incRowExcel;
                                                incRowExcel++;
                                            }

                                            worksheet.Cells["B" + _startBorder + ":J" + _endBorder].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + _startBorder + ":J" + _endBorder].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + _startBorder + ":J" + _endBorder].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + _startBorder + ":J" + _endBorder].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                            incRowExcel = incRowExcel + 2;
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 3;
                                        worksheet.Column(2).Width = 13;
                                        worksheet.Column(3).Width = 50;
                                        worksheet.Column(4).Width = 10;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 10;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 35;
                                        worksheet.Column(10).Width = 13;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 WINDOW REDEMPTION & DIVIDEN";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Moinvest Sales Report
            else if (_unitRegistryRpt.ReportName.Equals("Moinvest Sales Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"  
                            DECLARE @PeriodPK INT
SELECT @PeriodPK = PeriodPK FROM period WHERE status IN (1,2) AND @DateFrom BETWEEN DateFrom AND DateTo

DECLARE @bulan TABLE
(
Bulan NVARCHAR(100),
Prio INT,
LastDayMonth datetime
)

INSERT INTO @bulan
    ( Bulan,prio,LastDayMonth )
SELECT DescOne,Priority
,EOMONTH(DATEADD(MONTH,Priority-1,@DateFrom))
 FROM dbo.MasterValue WHERE id = 'Month' AND status = 2

declare @tableAgent table
(
	AgentPK int
) 

insert into @tableAgent
select distinct AgentPK from Agent where ParentPK = 77 or ParentPK1 = 77 or ParentPK2 = 77 or ParentPK3 = 77 or ParentPK4 = 77 or ParentPK5 = 77 or ParentPK6 = 77 or ParentPK7 = 77 or ParentPK8 = 77 or ParentPK9 = 77 


 DECLARE @tblTotalAccountsRDO TABLE
(
	Bulan INT,
	TotalAccounts INT
)

 DECLARE @tblTotalAccountsNEWAccount TABLE
(
	Bulan INT,
	TotalAccounts INT
)

 DECLARE @tblTotalAccountsTransaction TABLE
(
	Bulan INT,
	TotalAccounts INT
)

DECLARE @tblTotalAccountsSUB TABLE
(
	Bulan INT,
	TotalAccounts INT
)

DECLARE @tblTotalAccountsRED TABLE
(
	Bulan INT,
	TotalAccounts INT
)

DECLARE @tblTotalAccountsSWITCH TABLE
(
	Bulan INT,
	TotalAccounts INT
)

DECLARE @tblTotalAccounts TABLE
(
	Bulan INT,
	TotalAccounts INT
)

DECLARE @tblTotalAccountsSID TABLE
(
	Bulan INT,
	TotalAccounts INT
)

DECLARE @tblTotalPortalOnly TABLE
(
	Bulan INT,
	TotalAccounts int
)

DECLARE @ABulan INT
DECLARE @ALastDayOfMonth datetime
Declare A Cursor For
	SELECT Prio,LastDayMonth FROM @bulan
	ORDER BY Prio asc
Open A
Fetch Next From A
INTO @ABulan,@ALastDayOfMonth

While @@FETCH_STATUS = 0  
BEGIN
	INSERT INTO @tblTotalAccounts
	        ( Bulan, TotalAccounts )
	SELECT @ABulan,COUNT(A.FundClientPK) JmlColD FROM FundClient A 
	LEFT JOIN FundClientAgentSetup B on A.FundClientPK = B.FundClientPK and B.Date <= Cast(@ALastDayOfMonth as date)
	WHERE A.status IN (1,2) AND A.InvestorType = 1
	AND Cast(A.EntryTime as Date) <= Cast(@ALastDayOfMonth as date)
	AND A.EntryTime <> '' AND A.EntryTime IS NOT NULL
	and case when B.AgentPK is null then A.SellingAgentPK else B.AgentPK end in (select AgentPK from @tableAgent)

	INSERT INTO @tblTotalAccountsRDO
	        ( Bulan, TotalAccounts )
	select @ABulan Bulan,COUNT(A.FundClientPK) JmlColC FROM FundClient A 
	LEFT JOIN FundClientAgentSetup B on A.FundClientPK = B.FundClientPK and B.Date <= Cast(@ALastDayOfMonth as date)
	WHERE A.FrontID <> '' AND A.status IN (1,2)
	AND month(A.EntryTime) = @ABulan and Cast(A.EntryTime as Date) >= @DateFrom
	AND A.EntryTime <> '' AND A.EntryTime IS NOT NULL AND A.InvestorType = 1
	and case when B.AgentPK is null then A.SellingAgentPK else B.AgentPK end in (select AgentPK from @tableAgent)

	INSERT INTO @tblTotalAccountsNEWAccount
	        ( Bulan, TotalAccounts )
	select @ABulan Bulan,COUNT(A.FundClientPK) JmlColD FROM FundClient A 
	LEFT JOIN FundClientAgentSetup B on A.FundClientPK = B.FundClientPK and B.Date <= Cast(@ALastDayOfMonth as date)
	WHERE A.status IN (1,2) AND A.InvestorType = 1
	AND month(A.EntryTime) = @ABulan and Cast(A.EntryTime as Date) >= @DateFrom
	AND A.EntryTime <> '' AND A.EntryTime IS NOT NULL 
	and case when B.AgentPK is null then A.SellingAgentPK else B.AgentPK end in (select AgentPK from @tableAgent)

	INSERT INTO @tblTotalAccountsSID
	        ( Bulan, TotalAccounts )
	select A.Bulan,count (JmlColD) from(
		SELECT distinct @ABulan Bulan,SID JmlColD FROM FundClient A 
		LEFT JOIN FundClientAgentSetup B on A.FundClientPK = B.FundClientPK and B.Date <= Cast(@ALastDayOfMonth as date)
		WHERE A.status IN (1,2) AND A.InvestorType = 1
		AND Cast(A.EntryTime as Date) <= Cast(@ALastDayOfMonth as date)
		AND A.EntryTime <> '' AND A.EntryTime IS NOT NULL and A.SID <> ''
	and case when B.AgentPK is null then A.SellingAgentPK else B.AgentPK end in (select AgentPK from @tableAgent)
	)A
	group by A.Bulan

	INSERT INTO @tblTotalPortalOnly
	        ( Bulan, TotalAccounts )
	select A.Bulan,count (JmlColD) from(
		SELECT distinct @ABulan Bulan,SID JmlColD FROM FundClient A 
		LEFT JOIN FundClientAgentSetup B on A.FundClientPK = B.FundClientPK and B.Date <= Cast(@ALastDayOfMonth as date)
		WHERE A.status IN (1,2) AND A.InvestorType = 1
		AND Cast(A.EntryTime as Date) <= Cast(@ALastDayOfMonth as date)
		AND A.EntryTime <> '' AND A.EntryTime IS NOT NULL
		AND A.Frontid <> '' and  A.SID <> ''
	and case when B.AgentPK is null then A.SellingAgentPK else B.AgentPK end in (select AgentPK from @tableAgent)
	)A
	group by A.Bulan
	
	INSERT INTO @tblTotalAccountsTransaction
	        ( Bulan, TotalAccounts )
	select @ABulan,COUNT(DISTINCT FundClientPK) JmlActive FROM (
		SELECT DISTINCT A.FundClientPK,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
		inner join FundClient B on A.FundClientPk = B.FundClientPK and B.status in (1,2)
		WHERE month(A.NAVDate) = @ABulan and Cast(A.NAVDate as Date) >= @DateFrom and B.InvestorType = 1
		AND Posted = 1 AND A.Status = 2 AND Revised = 0 and  type <> 3
		AND B.SellingAgentPK in (select AgentPK from @tableAgent)
		UNION ALL
		SELECT DISTINCT A.FundClientPK,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
		inner join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		WHERE month(A.NAVDate) = @ABulan and Cast(A.NAVDate as Date) >= @DateFrom and B.InvestorType = 1
		AND Posted = 1 AND A.Status = 2 AND Revised = 0 and type <> 3
		AND B.SellingAgentPK in (select AgentPK from @tableAgent)
		UNION ALL
		SELECT DISTINCT A.FundClientPK,MONTH(NAVDate) Bulan FROM dbo.ClientSwitching A
		inner join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		WHERE month(A.NAVDate) = @ABulan and Cast(A.NAVDate as Date) >= @DateFrom and B.InvestorType = 1
		AND Posted = 1 AND A.Status = 2 AND Revised = 0 and  Type <> 3
		AND B.SellingAgentPK in (select AgentPK from @tableAgent)
	)A

	INSERT INTO @tblTotalAccountsSUB
	        ( Bulan, TotalAccounts )
	select @ABulan,COUNT(DISTINCT FundClientPK) JmlActive FROM (
	SELECT DISTINCT A.FundClientPK,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A 
	inner join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	WHERE month(A.NAVDate) = @ABulan and Cast(A.NAVDate as Date) >= @DateFrom and B.InvestorType = 1
	AND Posted = 1 AND A.Status = 2 AND Revised = 0 and  type <> 3 
	AND B.SellingAgentPK in (select AgentPK from @tableAgent)
	)A

	INSERT INTO @tblTotalAccountsRED
	        ( Bulan, TotalAccounts )
	select @ABulan Bulan,COUNT(DISTINCT FundClientPK) JmlActive FROM (
	SELECT DISTINCT A.FundClientPK,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
	inner join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	WHERE month(A.NAVDate) = @ABulan and Cast(A.NAVDate as Date) >= @DateFrom and B.InvestorType = 1
	AND Posted = 1 AND A.Status = 2 AND Revised = 0 and  type <> 3
	AND B.SellingAgentPK in (select AgentPK from @tableAgent)
	)A

	INSERT INTO @tblTotalAccountsSWITCH
	        ( Bulan, TotalAccounts )
	select @ABulan Bulan,COUNT(DISTINCT FundClientPK) JmlActive FROM (
	SELECT DISTINCT A.FundClientPK,MONTH(NAVDate) Bulan FROM dbo.ClientSwitching A
	inner join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	WHERE month(A.NAVDate) = @ABulan and Cast(A.NAVDate as Date) >= @DateFrom and B.InvestorType = 1
	AND Posted = 1 AND A.Status = 2 AND Revised = 0 and  type <> 3
	AND B.SellingAgentPK in (select AgentPK from @tableAgent)
	)A 

	Fetch Next From A 
	into @ABulan,@ALastDayOfMonth
End	
Close A
Deallocate A


SELECT A.Bulan,ISNULL(B.TotalAccounts,0) ColC,ISNULL(C.TotalAccounts,0) ColD 
,ISNULL(D.TotalAccounts,0) ColE
,ISNULL(K.TotalAccounts,0) ColF
,ISNULL(E.TotalAccounts,0) ColG
,ISNULL(F.TotalAccounts,0) ColH
,ISNULL(G.TotalAccounts,0) ColI
,ISNULL(H.TotalAccounts,0) ColJ
,ISNULL(I.TotalAccounts,0) ColK
FROM @bulan A
LEFT JOIN 
(
	SELECT 'COL C: NEW ACCOUNT RDO' Query,* FROM @tblTotalAccountsRDO
)B ON A.Prio = B.Bulan
LEFT JOIN
(
	SELECT 'COL D: TOTAL NEW ACCOUNT' Query,* FROM @tblTotalAccountsNEWAccount
)C ON A.Prio = C.bulan
LEFT JOIN
(
	SELECT 'COL E: TOTAL ACCOUNT' Query,* FROM @tblTotalAccounts
)D ON A.Prio = D.Bulan
LEFT JOIN
(
	SELECT 'COL F: TOTAL ACCOUNT SID' Query,* FROM @tblTotalAccountsSID
)K ON A.Prio = K.Bulan
LEFT JOIN
(
	SELECT 'COL G: TOTAL ACCOUNT RDO' Query,* FROM @tblTotalPortalOnly
)E ON A.Prio = E.Bulan
LEFT JOIN
(
	SELECT 'COL H: ACTIVE USERS IN ANY TRANSACTION' Query,* from @tblTotalAccountsTransaction
)F ON A.Prio = F.Bulan
LEFT JOIN
(
	SELECT 'COL I: ACTIVE USERS IN SUB' Query,* from @tblTotalAccountsSUB
)G ON A.Prio = G.Bulan
LEFT JOIN
(
	SELECT 'COL J: ACTIVE USERS IN RED' Query,* from @tblTotalAccountsRED
)H ON A.Prio = H.bulan
LEFT JOIN
(
	SELECT 'COL K: ACTIVE USERS IN SWI' Query,* from @tblTotalAccountsSWITCH
)I ON A.Prio = I.bulan
ORDER BY A.Prio asc

                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "MoinvestSalesReport" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "\\10\\" + "Moinvest_Sales_Report.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        ExcelWorksheet worksheet = package.Workbook.Worksheets[1];



                                        int incRowExcel = 5;
                                        int _startRowDetail = incRowExcel;
                                        //int incRowExcel1 = 23;
                                        //int _startRowDetail1 = incRowExcel1;
                                        //int incRowExcel2 = 40;
                                        //int _startRowDetail2 = incRowExcel2;
                                        //int incRowExcel3 = 57;
                                        //int _startRowDetail3 = incRowExcel3;


                                        int _endRowDetail = 0;

                                        while (dr0.Read())
                                        {
                                            int incColExcel = 3;

                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColC"]);
                                            incColExcel++;
                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColD"]);
                                            incColExcel++;
                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColE"]);
                                            incColExcel++;
                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColF"]);
                                            incColExcel++;
                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColG"]);
                                            incColExcel++;
                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColH"]);
                                            incColExcel++;
                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColI"]);
                                            incColExcel++;
                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColJ"]);
                                            incColExcel++;
                                            worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0["ColK"]);



                                            _endRowDetail = incRowExcel - 1;

                                            incRowExcel++;

                                        }



                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {


                                                cmd1.CommandText = @"  
                                                create table #tableAgent
(
	AgentPK int
) 
CREATE CLUSTERED INDEX indx_tableAgent ON #tableAgent (AgentPK);

insert into #tableAgent
select distinct AgentPK from Agent where ParentPK = 77 or ParentPK1 = 77 or ParentPK2 = 77 or ParentPK3 = 77 or ParentPK4 = 77 or ParentPK5 = 77 or ParentPK6 = 77 or ParentPK7 = 77 or ParentPK8 = 77 or ParentPK9 = 77 


DECLARE @PeriodPK INT
SELECT @PeriodPK = PeriodPK FROM period WHERE status IN (1,2) AND @DateFrom BETWEEN DateFrom AND DateTo

DECLARE @bulan TABLE
(
Bulan NVARCHAR(100),
Prio INT,
LastDayMonth datetime
)

INSERT INTO @bulan
    ( Bulan,prio,LastDayMonth )
SELECT DescOne,Priority
,EOMONTH(DATEADD(MONTH,Priority-1,@DateFrom))
    FROM dbo.MasterValue WHERE id = 'Month' AND status = 2

 
SELECT A.Bulan,ISNULL(B.ColC,0) ColC 
,ISNULL(C.ColD,0) ColD
,ISNULL(D.ColE,0) ColE
,ISNULL(E.ColF,0) ColF
,ISNULL(F.ColG,0) ColG
,ISNULL(G.ColH,0) ColH
,ISNULL(H.ColJ,0) ColJ
,ISNULL(I.ColK,0) ColK
,ISNULL(J.ColL,0) ColL
FROM @bulan A
LEFT JOIN
(
	SELECT SUM(ISNULL(CashAmount,0)) ColC,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	inner join #tableAgent C on B.SellingAgentPK = C.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND A.EntryUsersID = 'RDO' and  A.Type <> 3 and B.InvestorType = 1 
	GROUP BY MONTH(NAVDate)
)B ON A.Prio = B.Bulan
LEFT JOIN
(
	SELECT SUM(ISNULL(CashAmount,0)) * -1 ColD,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	inner join #tableAgent C on B.SellingAgentPK = C.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND A.EntryUsersID = 'RDO' and  A.Type <> 3 and B.InvestorType = 1
	GROUP BY MONTH(NAVDate)
)C ON A.Prio = C.Bulan
LEFT JOIN
(
	SELECT SUM(ISNULL(CashAmount,0)) * -1 ColE,MONTH(NAVDate) Bulan FROM dbo.ClientSwitching A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	inner join #tableAgent C on B.SellingAgentPK = C.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND A.EntryUsersID = 'RDO' and  A.Type <> 3 and B.InvestorType = 1
	GROUP BY MONTH(NAVDate)
)D ON A.Prio = D.Bulan
LEFT JOIN
(
	SELECT SUM(ISNULL(CashAmount,0)) ColF,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	inner join #tableAgent D on B.SellingAgentPK = D.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND B.InvestorType = 1 AND A.EntryUsersID <> 'RDO'
	AND C.IsPublic = 1 and  A.Type <> 3
	GROUP BY MONTH(NAVDate)
)E ON A.Prio = E.Bulan
LEFT JOIN
(
	SELECT SUM(ISNULL(CashAmount,0)) * -1 ColG,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	inner join #tableAgent D on B.SellingAgentPK = D.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND B.InvestorType = 1 AND A.EntryUsersID <> 'RDO'
	AND C.IsPublic = 1 and  A.Type <> 3
	GROUP BY MONTH(NAVDate)
)F ON A.Prio = F.Bulan
LEFT JOIN
(
	SELECT SUM(ISNULL(CashAmount,0)) * -1 ColH,MONTH(NAVDate) Bulan FROM dbo.ClientSwitching A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPKFrom = C.FundPK AND C.status IN (1,2)
	inner join #tableAgent D on B.SellingAgentPK = D.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND B.InvestorType = 1 AND A.EntryUsersID <> 'RDO'
	AND C.IsPublic = 1 and  A.Type <> 3
	GROUP BY MONTH(NAVDate)
)G ON A.Prio = G.Bulan
LEFT JOIN
(
	SELECT COUNT(A.ClientSubscriptionPK) ColJ,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	inner join #tableAgent D on B.SellingAgentPK = D.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND B.InvestorType = 1
	AND C.IsPublic = 1 and  A.Type <> 3
	GROUP BY MONTH(NAVDate)
)H ON A.Prio = H.Bulan
LEFT JOIN
(
	SELECT COUNT(A.ClientRedemptionPK) ColK,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	inner join #tableAgent D on B.SellingAgentPK = D.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND B.InvestorType = 1
	AND C.IsPublic = 1 and  A.Type <> 3
	GROUP BY MONTH(NAVDate)
)I ON A.Prio = I.Bulan
LEFT JOIN
(
	SELECT COUNT(A.ClientSwitchingPK) ColL,MONTH(NAVDate) Bulan FROM dbo.ClientSwitching A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPKFrom = C.FundPK AND C.status IN (1,2)
	inner join #tableAgent D on B.SellingAgentPK = D.AgentPK 
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
	AND B.InvestorType = 1
	AND C.IsPublic = 1 and  A.Type <> 3
	GROUP BY MONTH(NAVDate)
)J ON A.Prio = J.Bulan
ORDER BY A.Prio Asc


--SELECT * FROM @bulan

--SELECT SUM(ISNULL(CashAmount,0)) ColC,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND A.EntryUsersID = 'RDO'
--GROUP BY MONTH(NAVDate)

--SELECT SUM(ISNULL(CashAmount,0)) * -1 ColD,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND A.EntryUsersID = 'RDO'
--GROUP BY MONTH(NAVDate)

--SELECT SUM(ISNULL(CashAmount,0)) * -1 ColE,MONTH(NAVDate) Bulan FROM dbo.ClientSwitching A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND A.EntryUsersID = 'RDO'
--GROUP BY MONTH(NAVDate)


--SELECT SUM(ISNULL(CashAmount,0)) ColF,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND B.InvestorType = 1 AND A.EntryUsersID <> 'RDO'
--AND C.IsPublic = 1
--GROUP BY MONTH(NAVDate)

--SELECT SUM(ISNULL(CashAmount,0)) * -1 ColG,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND B.InvestorType = 1 AND A.EntryUsersID <> 'RDO'
--AND C.IsPublic = 1
--GROUP BY MONTH(NAVDate)

--SELECT SUM(ISNULL(CashAmount,0)) * -1 ColH,MONTH(NAVDate) Bulan FROM dbo.ClientSwitching A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--LEFT JOIN Fund C ON A.FundPKFrom = C.FundPK AND C.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND B.InvestorType = 1 AND A.EntryUsersID <> 'RDO'
--AND C.IsPublic = 1
--GROUP BY MONTH(NAVDate)


--SELECT COUNT(A.ClientSubscriptionPK) ColJ,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND B.InvestorType = 1
--AND C.IsPublic = 1
--GROUP BY MONTH(NAVDate)

--SELECT COUNT(A.ClientRedemptionPK) ColK,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND B.InvestorType = 1
--AND C.IsPublic = 1
--GROUP BY MONTH(NAVDate)

--SELECT COUNT(A.ClientSwitchingPK) ColL,MONTH(NAVDate) Bulan FROM dbo.ClientSwitching A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--LEFT JOIN Fund C ON A.FundPKFrom = C.FundPK AND C.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0
--AND B.InvestorType = 1
--AND C.IsPublic = 1
--GROUP BY MONTH(NAVDate)
                                                                                                 ";
                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                    {
                                                        //ExcelWorksheet worksheet = package1.Workbook.Worksheets[1];



                                                        int incRowExcel1 = 23;
                                                        int _startRowDetail1 = incRowExcel1;
                                                        //int incRowExcel1 = 23;
                                                        //int _startRowDetail1 = incRowExcel1;
                                                        //int incRowExcel2 = 40;
                                                        //int _startRowDetail2 = incRowExcel2;
                                                        //int incRowExcel3 = 57;
                                                        //int _startRowDetail3 = incRowExcel3;


                                                        int _endRowDetail1 = 0;

                                                        while (dr1.Read())
                                                        {
                                                            int incColExcel = 3;


                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColC"]);
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColD"]);
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColE"]);
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColF"]);
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColG"]);
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColH"]);
                                                            incColExcel++;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColJ"]);
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColK"]);
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["ColL"]);

                                                            _endRowDetail1 = incRowExcel1 - 1;


                                                            incRowExcel1++;


                                                        }

                                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                        {
                                                            DbCon2.Open();
                                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                            {


                                                                cmd2.CommandText = @"  
                                                                    create table #tableAgent
(
	AgentPK int
) 
CREATE CLUSTERED INDEX indx_tableAgent ON #tableAgent (AgentPK);

insert into #tableAgent
select distinct AgentPK from Agent where ParentPK = 77 or ParentPK1 = 77 or ParentPK2 = 77 or ParentPK3 = 77 or ParentPK4 = 77 or ParentPK5 = 77 or ParentPK6 = 77 or ParentPK7 = 77 or ParentPK8 = 77 or ParentPK9 = 77 


DECLARE @PeriodPK INT
SELECT @PeriodPK = PeriodPK FROM period WHERE status IN (1,2) AND @DateFrom BETWEEN DateFrom AND DateTo

DECLARE @bulan TABLE
(
Bulan NVARCHAR(100),
Prio INT,
LastDayMonth datetime
)

INSERT INTO @bulan
    ( Bulan,prio,LastDayMonth )
SELECT DescOne,Priority
,EOMONTH(DATEADD(MONTH,Priority-1,@DateFrom))
    FROM dbo.MasterValue WHERE id = 'Month' AND status = 2

SELECT A.Bulan,ISNULL(B.ColC,0) ColC,ISNULL(C.ColD,0) ColD FROM @bulan A
LEFT JOIN	
(
	SELECT SUM(ISNULL(CashAmount,0)) ColC,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	inner join #tableAgent D on B.SellingAgentPK = D.AgentPK
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo and B.InvestorType = 1
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0 AND C.Type = 4
	GROUP BY MONTH(NAVDate)

)B ON A.Prio = B.Bulan
LEFT JOIN	
(
	SELECT SUM(ISNULL(CashAmount,0)) ColD,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	inner join #tableAgent D on B.SellingAgentPK = D.AgentPK
	WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo and B.InvestorType = 1
	AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0 AND C.Type = 4
	GROUP BY MONTH(NAVDate)
)C ON A.Prio = C.Bulan

--SELECT SUM(ISNULL(CashAmount,0)) ColC,MONTH(NAVDate) Bulan FROM dbo.ClientSubscription A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0 AND C.Type = 4
--GROUP BY MONTH(NAVDate)


--SELECT SUM(ISNULL(CashAmount,0)) ColD,MONTH(NAVDate) Bulan FROM dbo.ClientRedemption A
--LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
--LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
--WHERE	Cast(NAVDate as Date) BETWEEN @DateFrom AND @DateTo
--AND A.Posted = 1 AND A.Status = 2 AND A.Revised = 0 AND C.Type = 4
--GROUP BY MONTH(NAVDate)
                                                                       ";
                                                                cmd2.CommandTimeout = 0;
                                                                cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                                cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                                {

                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                    using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                                    {
                                                                        //ExcelWorksheet worksheet = package1.Workbook.Worksheets[1];



                                                                        int incRowExcel2 = 40;
                                                                        int _startRowDetail2 = incRowExcel2;
                                                                        //int incRowExcel1 = 23;
                                                                        //int _startRowDetail1 = incRowExcel1;
                                                                        //int incRowExcel2 = 40;
                                                                        //int _startRowDetail2 = incRowExcel2;
                                                                        //int incRowExcel3 = 57;
                                                                        //int _startRowDetail3 = incRowExcel3;


                                                                        int _endRowDetail2 = 0;

                                                                        while (dr2.Read())
                                                                        {
                                                                            int incColExcel = 3;


                                                                            worksheet.Cells[incRowExcel2, incColExcel].Value = Convert.ToDecimal(dr2["ColC"]);
                                                                            incColExcel++;
                                                                            worksheet.Cells[incRowExcel2, incColExcel].Value = Convert.ToDecimal(dr2["ColD"]);


                                                                            _endRowDetail2 = incRowExcel2 - 1;


                                                                            incRowExcel2++;


                                                                        }

                                                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                                                        {
                                                                            DbCon3.Open();
                                                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                                                            {


                                                                                cmd3.CommandText = @"  
                                                                                    create table #tableAgent
(
	AgentPK int
) 
CREATE CLUSTERED INDEX indx_tableAgent ON #tableAgent (AgentPK);

insert into #tableAgent
select distinct AgentPK from Agent where ParentPK = 77 or ParentPK1 = 77 or ParentPK2 = 77 or ParentPK3 = 77 or ParentPK4 = 77 or ParentPK5 = 77 or ParentPK6 = 77 or ParentPK7 = 77 or ParentPK8 = 77 or ParentPK9 = 77 


DECLARE @StartOfWeek TABLE
(
	OrderList int,
	Month NVARCHAR(300),
	Date date,
	UnitDate date,
	NavDate date,
	TotalAumRetail numeric(32,8)
)

if object_id('tempdb..#FundUnitPosition', 'u') is not null drop table #FundUnitPosition 
create table #FundUnitPosition
(
	Date DATETIME,
	TotalUnit NUMERIC(22,4),
	FundPK int
)
CREATE CLUSTERED INDEX indx_FundUnitPosition ON #FundUnitPosition (Date,FundPK);

if object_id('tempdb..#CloseNAVPosition', 'u') is not null drop table #CloseNAVPosition
create table #CloseNAVPosition
(
	Date DATETIME,
	NAV NUMERIC(22,4),
	FundPK int
)
CREATE CLUSTERED INDEX indx_CloseNAVPosition ON #CloseNAVPosition (Date,FundPK);

declare @date date
declare @startweek int
declare @counter int
declare @prevmonth int
declare @OrderList int

set @startweek = 1 + ((4 + DATEPART(dw,@datefrom) + @@DATEFIRST) % 7)
set @date = dateadd(day,7 - @startweek,@datefrom)

set @counter = 1
set @prevmonth = month(@date)

insert into @StartOfWeek(OrderList,Month,Date,UnitDate,NavDate)
select 1,CAST(FORMAT(@datefrom,'d MMM yyyy') as nvarchar), @datefrom,'2018-12-27','2018-12-28'
union all
select 2,cast(FORMAT(@Date, 'MMM') as nvarchar) + ' W' + cast(@counter as nvarchar),@date,
dbo.FWorkingDay(@date,-1),
case when dbo.CheckTodayIsHoliday(@date) = 1 then dbo.FWorkingDay(@date, 1) else @date end
set @date = dateadd(day,7,@date)

set @OrderList = 3

while @date <= @dateto
begin
	if @prevmonth != month(@date)
		set @counter = 1
	else
		set @counter = @counter + 1

	insert into @StartOfWeek(OrderList,Month,Date,UnitDate,NavDate)
	select @OrderList,cast(FORMAT(@Date, 'MMM') as nvarchar) + ' W' + cast(@counter as nvarchar),@date,
	dbo.FWorkingDay(@date,-1),
	case when dbo.CheckTodayIsHoliday(@date) = 1 then dbo.FWorkingDay(@date, 1) else @date end
	
	set @prevmonth = month(@date)
	set @date = dateadd(day,7,@date)
	set @OrderList = @OrderList + 1
end

INSERT INTO #FundUnitPosition
        ( Date, TotalUnit,FundPK )
SELECT Date,SUM(ISNULL(UnitAmount,0)),A.FundPK FROM dbo.FundClientPosition A
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.Status IN (1,2)
inner join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
inner join #tableAgent D on C.SellingAgentPK = D.AgentPK
WHERE Date IN
(
	SELECT  DISTINCT A.UnitDate FROM  @StartOfWeek A
) and C.InvestorType = 1 and B.IsPublic = 1
GROUP BY Date,A.FundPk

union all
SELECT Date,SUM(ISNULL(UnitAmount,0)),A.FundPK FROM dbo.FundClientPosition A
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.Status IN (1,2)
inner join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
inner join #tableAgent D on C.SellingAgentPK = D.AgentPK
WHERE Date IN
(
	SELECT  DISTINCT A.UnitDate FROM  @StartOfWeek A
) and C.InvestorType = 1 and B.IsPublic = 0 and B.Type = 4
--param Fund
--AND B.CurrencyPK = 1
GROUP BY Date,A.FundPk

INSERT INTO #CloseNAVPosition
        ( Date, NAV,FundPK )
SELECT Date,A.NAV,A.FundPK FROM dbo.CloseNAV A
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.Status IN (1,2)
WHERE Date IN
(
	SELECT  DISTINCT A.NavDate FROM  @StartOfWeek A
)
AND A.Status = 2
--param Fund
--AND B.CurrencyPK = 1

DECLARE @table TABLE
(
	CurrencyPK int
)
INSERT INTO @table ( CurrencyPK )
SELECT DISTINCT CurrencyPK FROM dbo.CurrencyRate WHERE status = 2 AND CurrencyPK <> 1

DECLARE @tableRate TABLE
(
	Date DATETIME,
	CurrencyPK INT,
	Rate NUMERIC(18,8)
)

INSERT INTO @tableRate ( Date, CurrencyPK, Rate )
SELECT A.NavDate,B.CurrencyPK,dbo.[FGetLastCurrencyRate](A.NavDate,B.CurrencyPK) FROM @StartOfWeek A,@table B

--query untuk cek
--SELECT SUM(A.TotalUnit * B.NAV) FROM #FundUnitPosition A
--LEFT JOIN #CloseNAVPosition B ON A.FundPK = B.FundPK 
--left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
--WHERE A.date = '01/04/19' AND B.date = '01/07/19' and C.CurrencyPK = 1

--select * from @tableRate

SELECT A.Month,SUM(ISNULL(B.TotalUnit,0) * ISNULL(C.NAV,0)
* CASE WHEN D.CurrencyPK <> 1 THEN E.Rate ELSE 1 END
) AUM FROM @StartOfWeek A
LEFT JOIN #FundUnitPosition B ON A.UnitDate = B.Date
LEFT JOIN #CloseNAVPosition C ON A.NavDate = C.Date AND B.FundPK = C.FundPK
LEFT JOIN Fund D ON B.FundPK = D.FundPK AND D.Status IN (1,2)
LEFT JOIN @tableRate E ON D.CurrencyPK = E.CurrencyPK AND A.NavDate = E.Date
GROUP BY A.Month,OrderList
order by OrderList
                                                                                                                     ";
                                                                                cmd3.CommandTimeout = 0;
                                                                                cmd3.Parameters.AddWithValue("@DateFrom", Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom));
                                                                                cmd3.Parameters.AddWithValue("@DateTo", Convert.ToDateTime(_unitRegistryRpt.ValueDateTo));

                                                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                                                {

                                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                                    using (ExcelPackage package3 = new ExcelPackage(excelFile))
                                                                                    {
                                                                                        //ExcelWorksheet worksheet = package1.Workbook.Worksheets[1];



                                                                                        int incRowExcel3 = 57;
                                                                                        int _startRowDetail3 = incRowExcel3;
                                                                                        //int incRowExcel1 = 23;
                                                                                        //int _startRowDetail1 = incRowExcel1;
                                                                                        //int incRowExcel2 = 40;
                                                                                        //int _startRowDetail2 = incRowExcel2;
                                                                                        //int incRowExcel3 = 57;
                                                                                        //int _startRowDetail3 = incRowExcel3;


                                                                                        int _endRowDetail3 = 0;

                                                                                        while (dr3.Read())
                                                                                        {
                                                                                            int incColExcel = 3;


                                                                                            worksheet.Cells[incRowExcel3, 2].Value = Convert.ToString(dr3["Month"]);
                                                                                            worksheet.Cells[incRowExcel3, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                            worksheet.Cells[incRowExcel3, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                                            worksheet.Cells[incRowExcel3, 3].Value = Convert.ToDecimal(dr3["AUM"]);
                                                                                            worksheet.Cells[incRowExcel3, 3].Style.Numberformat.Format = "#,##0.0000";
                                                                                            worksheet.Cells[incRowExcel3, 3].Value = Convert.ToDecimal(dr3["AUM"]);
                                                                                            worksheet.Cells[incRowExcel3, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                            worksheet.Cells[incRowExcel3, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                                            worksheet.Cells["C" + incRowExcel3 + ":D" + incRowExcel3].Merge = true;

                                                                                            worksheet.Row(incRowExcel3).Height = 38;



                                                                                            incRowExcel3++;
                                                                                            _endRowDetail3 = incRowExcel3 - 1;


                                                                                        }
                                                                                        worksheet.Cells["B" + _startRowDetail3 + ":D" + _endRowDetail3].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                                        worksheet.Cells["B" + _startRowDetail3 + ":D" + _endRowDetail3].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                                        worksheet.Cells["B" + _startRowDetail3 + ":D" + _endRowDetail3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                                        worksheet.Cells["B" + _startRowDetail3 + ":D" + _endRowDetail3].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                                                        //worksheet.Cells["A1:Z1"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                                                                        //worksheet.Cells["K2:Z2"].AutoFitColumns(); // CEK DARI ENTRY ID SAMPE LAST UPDATE
                                                                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                                                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 ";

                                                                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                                                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                                                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                                                        package.Save();
                                                                                        return true;
                                                                                    }

                                                                                    //}
                                                                                }

                                                                            }

                                                                        }
                                                                    }

                                                                    //}
                                                                }

                                                            }

                                                        }
                                                    }

                                                    //}
                                                }

                                            }

                                        }
                                    }

                                }
                            }

                        }

                    }


                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Transaction Monitoring
            else if (_unitRegistryRpt.ReportName.Equals("Transaction Monitoring"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _statusSwitch = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And FC.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitch = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitch = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitch = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitch = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }

                            cmd.CommandText =
                                @"
                                Select A.ClientName,InvestorTypeDesc,Nationality,HighRiskStatus,TransactionType,FundID,FundName,TransactionDate,NAV,UnitAmount,TotalCashAmount,RiskProfileScore ,GrossAnnualIncomeDesc, SID,ID,InvestmentObjectivesDesc,SourceOfFundDesc,MotherMaidenName,Occupation
                                from (  
                                Select isnull(FC.Name,'') ClientName,case when FC.InvestorType = 1 then 'Individual' else case when FC.InvestorType = 2 then 'Institution' end end InvestorTypeDesc,case when isnull(FC.Nationality,'') = 'ID' then 'Local' else 'Asing' end  Nationality, isnull(N.DescOne,'') HighRiskStatus, 'SUB' TransactionType, isnull(F.ID,'') FundID,isnull(F.Name,'') FundName,A.NAVDate TransactionDate, isnull(A.NAV,0) NAV, isnull(A.TotalUnitAmount,0) UnitAmount,isnull(A.TotalCashAmount,0) TotalCashAmount,
								E.DescOne RiskProfileScore, case when FC.InvestorType = 1 then G.DescOne else case when FC.InvestorType = 2 then H.DescOne end end GrossAnnualIncomeDesc, FC.SID, FC.ID,
								case when FC.InvestorType = 1 then I.DescOne else case when FC.InvestorType = 2 then J.DescOne end end InvestmentObjectivesDesc,case when FC.InvestorType = 1 then FC.MotherMaidenName else case when FC.InvestorType = 2 then '-' end end MotherMaidenName,case when FC.InvestorType = 1 then K.DescOne else case when FC.InvestorType = 2 then '-' end end Occupation,
								case when FC.InvestorType = 1 then L.DescOne else case when FC.InvestorType = 2 then M.DescOne end end SourceOfFundDesc
                                from ClientSubscription A 
                                left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)   
                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
                                left join MasterValue E on FC.InvestorsRiskProfile = E.Code and E.ID = 'InvestorsRiskProfile' and E.Status in (1,2)  
                                left join MasterValue G on FC.PenghasilanInd = G.Code and G.ID = 'IncomeIND' and G.Status in (1,2)  
                                left join MasterValue H on FC.PenghasilanInstitusi = H.Code and H.ID = 'IncomeINS' and H.Status in (1,2)  
                                left join MasterValue I on FC.MaksudTujuanInd = I.Code and I.ID = 'InvestmentObjectivesIND' and I.Status in (1,2)  
                                left join MasterValue J on FC.MaksudTujuanInstitusi = J.Code and J.ID = 'InvestmentObjectivesINS' and J.Status in (1,2) 
                                left join MasterValue K on FC.Pekerjaan = K.Code and K.ID = 'Occupation' and K.Status in (1,2) 
                                left join MasterValue L on A.SumberDana = L.Code and L.ID = 'IncomeSourceIND' and L.Status in (1,2) 
                                left join MasterValue M on A.SumberDana = M.Code and M.ID = 'IncomeSourceINS' and M.Status in (1,2) 
								left join MasterValue N on FC.KYCRiskProfile = N.Code and N.ID = 'KYCRiskProfile' and N.Status in (1,2)
                                where NAVDate Between @ValueDateFrom and @ValueDateTo  and A.Type <> 3 and
                                " + _statusSubs + _paramFund + _paramFundClient + @"

                                UNION ALL   
                                Select isnull(FC.Name,'') ClientName,case when FC.InvestorType = 1 then 'Individual' else case when FC.InvestorType = 2 then 'Institution' end end InvestorTypeDesc,case when isnull(FC.Nationality,'') = 'ID' then 'Local' else 'Asing' end  Nationality, isnull(N.DescOne,'') HighRiskStatus, 'RED' TransactionType, isnull(F.ID,'') FundID,isnull(F.Name,'') FundName,A.NAVDate TransactionDate, isnull(A.NAV,0) NAV, isnull(A.UnitAmount,0) UnitAmount,isnull(A.CashAmount,0) TotalCashAmount,
                                E.DescOne RiskProfileScore, case when FC.InvestorType = 1 then G.DescOne else case when FC.InvestorType = 2 then H.DescOne end end GrossAnnualIncomeDesc, FC.SID, FC.ID,
								case when FC.InvestorType = 1 then I.DescOne else case when FC.InvestorType = 2 then J.DescOne end end InvestmentObjectivesDesc,case when FC.InvestorType = 1 then FC.MotherMaidenName else case when FC.InvestorType = 2 then '-' end end MotherMaidenName,case when FC.InvestorType = 1 then K.DescOne else case when FC.InvestorType = 2 then '-' end end Occupation, '' SourceOfFundDesc
								from ClientRedemption A 
                                left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)   
                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
                                left join MasterValue E on FC.InvestorsRiskProfile = E.Code and E.ID = 'InvestorsRiskProfile' and E.Status in (1,2)  
                                left join MasterValue G on FC.PenghasilanInd = G.Code and G.ID = 'IncomeIND' and G.Status in (1,2)  
                                left join MasterValue H on FC.PenghasilanInstitusi = H.Code and H.ID = 'IncomeINS' and H.Status in (1,2)  
                                left join MasterValue I on FC.MaksudTujuanInd = I.Code and I.ID = 'InvestmentObjectivesIND' and I.Status in (1,2)  
                                left join MasterValue J on FC.MaksudTujuanInstitusi = J.Code and J.ID = 'InvestmentObjectivesINS' and J.Status in (1,2)  
                                left join MasterValue K on FC.Pekerjaan = K.Code and K.ID = 'Occupation' and K.Status in (1,2) 
								left join MasterValue N on FC.KYCRiskProfile = N.Code and N.ID = 'KYCRiskProfile' and N.Status in (1,2)
                                where NAVDate Between @ValueDateFrom and @ValueDateTo  and A.Type <> 3 and
                                " + _statusRedemp + _paramFund + _paramFundClient + @"

                                UNION ALL   
                                Select isnull(FC.Name,'') ClientName,case when FC.InvestorType = 1 then 'Individual' else case when FC.InvestorType = 2 then 'Institution' end end InvestorTypeDesc,case when isnull(FC.Nationality,'') = 'ID' then 'Local' else 'Asing' end  Nationality, isnull(N.DescOne,'') HighRiskStatus, 'SWI OUT' TransactionType, isnull(F.ID,'') FundID,isnull(F.Name,'') FundName,A.NAVDate TransactionDate, isnull(A.NAVFundFrom,0) NAV, isnull(A.UnitAmount,0) UnitAmount,isnull(A.CashAmount,0) TotalCashAmount,
                                E.DescOne RiskProfileScore, case when FC.InvestorType = 1 then G.DescOne else case when FC.InvestorType = 2 then H.DescOne end end GrossAnnualIncomeDesc, FC.SID, FC.ID,
								case when FC.InvestorType = 1 then I.DescOne else case when FC.InvestorType = 2 then J.DescOne end end InvestmentObjectivesDesc,case when FC.InvestorType = 1 then FC.MotherMaidenName else case when FC.InvestorType = 2 then '-' end end MotherMaidenName,case when FC.InvestorType = 1 then K.DescOne else case when FC.InvestorType = 2 then '-' end end Occupation, '' SourceOfFundDesc
								from ClientSwitching A 
                                left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2)   
                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
                                left join MasterValue E on FC.InvestorsRiskProfile = E.Code and E.ID = 'InvestorsRiskProfile' and E.Status in (1,2) 
                                left join MasterValue G on FC.PenghasilanInd = G.Code and G.ID = 'IncomeIND' and G.Status in (1,2)  
                                left join MasterValue H on FC.PenghasilanInstitusi = H.Code and H.ID = 'IncomeINS' and H.Status in (1,2)  
                                left join MasterValue I on FC.MaksudTujuanInd = I.Code and I.ID = 'InvestmentObjectivesIND' and I.Status in (1,2)  
                                left join MasterValue J on FC.MaksudTujuanInstitusi = J.Code and J.ID = 'InvestmentObjectivesINS' and J.Status in (1,2) 
                                left join MasterValue K on FC.Pekerjaan = K.Code and K.ID = 'Occupation' and K.Status in (1,2) 
								left join MasterValue N on FC.KYCRiskProfile = N.Code and N.ID = 'KYCRiskProfile' and N.Status in (1,2)
                                where NAVDate Between @ValueDateFrom and @ValueDateTo  and A.Type <> 3 and
                                " + _statusSwitch + _paramFund + _paramFundClient + @"

                                UNION ALL   
                                Select isnull(FC.Name,'') ClientName,case when FC.InvestorType = 1 then 'Individual' else case when FC.InvestorType = 2 then 'Institution' end end InvestorTypeDesc,case when FC.Nationality = 'ID' then 'Local' else 'Asing' end  Nationality,isnull(N.DescOne,'') HighRiskStatus, 'SWI IN' TransactionType, isnull(F.ID,'') FundID,isnull(F.Name,'') FundName,A.NAVDate TransactionDate, isnull(A.NAVFundTo,0) NAV, isnull(A.TotalUnitAmountFundTo,0) UnitAmount,isnull(A.TotalCashAmountFundTo,0) TotalCashAmount,
                                E.DescOne RiskProfileScore, case when FC.InvestorType = 1 then G.DescOne else case when FC.InvestorType = 2 then H.DescOne end end GrossAnnualIncomeDesc, FC.SID, FC.ID,
								case when FC.InvestorType = 1 then I.DescOne else case when FC.InvestorType = 2 then J.DescOne end end InvestmentObjectivesDesc,case when FC.InvestorType = 1 then FC.MotherMaidenName else case when FC.InvestorType = 2 then '-' end end MotherMaidenName,case when FC.InvestorType = 1 then K.DescOne else case when FC.InvestorType = 2 then '-' end end Occupation, '' SourceOfFundDesc
								from ClientSwitching A 
                                left join Fund F on A.FundPKTo = F.fundPK and F.Status in (1,2)   
                                left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
                                left join MasterValue E on FC.InvestorsRiskProfile = E.Code and E.ID = 'InvestorsRiskProfile' and E.Status in (1,2) 
                                left join MasterValue G on FC.PenghasilanInd = G.Code and G.ID = 'IncomeIND' and G.Status in (1,2)  
                                left join MasterValue H on FC.PenghasilanInstitusi = H.Code and H.ID = 'IncomeINS' and H.Status in (1,2)  
                                left join MasterValue I on FC.MaksudTujuanInd = I.Code and I.ID = 'InvestmentObjectivesIND' and I.Status in (1,2)  
                                left join MasterValue J on FC.MaksudTujuanInstitusi = J.Code and J.ID = 'InvestmentObjectivesINS' and J.Status in (1,2)  
                                left join MasterValue K on FC.Pekerjaan = K.Code and K.ID = 'Occupation' and K.Status in (1,2)  
								left join MasterValue N on FC.KYCRiskProfile = N.Code and N.ID = 'KYCRiskProfile' and N.Status in (1,2)
                                where NAVDate Between @ValueDateFrom and @ValueDateTo  and A.Type <> 3 and
                                " + _statusSwitch + _paramFund + _paramFundClient + @"
                                )A   
                                 ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TransactionMonitoring" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TransactionMonitoring" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Transaction Monitoring");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.InvestorType = Convert.ToString(dr0["InvestorTypeDesc"]);
                                            rSingle.Nationality = Convert.ToString(dr0["Nationality"]);
                                            rSingle.HighRiskStatus = dr0["HighRiskStatus"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["HighRiskStatus"]);
                                            rSingle.TransactionType = dr0["TransactionType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TransactionType"]);
                                            rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TransactionDate = Convert.ToDateTime(dr0["TransactionDate"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.TransactionAmount = Convert.ToDecimal(dr0["TotalCashAmount"]);
                                            rSingle.RiskProfileScore = dr0["RiskProfileScore"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RiskProfileScore"]);
                                            rSingle.AnnualIncome = dr0["GrossAnnualIncomeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["GrossAnnualIncomeDesc"]);
                                            rSingle.SID = dr0["SID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SID"]);
                                            rSingle.UnitHolderNo = dr0["ID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ID"]);
                                            rSingle.InvestmentObject = Convert.ToString(dr0["InvestmentObjectivesDesc"]);
                                            rSingle.SourceOfFundDesc = Convert.ToString(dr0["SourceOfFundDesc"]);
                                            rSingle.MotherMaidenName = Convert.ToString(dr0["MotherMaidenName"]);
                                            rSingle.Occupation = Convert.ToString(dr0["Occupation"]);
                                            //rSingle.Score = Convert.ToString(dr0["Score"]);
                                            //rSingle.ScoreDesc = Convert.ToString(dr0["ScoreDesc"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        int _endRow = 2;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel++;
                                            int _startRow = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1].Value = "FULL NAME";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 2].Value = "TYPE";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 3].Value = "NATIONALITY";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "HIGH RISK STATUS";
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 5].Value = "TRANSACTION TYPE";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 6].Value = "PRODUCT ID";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 7].Value = "PRODUCT NAME";
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 8].Value = "TRANSACTION DATE";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 9].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 10].Value = "UNIT";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 11].Value = "TRN AMNT";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 12].Value = "RISK PROFILE SCORE";
                                            worksheet.Cells[incRowExcel, 12].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 13].Value = "GROSS ANNUAL INCOME";
                                            worksheet.Cells[incRowExcel, 13].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 14].Value = "SID";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 15].Value = "UNIT HOLDER ID NO";
                                            worksheet.Cells[incRowExcel, 15].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 16].Value = "INVESTMENT OBJECTIVE";
                                            worksheet.Cells[incRowExcel, 16].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 17].Value = "SOURCE OF FUND";
                                            worksheet.Cells[incRowExcel, 17].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 18].Value = "MOTHER NAME";
                                            worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 19].Value = "OCCUPATION";
                                            worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 20].Value = "SCORE";
                                            worksheet.Cells[incRowExcel, 20].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 21].Value = "Score Desc";
                                            worksheet.Cells[incRowExcel, 21].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);
                                            incRowExcel++;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InvestorType;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Nationality;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.HighRiskStatus;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TransactionType;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.TransactionDate).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.TransactionAmount;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.RiskProfileScore;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.AnnualIncome;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.UnitHolderNo;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.InvestmentObject;
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.SourceOfFundDesc;
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.MotherMaidenName;
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 18].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.Occupation;
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 19].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.Score;
                                                worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 21].Value = rsDetail.ScoreDesc;
                                                worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                _endRow++;
                                                incRowExcel++;
                                            }
                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;


                                            worksheet.Cells["A" + _startRow + ":T" + _endRow].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells["A" + _startRow + ":T" + _endRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRow + ":T" + _endRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRow + ":T" + _endRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRow + ":T" + _endRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        }

                                        string _rangeA = "A:T" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 20;
                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 20];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 23;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 23;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 43;
                                        worksheet.Column(14).Width = 35;
                                        worksheet.Column(15).Width = 25;
                                        worksheet.Column(16).Width = 24;
                                        worksheet.Column(17).Width = 24;
                                        worksheet.Column(18).Width = 28;
                                        worksheet.Column(19).Width = 25;
                                        worksheet.Column(20).Width = 14;
                                        worksheet.Column(21).Width = 20;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report For All \n &28&B Subscription , Redemption , Switching";


                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &23&B TRANSACTION MONITORING";
                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Summary Daily AUM
            if (_unitRegistryRpt.ReportName.Equals("Summary Daily AUM"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"
                                declare @CurrencyRate table (
	                                CurrencyPK int,
	                                Rate numeric(22,4),
	                                Date date
                                )

                                declare @CounterDate date
                                set @CounterDate = @ValuedateFrom

                                while @CounterDate <= @ValuedateTo
                                begin
	                                insert into @CurrencyRate(CurrencyPK,Rate,Date)
	                                select CurrencyPK,Rate,@CounterDate from CurrencyRate where date = (
		                                select max(date) from CurrencyRate where status = 2 and Date <= @CounterDate
	                                ) and status = 2

	                                set @CounterDate = dbo.FWorkingDay(@CounterDate,1)
                                end

                                select A.Date,sum(AUM * case when B.CurrencyPK = 1 then 1 else C.Rate end) AUM, C.Rate KursTengah from CloseNAV A
                                left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                                left join @CurrencyRate C on A.Date = C.Date
                                where A.status = 2 and A.Date between @ValuedateFrom and @ValuedateTo
                                group by A.Date,C.Rate

                                order by A.Date
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValuedateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValuedateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SummaryDailyAUM" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SummaryDailyAUM" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Summary Daily AUM");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SummaryDailyAum> rList = new List<SummaryDailyAum>();
                                        while (dr0.Read())
                                        {

                                            SummaryDailyAum rSingle = new SummaryDailyAum();
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.KursTengah = Convert.ToDecimal(dr0["KursTengah"]);


                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date";
                                        worksheet.Cells[incRowExcel, 2].Value = "AUM";
                                        worksheet.Cells[incRowExcel, 3].Value = "Kurs Tengah";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Date;
                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.KursTengah;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }


                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 3];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 16;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Summary Daily AUM";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Transfer Dana Over Booking 
            else if (_unitRegistryRpt.ReportName.Equals("Transfer Dana Over Booking"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundSwitching = "";
                            string _paramFundClient = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = " and A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundSwitching = " and A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                                _paramFundSwitching = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = " and A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            cmd.CommandText =


                                @" 	
                                
                                declare @MaxRefNo int, @updateRefNo int
                                select @MaxRefNo = isnull(max(RefNo),0) from OverBookingRefNo 


                                select cast(ROW_NUMBER() over (order by DateTo) + @MaxRefNo as nvarchar) + '/FAD-MMI/Over Booking' RefNo, DateTo,FundCashRef,BankBranch,fax,BankCustodi,BankBranch1,tlp1,fax1,BankBranchUp,Perihal,FundName,ServerDate,sum(Amount) Amount,AccDebet,NorekDebet,bankDebet,AccCredit,NorekCredit,BankCredit,BankTo from (

									select cast(getdate() as date) DateTo,isnull(G.ID,'') FundCashRef,isnull(F.ID,'') BankBranch,isnull(F.Fax1,'') fax,H.NamaBank BankCustodi,isnull(H.Address,'') BankBranch1,isnull(H.Phone1,'') tlp1,isnull(H.Fax1,'') fax1,
									isnull(H.ContactPerson,'') BankBranchUp,'Transfer Dana ' + B.Name + ' - ' + case when I.SACode = '' or I.Description <> '' then 'MANDIRI MANAJEMEN INVESTASI' else I.Name end Perihal,B.Name + ' - ' + case when I.SACode = '' then 'MANDIRI MANAJEMEN INVESTASI' else I.Name end FundName,cast(getdate() as date) ServerDate,TotalCashAmount Amount,isnull(E.BankAccountName,'') AccDebet,
									isnull(E.BankAccountNo,'') NorekDebet,isnull(G.ID,'') bankDebet,isnull(H.BankAccountName,'') AccCredit,isnull(H.BankAccountNo,'') NorekCredit,isnull(H.NamaBank,'') BankCredit,isnull(G.ID + ' - ' + F.ID,'') BankTo from ClientSubscription A
									left join Fund B on A.FundPk = B.FundPk and B.status in (1,2)
									left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
									left join Bank D on C.BankPK = D.BankPK and D.Status in (1,2)
									left join FundCashRef E on A.FundPK = E.FundPK and A.CashRefPK = E.FundCashRefPK and E.status in (1,2)
									left join BankBranch F on E.BankBranchPK = F.BankBranchPK and F.status in (1,2)
									left join Bank G on F.BankPK = G.BankPK and G.Status in (1,2)
									left join ( 
									select isnull(A.BankAccountName,'') BankAccountName,isnull(A.BankAccountNo,'') BankAccountNo,isnull(C.ID,'') NamaBank,A.FundPK,isnull(B.Phone1,'') Phone1,isnull(B.Fax1,'') Fax1,isnull(B.ContactPerson,'') ContactPerson, isnull(B.Address,'') Address from FundCashRef A
									left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
									left join Bank C on B.BankPK = C.BankPK and C.Status in (1,2)
									 where bitdefaultinvestment = 1 and A.Status in (1,2)
									) H on A.FundPk = H.FundPK
									left join FundClient I on A.FundClientPK = I.FundClientPK and I.Status in (1,2)
									where A.ValueDate between @ValueDateFrom and @ValuedateTo and A.Posted = 1 and A.status = 2 and A.TotalCashAmount > 5 and E.bitdefaultinvestment = 0 and (I.SACode <> '' and I.Tipe <> 3) " + _paramFund + _paramFundClient + @"
									--and A.FundPK = 61

									union all

									select cast(getdate() as date) DateTo,isnull(G.ID,'') FundCashRef,isnull(F.ID,'') BankBranch,isnull(F.Fax1,'') fax,H.NamaBank BankCustodi,isnull(H.Address,'') BankBranch1,isnull(H.Phone1,'') tlp1,isnull(H.Fax1,'') fax1,
									isnull(H.ContactPerson,'') BankBranchUp,'Transfer Dana ' + B.Name + ' - ' + case when I.SACode = '' or I.Description <> '' then 'MANDIRI MANAJEMEN INVESTASI' else I.Name end Perihal,B.Name + ' - ' + case when I.SACode = '' then 'MANDIRI MANAJEMEN INVESTASI' else I.Name end FundName,cast(getdate() as date) ServerDate,TotalCashAmountFundTo Amount,isnull(E.BankAccountName,'') AccDebet,
									isnull(E.BankAccountNo,'') NorekDebet,isnull(G.ID,'') bankDebet,isnull(H.BankAccountName,'') AccCredit,isnull(H.BankAccountNo,'') NorekCredit,isnull(H.NamaBank,'') BankCredit,isnull(G.ID + ' - ' + F.ID,'') BankTo from ClientSwitching A
									left join Fund B on A.FundPKTo = B.FundPk and B.status in (1,2)
									left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
									left join Bank D on C.BankPK = D.BankPK and D.Status in (1,2)
									left join FundCashRef E on A.FundPKTo = E.FundPK and A.CashRefPKTo = E.FundCashRefPK and E.status in (1,2)
									left join BankBranch F on E.BankBranchPK = F.BankBranchPK and F.status in (1,2)
									left join Bank G on F.BankPK = G.BankPK and G.Status in (1,2)
									left join ( 
									select isnull(A.BankAccountName,'') BankAccountName,isnull(A.BankAccountNo,'') BankAccountNo,isnull(C.ID,'') NamaBank,A.FundPK,isnull(B.Phone1,'') Phone1,isnull(B.Fax1,'') Fax1,isnull(B.ContactPerson,'') ContactPerson, isnull(B.Address,'') Address from FundCashRef A
									left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
									left join Bank C on B.BankPK = C.BankPK and C.Status in (1,2)
									 where bitdefaultinvestment = 1 and A.Status in (1,2)
									) H on A.FundPKTo = H.FundPK
									left join FundClient I on A.FundClientPK = I.FundClientPK and I.Status in (1,2)
									where A.ValueDate between @ValueDateFrom and @ValuedateTo and A.Posted = 1 and A.status = 2 and A.TotalCashAmountFundTo > 5 and E.bitdefaultinvestment = 0 and (I.SACode <> '' and I.Tipe <> 3) " + _paramFundSwitching + _paramFundClient + @"
									--and A.FundPKTo = 61
                                ) A

                                group by DateTo,FundCashRef,BankBranch,fax,BankCustodi,BankBranch1,tlp1,fax1,BankBranchUp,Perihal,FundName,ServerDate,AccDebet,NorekDebet,bankDebet,AccCredit,NorekCredit,BankCredit,BankTo
						
						        select @updateRefNo = count(*) + @MaxRefNo from (
									select DateTo,FundCashRef,BankBranch,fax,BankCustodi,BankBranch1,tlp1,fax1,BankBranchUp,Perihal,FundName,ServerDate,sum(Amount) Amount,AccDebet,NorekDebet,bankDebet,AccCredit,NorekCredit,BankCredit,BankTo from (

										select cast(getdate() as date) DateTo,isnull(G.ID,'') FundCashRef,isnull(F.ID,'') BankBranch,isnull(F.Fax1,'') fax,H.NamaBank BankCustodi,isnull(H.Address,'') BankBranch1,isnull(H.Phone1,'') tlp1,isnull(H.Fax1,'') fax1,
										isnull(H.ContactPerson,'') BankBranchUp,'Transfer Dana ' + B.Name + ' - ' + case when I.SACode = '' or I.Description <> '' then 'MANDIRI MANAJEMEN INVESTASI' else I.Name end Perihal,B.Name + ' - ' + case when I.SACode = '' then 'MANDIRI MANAJEMEN INVESTASI' else I.Name end FundName,cast(getdate() as date) ServerDate,TotalCashAmount Amount,isnull(E.BankAccountName,'') AccDebet,
										isnull(E.BankAccountNo,'') NorekDebet,isnull(G.ID,'') bankDebet,isnull(H.BankAccountName,'') AccCredit,isnull(H.BankAccountNo,'') NorekCredit,isnull(H.NamaBank,'') BankCredit,isnull(G.ID + ' - ' + F.ID,'') BankTo from ClientSubscription A
										left join Fund B on A.FundPk = B.FundPk and B.status in (1,2)
										left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
										left join Bank D on C.BankPK = D.BankPK and D.Status in (1,2)
										left join FundCashRef E on A.FundPK = E.FundPK and A.CashRefPK = E.FundCashRefPK and E.status in (1,2)
										left join BankBranch F on E.BankBranchPK = F.BankBranchPK and F.status in (1,2)
										left join Bank G on F.BankPK = G.BankPK and G.Status in (1,2)
										left join ( 
										select isnull(A.BankAccountName,'') BankAccountName,isnull(A.BankAccountNo,'') BankAccountNo,isnull(C.ID,'') NamaBank,A.FundPK,isnull(B.Phone1,'') Phone1,isnull(B.Fax1,'') Fax1,isnull(B.ContactPerson,'') ContactPerson, isnull(B.Address,'') Address from FundCashRef A
										left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
										left join Bank C on B.BankPK = C.BankPK and C.Status in (1,2)
										 where bitdefaultinvestment = 1 and A.Status in (1,2)
										) H on A.FundPk = H.FundPK
										left join FundClient I on A.FundClientPK = I.FundClientPK and I.Status in (1,2)
										where A.ValueDate between @ValueDateFrom and @ValuedateTo and A.Posted = 1 and A.status = 2 and A.TotalCashAmount > 5 and E.bitdefaultinvestment = 0 and (I.SACode <> '' and I.Tipe <> 3) " + _paramFund + _paramFundClient + @"
										--and A.FundPK = 61

										union all

										select cast(getdate() as date) DateTo,isnull(G.ID,'') FundCashRef,isnull(F.ID,'') BankBranch,isnull(F.Fax1,'') fax,H.NamaBank BankCustodi,isnull(H.Address,'') BankBranch1,isnull(H.Phone1,'') tlp1,isnull(H.Fax1,'') fax1,
										isnull(H.ContactPerson,'') BankBranchUp,'Transfer Dana ' + B.Name + ' - ' + case when I.SACode = '' or I.Description <> '' then 'MANDIRI MANAJEMEN INVESTASI' else I.Name end Perihal,B.Name + ' - ' + case when I.SACode = '' then 'MANDIRI MANAJEMEN INVESTASI' else I.Name end FundName,cast(getdate() as date) ServerDate,TotalCashAmountFundTo Amount,isnull(E.BankAccountName,'') AccDebet,
										isnull(E.BankAccountNo,'') NorekDebet,isnull(G.ID,'') bankDebet,isnull(H.BankAccountName,'') AccCredit,isnull(H.BankAccountNo,'') NorekCredit,isnull(H.NamaBank,'') BankCredit,isnull(G.ID + ' - ' + F.ID,'') BankTo from ClientSwitching A
										left join Fund B on A.FundPKTo = B.FundPk and B.status in (1,2)
										left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
										left join Bank D on C.BankPK = D.BankPK and D.Status in (1,2)
										left join FundCashRef E on A.FundPKTo = E.FundPK and A.CashRefPKTo = E.FundCashRefPK and E.status in (1,2)
										left join BankBranch F on E.BankBranchPK = F.BankBranchPK and F.status in (1,2)
										left join Bank G on F.BankPK = G.BankPK and G.Status in (1,2)
										left join ( 
										select isnull(A.BankAccountName,'') BankAccountName,isnull(A.BankAccountNo,'') BankAccountNo,isnull(C.ID,'') NamaBank,A.FundPK,isnull(B.Phone1,'') Phone1,isnull(B.Fax1,'') Fax1,isnull(B.ContactPerson,'') ContactPerson, isnull(B.Address,'') Address from FundCashRef A
										left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
										left join Bank C on B.BankPK = C.BankPK and C.Status in (1,2)
										 where bitdefaultinvestment = 1 and A.Status in (1,2)
										) H on A.FundPKTo = H.FundPK
										left join FundClient I on A.FundClientPK = I.FundClientPK and I.Status in (1,2)
										where A.ValueDate between @ValueDateFrom and @ValuedateTo and A.Posted = 1 and A.status = 2 and A.TotalCashAmountFundTo > 5 and E.bitdefaultinvestment = 0 and (I.SACode <> '' and I.Tipe <> 3) " + _paramFundSwitching + _paramFundClient + @"
										--and A.FundPKTo = 61
									) A

									group by DateTo,FundCashRef,BankBranch,fax,BankCustodi,BankBranch1,tlp1,fax1,BankBranchUp,Perihal,FundName,ServerDate,AccDebet,NorekDebet,bankDebet,AccCredit,NorekCredit,BankCredit,BankTo

								) A


								if exists (select * from OverBookingRefNo)
									update OverBookingRefNo set RefNo = @updateRefNo
								else 
									insert into OverBookingRefNo
									select @updateRefNo

                                 ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TransferDanaOverBooking" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TransferDanaOverBooking" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Transfer Dana Over Booking");

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TransferDanaOverBooking> rList = new List<TransferDanaOverBooking>();
                                        while (dr0.Read())
                                        {
                                            TransferDanaOverBooking rSingle = new TransferDanaOverBooking();
                                            rSingle.DateTo = Convert.ToDateTime(dr0["DateTo"]);
                                            rSingle.FundCashRef = dr0["FundCashRef"].ToString();
                                            rSingle.BankBranch = dr0["BankBranch"].ToString();
                                            rSingle.RefNo = dr0["RefNo"].ToString();
                                            rSingle.fax = dr0["fax"].ToString();
                                            rSingle.BankCustodi = dr0["BankCustodi"].ToString();
                                            rSingle.BankBranch1 = dr0["BankBranch1"].ToString();
                                            rSingle.tlp1 = dr0["tlp1"].ToString();
                                            rSingle.fax1 = dr0["fax1"].ToString();
                                            rSingle.BankBranchUp = dr0["BankBranchUp"].ToString();
                                            rSingle.Perihal = dr0["Perihal"].ToString();
                                            rSingle.FundName = dr0["FundName"].ToString();
                                            rSingle.ServerDate = dr0["ServerDate"].ToString();
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.AccDebet = dr0["AccDebet"].ToString();
                                            rSingle.NorekDebet = dr0["NorekDebet"].ToString();
                                            rSingle.bankDebet = dr0["bankDebet"].ToString();
                                            rSingle.AccCredit = dr0["AccCredit"].ToString();
                                            rSingle.NorekCredit = dr0["NorekCredit"].ToString();
                                            rSingle.BankCredit = dr0["BankCredit"].ToString();
                                            rSingle.BankTo = dr0["BankTo"].ToString();

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        int _rowImage;
                                        _rowImage = incRowExcel + 1;
                                        //int _endRow = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            int _startRow = incRowExcel;

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //excelImage.SetPosition(_rowImage, 10, 3, 10);
                                                worksheet.Cells[incRowExcel, 1].Value = "Jakarta, " + rsDetail.DateTo.ToString("dd MMMM yyyy");
                                                //worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.DateTo;
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd MMMM yyyy";
                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Ref No : " + rsDetail.RefNo;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Kepada : ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundCashRef;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.BankBranch;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "fax : " + rsDetail.fax;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tembusan : ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.BankCustodi;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.BankBranch1;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "tlp : " + rsDetail.tlp1;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "fax : " + rsDetail.fax1;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Up : " + rsDetail.BankBranchUp;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Perihal : " + rsDetail.Perihal;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Dengan Hormat,";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Bersama ini kami mohon bantuan Saudara untuk melakukan pemindahbukuan dana ";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundName + " (Tidak Full Amount)";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Sebagai berikut : ";
                                                incRowExcel = incRowExcel + 2;

                                                worksheet.Cells[incRowExcel, 1].Value = "Tanggal";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DateTo.ToString("dd MMMM yyyy");
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Jumlah";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "Rp #,##0.00";
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Acc Debet";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccDebet;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Account";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NorekDebet;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Bank";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.bankDebet;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Acc Credit";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccCredit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Account";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NorekCredit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Bank";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCredit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, terima kasih atas perhatian dan kerjasamanya.";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Hormat Kami,";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 4;
                                                worksheet.Cells[incRowExcel, 1].Value = "Sarwo Adhi Nugroho";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = "Tri Untara";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Kepada " + rsDetail.BankTo;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Kami " + rsDetail.BankCustodi + " selaku Bank Kustodi menginstruksikan";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "kepada " + rsDetail.BankTo + " untuk melakukan pemindahbukuan dana sesuai instruksi diatas.";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Kami mensetujui transaksi tersebut & terima kasih.";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Hormat Kami,";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 4;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.BankCustodi;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.OutstandingUnits;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                //_endRow = incRowExcel;
                                                worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                                incRowExcel++;
                                                _rowImage = incRowExcel + 2;
                                            }

                                            //worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //worksheet.Cells["A" + _startRow + ":F" + _endRow].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            //worksheet.Cells["A" + _startRow + ":F" + _endRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _startRow + ":F" + _endRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _startRow + ":F" + _endRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _startRow + ":F" + _endRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        }

                                        string _rangeA = "A:C" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 3];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).Width = 3;
                                        worksheet.Column(3).Width = 79;
                                        //worksheet.Column(4).AutoFit();
                                        //worksheet.Column(5).AutoFit();
                                        //worksheet.Column(6).AutoFit();



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report For All \n &28&B Subscription , Redemption , Switching";


                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &23&B  Transfer Dana Over Booking";
                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImageOverBooking);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();
                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion
            else
            {
                return false;
            }
        }


        public decimal Get_TotalCashAmountSubsRedempByDateFromToGroupByFundTypeByCurrencyID(string _dateFrom, string _dateTo, string _agentName, string _fundType, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _statusSubs = "";
                        string _statusRedemp = "";

                        if (_status == 1)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSubs = " and A.Status = 1  ";
                            _statusRedemp = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSubs = " and A.Status = 3  ";
                            _statusRedemp = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }

                        cmd.CommandText = @" 
                       
                        select sum(SubsAmount - RedAmount) Total from (
                        select A.FundID,A.FundName,A.AgentName,A.FundType,A.SubsAmount,A.RedAmount,A.CurrencyID from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID from ClientSubscription A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSubs + @"
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID from ClientRedemption A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo  " + _statusRedemp + @"                  
                        ) A where A.AgentName = @agentName and A.FundType = @FundType and A.CurrencyID = @currencyID
                        ) B
                        group by AgentName,FundType,CurrencyID
                        order By AgentName";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@AgentName", _agentName);
                        cmd.Parameters.AddWithValue("@FundType", _fundType);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public decimal Get_TotalCashAmountSubsRedempByDateFromToGroupBySellingAgentByCurrencyID(string _dateFrom, string _dateTo, string _agentName, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _statusSubs = "";
                        string _statusRedemp = "";

                        if (_status == 1)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSubs = " and A.Status = 1  ";
                            _statusRedemp = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSubs = " and A.Status = 3  ";
                            _statusRedemp = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }

                        cmd.CommandText = @" 
                       
                        select sum(SubsAmount - RedAmount) Total from (
                        select A.FundID,A.FundName,A.AgentName,A.FundType,A.SubsAmount,A.RedAmount,A.CurrencyID from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID from ClientSubscription A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSubs + @"         
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID from ClientRedemption A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo  " + _statusRedemp + @"                          
                        ) A where A.AgentName = @agentName  and A.CurrencyID = @currencyID
                        ) B
                        group by AgentName,CurrencyID
                        order By AgentName";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@AgentName", _agentName);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public decimal Get_TotalCashAmountSwitchingByDateFromToGroupByFundTypeByCurrencyID(string _dateFrom, string _dateTo, string _agentName, string _fundType, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _statusSwitch = "";

                        if (_status == 1)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSwitch = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSwitch = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                        }

                        cmd.CommandText = @" 
                       
                        select sum(SubsAmount - RedAmount) Total from (
                        select A.FundID,A.FundName,A.AgentName,A.FundType,A.SubsAmount,A.RedAmount,A.CurrencyID from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKTo = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @"
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKFrom = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @"
                        ) A where A.AgentName = @agentName and A.FundType = @FundType and A.CurrencyID = @currencyID
                        ) B
                        group by AgentName,FundType,CurrencyID
                        order By AgentName";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@AgentName", _agentName);
                        cmd.Parameters.AddWithValue("@FundType", _fundType);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public decimal Get_TotalCashAmountSwitchingByDateFromToGroupBySellingAgentByCurrencyID(string _dateFrom, string _dateTo, string _agentName, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _statusSwitch = "";

                        if (_status == 1)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSwitch = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSwitch = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                        }


                        cmd.CommandText = @" 
                       
                        select sum(SubsAmount - RedAmount) Total from (
                        select A.FundID,A.FundName,A.AgentName,A.FundType,A.SubsAmount,A.RedAmount,A.CurrencyID from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKTo = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo  " + _statusSwitch + @"
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKFrom = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo  " + _statusSwitch + @"
                        ) A where A.AgentName = @agentName  and A.CurrencyID = @currencyID
                        ) B
                        group by AgentName,CurrencyID
                        order By AgentName";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@AgentName", _agentName);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }



        public decimal Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(string _dateFrom, string _dateTo, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _statusSubs = "";
                        string _statusRedemp = "";

                        if (_status == 1)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSubs = " and A.Status = 1  ";
                            _statusRedemp = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSubs = " and A.Status = 3  ";
                            _statusRedemp = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }


                        cmd.CommandText = @" 
                       
                        select sum(SubsAmount - RedAmount) Total from (
                        select A.FundID,A.FundName,A.AgentName,A.FundType,A.SubsAmount,A.RedAmount,A.CurrencyID from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID from ClientSubscription A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo  " + _statusSubs + @" 
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID from ClientRedemption A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusRedemp + @"                  
                        ) A where  A.CurrencyID = @currencyID
                        ) B
                        group by CurrencyID";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public decimal Get_TotalCashAmountSwitchingByDateFromToGroupByCurrencyID(string _dateFrom, string _dateTo, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _statusSwitch = "";

                        if (_status == 1)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSwitch = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSwitch = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                        }

                        cmd.CommandText = @" 
                       
                          select sum(SubsAmount - RedAmount) Total from (
                        select A.FundID,A.FundName,A.AgentName,A.FundType,A.SubsAmount,A.RedAmount,A.CurrencyID from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKTo = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @"    
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKFrom = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo  " + _statusSwitch + @" 
                        ) A where A.CurrencyID = @currencyID
                        ) B
                        group by CurrencyID
                        ";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        //BY PRODUCT

        public decimal Get_TotalCashAmountSubsRedempByDateFromToGroupByFundByCurrencyID(string _dateFrom, string _dateTo, string _fundID, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _statusSubs = "";
                        string _statusRedemp = "";

                        if (_status == 1)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSubs = " and A.Status = 1  ";
                            _statusRedemp = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSubs = " and A.Status = 3  ";
                            _statusRedemp = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }

                        cmd.CommandText = @"          
                        select sum(SubsAmount - RedAmount) Total from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID from ClientSubscription A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSubs + @" and B.ID = @FundID  and E.ID = @CurrencyID
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID from ClientRedemption A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusRedemp + @" and B.ID = @FundID  and E.ID = @CurrencyID
                        
                        ) A
                        group by FundID ,CurrencyID
                        order By FundID";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundID", _fundID);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public decimal Get_TotalCashAmountSwitchingByDateFromToGroupByFundByCurrencyID(string _dateFrom, string _dateTo, string _fundID, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _statusSwitch = "";

                        if (_status == 1)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSwitch = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSwitch = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                        }


                        cmd.CommandText = @" 
                       
                         select sum(SubsAmount - RedAmount) Total from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKTo = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @" and  B.ID = @FundID  and E.ID = @CurrencyID
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKFrom = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @" and B.ID = @FundID  and E.ID = @CurrencyID
                        
                        ) A
                        group by FundID,CurrencyID
                        order By FundID";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundID", _fundID);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public decimal Get_TotalCashAmountSubsRedempByDateFromToGroupByFundTypeProductByCurrencyID(string _dateFrom, string _dateTo, string _fundType, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _statusSubs = "";
                        string _statusRedemp = "";

                        if (_status == 1)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSubs = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            _statusRedemp = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSubs = " and A.Status = 1  ";
                            _statusRedemp = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSubs = " and A.Status = 3  ";
                            _statusRedemp = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSubs = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSubs = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                            _statusRedemp = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }

                        cmd.CommandText = @"          
                        select sum(SubsAmount - RedAmount) Total from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,TotalCashAmount SubsAmount,0 RedAmount,E.ID CurrencyID from ClientSubscription A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSubs + @" and D.DescOne = @FundType  and E.ID = @CurrencyID
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPK) else CashAmount end RedAmount,E.ID CurrencyID from ClientRedemption A
                        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusRedemp + @" and D.DescOne = @FundType  and E.ID = @CurrencyID
                        
                        ) A
                        group by CurrencyID
                        order By CurrencyID";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundType", _fundType);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public decimal Get_TotalCashAmountSwitchingByDateFromToGroupByFundTypeProductByCurrencyID(string _dateFrom, string _dateTo, string _fundType, string _currencyID, int _status)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _statusSwitch = "";

                        if (_status == 1)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                        }
                        else if (_status == 2)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                        }
                        else if (_status == 3)
                        {
                            _statusSwitch = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                        }
                        else if (_status == 4)
                        {
                            _statusSwitch = " and A.Status = 1  ";
                        }
                        else if (_status == 5)
                        {
                            _statusSwitch = " and A.Status = 3  ";
                        }
                        else if (_status == 6)
                        {
                            _statusSwitch = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                        }
                        else if (_status == 7)
                        {
                            _statusSwitch = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                        }


                        cmd.CommandText = @" 
                       
                         select sum(SubsAmount - RedAmount) Total from (
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end SubsAmount,0 RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKTo = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo  " + _statusSwitch + @" and  D.DescOne = @FundType  and E.ID = @CurrencyID
                        union all
                        select B.ID FundID,B.Name FundName,case when C.SACode <> '' then C.Name else case when  CHARINDEX('non-aperd',C.Description) > 0 then C.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end FundClientName,D.DescOne FundType,0 SubsAmount,case when CashAmount = 0 then UnitAmount * dbo.FgetLastCloseNav(A.ValueDate,A.FundPKFrom) else CashAmount end RedAmount,E.ID CurrencyID,'Switching' Switching from ClientSwitching A
                        left join Fund B on A.FundPKFrom = B.FundPK and B.Status = 2
                        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                        left join MasterValue D on B.Type = D.Code and D.status = 2 and D.ID = 'FundType'
                        left join Currency E on A.CurrencyPK = E.CurrencyPK and E.Status = 2
                        where Valuedate between @DateFrom and @DateTo " + _statusSwitch + @" and D.DescOne = @FundType  and E.ID = @CurrencyID
                        
                        ) A
                        group by CurrencyID
                        order By CurrencyID";

                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@FundType", _fundType);
                        cmd.Parameters.AddWithValue("@CurrencyID", _currencyID);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public string DailyTransaction(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                string FilePath = Tools.ReportsPath + "DailyTransaction" + "_" + _userID + ".xlsx";
                File.Copy(Tools.ReportsTemplatePath + "DailyTransactionTemplate.xlsx", FilePath, true);
                FileInfo existingFile = new FileInfo(FilePath);
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets[1];

                    using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                    {
                        DbCon01.Open();
                        using (SqlCommand cmd01 = DbCon01.CreateCommand())
                        {
                            cmd01.CommandText = @"select B.IFUACode IFUA,B.Name ClientName,C.ID FundID,D.ID CCY,'SUB' Type, TotalCashAmount SubsAmount from ClientSubscription A
                                                        left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
                                                        left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
                                                        left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
                                                        where A.status = 2 and Posted = 1 and Revised = 0 and ValueDate = @Date";
                            cmd01.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr01 = cmd01.ExecuteReader())
                            {
                                if (dr01.HasRows)
                                {
                                    List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                    while (dr01.Read())
                                    {
                                        UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        rSingle.ClientName = Convert.ToString(dr01["ClientName"]);
                                        rSingle.IFUA = Convert.ToString(dr01["IFUA"]);
                                        rSingle.FundID = Convert.ToString(dr01["FundID"]);
                                        rSingle.Type = Convert.ToString(dr01["Type"]);
                                        rSingle.CurrencyID = Convert.ToString(dr01["CCY"]);
                                        rSingle.SUBAmount = Convert.ToDecimal(dr01["SubsAmount"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID =
                                     from r in rList
                                     group r by new { r.DateFrom, r.DateTo } into rGroup
                                     select rGroup;

                                    int incRowExcel = 9;
                                    int _IncRow = 10;
                                    foreach (var rsHeader in QueryByClientID)
                                    {
                                        int _no = 1;
                                        var _date = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yy");
                                        foreach (var rsDetail in rsHeader)
                                        {

                                            worksheet.Cells[1, 7].Value = "Execution Time : " + _datetimeNow;
                                            worksheet.Cells[4, 1].Value = "Transaction Date : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yy");

                                            worksheet.Cells[6, 3].Value = Get_TotalDiscreTransactionUnit(_date, "SUBS", 1);
                                            worksheet.Cells[7, 3].Value = Get_TotalDiscreTransactionUnit(_date, "SUBS", 2);


                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.IFUA;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundID;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.CurrencyID;
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.Type;
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.SUBAmount;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,####0.00";

                                            worksheet.Cells["A" + _IncRow + ":I" + _IncRow].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + _IncRow + ":I" + _IncRow].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);


                                            _no++;
                                            incRowExcel++;


                                            _IncRow = _IncRow + 2;


                                        }
                                        int _IncRowA = incRowExcel + 1000;
                                        worksheet.Cells["A" + incRowExcel + ":I" + _IncRowA].Style.Fill.PatternType = ExcelFillStyle.None;
                                    }

                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                    worksheet.Column(1).AutoFit();
                                    worksheet.Column(2).AutoFit();
                                    worksheet.Column(3).AutoFit();
                                    worksheet.Column(4).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.Column(8).AutoFit();
                                    worksheet.Column(9).AutoFit();

                                }


                            }

                        }
                    }

                    // MKBD02
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets[2];
                    using (SqlConnection DbCon02 = new SqlConnection(Tools.conString))
                    {
                        DbCon02.Open();
                        using (SqlCommand cmd02 = DbCon02.CreateCommand())
                        {
                            cmd02.CommandText = @"select B.IFUACode IFUA,B.Name ClientName,C.ID FundID,D.ID CCY,'SUB' Type, 
                                CashAmount RedAmount, UnitAmount RedUnit,case when BitRedemptionAll = 1 then 'FULL' else 'PRTL' end PARTIAL from ClientRedemption A
                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
                                left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
                                left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
                                where A.status = 2 and Posted = 1 and Revised = 0 and ValueDate = @Date";
                            cmd02.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr02 = cmd02.ExecuteReader())
                            {
                                if (dr02.HasRows)
                                {
                                    List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                    while (dr02.Read())
                                    {
                                        UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        rSingle.ClientName = Convert.ToString(dr02["ClientName"]);
                                        rSingle.IFUA = Convert.ToString(dr02["IFUA"]);
                                        rSingle.FundID = Convert.ToString(dr02["FundID"]);
                                        rSingle.Type = Convert.ToString(dr02["Type"]);
                                        rSingle.CurrencyID = Convert.ToString(dr02["CCY"]);
                                        rSingle.REDAmount = Convert.ToDecimal(dr02["RedAmount"]);
                                        rSingle.REDUnit = Convert.ToDecimal(dr02["RedUnit"]);
                                        rSingle.Partial = Convert.ToString(dr02["PARTIAL"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID2 =
                                     from r in rList
                                     group r by new { } into rGroup
                                     select rGroup;

                                    int incRowExcel2 = 10;
                                    int _IncRow2 = 11;
                                    foreach (var rsHeader in QueryByClientID2)
                                    {
                                        int _no = 1;
                                        foreach (var rsDetail in rsHeader)
                                        {

                                            worksheet2.Cells[1, 7].Value = "Execution Time : " + _datetimeNow;

                                            worksheet2.Cells[4, 1].Value = "Transaction Date : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yy");

                                            worksheet2.Cells[7, 3].Value = Get_TotalDiscreTransactionUnit(Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yy"), "REDM", 1);
                                            worksheet2.Cells[8, 3].Value = Get_TotalDiscreTransactionUnit(Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yy"), "REDM", 2);

                                            worksheet2.Cells[incRowExcel2, 1].Value = _no;
                                            worksheet2.Cells[incRowExcel2, 2].Value = rsDetail.IFUA;
                                            worksheet2.Cells[incRowExcel2, 3].Value = rsDetail.ClientName;
                                            worksheet2.Cells[incRowExcel2, 4].Value = rsDetail.FundID;
                                            worksheet2.Cells["D" + incRowExcel2 + ":E" + incRowExcel2].Merge = true;
                                            worksheet2.Cells["D" + incRowExcel2 + ":E" + incRowExcel2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet2.Cells[incRowExcel2, 6].Value = rsDetail.CurrencyID;
                                            worksheet2.Cells["F" + incRowExcel2 + ":G" + incRowExcel2].Merge = true;
                                            worksheet2.Cells["F" + incRowExcel2 + ":G" + incRowExcel2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet2.Cells[incRowExcel2, 8].Value = rsDetail.Type;
                                            worksheet2.Cells[incRowExcel2, 9].Value = rsDetail.REDUnit;
                                            worksheet2.Cells[incRowExcel2, 9].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel2, 10].Value = rsDetail.REDAmount;
                                            worksheet2.Cells[incRowExcel2, 10].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel2, 11].Value = rsDetail.Partial;

                                            worksheet2.Cells["A" + _IncRow2 + ":K" + _IncRow2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet2.Cells["A" + _IncRow2 + ":K" + _IncRow2].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);

                                            _no++;
                                            incRowExcel2++;


                                            _IncRow2 = _IncRow2 + 2;
                                        }


                                        int _IncRowA2 = incRowExcel2 + 1000;
                                        worksheet2.Cells["A" + incRowExcel2 + ":K" + _IncRowA2].Style.Fill.PatternType = ExcelFillStyle.None;
                                    }

                                    worksheet2.PrinterSettings.FitToPage = true;
                                    worksheet2.PrinterSettings.FitToWidth = 1;
                                    worksheet2.PrinterSettings.FitToHeight = 0;
                                    worksheet2.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel2 - 1, 11];
                                    worksheet2.Column(1).AutoFit();
                                    worksheet2.Column(2).AutoFit();
                                    worksheet2.Column(3).AutoFit();
                                    worksheet2.Column(4).AutoFit();
                                    worksheet2.Column(5).AutoFit();
                                    worksheet2.Column(6).AutoFit();
                                    worksheet2.Column(7).AutoFit();
                                    worksheet2.Column(8).AutoFit();
                                    worksheet2.Column(9).AutoFit();
                                    worksheet2.Column(10).AutoFit();
                                    worksheet2.Column(11).AutoFit();

                                }


                            }

                        }

                    }

                    // MKBD03
                    ExcelWorksheet worksheet3 = package.Workbook.Worksheets[3];
                    using (SqlConnection DbCon03 = new SqlConnection(Tools.conString))
                    {
                        DbCon03.Open();
                        using (SqlCommand cmd03 = DbCon03.CreateCommand())
                        {
                            cmd03.CommandText = @"
                                select ClientSwitchingPK,B.IFUACode IFUA,B.ID ClientID,B.Name ClientName,C.ID FundID,D.ID CCY,'Switch In' Type, TotalUnitAmountFundFrom SwitchUnit, TotalCashAmountFundFrom SwitchAmount, 
                                case when BitSwitchingAll = 1 then 'FULL' else 'PARTIAL' end PARTIAL from ClientSwitching A
                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                                left join Fund C on A.FundPKTo = C.FundPK and C.Status  in (1,2)
                                left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
                                where  A.status = 2 and A.Posted = 1 and Revised = 0 and Valuedate = @Date 
                                union all
                                select ClientSwitchingPK,B.IFUACode IFUA,B.ID ClientID,B.Name ClientName,C.ID FundID,D.ID CCY,'Switch Out' Type, TotalUnitAmountFundFrom SwitchUnit, TotalCashAmountFundFrom SwitchAmount, 
                                case when BitSwitchingAll = 1 then 'FULL' else 'PARTIAL' end PARTIAL from ClientSwitching A
                                left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                                left join Fund C on A.FundPKFrom = C.FundPK and C.Status  in (1,2)
                                left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
                                where  A.status = 2 and A.Posted = 1 and Revised = 0 and Valuedate = @Date 
                                order by B.IFUACode
                                ";
                            cmd03.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr03 = cmd03.ExecuteReader())
                            {
                                if (dr03.HasRows)
                                {
                                    List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                    while (dr03.Read())
                                    {
                                        UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        rSingle.ClientSwitchingPK = Convert.ToInt32(dr03["ClientSwitchingPK"]);
                                        rSingle.ClientID = Convert.ToString(dr03["ClientID"]);
                                        rSingle.ClientName = Convert.ToString(dr03["ClientName"]);
                                        rSingle.IFUA = Convert.ToString(dr03["IFUA"]);
                                        rSingle.FundID = Convert.ToString(dr03["FundID"]);
                                        rSingle.Type = Convert.ToString(dr03["Type"]);
                                        rSingle.CurrencyID = Convert.ToString(dr03["CCY"]);
                                        rSingle.SwitchingUnit = Convert.ToDecimal(dr03["SwitchUnit"]);
                                        rSingle.SwitchingAmount = Convert.ToDecimal(dr03["SwitchAmount"]);
                                        rSingle.Partial = Convert.ToString(dr03["PARTIAL"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID3 =
                                     from r in rList
                                     group r by new { } into rGroup
                                     select rGroup;

                                    int incRowExcel3 = 8;
                                    int _IncRow3 = 9;
                                    foreach (var rsHeader in QueryByClientID3)
                                    {

                                        int _no = 1;
                                        foreach (var rsDetail in rsHeader)
                                        {

                                            worksheet3.Cells[1, 7].Value = "Execution Time : " + _datetimeNow;

                                            worksheet3.Cells[4, 1].Value = "Transaction Date : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yy");

                                            //ThickBox Border HEADER

                                            //area detail

                                            worksheet3.Cells[incRowExcel3, 1].Value = _no;
                                            worksheet3.Cells[incRowExcel3, 2].Value = rsDetail.ClientSwitchingPK;
                                            worksheet3.Cells[incRowExcel3, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet3.Cells[incRowExcel3, 3].Value = rsDetail.ClientID;
                                            worksheet3.Cells[incRowExcel3, 4].Value = rsDetail.ClientName;
                                            worksheet3.Cells["D" + incRowExcel3 + ":E" + incRowExcel3].Merge = true;
                                            worksheet3.Cells["D" + incRowExcel3 + ":E" + incRowExcel3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet3.Cells[incRowExcel3, 6].Value = rsDetail.FundID;
                                            worksheet3.Cells["F" + incRowExcel3 + ":G" + incRowExcel3].Merge = true;
                                            worksheet3.Cells["F" + incRowExcel3 + ":G" + incRowExcel3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet3.Cells[incRowExcel3, 8].Value = rsDetail.CurrencyID;
                                            worksheet3.Cells["H" + incRowExcel3 + ":I" + incRowExcel3].Merge = true;
                                            worksheet3.Cells["H" + incRowExcel3 + ":I" + incRowExcel3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet3.Cells[incRowExcel3, 10].Value = rsDetail.Type;
                                            worksheet3.Cells[incRowExcel3, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet3.Cells[incRowExcel3, 11].Value = rsDetail.SwitchingUnit;
                                            worksheet3.Cells[incRowExcel3, 11].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel3, 12].Value = rsDetail.SwitchingAmount;
                                            worksheet3.Cells[incRowExcel3, 12].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel3, 13].Value = rsDetail.Partial;


                                            worksheet3.Cells["A" + _IncRow3 + ":M" + _IncRow3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet3.Cells["A" + _IncRow3 + ":M" + _IncRow3].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);

                                            _no++;
                                            incRowExcel3++;


                                            _IncRow3 = _IncRow3 + 2;

                                        }


                                        int _IncRowA3 = incRowExcel3 + 1000;
                                        worksheet3.Cells["A" + incRowExcel3 + ":M" + _IncRowA3].Style.Fill.PatternType = ExcelFillStyle.None;
                                    }

                                    worksheet3.PrinterSettings.FitToPage = true;
                                    worksheet3.PrinterSettings.FitToWidth = 1;
                                    worksheet3.PrinterSettings.FitToHeight = 0;
                                    worksheet3.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel3 - 1, 13];
                                    worksheet3.Column(1).AutoFit();
                                    worksheet3.Column(2).AutoFit();
                                    worksheet3.Column(3).AutoFit();
                                    worksheet3.Column(4).AutoFit();
                                    worksheet3.Column(5).AutoFit();
                                    worksheet3.Column(6).AutoFit();
                                    worksheet3.Column(7).AutoFit();
                                    worksheet3.Column(8).AutoFit();
                                    worksheet3.Column(9).AutoFit();
                                    worksheet3.Column(10).AutoFit();
                                    worksheet3.Column(11).AutoFit();
                                    worksheet3.Column(12).AutoFit();
                                    worksheet3.Column(13).AutoFit();

                                }


                            }

                        }

                    }


                    // MKBD04
                    ExcelWorksheet worksheet4 = package.Workbook.Worksheets[4];
                    using (SqlConnection DbCon04 = new SqlConnection(Tools.conString))
                    {
                        DbCon04.Open();
                        using (SqlCommand cmd04 = DbCon04.CreateCommand())
                        {
                            cmd04.CommandText = @"Create Table #A
                                (
                                IFUA nvarchar(100),
                                ClientName nvarchar(100),
                                Flag nvarchar(1)
                                )

                                declare @FundClientPK int

                                Declare A Cursor For
	                                select FundClientPK from FundClient 
	                                where status in (1,2) and CHARINDEX('non-aperd',Description) > 0
                                Open A
                                Fetch next From A
                                Into @FundClientPK
                                WHILE @@FETCH_STATUS = 0  
                                BEGIN
	                                IF EXISTS(
	                                select FundClientPK from ClientSubscription where FundClientPK = @FundClientPK and Status = 2 
	                                and Posted = 1 and Revised = 0 and ValueDate = @date
	                                union all
	                                select FundClientPK from ClientRedemption where FundClientPK = @FundClientPK and Status = 2 
	                                and Posted = 1 and Revised = 0 and ValueDate = @date
	                                union all
	                                select FundClientPK from ClientSwitching where FundClientPK = @FundClientPK and Status = 2 
	                                and Posted = 1 and Revised = 0 and ValueDate = @date
	                                )	
	                                BEGIN
		                                Insert into #A(IFUA,ClientName,Flag)
		                                select IFUACode,Name ClientName,'X' Flag from FundClient where FundClientPK = @FundClientPK
	                                END
	                                ELSE
	                                BEGIN
		                                Insert into #A(IFUA,ClientName,Flag)
		                                select IFUACode,Name ClientName,'O' Flag from FundClient where FundClientPK = @FundClientPK
	                                END

                                FETCH NEXT FROM A 
                                INTO @FundClientPK
                                END 

                                CLOSE A
                                DEALLOCATE A

                                select IFUA,ClientName,Flag from #A";
                            cmd04.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr04 = cmd04.ExecuteReader())
                            {
                                if (dr04.HasRows)
                                {
                                    List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                    while (dr04.Read())
                                    {
                                        UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        rSingle.ClientName = Convert.ToString(dr04["ClientName"]);
                                        rSingle.IFUA = Convert.ToString(dr04["IFUA"]);
                                        rSingle.Flag = Convert.ToString(dr04["Flag"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID4 =
                                     from r in rList
                                     group r by new { } into rGroup
                                     select rGroup;

                                    int incRowExcel4 = 8;
                                    int _IncRow4 = 9;
                                    foreach (var rsHeader in QueryByClientID4)
                                    {
                                        int _no = 1;
                                        foreach (var rsDetail in rsHeader)
                                        {

                                            worksheet4.Cells[1, 7].Value = "Execution Time : " + _datetimeNow;

                                            worksheet4.Cells[4, 1].Value = "Transaction Date : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yy");

                                            worksheet4.Cells[incRowExcel4, 1].Value = _no;
                                            worksheet4.Cells[incRowExcel4, 2].Value = rsDetail.IFUA;
                                            worksheet4.Cells[incRowExcel4, 3].Value = rsDetail.ClientName;
                                            worksheet4.Cells[incRowExcel4, 4].Value = rsDetail.Flag;
                                            worksheet4.Cells["D" + incRowExcel4 + ":E" + incRowExcel4].Merge = true;
                                            worksheet4.Cells["D" + incRowExcel4 + ":E" + incRowExcel4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet4.Cells["A" + _IncRow4 + ":E" + _IncRow4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet4.Cells["A" + _IncRow4 + ":E" + _IncRow4].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);

                                            _no++;
                                            incRowExcel4++;

                                            _IncRow4 = _IncRow4 + 2;

                                        }


                                        int _IncRowA4 = incRowExcel4 + 1000;
                                        worksheet4.Cells["A" + incRowExcel4 + ":E" + _IncRowA4].Style.Fill.PatternType = ExcelFillStyle.None;
                                    }

                                    worksheet4.PrinterSettings.FitToPage = true;
                                    worksheet4.PrinterSettings.FitToWidth = 1;
                                    worksheet4.PrinterSettings.FitToHeight = 0;
                                    worksheet4.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel4 - 1, 4];
                                    worksheet4.Column(1).AutoFit();
                                    worksheet4.Column(2).AutoFit();
                                    worksheet4.Column(3).AutoFit();
                                    worksheet4.Column(4).AutoFit();

                                }


                            }
                        }

                    }


                    // MKBD05
                    ExcelWorksheet worksheet5 = package.Workbook.Worksheets[5];
                    using (SqlConnection DbCon05 = new SqlConnection(Tools.conString))
                    {
                        DbCon05.Open();

                        using (SqlCommand cmd05 = DbCon05.CreateCommand())
                        {
                            cmd05.CommandText = @"
                                Create Table #A
                                (
                                SACode nvarchar(100),
                                ClientName nvarchar(100),
                                Flag nvarchar(1)
                                )

                                declare @FundClientPK int

                                Declare A Cursor For
	                                select FundClientPK from FundClient 
	                                where status in (1,2) and SACode <> ''
                                Open A
                                Fetch next From A
                                Into @FundClientPK
                                WHILE @@FETCH_STATUS = 0  
                                BEGIN
	                                IF EXISTS(
	                                select FundClientPK from ClientSubscription where FundClientPK = @FundClientPK and Status = 2 
	                                and Posted = 1 and Revised = 0 and ValueDate = @date
	                                union all
	                                select FundClientPK from ClientRedemption where FundClientPK = @FundClientPK and Status = 2 
	                                and Posted = 1 and Revised = 0 and ValueDate = @date
	                                union all
	                                select FundClientPK from ClientSwitching where FundClientPK = @FundClientPK and Status = 2 
	                                and Posted = 1 and Revised = 0 and ValueDate = @date
	                                )	
	                                BEGIN
		                                Insert into #A(SACode,ClientName,Flag)
		                                select SACode,Name ClientName,'X' Flag from FundClient where FundClientPK = @FundClientPK
	                                END
	                                ELSE
	                                BEGIN
		                                Insert into #A(SACode,ClientName,Flag)
		                                select SACode,Name ClientName,'O' Flag from FundClient where FundClientPK = @FundClientPK
	                                END

                                FETCH NEXT FROM A 
                                INTO @FundClientPK
                                END 

                                CLOSE A
                                DEALLOCATE A

                                select SACode,ClientName,Flag from #A ";
                            cmd05.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr05 = cmd05.ExecuteReader())
                            {
                                if (dr05.HasRows)
                                {
                                    List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                    while (dr05.Read())
                                    {
                                        UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        rSingle.ClientName = Convert.ToString(dr05["ClientName"]);
                                        rSingle.SACode = Convert.ToString(dr05["SACode"]);
                                        rSingle.Flag = Convert.ToString(dr05["Flag"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID5 =
                                     from r in rList
                                     group r by new { } into rGroup
                                     select rGroup;

                                    int incRowExcel5 = 7;
                                    int _IncRow5 = 8;
                                    foreach (var rsHeader in QueryByClientID5)
                                    {
                                        int _no = 1;
                                        foreach (var rsDetail in rsHeader)
                                        {


                                            worksheet5.Cells[1, 7].Value = "Execution Time : " + _datetimeNow;

                                            worksheet5.Cells[4, 1].Value = "Transaction Date : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yy");

                                            worksheet5.Cells[incRowExcel5, 1].Value = _no;
                                            worksheet5.Cells[incRowExcel5, 2].Value = rsDetail.SACode;
                                            worksheet5.Cells[incRowExcel5, 3].Value = rsDetail.ClientName;
                                            worksheet5.Cells[incRowExcel5, 4].Value = rsDetail.Flag;
                                            worksheet5.Cells["D" + incRowExcel5 + ":E" + incRowExcel5].Merge = true;
                                            worksheet5.Cells["D" + incRowExcel5 + ":E" + incRowExcel5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet5.Cells["A" + _IncRow5 + ":E" + _IncRow5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet5.Cells["A" + _IncRow5 + ":E" + _IncRow5].Style.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);

                                            _no++;
                                            incRowExcel5++;

                                            _IncRow5 = _IncRow5 + 2;

                                        }


                                        int _IncRowA5 = incRowExcel5 + 1000;
                                        worksheet5.Cells["A" + incRowExcel5 + ":E" + _IncRowA5].Style.Fill.PatternType = ExcelFillStyle.None;
                                    }

                                    worksheet5.PrinterSettings.FitToPage = true;
                                    worksheet5.PrinterSettings.FitToWidth = 1;
                                    worksheet5.PrinterSettings.FitToHeight = 0;
                                    worksheet5.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel5 - 1, 4];
                                    worksheet5.Column(1).AutoFit();
                                    worksheet5.Column(2).AutoFit();
                                    worksheet5.Column(3).AutoFit();
                                    worksheet5.Column(4).AutoFit();

                                }


                            }
                        }

                    }

                    package.Save();
                    return FilePath;
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public decimal Get_TotalDiscreTransactionUnit(string _date, string _type, int _discre)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 
                       
                        IF (@Type = 'SUBS')
                        BEGIN
	                        IF @Discre = 1
	                        BEGIN
		                        select  isnull(count(A.FundClientPK),0) Total from ClientSubscription A
		                        left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		                        left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
		                        left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
		                        where A.status = 2 and Posted = 1 and Revised = 0 and ValueDate = @Date and C.FundTypeInternal in (2,3)
	                        END
	                        ELSE
	                        BEGIN
		                        select  isnull(count(A.FundClientPK),0) Total from ClientSubscription A
		                        left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		                        left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
		                        left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
		                        where A.status = 2 and Posted = 1 and Revised = 0 and ValueDate = @Date and C.FundTypeInternal = 1
	                        END
                        END
                        ELSE
                        BEGIN
	                        IF @Discre = 1
	                        BEGIN
		                        select  isnull(count(A.FundClientPK),0) Total from ClientRedemption A
		                        left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		                        left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
		                        left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
		                        where A.status = 2 and Posted = 1 and Revised = 0 and ValueDate = @Date and C.FundTypeInternal in (2,3)
	                        END
	                        ELSE
	                        BEGIN
		                        select  isnull(count(A.FundClientPK),0) Total from ClientRedemption A
		                        left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
		                        left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
		                        left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
		                        where A.status = 2 and Posted = 1 and Revised = 0 and ValueDate = @Date and C.FundTypeInternal = 1
	                        END
                        END";

                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@Type", _type);
                        cmd.Parameters.AddWithValue("@Discre", _discre);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Total"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }
        public Boolean GenerateReportCommission(string _userID, CommissionRpt _commissionRpt)
        {


            #region Sharing Fee Accounting
            if (_commissionRpt.ReportName.Equals("Sharing Fee Accounting"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.SellingAgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"


DECLARE @DateFromPrev DATETIME
DECLARE @DateToPrev DATETIME


IF @DateTo = dateadd(mm, Datediff(mm,0,@DateTo)+1,-1)
BEGIN
	SET @DateToPrev = dateadd(mm, Datediff(mm,0,@DateTo),-1)
END
ELSE
BEGIN
	SET @DateToPrev = DATEADD(MONTH,-1,@DateTo)
END


SET @DateFromPrev =  DATEADD(MONTH,-1,@DateFrom)


--SELECT @DateFromPrev dateFromPrev, @DateToPrev DateToPrev


select B.AgentName,B.FundName,B.CurrencyID,TrailerFeeThisMonth,TrailerFeeLastMonth,sum(TrailerFeeThisMonth - TrailerFeeLastMonth) GainLoss,
B.SharingFeeType from (
SELECT A.AgentName,A.FundName,A.CurrencyID,SUM(A.TrailerFeeThisMonth) TrailerFeeThisMonth,SUM(A.TrailerFeeLastMonth) TrailerFeeLastMonth 
,A.SharingFeeType
FROM (
	SELECT case when E.SACode <> '' then E.Name else case when  CHARINDEX('non-aperd',E.Description) > 0 then E.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName
	,ISNULL(C.Name,'') FundName
	 ,ISNULL(D.ID,'') CurrencyID, SUM(ISNULL(A.AgentFee,0)) TrailerFeeThisMonth,0 TrailerFeeLastMonth
	 ,ISNULL(J.DescOne,'FLAT') SharingFeeType
	FROM DailyDataForCommissionRptNew A
	LEFT JOIN Agent B ON A.SellingAgentPK = B.AgentPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.Status IN (1,2)
	LEFT JOIN dbo.Currency D ON A.Currency = D.CurrencyPK AND D.status IN (1,2)
	LEFT JOIN FundClient E ON A.FundClientPK = E.FundClientPK AND E.Status IN (1,2)
	LEFT JOIN MasterValue J ON A.SharingFeeType = J.Code AND J.ID = 'AgentFeeType' AND J.status IN (1,2)
	WHERE A.MFeeDate BETWEEN @DateFrom AND @DateTo
	AND ISNULL(B.Name,'') <> ''
GROUP BY E.Name,C.Name,D.ID,E.SACode,E.Description,ISNULL(J.DescOne,'FLAT')

	UNION ALL

	SELECT  case when E.SACode <> '' then E.Name else case when  CHARINDEX('non-aperd',E.Description) > 0 then E.Name  else 'MANDIRI MANAJEMEN INVESTASI' end end AgentName
	,ISNULL(C.Name,'') FundName
	 ,ISNULL(D.ID,'') CurrencyID,0 TrailerFeeThisMonth,SUM(ISNULL(A.AgentFee,0))  TrailerFeeLastMonth
	,ISNULL(J.DescOne,'FLAT') SharingFeeType
	FROM DailyDataForCommissionRptNew A
	LEFT JOIN Agent B ON A.SellingAgentPK = B.AgentPK AND B.status IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.Status IN (1,2)
	LEFT JOIN dbo.Currency D ON A.Currency = D.CurrencyPK AND D.status IN (1,2)
		LEFT JOIN FundClient E ON A.FundClientPK = E.FundClientPK AND E.Status IN (1,2)
		LEFT JOIN MasterValue J ON A.SharingFeeType = J.Code AND J.ID = 'AgentFeeType' AND J.status IN (1,2)
	WHERE A.MFeeDate BETWEEN @DateFromPrev AND @DateToPrev
	AND ISNULL(B.Name,'') <> ''
	GROUP BY E.Name,C.Name,D.ID,E.SACode,E.Description,ISNULL(J.DescOne,'FLAT')
	)A
	GROUP BY A.AgentName,A.FundName,A.CurrencyID,A.SharingFeeType
	)B
	group by B.AgentName,B.FundName,B.CurrencyID,TrailerFeeThisMonth,TrailerFeeLastMonth,B.SharingFeeType
";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SharingFeeAccounting" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SharingFeeAccounting" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sharing Fee Accounting");



                                        int incRowExcel = 1;
                                        worksheet.Cells["A1:I1"].Value = "SHARING FEE ACCOUNTING";
                                        worksheet.Cells["A1:I1"].Merge = true;
                                        worksheet.Cells["A1:I1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 4].Value = "DATE FROM : ";
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 5].Value = _commissionRpt.ValueDateFrom;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 4].Value = "DATE TO : ";
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 5].Value = _commissionRpt.ValueDateTo;
                                        incRowExcel = incRowExcel + 2;
                                        //worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        //worksheet.Cells["A4:D4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Value = "CLIENT NAME";
                                        worksheet.Cells[incRowExcel, 3].Value = "FUND NAME";
                                        worksheet.Cells[incRowExcel, 4].Value = "CURRENCY";
                                        worksheet.Cells[incRowExcel, 5].Value = "TRAILER FEE TYPE";
                                        worksheet.Cells[incRowExcel, 6].Value = "TRAIL FEE THIS MONTH";
                                        worksheet.Cells[incRowExcel, 7].Value = "TRAIL FEE LAST MONTH";
                                        worksheet.Cells[incRowExcel, 8].Value = "GAIN / LOSS";
                                        worksheet.Cells[incRowExcel, 9].Value = "GAIN / LOSS %";
                                        incRowExcel++;
                                        //worksheet.Cells["A5:B5"].Value = "ID";
                                        //worksheet.Cells["A5:B5"].Merge = true;
                                        //worksheet.Cells[incRowExcel, 3].Value = "NAME";
                                        //worksheet.Cells[incRowExcel, 4].Value = "BALANCE";
                                        //incRowExcel++;


                                        int _no = 1;
                                        int _start = 6;

                                        while (dr0.Read())
                                        {
                                            if (Convert.ToDecimal(dr0["GainLoss"]) < 0)
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToString(dr0["AgentName"]);
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToString(dr0["FundName"]);
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToString(dr0["CurrencyID"]);
                                            //TAMBAHAN
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToString(dr0["SharingFeeType"]);
                                            //
                                            worksheet.Cells[incRowExcel, 6].Value = Convert.ToDecimal(dr0["TrailerFeeThisMonth"]);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDecimal(dr0["TrailerFeelastMonth"]);
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Value = "GAIN / LOSS";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "E" + incRowExcel + "-F" + incRowExcel;
                                            worksheet.Cells[incRowExcel, 8].Value = Convert.ToDecimal(dr0["GainLoss"]);
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Value = "GAIN / LOSS %";
                                            worksheet.Cells[incRowExcel, 9].Formula = "iferror(H" + incRowExcel + "/G" + incRowExcel + ",0)";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0%";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            _no++;
                                            incRowExcel++;

                                        };
                                        int _end = incRowExcel;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _start + ":F" + _end + ")";
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 6].Calculate();

                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _start + ":G" + _end + ")";
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _start + ":H" + _end + ")";
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 8].Calculate();

                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _start + ":I" + _end + ")";
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0%";
                                        worksheet.Cells[incRowExcel, 9].Calculate();


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 4;
                                        worksheet.Column(2).Width = 35;
                                        worksheet.Column(3).Width = 60;
                                        worksheet.Column(4).Width = 12;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 22;
                                        worksheet.Column(7).Width = 22;
                                        worksheet.Column(8).Width = 16;
                                        worksheet.Column(9).Width = 16;






                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion


            #region Product Summary
            if (_commissionRpt.ReportName.Equals("Product Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramFund = "";

                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK  in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }



                            cmd.CommandText = @"
Declare @DateToMinOne datetime
Declare @DateToMinTwo DATETIME
DECLARE @DateToMinThree DATETIME
DECLARE @UnitDate DATETIME
DECLARE @NAVDate datetime


SET @DateToMinOne = dbo.FWorkingDay(@DateTo,-1)
Set @DateToMinTwo = dbo.FWorkingDay(@DateTo,-2)
Set @DateToMinThree = dbo.FWorkingDay(@DateTo,-3)



SET @UnitDate = CASE WHEN dbo.CheckTodayIsHoliday(@DateTo) = 1 THEN 
					CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinTwo) = 1 THEN 
						@DateToMinThree ELSE @DateToMinTwo END ELSE CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinOne) = 1 THEN
							@DateToMinTwo ELSE @DateToMinOne END END


SET @NAVDate = case when dbo.CheckTodayIsHoliday(@DateTo) = 1 
	then @DateToMinOne else @DateTo END 
	
    create table #ProductSummaryResult
    (
MFeeType nvarchar(200),
	    FundPK int,
	    FundName nvarchar(500),
	    FundType nvarchar(500),
	    ManagementFee numeric(22,4),
	    MFeePercent numeric(8,4),
	    TrailFeeAmount numeric(22,4),
	    SInvestCode nvarchar(50),
	    BankCustody nvarchar(50),
		SharingFeeType nvarchar(200),
		TotalUnit NUMERIC(22,4)
    )
	
    insert into #ProductSummaryResult
    select 
ISNULL(I.DescOne,'FLAT') MFeeType
,B.FundPK,isnull(B.Name,'No Data Master') FundName, G.DescOne FundType, sum(isnull(A.MFee,0)) ManagementFee
    ,isnull(A.MFeePercent,0) MFeePercent
    ,sum(isnull(A.AgentFee,0)) TrailFeeAmount,isnull(B.SInvestCode,'No Data Master') SInvestCode, F.ID BankCustody,isnull(H.DescOne,'') SharingFeeType
	,ISNULL(A.UnitAmount,0)
    from [dbo].[DailyDataForCommissionRptNew] A
    left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
    --left join Currency C on a.CurrencyPK = C.CurrencyPK and C.Status in(1,2)
    left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.status in (1,2)
    left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)
    left join MasterValue G on B.Type = G.Code and G.ID = 'FundType' and G.status in (1,2)
	LEFT JOIN MasterValue I ON A.MFeeType = I.Code AND I.ID = 'FundFeeType' AND I.status IN (1,2)
	LEFT JOIN MasterValue H ON A.SharingFeeType = H.Code AND H.ID = 'AgentFeeType' AND H.status IN (1,2)
    Where A.MFeeDate Between @DateFrom and @DateTo 
   
 " + _paramFund + @"
                            
    Group by B.FundPK, G.DescOne,B.Name, A.MFeePercent,B.SInvestCode,F.ID,ISNULL(I.DescOne,'FLAT'),isnull(H.DescOne,'') ,A.UnitAmount

       Select A.*, isnull(A.TotalUnit,0) UnitBalance
    ,isnull(A.TotalUnit,0) * isnull(D.NAV,0) AUM
        from #ProductSummaryResult A
    left join
    (
	   Select FundPK,Nav from CloseNAV where status in (1,2) and Date = @NAVDate
    )D on A.FundPK = D.FundPK


                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ProductSummaryRpt" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ProductSummaryRpt" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Product Summary Rpt");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ProductSummaryRpt> rList = new List<ProductSummaryRpt>();
                                        while (dr0.Read())
                                        {
                                            ProductSummaryRpt rSingle = new ProductSummaryRpt();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.Unit = dr0["UnitBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["UnitBalance"]);
                                            rSingle.AUM = dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.ManagementFee = dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]);
                                            rSingle.MFeePercent = dr0["MFeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeePercent"]);
                                            rSingle.SharingFee = dr0["TrailFeeAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TrailFeeAmount"]);
                                            rSingle.SInvestCode = dr0["SInvestCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SInvestCode"]);
                                            rSingle.BankCustody = dr0["BankCustody"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustody"]);
                                            rSingle.FundType = dr0["FundType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundType"]);
                                            rSingle.MFeeType = dr0["MFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MFeeType"]);
                                            rSingle.SharingFeeType = dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByAccountID =
                                            from r in rList
                                            group r by new { r.CurrencyID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        foreach (var rsHeader in GroupByAccountID)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Period From ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + _commissionRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Period To ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + _commissionRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";

                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Value = "PRODUCT";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "FUND TYPE";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "S-INVEST CODE";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "BANK KUSTODI";

                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "UNIT";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "AUM";
                                            //TAMBAHAN
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "MANAGEMENT FEE TYPE";
                                            //
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "MANAGEMENT FEE";

                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "MANAGEMENT FEE(%)";

                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Value = "SHARING FEE";

                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Value = "SHARING FEE TYPE";


                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundName;

                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundType;

                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SInvestCode;

                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.BankCustody;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.MFeeType;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ManagementFee;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.MFeePercent;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.SharingFee;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.SharingFeeType;

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }
                                            int _endRow = incRowExcel - 1;

                                            worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _endRow + ":K" + _endRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel++;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                        worksheet.Column(1).Width = 50;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14&B PRODUCT SUMMARY";
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);


                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_commissionRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Sales Tracking
            if (_commissionRpt.ReportName.Equals("Sales Tracking"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgent = "";
                            string _paramFund = "";
                            string _SellingAgentOnly = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (_commissionRpt.AgentOnly == true)
                            {
                                _SellingAgentOnly = "and B.SACode <> ''";
                            }

                            cmd.CommandText = @"

Declare @DateToMinOne datetime
Declare @DateToMinTwo DATETIME
DECLARE @DateToMinThree DATETIME
DECLARE @UnitDate DATETIME
DECLARE @UnitDateFrom datetime
DECLARE @NAVDate datetime

Set @DateToMinOne = dbo.FWorkingDay(@DateTo,-1)
Set @DateToMinTwo = dbo.FWorkingDay(@DateTo,-2)
Set @DateToMinThree = dbo.FWorkingDay(@DateTo,-3)

Declare @DateFromMinOne datetime
Declare @DateFromMinTwo DATETIME
DECLARE @DateFromMinThree DATETIME

Set @DateFromMinOne = dbo.FWorkingDay(@datefrom,-1)
Set @DateFromMinTwo = dbo.FWorkingDay(@datefrom,-2)
Set @DateFromMinThree = dbo.FWorkingDay(@datefrom,-3)


SET @UnitDate = CASE WHEN dbo.CheckTodayIsHoliday(@DateTo) = 1 THEN 
					CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinTwo) = 1 THEN 
						@DateToMinThree ELSE @DateToMinTwo END ELSE CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinOne) = 1 THEN
							@DateToMinTwo ELSE @DateToMinOne END END


SET @UnitDateFrom = CASE WHEN dbo.CheckTodayIsHoliday(@DateFrom) = 1 THEN 
					CASE WHEN dbo.CheckTodayIsHoliday(@DateFromMinTwo) = 1 THEN 
						@DateFromMinThree ELSE @DateFromMinTwo END ELSE CASE WHEN dbo.CheckTodayIsHoliday(@DateFromMinOne) = 1 THEN
							@DateFromMinTwo ELSE @DateFromMinOne END END

						

SET @NAVDate = case when dbo.CheckTodayIsHoliday(@DateTo) = 1 
	then @DateToMinOne else @DateTo END 


	DECLARE @NAV TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(22,8)
)


	DECLARE @NAVFrom TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(22,8)
)

DECLARE @CFundPK int


Declare A Cursor For
	SELECT FundPK FROM Fund WHERE Status IN (1,2)
Open A
Fetch Next From A
INTO @CFundPK

While @@FETCH_STATUS = 0  
Begin
	
INSERT INTO @NAV
SELECT Date,FundPK,Nav FROM dbo.CloseNAV WHERE Date = 
(
	SELECT MAX(date) FROM CloseNAV WHERE status = 2
	AND Date <= @DateTo AND FundPK = @CFundPK
) AND status = 2 AND FundPK = @CFundPK


	
INSERT INTO @NAVFrom
        ( LastDate, FundPK, NAV )
SELECT Date,FundPK,Nav FROM dbo.CloseNAV WHERE Date = 
(
	SELECT MAX(date) FROM CloseNAV WHERE status = 2
	AND Date <= @DateFrom AND FundPK = @CFundPK
) AND status = 2 AND FundPK = @CFundPK


	Fetch Next From A 
	into @CFundPK
End	
Close A
Deallocate A




DECLARE @tableAgentType TABLE
(
	AgentPK INT,
	Type int
)

INSERT INTO @tableAgentType
        ( AgentPK, Type )

SELECT DISTINCT A.SellingAgentPK,C.Type FROM dbo.DailyDataForCommissionRptNew A
INNER JOIN Agent B ON A.SellingAgentPK = B.AgentPK AND B.status IN (1,2)
INNER JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
WHERE A.MFeeDate BETWEEN @datefrom AND @dateto 
AND isnull(B.Name,'') <> ''
ORDER BY A.SellingAgentPK ,C.Type ASC

DECLARE @AgentFilter TABLE
(
	AgentPK INT,
	Type int
)

DECLARE @Cr1Agent int

Declare A Cursor For
	SELECT DISTINCT A.AgentPK FROM @tableAgentType A
Open A
Fetch Next From A
INTO @Cr1Agent
While @@FETCH_STATUS = 0  
Begin
	
	INSERT INTO @AgentFilter
	        ( AgentPK, Type )
	SELECT @Cr1Agent,Code FROM dbo.MasterValue WHERE id= 'fundType' AND Status IN (1,2)
	AND Code NOT IN
    (
		SELECT Type FROM @tableAgentType WHERE AgentPK = @Cr1Agent
	)

	Fetch Next From A 
	into @Cr1Agent
End	
Close A
Deallocate A

SELECT B.Name AgentName,C.DescOne FundType
,0 SalesUnit
,0 SalesAmount
,0 RedempUnit
,0 RedempAmount
,0 SwitchInUnit
,0 SwitchInAmount
,0 SwitchOutUnit
,0 SwitchOutAmount
,0 UnitBalance
,0 AUM
,0 ManagementFee
,0 TrailFeeAmount
,0 OtherFee
,0 AUMDateFrom
FROM @AgentFilter A
left JOIN Agent B ON A.AgentPK = B.AgentPK AND B.status IN (1,2)
LEFT JOIN dbo.MasterValue C ON A.Type = C.Code AND C.id = 'fundtype' AND C.status IN (1,2)

UNION ALL 

SELECT A.AgentName,A.FundType,SUM(ISNULL(A.SalesUnit,0)) SalesUnit
,SUM(ISNULL(A.SalesAmount,0)) SalesAmount
,SUM(ISNULL(A.RedempUnit,0)) RedempUnit
,SUM(ISNULL(A.RedempAmount,0)) RedempAmount
,SUM(ISNULL(A.SwitchInUnit,0)) SwitchInUnit
,SUM(ISNULL(A.SwitchInAmount,0)) SwitchInAmount
,SUM(ISNULL(A.SwitchOutUnit,0)) SwitchOutUnit
,SUM(ISNULL(A.SwitchOutAmount,0)) SwitchOutAmount
,SUM(ISNULL(A.UnitBalance,0)) UnitBalance
,SUM(ISNULL(A.AUM,0)) AUM
,SUM(ISNULL(A.ManagementFee,0)) ManagementFee
,SUM(ISNULL(A.TrailFeeAmount,0)) TrailFeeAmount
,SUM(ISNULL(A.OtherFee,0)) OtherFee
,SUM(ISNULL(A.AUMDateFrom,0)) AUMDateFrom

FROM 

(


SELECT 
isnull(F.Unit,0) UnitBalance
,CASE WHEN @CurrencyType = 'Fee Convert to Rupiah' AND A.CurrencyPK <> 1 THEN isnull(F.Unit,0) * ISNULL(G.Nav,0) * ISNULL(A.Rate,0) ELSE isnull(F.Unit,0) * ISNULL(G.Nav,0) END AUM
,CASE WHEN @CurrencyType = 'Fee Convert to Rupiah' AND A.CurrencyPK <> 1 THEN isnull(K.Unit,0) * ISNULL(L.Nav,0) * ISNULL(A.Rate,0) ELSE isnull(K.Unit,0) * ISNULL(L.Nav,0) END AUMDateFrom
,A.* From
(
SELECT 

A.FundClientPK
,A.FundPK
,C.CurrencyPK
,ISNULL(H.Rate,0) Rate
,ISNULL(B.Name,'') ClientName
,ISNULL(B.SID,'') SID
,case when B.InvestorType = 1 then ISNULL(B.NamaDepanInd,'') + ' ' + ISNULL(B.NamaTengahInd,'') + ' ' + ISNULL(B.NamaBelakangInd,'')
else ISNULL(B.NamaPerusahaan,'') end SIDName
,ISNULL(B.ID,'') CIF
,isnull(E.Name,'') AgentName
,isnull(C.Name,'') FundName
,isnull(M.DescOne,'') FundType
,isnull(D.ID,'') CurrencyID
,sum(isnull(A.SubsUnit,0)) SalesUnit
,sum(isnull(A.Subsamount,0)) SalesAmount
,sum(isnull(A.RedempUnit,0)) RedempUnit
,sum(isnull(A.RedempAmount,0)) RedempAmount
,sum(isnull(A.SwitchInUnit,0)) SwitchInUnit
,sum(isnull(A.SwitchInAmount,0)) SwitchInAmount
,sum(isnull(A.SwitchOutUnit,0)) SwitchOutUnit
,sum(isnull(A.SwitchOutAmount,0)) SwitchOutAmount
,SUM(CASE WHEN @CurrencyType = 'Fee Convert to Rupiah' AND C.CurrencyPK <> 1 THEN ISNULL(A.Mfee,0) * ISNULL(H.Rate,0) ELSE ISNULL(A.Mfee,0) END) ManagementFee
,SUM(CASE WHEN @CurrencyType = 'Fee Convert to Rupiah' AND C.CurrencyPK <> 1 THEN ISNULL(A.AgentFee,0) * ISNULL(H.Rate,0) ELSE ISNULL(A.AgentFee,0) END) TrailFeeAmount
,0 OtherFee
,case when B.InvestorType = 1 then 'Individual' else 'Institusi' end InvestorType
,ISNULL(I.DescOne,'FLAT') MFeeType
,ISNULL(J.DescOne,'FLAT') SharingFeeType
FROM dbo.DailyDataForCommissionRptNew A
LEFT JOIN fundclient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join Currency D on C.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
left join Agent E on A.SellingAgentPK = E.AgentPK and E.status in (1,2)
LEFT JOIN dbo.CurrencyRate H ON C.CurrencyPK = H.CurrencyPK AND H.Date = @NAVDate AND H.status IN (1,2)
LEFT JOIN MasterValue I ON A.MFeeType = I.Code AND I.ID = 'FundFeeType' AND I.status IN (1,2)
LEFT JOIN MasterValue J ON A.SharingFeeType = J.Code AND J.ID = 'AgentFeeType' AND J.status IN (1,2)
LEFT JOIN MasterValue M ON C.Type= M.Code AND M.ID = 'FundType' AND M.status IN (1,2)
WHERE ISNULL(B.Name,'') <> ''
AND A.MFeeDate BETWEEN @DateFrom AND @DateTo

" + _paramAgent + _paramFund + _SellingAgentOnly + @"

GROUP BY
B.Name,B.SID,B.InvestorType,B.NamaDepanInd,B.NamaTengahInd,B.NamaBelakangInd,B.NamaPerusahaan,B.ID
,E.Name,C.Name,D.ID,I.DescOne,J.DescOne,H.Rate,C.CurrencyPK,M.DescOne,A.FundClientPK,A.FundPK

)A 
LEFT JOIN
(
	Select A.FundClientPK,A.FundPK,sum(isnull(UnitAmount,0)) Unit, MV.DescOne FundType from FundclientPosition A 
	Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
	Left Join Fund C on A.FundPK = C.FundPK and C.Status in(1,2)
	left join MasterValue MV on C.Type = MV.Code and MV.ID = 'FundType' and MV.Status in(1,2)
	where date = @UnitDate

" + _paramAgent + _paramFund + _SellingAgentOnly + @"

	GROUP BY A.FundClientPK,A.FundPK,MV.DescOne
)F ON A.FundclientPK = F.FundClientPK AND A.FundPK = F.FundPK

LEFT JOIN @NAV G ON A.FundPK = G.FundPK 

LEFT JOIN
(
	Select A.FundClientPK,A.FundPK,sum(isnull(UnitAmount,0)) Unit, MV.DescOne FundType from FundclientPosition A 
	Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
	Left Join Fund C on A.FundPK = C.FundPK and C.Status in(1,2)
	left join MasterValue MV on C.Type = MV.Code and MV.ID = 'FundType' and MV.Status in(1,2)
	where date = @UnitDateFrom

" + _paramAgent + _paramFund + _SellingAgentOnly + @"

	GROUP BY A.FundClientPK,A.FundPK,MV.DescOne
)K ON A.FundclientPK = K.FundClientPK AND A.FundPK = K.FundPK
LEFT JOIN @NAVFrom L ON A.FUndPK = L.FundPK

)A
--WHERE A.AgentName <> ''
GROUP BY A.AgentName,A.FundType

ORDER BY AgentName"

;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@CurrencyType", _commissionRpt.CurrencyType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SalesTracking" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SalesTracking" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sales Tracking");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SalesTracking> rList = new List<SalesTracking>();
                                        while (dr0.Read())
                                        {
                                            SalesTracking rSingle = new SalesTracking();
                                            rSingle.AgentName = dr0["AgentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundType = dr0["FundType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundType"]);
                                            rSingle.AUMDateFrom = dr0["AUMDateFrom"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMDateFrom"]);
                                            rSingle.SalesAmount = dr0["SalesAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SalesAmount"]);
                                            rSingle.RedempAmount = dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]);
                                            rSingle.AUM = dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.ManagementFee = dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]);
                                            rSingle.TrailFeeAmount = dr0["TrailFeeAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TrailFeeAmount"]);
                                            //rSingle.TransactionFee = dr0["TransactionFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TransactionFee"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByAccountID =
                                            from r in rList
                                            group r by new { } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From  :  ";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = _commissionRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date To  :  ";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = _commissionRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";



                                        foreach (var rsHeader in GroupByAccountID)
                                        {

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Value = "Agent Name";

                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Type";

                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "AUM Date From";

                                            worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Value = "Sales Amount + Switch In";

                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption Amount + Switch Out";

                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "AUM Date To";

                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Management Fee";

                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "Trailer Fee";

                                            worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Transaction Fee";


                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Row(incRowExcel).Height = 30;
                                            incRowExcel++;


                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AgentName;

                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundType;

                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUMDateFrom;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SalesAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempAmount;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.ManagementFee;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.TrailFeeAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Value = 0;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }

                                            incRowExcel = incRowExcel + 2;



                                        }
                                        worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 36;
                                        worksheet.Column(2).Width = 57;
                                        worksheet.Column(3).Width = 24;
                                        worksheet.Column(4).Width = 26;
                                        worksheet.Column(5).Width = 33;
                                        worksheet.Column(6).Width = 24;
                                        worksheet.Column(7).Width = 24;
                                        worksheet.Column(8).Width = 24;
                                        worksheet.Column(9).Width = 24;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14&B ";
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);


                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_commissionRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Monitoring Fee
            if (_commissionRpt.ReportName.Equals("Monitoring Fee"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK  in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"
                            declare @ytdFrom date
                            declare @ytdTo date
                            declare @datefromLastweek date
                            declare @datetoLastweek date

                            set @datefromLastweek = DATEADD(d,-7,@datefrom)
                            set @datetoLastweek = DATEADD(d,-7,@dateto)
                            set @ytdFrom = dbo.FWorkingDay(@datefrom,-1)
                            set @ytdto = dbo.FWorkingDay(@dateto,-1)

                            if object_id('tempdb..#tableReport', 'u') is not null drop table #tableReport 
                            create table #tableReport
                            (
	                            Produk nvarchar(max),
	                            FundTypeName nvarchar(max),
	                            CurrencyID nvarchar(max),
	                            AUM numeric(38,6),
	                            AVGAum numeric(38,6),
	                            AUMWeek numeric(38,6),
	                            AVGAumWeek numeric(38,6),
	                            AUMPercent numeric(10,6),
	                            AVGAUMPercent numeric(10,6),
	                            ManagementFee numeric(32,4),
	                            TrailerFee numeric(32,4),
	                            Nett numeric(32,4),
	                            NettPercent numeric(10,6)
                            )

                            if object_id('tempdb..#tableSelectFundClientPosition', 'u') is not null drop table #tableSelectFundClientPosition 
                            create table #tableSelectFundClientPosition
                            (
	                            FundPK int,
	                            Aum numeric(32,8),
	                            AUMDays int,
	                            AVGAum numeric(32,8),
	                            CurrencyPK int
                            )
                            CREATE CLUSTERED INDEX indx_tableSelectFundClientPosition ON #tableSelectFundClientPosition (FundPK);

                            if object_id('tempdb..#tableSelectUnit', 'u') is not null drop table #tableSelectUnit 
                            create table #tableSelectUnit
                            (
	                            FundClientPK int,
	                            FundPK int,
	                            UnitAmount numeric(32,8),
	                            date date
                            )
                            CREATE CLUSTERED INDEX indx_tableSelectUnit ON #tableSelectUnit (FundClientPK,FundPK);

                            if object_id('tempdb..#tableSelectNAV', 'u') is not null drop table #tableSelectNAV 
                            create table #tableSelectNAV
                            (
	                            FundPK int,
	                            NAV numeric(32,8),
	                            date date
                            )
                            CREATE CLUSTERED INDEX indx_tableSelectNAV ON #tableSelectNAV (FundPK);

                            if object_id('tempdb..#tableSelectMfee', 'u') is not null drop table #tableSelectMfee 
                            create table #tableSelectMfee
                            (
	                            FundPK int,
	                            Mfee numeric(32,8),
	                            AgentFee numeric(32,8)
                            )
                            CREATE CLUSTERED INDEX indx_tableSelectMfee ON #tableSelectMfee (FundPK);

                            if object_id('tempdb..#tableSelectMfeeLastWeek', 'u') is not null drop table #tableSelectMfeeLastWeek 
                            create table #tableSelectMfeeLastWeek
                            (
	                            FundPK int,
	                            Nett numeric(32,8)
                            )
                            CREATE CLUSTERED INDEX indx_tableSelectMfeeLastWeek ON #tableSelectMfeeLastWeek (FundPK);

                            if object_id('tempdb..#tableSelectAUM', 'u') is not null drop table #tableSelectAUM 
                            create table #tableSelectAUM
                            (
	                            FundPK int,
	                            AUM numeric(32,8),
	                            AUMWeek numeric(32,8)
                            )
                            CREATE CLUSTERED INDEX indx_tableSelectAUM ON #tableSelectAUM (FundPK);

                            if object_id('tempdb..#tableRate', 'u') is not null drop table #tableRate 
                            create table #tableRate
                            (
	                            date date,
	                            CurrencyRate numeric(10,4)
                            )
                            CREATE CLUSTERED INDEX indx_tableRate ON #tableRate (date);

                            if object_id('tempdb..#tableSelectFundClientPositionLastWeek', 'u') is not null drop table #tableSelectFundClientPositionLastWeek 
                            create table #tableSelectFundClientPositionLastWeek
                            (
	                            FundPK int,
	                            Aum numeric(32,8),
	                            AUMDays int,
	                            AVGAum numeric(32,8),
	                            CurrencyPK int
                            )
                            CREATE CLUSTERED INDEX indx_tableSelectFundClientPositionLastWeek ON #tableSelectFundClientPositionLastWeek (FundPK);

                            insert into #tableSelectMfee
                            select A.FundPK,sum(isnull(MFee,0)) Mfee,sum(isnull(AgentFee,0)) AgentFee from DailyDataForCommissionRptNew A
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            where MFeeDate between @datefrom and @dateto and B.CurrencyPK = 1
                            " + _paramFund + @" 
                            group by A.FundPK

                            insert into #tableSelectMfeeLastWeek
                            select A.FundPK,sum(isnull(MFee,0) - isnull(AgentFee,0)) Nett from DailyDataForCommissionRptNew A
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            where MFeeDate between @datefromLastweek and @datetoLastweek and B.CurrencyPK = 1
                            " + _paramFund + @"
                            group by A.FundPK

                            --selected week
                            begin
	                            insert into #tableSelectFundClientPosition(FundPK,AUMDays,CurrencyPK)
	                            select A.FundPK,count(distinct date),CurrencyPK from FundClientPosition A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                            where Date between @ytdFrom and @ytdto and B.CurrencyPK = 1 
	                            " + _paramFund + @"
	                            group by A.FundPK,CurrencyPK

	                            insert into #tableSelectUnit
	                            select FundClientPK,A.FundPK,UnitAmount,dbo.FWorkingDay(date,1) from FundClientPosition A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2) 
	                             where Date between @ytdFrom and @ytdto and B.CurrencyPK = 1
	                             " + _paramFund + @"

	                            insert into #tableSelectNAV
	                            select A.FundPK,A.NAV,date from CloseNAV A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                             where Date between @datefrom and @dateto  and A.status = 2 and B.CurrencyPK = 1
	                             " + _paramFund + @"

	                            update A set A.AUM = B.AUM, A.AVGAum = B.Aum / A.AUMDays from #tableSelectFundClientPosition A left join
	                            (
	                            select A.FundPK,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) AUM from #tableSelectUnit A
	                            left join #tableSelectNAV B on A.FundPK = B.FundPK and A.date = B.date
	                            group by A.FundPK
	                            ) B on A.FundPK = B.FundPK

	                            update A set A.AUM = B.AUM from #tableSelectFundClientPosition A left join
	                            (
		                            select A.FundPK,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) AUM from #tableSelectUnit A
		                            left join #tableSelectNAV B on A.FundPK = B.FundPK and A.date = B.date
		                            where A.date = @dateto
		                            group by A.FundPK
	                            ) B on A.FundPK = B.FundPK

                            end


                            --lastweek
                            begin
	                            set @ytdFrom = dbo.FWorkingDay(@datefromLastweek,-1)
	                            set @ytdto = dbo.FWorkingDay(@datetoLastweek,-1)


	                            delete #tableSelectUnit
	                            delete #tableSelectNAV


	                            insert into #tableSelectUnit
	                            select FundClientPK,A.FundPK,UnitAmount,dbo.FWorkingDay(date,1) from FundClientPosition A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2) 
	                             where Date between @ytdFrom and @ytdto and B.CurrencyPK = 1
	                             " + _paramFund + @"


	                            insert into #tableSelectNAV
	                            select A.FundPK,A.NAV,date from CloseNAV A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                             where Date between @datefromLastweek and @datetoLastweek  and A.status = 2 and B.CurrencyPK = 1
	                            " + _paramFund + @" 

	                            insert into #tableSelectFundClientPositionLastWeek(FundPK,AUMDays,CurrencyPK)
	                            select A.FundPK,count(distinct date),CurrencyPK from FundClientPosition A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2) 
	                            where Date between @ytdFrom and @ytdto and B.CurrencyPK = 1
	                            " + _paramFund + @"
	                            group by A.FundPK,CurrencyPK

	                            update A set A.AUM = B.AUM, A.AVGAum = B.Aum / A.AUMDays from #tableSelectFundClientPositionLastWeek A left join
	                            (
	                            select A.FundPK,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) AUM from #tableSelectUnit A
	                            left join #tableSelectNAV B on A.FundPK = B.FundPK and A.date = B.date
	                            group by A.FundPK
	                            ) B on A.FundPK = B.FundPK

	                            update A set A.AUM = B.AUM from #tableSelectFundClientPositionLastWeek A left join
	                            (
		                            select A.FundPK,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) AUM from #tableSelectUnit A
		                            left join #tableSelectNAV B on A.FundPK = B.FundPK and A.date = B.date
		                            where A.date = @datetoLastweek
		                            group by A.FundPK
	                            ) B on A.FundPK = B.FundPK
                            end



                            insert into #tableReport
                            select C.Name Produk,D.DescOne FundTypeName,E.ID CurrencyID,A.Aum,A.AVGAum, isnull(B.Aum,0) AUMweek, isnull(B.AVGAum,0) AVGAUMweek,case when isnull(B.Aum,0) = 0 then 0 else (A.Aum - B.AUM) / B.AUM end AUMPercent,case when isnull(B.AVGAum,0) = 0 then 0 else  (A.AVGAum-B.AVGAum) / B.AVGAum end AVGAUMPercent,F.Mfee ManagementFee,F.AgentFee TrailerFee,Mfee-AgentFee Nett,case when isnull(G.Nett,0) = 0 then 0 else ((Mfee-AgentFee)-G.Nett) / G.Nett end NettPercent from #tableSelectFundClientPosition A
                            left join #tableSelectFundClientPositionLastWeek B on A.FundPK = B.FundPK
                            left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
                            left join MasterValue D on C.Type = D.Code and D.ID = 'FundType' and D.status in (1,2)
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.status in (1,2)
                            left join #tableSelectMfee F on A.FundPK = F.FundPK
                            left join #tableSelectMfeeLastWeek G on A.FundPK = G.FundPK

                            --USD
                            delete #tableSelectMfee
                            delete #tableSelectFundClientPosition
                            delete #tableSelectUnit
                            delete #tableSelectNAV
                            delete #tableSelectFundClientPositionLastWeek
                            delete #tableSelectMfeeLastWeek
                            delete #tableSelectAUM

                            set @ytdFrom = dbo.FWorkingDay(@datefrom,-1)
                            set @ytdto = dbo.FWorkingDay(@dateto,-1)

                            insert into #tableSelectMfee
                            select A.FundPK,sum(isnull(MFee,0) *  isnull(C.Rate,1) ) Mfee,sum(isnull(AgentFee,0) *  isnull(C.Rate,1) ) AgentFee from DailyDataForCommissionRptNew A
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and A.MFeeDate = C.Date and C.Status = 2
                            where MFeeDate between @datefrom and @dateto and B.CurrencyPK = 2
                            " + _paramFund + @"
                            group by A.FundPK

                            insert into #tableSelectMfeeLastWeek
                            select A.FundPK,sum((isnull(MFee,0) - isnull(AgentFee,0)) * isnull(C.Rate,1))  Nett from DailyDataForCommissionRptNew A
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and A.MFeeDate = C.Date and C.Status = 2
                            where MFeeDate between @datefromLastweek and @datetoLastweek and B.CurrencyPK = 2
                            " + _paramFund + @"
                            group by A.FundPK

                            --selected week
                            begin
	                            insert into #tableSelectFundClientPosition(FundPK,AUMDays,CurrencyPK)
	                            select A.FundPK,count(distinct date),CurrencyPK from FundClientPosition A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                            where Date between @ytdFrom and @ytdto and B.CurrencyPK = 2
	                            " + _paramFund + @"
	                            group by A.FundPK,CurrencyPK

	                            insert into #tableSelectUnit
	                            select FundClientPK,A.FundPK,UnitAmount,dbo.FWorkingDay(date,1) from FundClientPosition A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2) 
	                             where Date between @ytdFrom and @ytdto and B.CurrencyPK = 2
	                            " + _paramFund + @"

	                            insert into #tableSelectNAV
	                            select A.FundPK,A.NAV * C.Rate,A.date from CloseNAV A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                            left join CurrencyRate C on A.Date = C.Date and B.CurrencyPK = C.CurrencyPK and C.Status = 2
	                             where A.Date between @datefrom and @dateto  and A.status = 2 and B.CurrencyPK = 2
	                            " + _paramFund + @"

	                            update A set A.AUM = B.AUM, A.AVGAum = B.Aum / A.AUMDays from #tableSelectFundClientPosition A left join
	                            (
	                            select A.FundPK,FundClientPK,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) AUM from #tableSelectUnit A
	                            left join #tableSelectNAV B on A.FundPK = B.FundPK and A.date = B.date
	                            group by A.FundPK,A.FundClientPK
	                            ) B on A.FundPK = B.FundPK

	                            update A set A.AUM = B.AUM from #tableSelectFundClientPosition A left join
	                            (
		                            select A.FundPK,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) AUM from #tableSelectUnit A
		                            left join #tableSelectNAV B on A.FundPK = B.FundPK and A.date = B.date
		                            where A.date = @dateto
		                            group by A.FundPK
	                            ) B on A.FundPK = B.FundPK
                            end


                            --lastweek
                            begin
	                            set @ytdFrom = dbo.FWorkingDay(@datefromLastweek,-1)
	                            set @ytdto = dbo.FWorkingDay(@datetoLastweek,-1)


	                            delete #tableSelectUnit
	                            delete #tableSelectNAV


	                            insert into #tableSelectUnit
	                            select FundClientPK,A.FundPK,UnitAmount,dbo.FWorkingDay(date,1) from FundClientPosition A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2) and B.CurrencyPK = 2
	                             where Date between @ytdFrom and @ytdto
	                            " + _paramFund + @"

	                            insert into #tableSelectNAV
	                            select A.FundPK,A.NAV * C.Rate,A.date from CloseNAV A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                            left join CurrencyRate C on A.Date = C.Date and B.CurrencyPK = C.CurrencyPK and C.Status = 2
	                             where A.Date between @datefromLastweek and @datetoLastweek  and A.status = 2 and B.CurrencyPK = 2
	                             " + _paramFund + @"

	                            insert into #tableSelectFundClientPositionLastWeek(FundPK,AUMDays,CurrencyPK)
	                            select A.FundPK,count(distinct date),CurrencyPK from FundClientPosition A 
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2) 
	                            where Date between @ytdFrom and @ytdto and B.CurrencyPK = 2
	                            " + _paramFund + @"
	                            group by A.FundPK,CurrencyPK

	                            update A set A.AUM = B.AUM, A.AVGAum = B.Aum / A.AUMDays from #tableSelectFundClientPositionLastWeek A left join
	                            (
	                            select A.FundPK,FundClientPK,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) AUM from #tableSelectUnit A
	                            left join #tableSelectNAV B on A.FundPK = B.FundPK and A.date = B.date
	                            group by A.FundPK,A.FundClientPK
	                            ) B on A.FundPK = B.FundPK

	                            update A set A.AUM = B.AUM from #tableSelectFundClientPositionLastWeek A left join
	                            (
		                            select A.FundPK,sum(isnull(A.UnitAmount,0) * isnull(B.NAV,0)) AUM from #tableSelectUnit A
		                            left join #tableSelectNAV B on A.FundPK = B.FundPK and A.date = B.date
		                            where A.date = @datetoLastweek
		                            group by A.FundPK
	                            ) B on A.FundPK = B.FundPK
                            end


                            insert into #tableReport
                            select C.Name Produk,D.DescOne FundTypeName,E.ID CurrencyID,A.Aum,A.AVGAum, isnull(B.Aum,0) AUMweek, isnull(B.AVGAum,0) AVGAUMweek,case when isnull(B.Aum,0) = 0 then 0 else (A.Aum - B.AUM) / B.AUM end AUMPercent,case when isnull(B.AVGAum,0) = 0 then 0 else  (A.AVGAum-B.AVGAum) / B.AVGAum end AVGAUMPercent,F.Mfee ManagementFee,F.AgentFee TrailerFee,Mfee-AgentFee Nett,case when isnull(G.Nett,0) = 0 then 0 else ((Mfee-AgentFee)-G.Nett) / G.Nett end NettPercent from #tableSelectFundClientPosition A
                            left join #tableSelectFundClientPositionLastWeek B on A.FundPK = B.FundPK
                            left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
                            left join MasterValue D on C.Type = D.Code and D.ID = 'FundType' and D.status in (1,2)
                            left join Currency E on A.CurrencyPK = E.CurrencyPK and E.status in (1,2)
                            left join #tableSelectMfee F on A.FundPK = F.FundPK
                            left join #tableSelectMfeeLastWeek G on A.FundPK = G.FundPK



                            select * from #tableReport
                            order by CurrencyID,FundTypeName,Produk
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "MonitoringFee" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "MonitoringFee" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Monitoring Fee");

                                        int incRowExcel = 1;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("dd MMMM yyyy") + " - " + Convert.ToDateTime(_commissionRpt.ValueDateTo).ToString("dd MMMM yyyy");
                                        worksheet.Cells["B" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Value = "PRODUK";

                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "Avg AUM";

                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "AUM";

                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "AUM week T-1";

                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "AVG AUM week T-1";

                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "AUM %";

                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "AVG AUM %";

                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "Management Fee";

                                        worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "Trailer Fee";

                                        worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "NETT";

                                        worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "NETT %";


                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Row(incRowExcel).Height = 30;



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<MonitoringFee> rList = new List<MonitoringFee>();
                                        while (dr0.Read())
                                        {
                                            MonitoringFee rSingle = new MonitoringFee();
                                            rSingle.Produk = dr0["Produk"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Produk"]);
                                            rSingle.FundTypeName = dr0["FundTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundTypeName"]);
                                            //rSingle.FundType = dr0["FundTypeCode"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["FundTypeCode"]);
                                            //rSingle.Currency = dr0["Currency"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["Currency"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.AvgAUM = dr0["AvgAUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AvgAUM"]);
                                            rSingle.AUM = dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.AUMweek = dr0["AUMweek"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMweek"]);
                                            rSingle.AVGAUMweek = dr0["AVGAUMweek"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AVGAUMweek"]);
                                            rSingle.AUMPercent = dr0["AUMPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMPercent"]);
                                            rSingle.AVGAUMPercent = dr0["AVGAUMPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AVGAUMPercent"]);
                                            rSingle.ManagementFee = dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]);
                                            rSingle.TrailerFee = dr0["TrailerFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TrailerFee"]);
                                            rSingle.Nett = dr0["Nett"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Nett"]);
                                            rSingle.NettPercent = dr0["NettPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NettPercent"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByAccountID =
                                            from r in rList
                                            orderby r.Currency ascending
                                            group r by new { r.CurrencyID, r.FundTypeName } into rGroup
                                            select rGroup;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "IDR";

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        incRowExcel++;
                                        int _counter = 0;

                                        foreach (var rsHeader in GroupByAccountID)
                                        {


                                            if (rsHeader.Key.CurrencyID == "IDR")
                                            {
                                                //worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.CurrencyID;
                                                if (rsHeader.Key.CurrencyID == "IDR")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundTypeName;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Color.SetColor(Color.White);
                                                    worksheet.Cells[incRowExcel, 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells[incRowExcel, 1].Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                                                    //incRowExcel++;
                                                }

                                            }

                                            else
                                            {
                                                if (_counter == 0)
                                                {
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "USD";
                                                    _counter++;
                                                    incRowExcel++;
                                                }

                                                if (rsHeader.Key.CurrencyID == "USD")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundTypeName;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Color.SetColor(Color.White);
                                                    worksheet.Cells[incRowExcel, 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells[incRowExcel, 1].Style.Fill.BackgroundColor.SetColor(Color.DarkGoldenrod);
                                                }


                                            }


                                            incRowExcel++;


                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Produk;

                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AvgAUM;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUMweek;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AVGAUMweek;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUMPercent;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.AVGAUMPercent;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ManagementFee;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TrailerFee;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Nett;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.NettPercent;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";


                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }



                                            //incRowExcel++;



                                        }
                                        worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                        worksheet.Column(1).Width = 80;
                                        worksheet.Column(2).Width = 24;
                                        worksheet.Column(3).Width = 24;
                                        worksheet.Column(4).Width = 26;
                                        worksheet.Column(5).Width = 33;
                                        worksheet.Column(6).Width = 24;
                                        worksheet.Column(7).Width = 24;
                                        worksheet.Column(8).Width = 24;
                                        worksheet.Column(9).Width = 24;
                                        worksheet.Column(10).Width = 24;
                                        worksheet.Column(11).Width = 24;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14&B ";
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);


                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_commissionRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            else
            {
                return false;
            }
        }
        public Boolean GenerateReportCompliance(string _userID, OjkRpt _OjkRpt)
        {

            #region NKPD
            if (_OjkRpt.ReportName.Equals("3"))
            {
                #region Txt
                if (_OjkRpt.DownloadMode == "Txt")
                {
                    try
                    {
                        DateTime _datetimeNow = DateTime.Now;
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"
                         create table #Text(                    
[ResultText] [nvarchar](1000)  NULL                    
) 

Declare @FinalDate datetime
set @FinalDate =dbo.FWorkingDay(@Date ,-1)

declare @FCP table
(
Date datetime,
FundClientPK int,
FundPK int,
InvestorType int,
Nationality nvarchar(20),Tipe int,
Karakteristik int,
Negara nvarchar(20),
SID nvarchar(50),
CashAmount numeric(22,4),
UnitAmount numeric(22,8)

)


create table #TableNasabah
(
	FundPK int,

	JumPerorangan int,
	DanaPerorangan numeric(32,8),
	JumLembagaPE int,
	DanaLembagaPE numeric(32,8),
	JumLembagaDAPEN int,
	DanaLembagaDAPEN numeric(32,8),
	JumLembagaAsuransi int,
	DanaLembagaAsuransi numeric(32,8),
	JumLembagaBank int,
	DanaLembagaBank numeric(32,8),
	JumLembagaSwasta int,
	DanaLembagaSwasta numeric(32,8),
	JumLembagaBUMN int,
	DanaLembagaBUMN numeric(32,8),
	JumLembagaBUMD int,
	DanaLembagaBUMD numeric(32,8),
	JumLembagaYayasan  int,
	DanaLembagaYayasan  numeric(32,8),
	JumLembagaKoperasi int,
	DanaLembagaKoperasi numeric(32,8),
	JumLembagaLainnya int,
	DanaLembagaLainnya numeric(32,8),

	JumAsingPerorangan int,
	DanaAsingPerorangan numeric(32,8),
	JumAsingLembagaPE int,
	DanaAsingLembagaPE numeric(32,8),
	JumAsingLembagaDAPEN int,
	DanaAsingLembagaDAPEN numeric(32,8),
	JumAsingLembagaAsuransi int,
	DanaAsingLembagaAsuransi numeric(32,8),
	JumAsingLembagaBank int,
	DanaAsingLembagaBank numeric(32,8),
	JumAsingLembagaSwasta int,
	DanaAsingLembagaSwasta numeric(32,8),
	JumAsingLembagaBUMN int,
	DanaAsingLembagaBUMN numeric(32,8),
	JumAsingLembagaBUMD int,
	DanaAsingLembagaBUMD numeric(32,8),
	JumAsingLembagaYayasan  int,
	DanaAsingLembagaYayasan  numeric(32,8),
	JumAsingLembagaKoperasi int,
	DanaAsingLembagaKoperasi numeric(32,8),
	JumAsingLembagaLainnya int,
	DanaAsingLembagaLainnya numeric(32,8),
)


insert into @FCP
-- APERD INDIVIDU
select A.Col1,0 FundClientPK,C.FundPK,B.col5,B.Col9,'','','',B.Col4,sum(case when A.col14 = '' then 0 else cast(A.Col14 as numeric(32,8)) end) Cash,sum(case when A.col14 = '' then 0 else cast(A.Col13 as numeric(32,8)) end) Unit from ZAPERD_BALANCE_POSITION A
inner join ZAPERD_CLIENT_IND B on A.col4 = B.col4 and A.col11 = B.col2
inner join Fund C on A.Col5 = C.SInvestCode and C.status in (1,2)
where A.col11 <> (select ID from Company where status = 2) and CONVERT(datetime, A.col1, 120) = @Date and A.Col14 <> '' --and C.FundPK = 59 
group by A.Col1,C.FundPK,B.col4,B.col2,B.col5,B.col9
union all
-- APERD INSTITUSI
select A.Col1,0 FundClientPK,C.FundPK,B.col5,'',B.col18,B.col19,B.col7,B.Col4,sum(case when A.col14 = '' then 0 else cast(A.Col14 as numeric(32,8)) end) Cash,sum(case when A.col14 = '' then 0 else cast(A.Col13 as numeric(32,8)) end) Unit from ZAPERD_BALANCE_POSITION A
inner join ZAPERD_CLIENT_INS B on A.col4 = B.col4 --and A.col11 = B.col2
inner join Fund C on A.Col5 = C.SInvestCode and C.status in (1,2)
where A.col11 <> (select ID from Company where status = 2) and CONVERT(datetime, A.col1, 120) = @Date and A.Col14 <> ''  --and C.FundPK = 59
group by A.Col1,C.FundPK,B.col4,B.col5,B.Col18,B.Col19,B.Col7
union all
-- NON APERD
select Date,A.FundClientPK,FundPK,B.InvestorType,isnull(B.Nationality,''),B.Tipe,B.Karakteristik,B.Negara,B.SID,CashAmount,UnitAmount from FundClientPosition A
left join FundClient  B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
where SACode = '' and date = @FinalDate --and A.FundPk = 59

-- buat ngecek pake ini
--select * from @FCP 
--where fundpk = 59 and UnitAmount > 0 --and InvestorType = 1 and Nationality = 'ID' --and sid = 'CPD2508L2492573'--
--order by fundclientpk


insert into #TableNasabah (FundPK)
select distinct FundPK from @FCP

begin

	update A set A.JumPerorangan = isnull(B.jumlahperorangan,0), A.DanaPerorangan = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT (*) jumlahperorangan,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS 
	where CS.InvestorType = 1 and CS.nationality= 'ID'
	and CS.UnitAmount > 0     
	--and g.SACode = ''      
	group by CS.FundPK 
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaPE = isnull(B.jumlahPerusahaanEfek,0), A.DanaLembagaPE = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahPerusahaanEfek,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS   
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.Tipe IN (7,5)   
	--and CG.SACode = ''               
            
	group by CS.FundPK
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaDAPEN = isnull(B.jumlahDanaPensiun,0), A.DanaLembagaDAPEN = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahDanaPensiun,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS        
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.Tipe=6   
	--and CG.SACode = ''            
            
	group by CS.FundPK  
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaAsuransi = isnull(B.jumlahAsuransi,0), A.DanaLembagaAsuransi = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahAsuransi,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS        
	where CS.InvestorType = 2  and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=4    
	--and CG.SACode = ''           
            
	group by CS.FundPK 
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaBank = isnull(B.jumlahBank,0), A.DanaLembagaBank = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahBank,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS        
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=3 and CS.Karakteristik IN (1,2,3,4,5,6,7)   
	--and CG.SACode = ''              
            
	group by CS.FundPK       
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaSwasta = isnull(B.jumlahPT,0), A.DanaLembagaSwasta = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahPT,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS           
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=1 and CS.Karakteristik IN (2,3,4,5,6,7,8)    
	--and CG.SACode = ''          
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaBUMN  = isnull(B.jumlahBUMN,0), A.DanaLembagaBUMN = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahBUMN,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS      
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=1 and CS.Karakteristik = 1     
	--and CG.SACode = ''          
            
	group by CS.FundPK           
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaBUMD  = isnull(B.jumlahBUMD,0), A.DanaLembagaBUMD = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahBUMD,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS            
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=8 and CS.Karakteristik = 1   
	--and CG.SACode = ''              
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaYayasan  = isnull(B.jumlahYayasan,0), A.DanaLembagaYayasan = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahYayasan,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS         
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=2   
	--and CG.SACode = ''             
            
	group by CS.FundPK          
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaKoperasi  = isnull(B.jumlahKoperasi,0), A.DanaLembagaKoperasi = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahKoperasi,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS 
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe= 3 and CS.Karakteristik = 8  
	--and CG.SACode = ''            
            
	group by CS.FundPK          
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaLainnya  = isnull(B.jumlahLembagaNasionalLainnya,0), A.DanaLembagaLainnya = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahLembagaNasionalLainnya,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS      
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe in (8)  and CS.Karakteristik in (2,3,4,5,6,7,8) 
	--and CG.SACode = ''              
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	--asing
	update A set A.JumAsingPerorangan = isnull(B.JumlahAsingperorangan,0), A.DanaAsingPerorangan = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT (*) JumlahAsingperorangan,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS   
	where CS.InvestorType = 1 and CS.nationality<> 'ID'
	and CS.UnitAmount > 1     
	--and g.SACode = ''      
	group by CS.FundPK 
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaPE = isnull(B.JumlahAsingPerusahaanEfek,0), A.DanaAsingLembagaPE = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingPerusahaanEfek,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS      
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.Tipe IN (7,5)   
	--and CG.SACode = ''               
            
	group by CS.FundPK
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaDAPEN = isnull(B.JumlahAsingDanaAsingPensiun,0), A.DanaAsingLembagaDAPEN = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingDanaAsingPensiun,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS   
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.Tipe=6   
	--and CG.SACode = ''            
            
	group by CS.FundPK  
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaAsuransi = isnull(B.JumlahAsingAsuransi,0), A.DanaAsingLembagaAsuransi = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingAsuransi,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS  
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=4    
	--and CG.SACode = ''           
            
	group by CS.FundPK 
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaBank = isnull(B.JumlahAsingBank,0), A.DanaAsingLembagaBank = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingBank,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS  
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=3 and CS.Karakteristik IN (1,2,3,4,5,6,7)   
	--and CG.SACode = ''              
            
	group by CS.FundPK       
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaSwasta = isnull(B.JumlahAsingPT,0), A.DanaAsingLembagaSwasta = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingPT,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS     
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=1 and CS.Karakteristik IN (2,3,4,5,6,7,8)    
	--and CG.SACode = ''          
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaBUMN  = isnull(B.JumlahAsingBUMN,0), A.DanaAsingLembagaBUMN = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingBUMN,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS  
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=1 and CS.Karakteristik = 1     
	--and CG.SACode = ''          
            
	group by CS.FundPK           
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaBUMD  = isnull(B.JumlahAsingBUMD,0), A.DanaAsingLembagaBUMD = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingBUMD,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS 
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=8 and CS.Karakteristik = 1   
	--and CG.SACode = ''              
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaYayasan  = isnull(B.JumlahAsingYayasan,0), A.DanaAsingLembagaYayasan = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingYayasan,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS  
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=2   
	--and CG.SACode = ''             
            
	group by CS.FundPK          
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaKoperasi  = isnull(B.JumlahAsingKoperasi,0), A.DanaAsingLembagaKoperasi = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingKoperasi,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS     
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe= 3 and CS.Karakteristik = 8  
	--and CG.SACode = ''            
            
	group by CS.FundPK          
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaLainnya  = isnull(B.JumlahAsingLembagaNasionalLainnya,0), A.DanaAsingLembagaLainnya = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingLembagaNasionalLainnya,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS   
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe in (8)  and CS.Karakteristik in (2,3,4,5,6,7,8)
	--and CG.SACode = ''              
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

end

insert into #Text

SELECT  RTRIM(LTRIM(isnull(FU.Name,'')))  
+ '|' + RTRIM(LTRIM(isnull(FU.NKPDName,'')))            
+ '|' +  RTRIM(LTRIM(isnull(AAA.NKPDCode,'')))         
+ '|' +  RTRIM(LTRIM(isnull(D.JumPerorangan,0)))
+ '|' +  CAST(CAST(isnull(D.DanaPerorangan * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                   
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaPE,0)))  
+ '|' +  CAST(CAST(isnull(D.DanaLembagaPE * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                    
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaDAPEN,0)))   
+ '|' +  CAST(CAST(isnull(D.DanaLembagaDAPEN * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                 
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaAsuransi,0)))  
+ '|' +  CAST(CAST(isnull(D.DanaLembagaAsuransi * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                  
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaBank,0)))    
+ '|' +  CAST(CAST(isnull(D.DanaLembagaBank * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))             
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaSwasta,0)))   
+ '|' +  CAST(CAST(isnull(D.DanaLembagaSwasta * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                   
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaBUMN,0)))    
+ '|' +  CAST(CAST(isnull(D.DanaLembagaBUMN * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                 
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaBUMD,0)))       
+ '|' +  CAST(CAST(isnull(D.DanaLembagaBUMD * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))             
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaYayasan,0)))  
+ '|' +  CAST(CAST(isnull(D.DanaLembagaYayasan * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                     
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaKoperasi,0)))    
+ '|' +  CAST(CAST(isnull(D.DanaLembagaKoperasi * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                 
+ '|' +  RTRIM(LTRIM(isnull(D.JumLembagaLainnya,0))) 
+ '|' +  CAST(CAST(isnull(D.DanaLembagaLainnya * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))             
            
------ASING            
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingPerorangan,0)))     
+ '|' +  CAST(CAST(isnull(D.DanaAsingPerorangan * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))               
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaPE,0))) 
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaPE * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                    
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaDAPEN,0)))   
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaDAPEN * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                 
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaAsuransi,0)))  
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaAsuransi * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                  
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaBank,0)))    
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaBank * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))             
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaSwasta,0)))   
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaSwasta * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                   
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaBUMN,0)))   
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaBUMN * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                  
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaBUMD,0)))     
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaBUMD * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))              
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaYayasan,0))) 
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaYayasan * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                     
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaKoperasi,0)))    
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaKoperasi * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                 
+ '|' +  RTRIM(LTRIM(isnull(D.JumAsingLembagaLainnya,0)))
+ '|' +  CAST(CAST(isnull(D.DanaAsingLembagaLainnya * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))     


+ '|' +  CAST( CASE WHEN (ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0) + 
isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)) = 0 THEN 0 ELSE 
((ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0)) 
/ (ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0) + 
isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)
)) * 100 END AS NVARCHAR(30)) 



+ '|' +  CAST( CASE WHEN (ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0) + 
isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)) = 0 THEN 0 ELSE 
((isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)) 
/ (ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0) + 
isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)
)) * 100 END AS NVARCHAR(30)) 
	         
             
FROM @FCP FCP                      
LEFT JOIN FundClient FC ON FCP.FundClientPK = FC.FundClientPK and FC.Status in  (1,2)           
LEFT JOIN Fund FU on FCP.FundPK = FU.FundPK and FU.Status = 2 
LEFT JOIN FundCashRef ZZZ on FU.FundPK = ZZZ.FundPK and ZZZ.Status = 2
LEFT JOIN BankBranch ZZ on FU.BankBranchPK = ZZ.BankBranchPK and ZZ.Status = 2  
LEFT JOIN Bank AAA on ZZ.BankPK = AAA.BankPK and AAA.Status = 2  
----LEFT JOIN FundCashRef FCR on FU.FundPK = FCR.FundPK and FCR.Status = 2         
LEFT JOIN #TableNasabah D ON FCP.FundPK = D.FundPK
             
left Join Fund Z on FCp.FundPK = Z.FundPK and Z.Status in  (1,2)        
WHERE 
Z.FundTypeInternal <> 2  -- BUKAN KPD     
--and FCP.FundPk = 59   

GROUP BY FU.Name,FU.NKPDName,AAA.NKPDCode,FCP.FundPK ,
JumPerorangan,
	DanaPerorangan,
	JumLembagaPE,
	DanaLembagaPE,
	JumLembagaDAPEN,
	DanaLembagaDAPEN,
	JumLembagaAsuransi,
	DanaLembagaAsuransi,
	JumLembagaBank,
	DanaLembagaBank,
	JumLembagaSwasta,
	DanaLembagaSwasta,
	JumLembagaBUMN,
	DanaLembagaBUMN,
	JumLembagaBUMD,
	DanaLembagaBUMD,
	JumLembagaYayasan,
	DanaLembagaYayasan,
	JumLembagaKoperasi,
	DanaLembagaKoperasi,
	JumLembagaLainnya,
	DanaLembagaLainnya,
	JumAsingPerorangan,
	DanaAsingPerorangan,
	JumAsingLembagaPE,
	DanaAsingLembagaPE,
	JumAsingLembagaDAPEN,
	DanaAsingLembagaDAPEN,
	JumAsingLembagaAsuransi,
	DanaAsingLembagaAsuransi,
	JumAsingLembagaBank,
	DanaAsingLembagaBank,
	JumAsingLembagaSwasta,
	DanaAsingLembagaSwasta,
	JumAsingLembagaBUMN,
	DanaAsingLembagaBUMN,
	JumAsingLembagaBUMD,
	DanaAsingLembagaBUMD,
	JumAsingLembagaYayasan,
	DanaAsingLembagaYayasan,
	JumAsingLembagaKoperasi,
	DanaAsingLembagaKoperasi,
	JumAsingLembagaLainnya,
	DanaAsingLembagaLainnya


	select * from #text

                                 ";
                                cmd.Parameters.AddWithValue("@Date", _OjkRpt.Date);

                                using (SqlDataReader dr = cmd.ExecuteReader())
                                {
                                    if (dr.HasRows)
                                    {


                                        string filePath = Tools.ARIATextPath + "NKPD01.txt";
                                        FileInfo txtFile = new FileInfo(filePath);
                                        if (txtFile.Exists)
                                        {
                                            txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        }

                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                        {
                                            while (dr.Read())
                                            {

                                                file.WriteLine(Convert.ToString(dr["ResultText"]));
                                            }
                                            return true;
                                            //return Tools.HtmlARIATextPath + "NKPD01.txt";
                                        }

                                    }
                                    return true;
                                }

                            }
                        }
                    }
                    catch (Exception err)
                    {
                        throw err;
                    }

                } // bates

                #endregion

                #region Excel
                else
                {

                    if (_OjkRpt.ReportName.Equals("3"))
                    {
                        try
                        {
                            using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                            {
                                DbCon.Open();
                                using (SqlCommand cmd = DbCon.CreateCommand())
                                {

                                    string _paramFund = "";
                                    _paramFund = "left(@FundFrom,charindex('-',@FundFrom) - 1) ";


                                    cmd.CommandText =
                                    @"
Declare @FinalDate datetime
set @FinalDate =dbo.FWorkingDay(@Date ,-1)

declare @FCP table
(
Date datetime,
FundClientPK int,
FundPK int,
InvestorType int,
Nationality nvarchar(20),Tipe int,
Karakteristik int,
Negara nvarchar(20),
SID nvarchar(50),
CashAmount numeric(22,4),
UnitAmount numeric(22,8)

)


create table #TableNasabah
(
	FundPK int,

	JumPerorangan int,
	DanaPerorangan numeric(32,8),
	JumLembagaPE int,
	DanaLembagaPE numeric(32,8),
	JumLembagaDAPEN int,
	DanaLembagaDAPEN numeric(32,8),
	JumLembagaAsuransi int,
	DanaLembagaAsuransi numeric(32,8),
	JumLembagaBank int,
	DanaLembagaBank numeric(32,8),
	JumLembagaSwasta int,
	DanaLembagaSwasta numeric(32,8),
	JumLembagaBUMN int,
	DanaLembagaBUMN numeric(32,8),
	JumLembagaBUMD int,
	DanaLembagaBUMD numeric(32,8),
	JumLembagaYayasan  int,
	DanaLembagaYayasan  numeric(32,8),
	JumLembagaKoperasi int,
	DanaLembagaKoperasi numeric(32,8),
	JumLembagaLainnya int,
	DanaLembagaLainnya numeric(32,8),

	JumAsingPerorangan int,
	DanaAsingPerorangan numeric(32,8),
	JumAsingLembagaPE int,
	DanaAsingLembagaPE numeric(32,8),
	JumAsingLembagaDAPEN int,
	DanaAsingLembagaDAPEN numeric(32,8),
	JumAsingLembagaAsuransi int,
	DanaAsingLembagaAsuransi numeric(32,8),
	JumAsingLembagaBank int,
	DanaAsingLembagaBank numeric(32,8),
	JumAsingLembagaSwasta int,
	DanaAsingLembagaSwasta numeric(32,8),
	JumAsingLembagaBUMN int,
	DanaAsingLembagaBUMN numeric(32,8),
	JumAsingLembagaBUMD int,
	DanaAsingLembagaBUMD numeric(32,8),
	JumAsingLembagaYayasan  int,
	DanaAsingLembagaYayasan  numeric(32,8),
	JumAsingLembagaKoperasi int,
	DanaAsingLembagaKoperasi numeric(32,8),
	JumAsingLembagaLainnya int,
	DanaAsingLembagaLainnya numeric(32,8),
)


insert into @FCP
-- APERD INDIVIDU
select A.Col1,0 FundClientPK,C.FundPK,B.col5,B.Col9,'','','',B.Col4,sum(case when A.col14 = '' then 0 else cast(A.Col14 as numeric(32,8)) end) Cash,sum(case when A.col14 = '' then 0 else cast(A.Col13 as numeric(32,8)) end) Unit from ZAPERD_BALANCE_POSITION A
inner join ZAPERD_CLIENT_IND B on A.col4 = B.col4 and A.col11 = B.col2
inner join Fund C on A.Col5 = C.SInvestCode and C.status in (1,2)
where A.col11 <> (select ID from Company where status = 2) and CONVERT(datetime, A.col1, 120) = @Date and A.Col14 <> '' --and C.FundPK = 59 
group by A.Col1,C.FundPK,B.col4,B.col2,B.col5,B.col9
union all
-- APERD INSTITUSI
select A.Col1,0 FundClientPK,C.FundPK,B.col5,'',B.col18,B.col19,B.col7,B.Col4,sum(case when A.col14 = '' then 0 else cast(A.Col14 as numeric(32,8)) end) Cash,sum(case when A.col14 = '' then 0 else cast(A.Col13 as numeric(32,8)) end) Unit from ZAPERD_BALANCE_POSITION A
inner join ZAPERD_CLIENT_INS B on A.col4 = B.col4 --and A.col11 = B.col2
inner join Fund C on A.Col5 = C.SInvestCode and C.status in (1,2)
where A.col11 <> (select ID from Company where status = 2) and CONVERT(datetime, A.col1, 120) = @Date and A.Col14 <> ''  --and C.FundPK = 59
group by A.Col1,C.FundPK,B.col4,B.col5,B.Col18,B.Col19,B.Col7
union all
-- NON APERD
select Date,A.FundClientPK,FundPK,B.InvestorType,isnull(B.Nationality,''),B.Tipe,B.Karakteristik,B.Negara,B.SID,CashAmount,UnitAmount from FundClientPosition A
left join FundClient  B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
where SACode = '' and date = @FinalDate --and A.FundPk = 59

-- buat ngecek pake ini
--select * from @FCP 
--where fundpk = 59 and UnitAmount > 0 --and InvestorType = 1 and Nationality = 'ID' --and sid = 'CPD2508L2492573'--
--order by fundclientpk


insert into #TableNasabah (FundPK)
select distinct FundPK from @FCP

begin

	update A set A.JumPerorangan = isnull(B.jumlahperorangan,0), A.DanaPerorangan = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT (*) jumlahperorangan,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS 
	where CS.InvestorType = 1 and CS.nationality= 'ID'
	and CS.UnitAmount > 0     
	--and g.SACode = ''      
	group by CS.FundPK 
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaPE = isnull(B.jumlahPerusahaanEfek,0), A.DanaLembagaPE = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahPerusahaanEfek,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS   
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.Tipe IN (7,5)   
	--and CG.SACode = ''               
            
	group by CS.FundPK
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaDAPEN = isnull(B.jumlahDanaPensiun,0), A.DanaLembagaDAPEN = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahDanaPensiun,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS        
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.Tipe=6   
	--and CG.SACode = ''            
            
	group by CS.FundPK  
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaAsuransi = isnull(B.jumlahAsuransi,0), A.DanaLembagaAsuransi = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahAsuransi,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS        
	where CS.InvestorType = 2  and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=4    
	--and CG.SACode = ''           
            
	group by CS.FundPK 
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaBank = isnull(B.jumlahBank,0), A.DanaLembagaBank = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahBank,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS        
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=3 and CS.Karakteristik IN (1,2,3,4,5,6,7)   
	--and CG.SACode = ''              
            
	group by CS.FundPK       
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaSwasta = isnull(B.jumlahPT,0), A.DanaLembagaSwasta = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahPT,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS           
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=1 and CS.Karakteristik IN (2,3,4,5,6,7,8)    
	--and CG.SACode = ''          
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaBUMN  = isnull(B.jumlahBUMN,0), A.DanaLembagaBUMN = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahBUMN,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS      
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=1 and CS.Karakteristik = 1     
	--and CG.SACode = ''          
            
	group by CS.FundPK           
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaBUMD  = isnull(B.jumlahBUMD,0), A.DanaLembagaBUMD = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahBUMD,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS            
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=8 and CS.Karakteristik = 1   
	--and CG.SACode = ''              
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaYayasan  = isnull(B.jumlahYayasan,0), A.DanaLembagaYayasan = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahYayasan,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS         
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=2   
	--and CG.SACode = ''             
            
	group by CS.FundPK          
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaKoperasi  = isnull(B.jumlahKoperasi,0), A.DanaLembagaKoperasi = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahKoperasi,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS 
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe= 3 and CS.Karakteristik = 8  
	--and CG.SACode = ''            
            
	group by CS.FundPK          
	) B on A.FundPK = B.FundPK

	update A set A.JumLembagaLainnya  = isnull(B.jumlahLembagaNasionalLainnya,0), A.DanaLembagaLainnya = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) jumlahLembagaNasionalLainnya,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS      
	where CS.InvestorType = 2 and CS.Negara= 'ID'            
	and CS.UnitAmount > 0 and CS.tipe in (8)  and CS.Karakteristik in (2,3,4,5,6,7,8) 
	--and CG.SACode = ''              
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	--asing
	update A set A.JumAsingPerorangan = isnull(B.JumlahAsingperorangan,0), A.DanaAsingPerorangan = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT (*) JumlahAsingperorangan,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS   
	where CS.InvestorType = 1 and CS.nationality<> 'ID'
	and CS.UnitAmount > 1     
	--and g.SACode = ''      
	group by CS.FundPK 
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaPE = isnull(B.JumlahAsingPerusahaanEfek,0), A.DanaAsingLembagaPE = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingPerusahaanEfek,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS      
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.Tipe IN (7,5)   
	--and CG.SACode = ''               
            
	group by CS.FundPK
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaDAPEN = isnull(B.JumlahAsingDanaAsingPensiun,0), A.DanaAsingLembagaDAPEN = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingDanaAsingPensiun,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS   
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.Tipe=6   
	--and CG.SACode = ''            
            
	group by CS.FundPK  
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaAsuransi = isnull(B.JumlahAsingAsuransi,0), A.DanaAsingLembagaAsuransi = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingAsuransi,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS  
	where CS.InvestorType = 2and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=4    
	--and CG.SACode = ''           
            
	group by CS.FundPK 
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaBank = isnull(B.JumlahAsingBank,0), A.DanaAsingLembagaBank = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingBank,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS  
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=3 and CS.Karakteristik IN (1,2,3,4,5,6,7)   
	--and CG.SACode = ''              
            
	group by CS.FundPK       
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaSwasta = isnull(B.JumlahAsingPT,0), A.DanaAsingLembagaSwasta = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingPT,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS     
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=1 and CS.Karakteristik IN (2,3,4,5,6,7,8)    
	--and CG.SACode = ''          
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaBUMN  = isnull(B.JumlahAsingBUMN,0), A.DanaAsingLembagaBUMN = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingBUMN,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS  
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=1 and CS.Karakteristik = 1     
	--and CG.SACode = ''          
            
	group by CS.FundPK           
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaBUMD  = isnull(B.JumlahAsingBUMD,0), A.DanaAsingLembagaBUMD = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingBUMD,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS 
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=8 and CS.Karakteristik = 1   
	--and CG.SACode = ''              
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaYayasan  = isnull(B.JumlahAsingYayasan,0), A.DanaAsingLembagaYayasan = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingYayasan,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS  
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe=2   
	--and CG.SACode = ''             
            
	group by CS.FundPK          
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaKoperasi  = isnull(B.JumlahAsingKoperasi,0), A.DanaAsingLembagaKoperasi = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingKoperasi,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS     
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe= 3 and CS.Karakteristik = 8  
	--and CG.SACode = ''            
            
	group by CS.FundPK          
	) B on A.FundPK = B.FundPK

	update A set A.JumAsingLembagaLainnya  = isnull(B.JumlahAsingLembagaNasionalLainnya,0), A.DanaAsingLembagaLainnya = isnull(B.UnitAmount,0) from #TableNasabah A
	left join (
	select COUNT(*) JumlahAsingLembagaNasionalLainnya,sum(UnitAmount) UnitAmount, CS.FundPK from @FCP CS   
	where CS.InvestorType = 2 and CS.Negara<> 'ID'            
	and CS.UnitAmount > 0 and CS.tipe in (8)  and CS.Karakteristik in (2,3,4,5,6,7,8)
	--and CG.SACode = ''              
            
	group by CS.FundPK         
	) B on A.FundPK = B.FundPK

end


SELECT  RTRIM(LTRIM(isnull(FU.Name,''))) FundName,  
RTRIM(LTRIM(isnull(FU.NKPDName,''))) KodeProduk            
, RTRIM(LTRIM(isnull(AAA.NKPDCode,''))) KodeBK         
, RTRIM(LTRIM(isnull(D.JumPerorangan,0))) JmlNasabahPerorangan
, CAST(CAST(isnull(D.DanaPerorangan * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahPerorangan                   
, RTRIM(LTRIM(isnull(D.JumLembagaPE,0)))    JmlNasabahLembagaPE
, CAST(CAST(isnull(D.DanaLembagaPE * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))  DanaNasabahLembagaPE                   
, RTRIM(LTRIM(isnull(D.JumLembagaDAPEN,0)))    JmlNasabahLembagaDAPEN
, CAST(CAST(isnull(D.DanaLembagaDAPEN * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaDAPEN                 
, RTRIM(LTRIM(isnull(D.JumLembagaAsuransi,0)))    JmlNasabahLembagaAsuransi
, CAST(CAST(isnull(D.DanaLembagaAsuransi * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaAsuransi                  
, RTRIM(LTRIM(isnull(D.JumLembagaBank,0)))        JmlNasabahLembagaBank
, CAST(CAST(isnull(D.DanaLembagaBank * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaBank             
, RTRIM(LTRIM(isnull(D.JumLembagaSwasta,0)))     JmlNasabahLembagaSwasta
, CAST(CAST(isnull(D.DanaLembagaSwasta * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaSwasta                   
, RTRIM(LTRIM(isnull(D.JumLembagaBUMN,0)))     JmlNasabahLembagaBUMN
, CAST(CAST(isnull(D.DanaLembagaBUMN * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaBUMN                 
, RTRIM(LTRIM(isnull(D.JumLembagaBUMD,0)))        JmlNasabahLembagaBUMD
, CAST(CAST(isnull(D.DanaLembagaBUMD * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaBUMD             
, RTRIM(LTRIM(isnull(D.JumLembagaYayasan,0)))  JmlNasabahLembagaYayasan
, CAST(CAST(isnull(D.DanaLembagaYayasan * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaYayasan                    
, RTRIM(LTRIM(isnull(D.JumLembagaKoperasi,0)))     JmlNasabahLembagaKoperasi
, CAST(CAST(isnull(D.DanaLembagaKoperasi * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaKoperasi                
, RTRIM(LTRIM(isnull(D.JumLembagaLainnya,0))) JmlNasabahLembagaLainnya
, CAST(CAST(isnull(D.DanaLembagaLainnya * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaLainnya            
            
------ASING            
, RTRIM(LTRIM(isnull(D.JumAsingPerorangan,0))) JmlAsingPerorangan     
, CAST(CAST(isnull(D.DanaAsingPerorangan * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingPerorangan               
, RTRIM(LTRIM(isnull(D.JumAsingLembagaPE,0)))    JmlAsingLembagaPE
, CAST(CAST(isnull(D.DanaAsingLembagaPE * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))  DanaAsingLembagaPE                   
, RTRIM(LTRIM(isnull(D.JumAsingLembagaDAPEN,0)))    JmlAsingLembagaDAPEN
, CAST(CAST(isnull(D.DanaAsingLembagaDAPEN * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaDAPEN                 
, RTRIM(LTRIM(isnull(D.JumAsingLembagaAsuransi,0)))    JmlAsingLembagaAsuransi
, CAST(CAST(isnull(D.DanaAsingLembagaAsuransi * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaAsuransi                  
, RTRIM(LTRIM(isnull(D.JumAsingLembagaBank,0)))        JmlAsingLembagaBank
, CAST(CAST(isnull(D.DanaAsingLembagaBank * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaBank             
, RTRIM(LTRIM(isnull(D.JumAsingLembagaSwasta,0)))     JmlAsingLembagaSwasta
, CAST(CAST(isnull(D.DanaAsingLembagaSwasta * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaSwasta                   
, RTRIM(LTRIM(isnull(D.JumAsingLembagaBUMN,0)))     JmlAsingLembagaBUMN
, CAST(CAST(isnull(D.DanaAsingLembagaBUMN * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaBUMN                 
, RTRIM(LTRIM(isnull(D.JumAsingLembagaBUMD,0)))        JmlAsingLembagaBUMD
, CAST(CAST(isnull(D.DanaAsingLembagaBUMD * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaBUMD             
, RTRIM(LTRIM(isnull(D.JumAsingLembagaYayasan,0)))  JmlAsingLembagaYayasan
, CAST(CAST(isnull(D.DanaAsingLembagaYayasan * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaYayasan                    
, RTRIM(LTRIM(isnull(D.JumAsingLembagaKoperasi,0)))     JmlAsingLembagaKoperasi
, CAST(CAST(isnull(D.DanaAsingLembagaKoperasi * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaKoperasi                
, RTRIM(LTRIM(isnull(D.JumAsingLembagaLainnya,0))) JmlAsingLembagaLainnya
, CAST(CAST(isnull(D.DanaAsingLembagaLainnya * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaLainnya    


, CAST( CASE WHEN (ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0) + 
isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)) = 0 THEN 0 ELSE 
((ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0)) 
/ (ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0) + 
isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)
)) * 100 END AS NVARCHAR(30)) InvestasiDN



, CAST( CASE WHEN (ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0) + 
isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)) = 0 THEN 0 ELSE 
((isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)) 
/ (ISNULL(D.DanaPerorangan,0) + isnull(D.DanaLembagaPE,0) + isnull(D.DanaLembagaDAPEN,0) + isnull(D.DanaLembagaAsuransi,0) 
+ isnull(D.DanaLembagaBank,0) + isnull(D.DanaLembagaSwasta,0) + isnull(D.DanaLembagaBUMN,0) + isnull(D.DanaLembagaBUMD,0) + isnull(D.DanaLembagaYayasan,0) 
+ isnull(D.DanaLembagaKoperasi,0) + isnull(D.DanaLembagaLainnya,0) + 
isnull(D.DanaAsingPerorangan,0) + isnull(D.DanaAsingLembagaPE,0) + isnull(D.DanaAsingLembagaDAPEN,0) + isnull(D.DanaAsingLembagaAsuransi,0) 
+ isnull(D.DanaAsingLembagaBank,0) + isnull(D.DanaAsingLembagaSwasta,0) + isnull(D.DanaAsingLembagaBUMN,0) + isnull(D.DanaAsingLembagaBUMD,0) + isnull(D.DanaAsingLembagaYayasan,0) 
+ isnull(D.DanaAsingLembagaKoperasi,0) + isnull(D.DanaAsingLembagaLainnya,0)
)) * 100 END AS NVARCHAR(30)) InvestasiLN
	         
             
FROM @FCP FCP                      
LEFT JOIN FundClient FC ON FCP.FundClientPK = FC.FundClientPK and FC.Status in  (1,2)           
LEFT JOIN Fund FU on FCP.FundPK = FU.FundPK and FU.Status = 2 
LEFT JOIN FundCashRef ZZZ on FU.FundPK = ZZZ.FundPK and ZZZ.Status = 2
LEFT JOIN BankBranch ZZ on FU.BankBranchPK = ZZ.BankBranchPK and ZZ.Status = 2  
LEFT JOIN Bank AAA on ZZ.BankPK = AAA.BankPK and AAA.Status = 2  
----LEFT JOIN FundCashRef FCR on FU.FundPK = FCR.FundPK and FCR.Status = 2         
LEFT JOIN #TableNasabah D ON FCP.FundPK = D.FundPK
             
left Join Fund Z on FCp.FundPK = Z.FundPK and Z.Status in  (1,2)        
WHERE 
Z.FundTypeInternal <> 2  -- BUKAN KPD     
--and FCP.FundPk = 59   

GROUP BY FU.Name,FU.NKPDName,AAA.NKPDCode,FCP.FundPK ,
JumPerorangan,
	DanaPerorangan,
	JumLembagaPE,
	DanaLembagaPE,
	JumLembagaDAPEN,
	DanaLembagaDAPEN,
	JumLembagaAsuransi,
	DanaLembagaAsuransi,
	JumLembagaBank,
	DanaLembagaBank,
	JumLembagaSwasta,
	DanaLembagaSwasta,
	JumLembagaBUMN,
	DanaLembagaBUMN,
	JumLembagaBUMD,
	DanaLembagaBUMD,
	JumLembagaYayasan,
	DanaLembagaYayasan,
	JumLembagaKoperasi,
	DanaLembagaKoperasi,
	JumLembagaLainnya,
	DanaLembagaLainnya,
	JumAsingPerorangan,
	DanaAsingPerorangan,
	JumAsingLembagaPE,
	DanaAsingLembagaPE,
	JumAsingLembagaDAPEN,
	DanaAsingLembagaDAPEN,
	JumAsingLembagaAsuransi,
	DanaAsingLembagaAsuransi,
	JumAsingLembagaBank,
	DanaAsingLembagaBank,
	JumAsingLembagaSwasta,
	DanaAsingLembagaSwasta,
	JumAsingLembagaBUMN,
	DanaAsingLembagaBUMN,
	JumAsingLembagaBUMD,
	DanaAsingLembagaBUMD,
	JumAsingLembagaYayasan,
	DanaAsingLembagaYayasan,
	JumAsingLembagaKoperasi,
	DanaAsingLembagaKoperasi,
	JumAsingLembagaLainnya,
	DanaAsingLembagaLainnya

";

                                    cmd.CommandTimeout = 0;
                                    cmd.Parameters.AddWithValue("@date", _OjkRpt.Date);


                                    using (SqlDataReader dr0 = cmd.ExecuteReader())
                                    {
                                        if (!dr0.HasRows)
                                        {
                                            return false;
                                        }
                                        else
                                        {
                                            string filePath = Tools.ReportsPath + "NKPD" + "_" + _userID + ".xlsx";
                                            string pdfPath = Tools.ReportsPath + "NKPD" + "_" + _userID + ".pdf";
                                            FileInfo excelFile = new FileInfo(filePath);
                                            if (excelFile.Exists)
                                            {
                                                excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                                excelFile = new FileInfo(filePath);
                                            }


                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                            using (ExcelPackage package = new ExcelPackage(excelFile))
                                            {
                                                package.Workbook.Properties.Title = "NKPDReport";
                                                package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                                package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                                package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                                package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                                package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("NKPD Report");


                                                //ATUR DATA GROUPINGNYA DULU
                                                List<NKPD> rList = new List<NKPD>();
                                                while (dr0.Read())
                                                {
                                                    NKPD rSingle = new NKPD();
                                                    rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                                    rSingle.KodeProduk = Convert.ToString(dr0["KodeProduk"]);
                                                    rSingle.KodeBK = Convert.ToString(dr0["KodeBK"]);
                                                    rSingle.JmlNasabahPerorangan = Convert.ToInt32(dr0["JmlNasabahPerorangan"]);
                                                    rSingle.DanaNasabahPerorangan = Convert.ToDecimal(dr0["DanaNasabahPerorangan"]);
                                                    rSingle.JmlNasabahLembagaPE = Convert.ToInt32(dr0["JmlNasabahLembagaPE"]);
                                                    rSingle.DanaNasabahLembagaPE = Convert.ToDecimal(dr0["DanaNasabahLembagaPE"]);
                                                    rSingle.JmlNasabahLembagaDAPEN = Convert.ToInt32(dr0["JmlNasabahLembagaDAPEN"]);
                                                    rSingle.DanaNasabahLembagaDAPEN = Convert.ToDecimal(dr0["DanaNasabahLembagaDAPEN"]);
                                                    rSingle.JmlNasabahLembagaAsuransi = Convert.ToInt32(dr0["JmlNasabahLembagaAsuransi"]);
                                                    rSingle.DanaNasabahLembagaAsuransi = Convert.ToDecimal(dr0["DanaNasabahLembagaAsuransi"]);
                                                    rSingle.JmlNasabahLembagaBank = Convert.ToInt32(dr0["JmlNasabahLembagaBank"]);
                                                    rSingle.DanaNasabahLembagaBank = Convert.ToDecimal(dr0["DanaNasabahLembagaBank"]);
                                                    rSingle.JmlNasabahLembagaSwasta = Convert.ToInt32(dr0["JmlNasabahLembagaSwasta"]);
                                                    rSingle.DanaNasabahLembagaSwasta = Convert.ToDecimal(dr0["DanaNasabahLembagaSwasta"]);
                                                    rSingle.JmlNasabahLembagaBUMN = Convert.ToInt32(dr0["JmlNasabahLembagaBUMN"]);
                                                    rSingle.DanaNasabahLembagaBUMN = Convert.ToDecimal(dr0["DanaNasabahLembagaBUMN"]);
                                                    rSingle.JmlNasabahLembagaBUMD = Convert.ToInt32(dr0["JmlNasabahLembagaBUMD"]);
                                                    rSingle.DanaNasabahLembagaBUMD = Convert.ToDecimal(dr0["DanaNasabahLembagaBUMD"]);
                                                    rSingle.JmlNasabahLembagaYayasan = Convert.ToInt32(dr0["JmlNasabahLembagaYayasan"]);
                                                    rSingle.DanaNasabahLembagaYayasan = Convert.ToDecimal(dr0["DanaNasabahLembagaYayasan"]);
                                                    rSingle.JmlNasabahLembagaKoperasi = Convert.ToInt32(dr0["JmlNasabahLembagaKoperasi"]);
                                                    rSingle.DanaNasabahLembagaKoperasi = Convert.ToDecimal(dr0["DanaNasabahLembagaKoperasi"]);
                                                    rSingle.JmlNasabahLembagaLainnya = Convert.ToInt32(dr0["JmlNasabahLembagaLainnya"]);
                                                    rSingle.DanaNasabahLembagaLainnya = Convert.ToDecimal(dr0["DanaNasabahLembagaLainnya"]);
                                                    rSingle.JmlAsingPerorangan = Convert.ToInt32(dr0["JmlAsingPerorangan"]);
                                                    rSingle.DanaAsingPerorangan = Convert.ToDecimal(dr0["DanaAsingPerorangan"]);
                                                    rSingle.JmlAsingLembagaPE = Convert.ToInt32(dr0["JmlAsingLembagaPE"]);
                                                    rSingle.DanaAsingLembagaPE = Convert.ToDecimal(dr0["DanaAsingLembagaPE"]);
                                                    rSingle.JmlAsingLembagaDAPEN = Convert.ToInt32(dr0["JmlAsingLembagaDAPEN"]);
                                                    rSingle.DanaAsingLembagaDAPEN = Convert.ToDecimal(dr0["DanaAsingLembagaDAPEN"]);
                                                    rSingle.JmlAsingLembagaAsuransi = Convert.ToInt32(dr0["JmlAsingLembagaAsuransi"]);
                                                    rSingle.DanaAsingLembagaAsuransi = Convert.ToDecimal(dr0["DanaAsingLembagaAsuransi"]);
                                                    rSingle.JmlAsingLembagaBank = Convert.ToInt32(dr0["JmlAsingLembagaBank"]);
                                                    rSingle.DanaAsingLembagaBank = Convert.ToDecimal(dr0["DanaAsingLembagaBank"]);
                                                    rSingle.JmlAsingLembagaSwasta = Convert.ToInt32(dr0["JmlAsingLembagaSwasta"]);
                                                    rSingle.DanaAsingLembagaSwasta = Convert.ToDecimal(dr0["DanaAsingLembagaSwasta"]);
                                                    rSingle.JmlAsingLembagaBUMN = Convert.ToInt32(dr0["JmlAsingLembagaBUMN"]);
                                                    rSingle.DanaAsingLembagaBUMN = Convert.ToDecimal(dr0["DanaAsingLembagaBUMN"]);
                                                    rSingle.JmlAsingLembagaBUMD = Convert.ToInt32(dr0["JmlAsingLembagaBUMD"]);
                                                    rSingle.DanaAsingLembagaBUMD = Convert.ToDecimal(dr0["DanaAsingLembagaBUMD"]);
                                                    rSingle.JmlAsingLembagaYayasan = Convert.ToInt32(dr0["JmlAsingLembagaYayasan"]);
                                                    rSingle.DanaAsingLembagaYayasan = Convert.ToDecimal(dr0["DanaAsingLembagaYayasan"]);
                                                    rSingle.JmlAsingLembagaKoperasi = Convert.ToInt32(dr0["JmlAsingLembagaKoperasi"]);
                                                    rSingle.DanaAsingLembagaKoperasi = Convert.ToDecimal(dr0["DanaAsingLembagaKoperasi"]);
                                                    rSingle.JmlAsingLembagaLainnya = Convert.ToInt32(dr0["JmlAsingLembagaLainnya"]);
                                                    rSingle.DanaAsingLembagaLainnya = Convert.ToDecimal(dr0["DanaAsingLembagaLainnya"]);
                                                    rSingle.InvestasiDN = Convert.ToDecimal(dr0["InvestasiDN"]);
                                                    rSingle.InvestasiLN = Convert.ToDecimal(dr0["InvestasiLN"]);
                                                    rList.Add(rSingle);

                                                }

                                                var QueryByClientID =
                                                 from r in rList
                                                 group r by new { } into rGroup
                                                 select rGroup;

                                                int incRowExcel = 0;
                                                int _startRowDetail = 0;
                                                foreach (var rsHeader in QueryByClientID)
                                                {

                                                    incRowExcel++;
                                                    //Row A = 2
                                                    int RowA = incRowExcel;
                                                    int RowB = incRowExcel + 1;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.WrapText = true;

                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSteelBlue);

                                                    worksheet.Cells[incRowExcel, 1].Value = "Nama Produk";
                                                    worksheet.Cells[incRowExcel, 2].Value = "Kode Produk";
                                                    worksheet.Cells[incRowExcel, 3].Value = "Kode BK";
                                                    worksheet.Cells[incRowExcel, 4].Value = "Jumlah Nasabah Nasional Perorangan";
                                                    worksheet.Cells[incRowExcel, 5].Value = "Dana Kelolaan Nasabah Nasional Perorangan";
                                                    worksheet.Cells[incRowExcel, 6].Value = "Jumlah Nasabah Nasional Lembaga PE";
                                                    worksheet.Cells[incRowExcel, 7].Value = "Dana Kelolaan Nasabah Nasional Lembaga PE";
                                                    worksheet.Cells[incRowExcel, 8].Value = "Jumlah Nasabah Nasional Lembaga DAPEN";
                                                    worksheet.Cells[incRowExcel, 9].Value = "Dana Kelolaan Nasabah Nasional Lembaga DAPEN";
                                                    worksheet.Cells[incRowExcel, 10].Value = "Jumlah Nasabah Nasional Lembaga Asuransi";
                                                    worksheet.Cells[incRowExcel, 11].Value = "Dana Kelolaan Nasabah Nasional Lembaga Asuransi";
                                                    worksheet.Cells[incRowExcel, 12].Value = "Jumlah Nasabah Nasional Lembaga Bank";
                                                    worksheet.Cells[incRowExcel, 13].Value = "Dana Kelolaan Nasabah Nasional Lembaga Bank";
                                                    worksheet.Cells[incRowExcel, 14].Value = "Jumlah Nasabah Nasional Lembaga Perus. Swasta/ Patungan";
                                                    worksheet.Cells[incRowExcel, 15].Value = "Dana Kelolaan Nasabah Nasional Lembaga Perus. Swasta/ Patungan";
                                                    worksheet.Cells[incRowExcel, 16].Value = "Jumlah Nasabah Nasional Lembaga BUMN";
                                                    worksheet.Cells[incRowExcel, 17].Value = "Dana Kelolaan Nasabah Nasional Lembaga BUMN";
                                                    worksheet.Cells[incRowExcel, 18].Value = "Jumlah Nasabah Nasional Lembaga BUMD";
                                                    worksheet.Cells[incRowExcel, 19].Value = "Dana Kelolaan Nasabah Nasional Lembaga BUMD";
                                                    worksheet.Cells[incRowExcel, 20].Value = "Jumlah Nasabah Nasional Lembaga Yayasan";
                                                    worksheet.Cells[incRowExcel, 21].Value = "Dana Kelolaan Nasabah Nasional Lembaga Yayasan";
                                                    worksheet.Cells[incRowExcel, 22].Value = "Jumlah Nasabah Nasional Lembaga Koperasi";
                                                    worksheet.Cells[incRowExcel, 23].Value = "Dana Kelolaan Nasabah Nasional Lembaga Koperasi";
                                                    worksheet.Cells[incRowExcel, 24].Value = "Jumlah Nasabah Nasional Lembaga Lainnya";
                                                    worksheet.Cells[incRowExcel, 25].Value = "Dana Kelolaan Nasabah Nasional Lembaga Lainnya";
                                                    worksheet.Cells[incRowExcel, 26].Value = "Jumlah Nasabah Asing Perorangan";
                                                    worksheet.Cells[incRowExcel, 27].Value = "Dana Kelolaan Nasabah Asing Perorangan";
                                                    worksheet.Cells[incRowExcel, 28].Value = "Jumlah Nasabah Asing Lembaga PE";
                                                    worksheet.Cells[incRowExcel, 29].Value = "Dana Kelolaan Nasabah Asing Lembaga PE";
                                                    worksheet.Cells[incRowExcel, 30].Value = "Jumlah Nasabah Asing Lembaga DAPEN";
                                                    worksheet.Cells[incRowExcel, 31].Value = "Dana Kelolaan Nasabah Asing Lembaga DAPEN";
                                                    worksheet.Cells[incRowExcel, 32].Value = "Jumlah Nasabah Asing Lembaga Asuransi";
                                                    worksheet.Cells[incRowExcel, 33].Value = "Dana Kelolaan Nasabah Asing Lembaga Asuransi";
                                                    worksheet.Cells[incRowExcel, 34].Value = "Jumlah Nasabah Asing Lembaga Bank";
                                                    worksheet.Cells[incRowExcel, 35].Value = "Dana Kelolaan Nasabah Asing Lembaga Bank";
                                                    worksheet.Cells[incRowExcel, 36].Value = "Jumlah Nasabah Asing Lembaga Perus. Swasta/ Patungan";
                                                    worksheet.Cells[incRowExcel, 37].Value = "Dana Kelolaan Nasabah Asing Lembaga Perus. Swasta/ Patungan";
                                                    worksheet.Cells[incRowExcel, 38].Value = "Jumlah Nasabah Asing Lembaga BUMN";
                                                    worksheet.Cells[incRowExcel, 39].Value = "Dana Kelolaan Nasabah Asing Lembaga BUMN";
                                                    worksheet.Cells[incRowExcel, 40].Value = "Jumlah Nasabah Asing Lembaga BUMD";
                                                    worksheet.Cells[incRowExcel, 41].Value = "Dana Kelolaan Nasabah Asing Lembaga BUMD";
                                                    worksheet.Cells[incRowExcel, 42].Value = "Jumlah Nasabah Asing Lembaga Yayasan";
                                                    worksheet.Cells[incRowExcel, 43].Value = "Dana Kelolaan Nasabah Asing Lembaga Yayasan";
                                                    worksheet.Cells[incRowExcel, 44].Value = "Jumlah Nasabah Asing Lembaga Koperasi";
                                                    worksheet.Cells[incRowExcel, 45].Value = "Dana Kelolaan Nasabah Asing Lembaga Koperasi";
                                                    worksheet.Cells[incRowExcel, 46].Value = "Jumlah Nasabah Asing Lembaga Lainnya";
                                                    worksheet.Cells[incRowExcel, 47].Value = "Dana Kelolaan Nasabah Asing Lembaga Lainnya";
                                                    worksheet.Cells[incRowExcel, 48].Value = "Investasi DN";
                                                    worksheet.Cells[incRowExcel, 49].Value = "Investasi LN";
                                                    worksheet.Cells[incRowExcel, 50].Value = "Total";

                                                    incRowExcel++;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = "(1)";
                                                    worksheet.Cells[incRowExcel, 2].Value = "(2)";
                                                    worksheet.Cells[incRowExcel, 3].Value = "(3)";
                                                    worksheet.Cells[incRowExcel, 4].Value = "(4)";
                                                    worksheet.Cells[incRowExcel, 5].Value = "(5)";
                                                    worksheet.Cells[incRowExcel, 6].Value = "(6)";
                                                    worksheet.Cells[incRowExcel, 7].Value = "(7)";
                                                    worksheet.Cells[incRowExcel, 8].Value = "(8)";
                                                    worksheet.Cells[incRowExcel, 9].Value = "(9)";
                                                    worksheet.Cells[incRowExcel, 10].Value = "(10)";
                                                    worksheet.Cells[incRowExcel, 11].Value = "(11)";
                                                    worksheet.Cells[incRowExcel, 12].Value = "(12)";
                                                    worksheet.Cells[incRowExcel, 13].Value = "(13)";
                                                    worksheet.Cells[incRowExcel, 14].Value = "(14)";
                                                    worksheet.Cells[incRowExcel, 15].Value = "(15)";
                                                    worksheet.Cells[incRowExcel, 16].Value = "(16)";
                                                    worksheet.Cells[incRowExcel, 17].Value = "(17)";
                                                    worksheet.Cells[incRowExcel, 18].Value = "(18)";
                                                    worksheet.Cells[incRowExcel, 19].Value = "(19)";
                                                    worksheet.Cells[incRowExcel, 20].Value = "(20)";
                                                    worksheet.Cells[incRowExcel, 21].Value = "(21)";
                                                    worksheet.Cells[incRowExcel, 22].Value = "(22)";
                                                    worksheet.Cells[incRowExcel, 23].Value = "(23)";
                                                    worksheet.Cells[incRowExcel, 24].Value = "(24)";
                                                    worksheet.Cells[incRowExcel, 25].Value = "(25)";
                                                    worksheet.Cells[incRowExcel, 26].Value = "(26)";
                                                    worksheet.Cells[incRowExcel, 27].Value = "(27)";
                                                    worksheet.Cells[incRowExcel, 28].Value = "(28)";
                                                    worksheet.Cells[incRowExcel, 29].Value = "(29)";
                                                    worksheet.Cells[incRowExcel, 30].Value = "(30)";
                                                    worksheet.Cells[incRowExcel, 31].Value = "(31)";
                                                    worksheet.Cells[incRowExcel, 32].Value = "(32)";
                                                    worksheet.Cells[incRowExcel, 33].Value = "(33)";
                                                    worksheet.Cells[incRowExcel, 34].Value = "(34)";
                                                    worksheet.Cells[incRowExcel, 35].Value = "(35)";
                                                    worksheet.Cells[incRowExcel, 36].Value = "(36)";
                                                    worksheet.Cells[incRowExcel, 37].Value = "(37)";
                                                    worksheet.Cells[incRowExcel, 38].Value = "(38)";
                                                    worksheet.Cells[incRowExcel, 39].Value = "(39)";
                                                    worksheet.Cells[incRowExcel, 40].Value = "(40)";
                                                    worksheet.Cells[incRowExcel, 41].Value = "(41)";
                                                    worksheet.Cells[incRowExcel, 42].Value = "(42)";
                                                    worksheet.Cells[incRowExcel, 43].Value = "(43)";
                                                    worksheet.Cells[incRowExcel, 44].Value = "(44)";
                                                    worksheet.Cells[incRowExcel, 45].Value = "(45)";
                                                    worksheet.Cells[incRowExcel, 46].Value = "(46)";
                                                    worksheet.Cells[incRowExcel, 47].Value = "(47)";
                                                    worksheet.Cells[incRowExcel, 48].Value = "(48)";

                                                    //area header
                                                    int _endRowDetail = 0;
                                                    int _startRow = incRowExcel;
                                                    incRowExcel++;
                                                    _startRowDetail = incRowExcel;
                                                    foreach (var rsDetail in rsHeader)
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundName;
                                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.KodeProduk;
                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.KodeBK;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.JmlNasabahPerorangan;
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DanaNasabahPerorangan;
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.JmlNasabahLembagaPE;
                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail.DanaNasabahLembagaPE;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.JmlNasabahLembagaDAPEN;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.DanaNasabahLembagaDAPEN;
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.JmlNasabahLembagaAsuransi;
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.DanaNasabahLembagaAsuransi;
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.JmlNasabahLembagaBank;
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.DanaNasabahLembagaBank;
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.JmlNasabahLembagaSwasta;
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.DanaNasabahLembagaSwasta;
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.JmlNasabahLembagaBUMN;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.DanaNasabahLembagaBUMN;
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.JmlNasabahLembagaBUMD;
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.DanaNasabahLembagaBUMD;
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.JmlNasabahLembagaYayasan;
                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.DanaNasabahLembagaYayasan;
                                                        worksheet.Cells[incRowExcel, 22].Value = rsDetail.JmlNasabahLembagaKoperasi;
                                                        worksheet.Cells[incRowExcel, 23].Value = rsDetail.DanaNasabahLembagaKoperasi;
                                                        worksheet.Cells[incRowExcel, 24].Value = rsDetail.JmlNasabahLembagaLainnya;
                                                        worksheet.Cells[incRowExcel, 25].Value = rsDetail.DanaNasabahLembagaLainnya;
                                                        worksheet.Cells[incRowExcel, 26].Value = rsDetail.JmlAsingPerorangan;
                                                        worksheet.Cells[incRowExcel, 27].Value = rsDetail.DanaAsingPerorangan;
                                                        worksheet.Cells[incRowExcel, 28].Value = rsDetail.JmlAsingLembagaPE;
                                                        worksheet.Cells[incRowExcel, 29].Value = rsDetail.DanaAsingLembagaPE;
                                                        worksheet.Cells[incRowExcel, 30].Value = rsDetail.JmlAsingLembagaDAPEN;
                                                        worksheet.Cells[incRowExcel, 31].Value = rsDetail.DanaAsingLembagaDAPEN;
                                                        worksheet.Cells[incRowExcel, 32].Value = rsDetail.JmlAsingLembagaAsuransi;
                                                        worksheet.Cells[incRowExcel, 33].Value = rsDetail.DanaAsingLembagaAsuransi;
                                                        worksheet.Cells[incRowExcel, 34].Value = rsDetail.JmlAsingLembagaBank;
                                                        worksheet.Cells[incRowExcel, 35].Value = rsDetail.DanaAsingLembagaBank;
                                                        worksheet.Cells[incRowExcel, 36].Value = rsDetail.JmlAsingLembagaSwasta;
                                                        worksheet.Cells[incRowExcel, 37].Value = rsDetail.DanaAsingLembagaSwasta;
                                                        worksheet.Cells[incRowExcel, 38].Value = rsDetail.JmlAsingLembagaBUMN;
                                                        worksheet.Cells[incRowExcel, 39].Value = rsDetail.DanaAsingLembagaBUMN;
                                                        worksheet.Cells[incRowExcel, 40].Value = rsDetail.JmlAsingLembagaBUMD;
                                                        worksheet.Cells[incRowExcel, 41].Value = rsDetail.DanaAsingLembagaBUMD;
                                                        worksheet.Cells[incRowExcel, 42].Value = rsDetail.JmlAsingLembagaYayasan;
                                                        worksheet.Cells[incRowExcel, 43].Value = rsDetail.DanaAsingLembagaYayasan;
                                                        worksheet.Cells[incRowExcel, 44].Value = rsDetail.JmlAsingLembagaKoperasi;
                                                        worksheet.Cells[incRowExcel, 45].Value = rsDetail.DanaAsingLembagaKoperasi;
                                                        worksheet.Cells[incRowExcel, 46].Value = rsDetail.JmlAsingLembagaLainnya;
                                                        worksheet.Cells[incRowExcel, 47].Value = rsDetail.DanaAsingLembagaLainnya;
                                                        worksheet.Cells[incRowExcel, 48].Value = rsDetail.InvestasiDN;
                                                        worksheet.Cells[incRowExcel, 49].Value = rsDetail.InvestasiLN;
                                                        worksheet.Cells[incRowExcel, 50].Formula =
                                                        "SUM(E" + incRowExcel + "+G" + incRowExcel + "+I" + incRowExcel + "+K" + incRowExcel + "+M" + incRowExcel +
                                                        "+O" + incRowExcel + "+Q" + incRowExcel + "+S" + incRowExcel + "+U" + incRowExcel + "+W" + incRowExcel + "+Y" + incRowExcel +
                                                        "+AA" + incRowExcel + "+AC" + incRowExcel + "+AE" + incRowExcel + "+AG" + incRowExcel + "+AI" + incRowExcel + "+AK" + incRowExcel +
                                                        "+AM" + incRowExcel + "+AO" + incRowExcel + "+AQ" + incRowExcel + "+AS" + incRowExcel + "+AU" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 50].Calculate();

                                                        _endRowDetail = incRowExcel;

                                                        incRowExcel++;


                                                    }

                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSeaGreen);
                                                    worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 22].Formula = "SUM(V" + _startRowDetail + ":V" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 23].Formula = "SUM(W" + _startRowDetail + ":W" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 24].Formula = "SUM(X" + _startRowDetail + ":X" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 25].Formula = "SUM(Y" + _startRowDetail + ":Y" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 26].Formula = "SUM(Z" + _startRowDetail + ":Z" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 27].Formula = "SUM(AA" + _startRowDetail + ":AA" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 28].Formula = "SUM(AB" + _startRowDetail + ":AB" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 29].Formula = "SUM(AC" + _startRowDetail + ":AC" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 30].Formula = "SUM(AD" + _startRowDetail + ":AD" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 31].Formula = "SUM(AE" + _startRowDetail + ":AE" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 32].Formula = "SUM(AF" + _startRowDetail + ":AF" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 33].Formula = "SUM(AG" + _startRowDetail + ":AG" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 34].Formula = "SUM(AH" + _startRowDetail + ":AH" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 35].Formula = "SUM(AI" + _startRowDetail + ":AI" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 36].Formula = "SUM(AJ" + _startRowDetail + ":AJ" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 37].Formula = "SUM(AK" + _startRowDetail + ":AK" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 38].Formula = "SUM(AL" + _startRowDetail + ":AL" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 39].Formula = "SUM(AM" + _startRowDetail + ":AM" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 40].Formula = "SUM(AN" + _startRowDetail + ":AN" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 41].Formula = "SUM(AO" + _startRowDetail + ":AO" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 42].Formula = "SUM(AP" + _startRowDetail + ":AP" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 43].Formula = "SUM(AQ" + _startRowDetail + ":AQ" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 44].Formula = "SUM(AR" + _startRowDetail + ":AR" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 45].Formula = "SUM(AS" + _startRowDetail + ":AS" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 46].Formula = "SUM(AT" + _startRowDetail + ":AT" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 47].Formula = "SUM(AU" + _startRowDetail + ":AU" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 48].Formula = "SUM(AV" + _startRowDetail + ":AV" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 49].Formula = "SUM(AW" + _startRowDetail + ":AW" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 50].Formula = "SUM(AX" + _startRowDetail + ":AX" + _endRowDetail + ")";
                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Calculate();
                                                    worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Calculate();
                                                    worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Calculate();
                                                    worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Calculate();
                                                    worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Calculate();
                                                    worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Calculate();
                                                    worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Calculate();
                                                    worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Calculate();
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Calculate();
                                                    worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Calculate();
                                                    worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Calculate();
                                                    worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Calculate();
                                                    worksheet.Cells["M" + incRowExcel + ":N" + incRowExcel].Calculate();
                                                    worksheet.Cells["N" + incRowExcel + ":O" + incRowExcel].Calculate();
                                                    worksheet.Cells["O" + incRowExcel + ":P" + incRowExcel].Calculate();
                                                    worksheet.Cells["P" + incRowExcel + ":Q" + incRowExcel].Calculate();
                                                    worksheet.Cells["Q" + incRowExcel + ":R" + incRowExcel].Calculate();
                                                    worksheet.Cells["R" + incRowExcel + ":S" + incRowExcel].Calculate();
                                                    worksheet.Cells["S" + incRowExcel + ":T" + incRowExcel].Calculate();
                                                    worksheet.Cells["T" + incRowExcel + ":U" + incRowExcel].Calculate();
                                                    worksheet.Cells["U" + incRowExcel + ":V" + incRowExcel].Calculate();
                                                    worksheet.Cells["V" + incRowExcel + ":W" + incRowExcel].Calculate();
                                                    worksheet.Cells["W" + incRowExcel + ":X" + incRowExcel].Calculate();
                                                    worksheet.Cells["X" + incRowExcel + ":Y" + incRowExcel].Calculate();
                                                    worksheet.Cells["Z" + incRowExcel + ":Z" + incRowExcel].Calculate();
                                                    worksheet.Cells["AA" + incRowExcel + ":AA" + incRowExcel].Calculate();
                                                    worksheet.Cells["AB" + incRowExcel + ":AB" + incRowExcel].Calculate();
                                                    worksheet.Cells["AC" + incRowExcel + ":AC" + incRowExcel].Calculate();
                                                    worksheet.Cells["AD" + incRowExcel + ":AD" + incRowExcel].Calculate();
                                                    worksheet.Cells["AE" + incRowExcel + ":AE" + incRowExcel].Calculate();
                                                    worksheet.Cells["AF" + incRowExcel + ":AF" + incRowExcel].Calculate();
                                                    worksheet.Cells["AG" + incRowExcel + ":AG" + incRowExcel].Calculate();
                                                    worksheet.Cells["AH" + incRowExcel + ":AH" + incRowExcel].Calculate();
                                                    worksheet.Cells["AI" + incRowExcel + ":AI" + incRowExcel].Calculate();
                                                    worksheet.Cells["AJ" + incRowExcel + ":AJ" + incRowExcel].Calculate();
                                                    worksheet.Cells["AK" + incRowExcel + ":AK" + incRowExcel].Calculate();
                                                    worksheet.Cells["AL" + incRowExcel + ":AL" + incRowExcel].Calculate();
                                                    worksheet.Cells["AM" + incRowExcel + ":AM" + incRowExcel].Calculate();
                                                    worksheet.Cells["AN" + incRowExcel + ":AN" + incRowExcel].Calculate();
                                                    worksheet.Cells["AO" + incRowExcel + ":AO" + incRowExcel].Calculate();
                                                    worksheet.Cells["AP" + incRowExcel + ":AP" + incRowExcel].Calculate();
                                                    worksheet.Cells["AQ" + incRowExcel + ":AQ" + incRowExcel].Calculate();
                                                    worksheet.Cells["AR" + incRowExcel + ":AR" + incRowExcel].Calculate();
                                                    worksheet.Cells["AS" + incRowExcel + ":AS" + incRowExcel].Calculate();
                                                    worksheet.Cells["AT" + incRowExcel + ":AT" + incRowExcel].Calculate();
                                                    worksheet.Cells["AU" + incRowExcel + ":AU" + incRowExcel].Calculate();
                                                    worksheet.Cells["AV" + incRowExcel + ":AV" + incRowExcel].Calculate();
                                                    worksheet.Cells["AW" + incRowExcel + ":AW" + incRowExcel].Calculate();
                                                    worksheet.Cells["AX" + incRowExcel + ":AX" + incRowExcel].Calculate();
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Font.Bold = true;

                                                    worksheet.Cells["A" + _startRow + ":AX" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;
                                                    worksheet.Cells["A" + _startRow + ":AX" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _startRow + ":AX" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel++;
                                                }



                                                worksheet.PrinterSettings.FitToPage = true;
                                                worksheet.PrinterSettings.FitToWidth = 1;
                                                worksheet.PrinterSettings.FitToHeight = 1;
                                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 50];
                                                worksheet.Column(1).Width = 45;
                                                worksheet.Column(2).Width = 20;
                                                worksheet.Column(3).Width = 10;
                                                worksheet.Column(4).Width = 20;
                                                worksheet.Column(5).Width = 20;
                                                worksheet.Column(6).Width = 20;
                                                worksheet.Column(7).Width = 20;
                                                worksheet.Column(8).Width = 20;
                                                worksheet.Column(9).Width = 20;
                                                worksheet.Column(10).Width = 20;
                                                worksheet.Column(11).Width = 20;
                                                worksheet.Column(12).Width = 20;
                                                worksheet.Column(13).Width = 20;
                                                worksheet.Column(14).Width = 20;
                                                worksheet.Column(15).Width = 20;
                                                worksheet.Column(16).Width = 20;
                                                worksheet.Column(17).Width = 20;
                                                worksheet.Column(18).Width = 20;
                                                worksheet.Column(19).Width = 20;
                                                worksheet.Column(20).Width = 20;
                                                worksheet.Column(21).Width = 20;
                                                worksheet.Column(22).Width = 20;
                                                worksheet.Column(23).Width = 20;
                                                worksheet.Column(24).Width = 20;
                                                worksheet.Column(25).Width = 20;
                                                worksheet.Column(26).Width = 20;
                                                worksheet.Column(27).Width = 20;
                                                worksheet.Column(28).Width = 20;
                                                worksheet.Column(29).Width = 20;
                                                worksheet.Column(30).Width = 20;
                                                worksheet.Column(31).Width = 20;
                                                worksheet.Column(32).Width = 20;
                                                worksheet.Column(33).Width = 20;
                                                worksheet.Column(34).Width = 20;
                                                worksheet.Column(35).Width = 20;
                                                worksheet.Column(36).Width = 20;
                                                worksheet.Column(37).Width = 20;
                                                worksheet.Column(38).Width = 20;
                                                worksheet.Column(39).Width = 20;
                                                worksheet.Column(40).Width = 20;
                                                worksheet.Column(41).Width = 20;
                                                worksheet.Column(42).Width = 20;
                                                worksheet.Column(43).Width = 20;
                                                worksheet.Column(44).Width = 20;
                                                worksheet.Column(45).Width = 20;
                                                worksheet.Column(46).Width = 20;
                                                worksheet.Column(47).Width = 20;
                                                worksheet.Column(48).Width = 20;
                                                worksheet.Column(49).Width = 20;
                                                worksheet.Column(50).Width = 20;



                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                //worksheet.Cells["A3:O14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                                worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                                worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 NKPD REPORT";

                                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                //Image img = Image.FromFile(Tools.ReportImage);
                                                //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                                //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                                //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                                package.Save();
                                                return true;
                                            }
                                        }
                                    }

                                }

                            }
                        }
                        catch (Exception err)
                        {
                            return false;
                            throw err;
                        }

                    }

                }
                #endregion

                return true;
            }//else if
            #endregion

            #region Summary Transaction Monitoring
            else if (_OjkRpt.ReportName.Equals("17"))
            {

                #region Excel

                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {



                            cmd.CommandText = @"
               declare @FundRiskProfileDesc nvarchar(50)
declare @FundClientPK int
declare @String nvarchar(50)
declare @BankAccount nvarchar(max)

declare @TableFundRiskProfile table
(
	FundClientPK int,
	FundRisk int
)

declare @TableFundRed table
(
	FundClientPK int,
	BankList int,
	BankAccountName nvarchar(200)
)

insert into @TableFundRiskProfile
select A.FundClientPK,A.RiskProfilePK from (
select distinct A.FundClientPK,G.RiskProfilePK from ClientSubscription A
left join FundRiskProfile G on A.FundPK = G.FundPK and G.status in (1,2)
where valuedate between @DateFrom and @DateTo 
and A.status = 2 and Posted = 1 and Revised = 0 and A.type not in (3,6) 
--paramfund
--and A.fundclientpk = 7077 
group by A.FundClientPK,G.RiskProfilePK

union all
select distinct A.FundClientPK,G.RiskProfilePK from ClientRedemption A
left join FundRiskProfile G on A.FundPK = G.FundPK and G.status in (1,2)
where valuedate between @DateFrom and @DateTo 
and A.status = 2 and Posted = 1 and Revised = 0 and A.type not in (3,6) 
--paramfund
--and A.fundclientpk = 7077 
group by A.FundClientPK,G.RiskProfilePK
)A
group by A.FundClientPK,A.RiskProfilePK

insert into @TableFundRed(FundClientPK,BankList)
select FundClientPK,BankRecipientPK from ClientRedemption A
where valuedate between @DateFrom and @DateTo 
and status = 2 and Posted = 1 and Revised = 0 and type not in (3,6) 
--paramfund
--and fundclientpk = 7077 
group by FundClientPK,BankRecipientPK

if object_id('tempdb..#tableFundRisk', 'u') is not null drop table #tableFundRisk
create table #tableFundRisk
(
	FundClientPK int,
	FundRiskProfile nvarchar(50),
	TransactionType nvarchar(20),
	BankAccount nvarchar(max)
)
CREATE CLUSTERED INDEX index_tableFundRisk ON #tableFundRisk(FundClientPK)

DECLARE A CURSOR FOR 
        select distinct FundClientPK from @TableFundRed
OPEN A
FETCH NEXT FROM A INTO 
    @FundClientPK
 
WHILE @@FETCH_STATUS = 0
    BEGIN
        set @FundRiskProfileDesc = ''
		select @FundRiskProfileDesc = @FundRiskProfileDesc + isnull(MV1.DescOne,'') + case when (MV1.DescOne is not null) then ',' else '' end from @TableFundRiskProfile A
		left join MasterValue MV1 on A.FundRisk = MV1.Code and MV1.ID = 'InvestorsRiskProfile' and MV1.Status in (1,2)
		where A.FundClientPK = @FundClientPK
		order by FundRisk


		if len(@FundRiskProfileDesc) != 0
		begin
			set @FundRiskProfileDesc  = left (@FundRiskProfileDesc, len (@FundRiskProfileDesc)-1)
		end
		else
			set @FundRiskProfileDesc = ''

		set @String = ''
		if (select count(*) from ClientSubscription A where 
			valuedate between @DateFrom and @DateTo 
			and A.fundclientpk = @FundClientPK
			and A.status = 2 and Posted = 1 and Revised = 0 and A.type not in (3,6)
			) > 0
			set @String = @String + 'Sub'
		if (select Count(*) from ClientRedemption A where 
			valuedate between @DateFrom and @DateTo 
			and A.fundclientpk = @FundClientPK
			and A.status = 2 and Posted = 1 and Revised = 0 and A.type not in (3,6)) > 0
			begin
				if @String != ''
					set @String = @String + ',Red'
				else
					set @String = @String + 'Red'
			end

		insert into #tableFundRisk(FundClientPK,FundRiskProfile,TransactionType)
		select @FundClientPK,@FundRiskProfileDesc,@String
    
		FETCH NEXT FROM A INTO @FundClientPK
	END

CLOSE A
 
DEALLOCATE A


DECLARE A CURSOR FOR 
        select distinct FundClientPK from @TableFundRed
OPEN A
FETCH NEXT FROM A INTO 
    @FundClientPK
 
WHILE @@FETCH_STATUS = 0
    BEGIN
        set @BankAccount = ''
		select @BankAccount = @BankAccount +  case when A.BankList = 1 then isnull(B.Name + ' - ' + D.Name + ' - ' + B.NomorRekening1 + ',','') 
		when A.BankList = 2 then isnull(B.Name + ' - ' + E.Name + ' - ' + B.NomorRekening2 + ',' ,'') 
		when A.BankList = 3 then isnull(B.Name + ' - ' + F.Name + ' - ' + B.NomorRekening3 + ',','')
		when A.BankList > 3 then isnull(G.AccountName + ' - ' + H.Name + ' - ' + G.AccountNo + ',','') else '' end  from @TableFundRed A
		left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
		left join Bank D on B.NamaBank1 = D.BankPK and B.FundClientPk = A.FundClientPK and D.status in (1,2)
		left join Bank E on B.NamaBank2 = E.BankPK and B.FundClientPk = A.FundClientPK and E.status in (1,2)
		left join Bank F on B.NamaBank3 = F.BankPK and B.FundClientPk = A.FundClientPK and F.status in (1,2)
		left join FundClientBankList G on A.BankList = G.NoBank and G.status in (1,2) and A.FundClientPK = G.FundClientPK
		left join Bank H on G.BankPK = H.BankPK and B.FundClientPK = G.FundClientPK and H.status in (1,2)
		where A.FundClientPK = @FundClientPK


		if len(@BankAccount) != ''
		begin
			set @BankAccount  = left (@BankAccount, len (@BankAccount)-1)
		end
		else
			set @BankAccount = ''

		update #tableFundRisk set BankAccount = @BankAccount
		where FundClientPk = @FundClientPK
    
		FETCH NEXT FROM A INTO @FundClientPK
	END

CLOSE A
 
DEALLOCATE A

select A.SID,A.Name,A.Type,A.FundRiskProfile,A.InvestorsRisk,A.KYCRiskProfile,A.GrossAnnualIncome,A.TransactionType,A.NamaBankNorek,sum(A.TotalSubs) TotalTransaksi,
case when A.InvestorType = 1 then 
case when A.PenghasilanInd = 1 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 10000000 else 
case when A.PenghasilanInd = 2 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 50000000  else 
case when A.PenghasilanInd = 3 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 100000000  else
case when A.PenghasilanInd = 4 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 500000000  else
case when A.PenghasilanInd = 5 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 1000000000  else
case when A.PenghasilanInd = 6 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 1000000000  else
0 end end end end end end
else 
case when A.PenghasilanInd = 1 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 1000000000 else 
case when A.PenghasilanInd = 2 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 5000000000  else 
case when A.PenghasilanInd = 3 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 10000000000  else
case when A.PenghasilanInd = 4 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 50000000000  else
case when A.PenghasilanInd = 5 then sum(A.TotalTransaksiBatasAtasGrossAnnualIncome)/ 50000000000  else
0 end end end end end
end
TotalTransaksiBatasAtasGrossAnnualIncome from 
(
	select isnull(B.SID,'') SID,B.Name,case when B.InvestorType =  1 then 'INDIVIDUAL' else 'INSTITUTION' end Type,isnull(A.FundRiskProfile,'') FundRiskProfile,isnull(E.DescOne,'') InvestorsRisk,
	isnull(C.DescOne,'') KYCRiskProfile,case when B.InvestorType = 1 then isnull(D.DescOne,'') else isnull(H.DescOne,'') end GrossAnnualIncome,A.TransactionType TransactionType,A.BankAccount NamaBankNorek,
	COUNT(A.FundClientPK) TotalSubs,sum(CashAmount) TotalTransaksiBatasAtasGrossAnnualIncome,case when B.InvestorType = 1 then isnull(B.PenghasilanInd,0) else  isnull(B.PenghasilanInstitusi,0) end PenghasilanInd,B.InvestorType
	from #tableFundRisk A
	left join ClientSubscription AB on A.FundClientPK = AB.FundClientPK and ValueDate between @DateFrom and @DateTo and AB.status = 2 and AB.Posted = 1 and AB.Revised = 0 and AB.type not in (3,6)
	left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	left join MasterValue C on B.KYCRiskProfile = C.Code and C.ID = 'KYCRiskProfile' and C.status = 2 
	left join MasterValue D on B.PenghasilanInd = D.code and  D.ID = 'IncomeIND' and D.status = 2
	left join MasterValue E on B.InvestorsRiskProfile = E.code and  E.ID = 'InvestorsRiskProfile' and E.status = 2
	left join Bank F on B.NamaBank1 = F.BankPK and F.status in (1,2)
	left join FundRiskProfile G on AB.FundPK = G.FundPK and G.status in (1,2)
	left join MasterValue H on B.PenghasilanInstitusi = H.code and  H.ID = 'IncomeINS' and H.status = 2
	group by B.SID,B.Name,B.InvestorType,E.DescOne,C.DescOne,D.DescOne,F.ID,B.NomorRekening1,A.FundClientPK,A.FundRiskProfile,A.TransactionType,B.PenghasilanInd,B.PenghasilanInstitusi,H.DescOne,A.BankAccount

	union all

	select isnull(B.SID,'') SID,B.Name,case when B.InvestorType =  1 then 'INDIVIDUAL' else 'INSTITUTION' end Type,isnull(A.FundRiskProfile,'') FundRiskProfile,isnull(E.DescOne,'') InvestorsRisk,
	isnull(C.DescOne,'') KYCRiskProfile,case when B.InvestorType = 1 then isnull(D.DescOne,'') else isnull(H.DescOne,'') end GrossAnnualIncome,A.TransactionType TransactionType,A.BankAccount NamaBankNorek,
	COUNT(A.FundClientPK) TotalSubs,0 TotalTransaksiBatasAtasGrossAnnualIncome ,case when B.InvestorType = 1 then isnull(B.PenghasilanInd,0) else  isnull(B.PenghasilanInstitusi,0) end PenghasilanInd,B.InvestorType
	from #tableFundRisk A
	left join ClientRedemption AB on A.FundClientPK = AB.FundClientPK and ValueDate between @DateFrom and @DateTo and AB.status = 2 and AB.Posted = 1 and AB.Revised = 0 and AB.type not in (3,6)
	left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	left join MasterValue C on B.KYCRiskProfile = C.Code and C.ID = 'KYCRiskProfile' and C.status = 2 
	left join MasterValue D on B.PenghasilanInd = D.code and  D.ID = 'IncomeIND' and D.status = 2
	left join MasterValue E on B.InvestorsRiskProfile = E.code and  E.ID = 'InvestorsRiskProfile' and E.status = 2
	left join Bank F on B.NamaBank1 = F.BankPK and F.status in (1,2)
	left join FundRiskProfile G on AB.FundPK = G.FundPK and G.status in (1,2)	
	left join MasterValue H on B.PenghasilanInstitusi = H.code and  H.ID = 'IncomeINS' and H.status = 2
	group by B.SID,B.Name,B.InvestorType,E.DescOne,C.DescOne,D.DescOne,F.ID,B.NomorRekening1,A.FundClientPK,A.FundRiskProfile,A.TransactionType,B.PenghasilanInd,B.PenghasilanInstitusi,H.DescOne,A.BankAccount
)A
group by A.SID,A.Name,A.Type,A.FundRiskProfile,A.InvestorsRisk,A.KYCRiskProfile,A.GrossAnnualIncome,A.NamaBankNorek,A.TransactionType,A.PenghasilanInd,A.InvestorType
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _OjkRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _OjkRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SummaryTransactionMonitoring" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SummaryTransactionMonitoring" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Summary Transaction Monitoring");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SummaryTransactionMonitoring> rList = new List<SummaryTransactionMonitoring>();
                                        while (dr0.Read())
                                        {

                                            SummaryTransactionMonitoring rSingle = new SummaryTransactionMonitoring();

                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.FundRiskProfile = Convert.ToString(dr0["FundRiskProfile"]);
                                            rSingle.InvestorsRisk = Convert.ToString(dr0["InvestorsRisk"]);
                                            rSingle.KYCRiskProfile = Convert.ToString(dr0["KYCRiskProfile"]);
                                            rSingle.TransactionType = Convert.ToString(dr0["TransactionType"]);
                                            rSingle.GrossAnnualIncome = Convert.ToString(dr0["GrossAnnualIncome"]);
                                            rSingle.NamaBankNorek = Convert.ToString(dr0["NamaBankNorek"]);
                                            rSingle.TotalTransaksi = Convert.ToString(dr0["TotalTransaksi"]);
                                            rSingle.TotalTransaksiBatasAtasGrossAnnualIncome = Convert.ToString(dr0["TotalTransaksiBatasAtasGrossAnnualIncome"]);





                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                        group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From: " + Convert.ToDateTime(_OjkRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Date To:" + Convert.ToDateTime(_OjkRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "SID";
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "Full Name";
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "Type";
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Fund Risk PRofile";
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Investor Risk Apetite Profile";
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "KYC Risk Profile";
                                        worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                        worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 8].Value = "Transaction Type";
                                        worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                        worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 9].Value = "Gross Annual Income";
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 10].Value = "Nama - Nama Bank - NoRek";
                                        worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                        worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 11].Value = "Frekuensi Transaksi";
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 12].Value = "Total Transaksi Batas Atas Gross Annual Income";
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":L" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":L" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":L" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int _no = 0;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Type;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundRiskProfile;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InvestorsRisk;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.KYCRiskProfile;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.TransactionType;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.GrossAnnualIncome;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NamaBankNorek;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                //worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalTransaksi + " " + "x";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalTransaksiBatasAtasGrossAnnualIncome + " " + " % ";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }


                                            worksheet.Row(incRowExcel).PageBreak = _OjkRpt.PageBreak;
                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 1, 12];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 21;
                                        worksheet.Column(3).Width = 40;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).Width = 30;
                                        worksheet.Column(11).Width = 21;
                                        worksheet.Column(12).Width = 21;





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Summary Transaction Monitoring";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_OjkRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

                //}
                #endregion

            }//else if
            #endregion

            #region ClientVsBlackListName
            if (_OjkRpt.ReportName.Equals("15"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                         select B.name ClientName,B.SID,C.DescOne Type,Reason from CheckBlackList A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join MasterValue C on B.InvestorType = C.Code and C.id = 'InvestorType' and C.Status in (1,2)
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _OjkRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ClientVsBlackListName" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ClientVsBlackListName" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CustodianReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("ClientVsBlackListName");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ClientVsBlackListName> rList = new List<ClientVsBlackListName>();
                                        while (dr0.Read())
                                        {

                                            ClientVsBlackListName rSingle = new ClientVsBlackListName();
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.SID = dr0["SID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SID"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.Reason = Convert.ToString(dr0["Reason"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 1].Value = "As Of:   ";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_OjkRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Client Name";
                                        worksheet.Cells[incRowExcel, 2].Value = "SID";
                                        worksheet.Cells[incRowExcel, 3].Value = "Type";
                                        worksheet.Cells[incRowExcel, 4].Value = "Reason";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;



                                        foreach (var rsHeader in GroupByReference)
                                        {





                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Type;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Reason;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;




                                                no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }



                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 4];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 21;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 30;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 ClientVsBlackListName  ";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_OjkRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Scoring Nasabah
            if (_OjkRpt.ReportName.Equals("23"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundClient = "";

                            if (!_host.findString(_OjkRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_OjkRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _OjkRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }



                            cmd.CommandText = @"
                            if object_id('tempdb..#FundClientPosition', 'u') is not null drop table #FundClientPosition 
                            create table #FundClientPosition
                            (
	                            FundClientPK int,
	                            Product nvarchar(max),
	                            ProductScore numeric(10,2)
                            )
                            CREATE CLUSTERED INDEX indx_FundClientPosition ON #FundClientPosition (FundClientPK);

                            if object_id('tempdb..#FundClient', 'u') is not null drop table #FundClient 
                            create table #FundClient
                            (
	                            FundClientPK int,
	                            FundPK int
                            )
                            CREATE CLUSTERED INDEX indx_FundClientPosition ON #FundClient (FundClientPK);

                            DECLARE @Produk nvarchar(max)
                            DECLARE @FundClientPK int
                            DECLARE @Score numeric(10,2)


                            insert into #FundClient
                            select distinct FundClientPK, FundPK from FundClientPosition A where date = @ValueDate and UnitAmount > 0 " + _paramFundClient + @"

                            DECLARE A CURSOR
                            FOR 

	                            SELECT distinct FundClientPk from #FundClient A where 1 = 1 " + _paramFundClient + @"


                            OPEN A;
 
                            FETCH NEXT FROM A INTO @FundClientPK
 
                            WHILE @@FETCH_STATUS = 0
                                BEGIN
		                            set @Produk = null
		                            set @Score = 0

		                            select @Produk = COALESCE(@Produk + ', ', '') + C.DescOne, @Score = @Score + C.SCore from #FundClient A
		                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
		                            left join MasterValue C on B.Type = C.Code and C.ID = 'FundType' and C.Status in (1,2)
		                            where A.FundClientPK = @FundClientPK

		                            insert into #FundClientPosition
		                            select @FundClientPK,@Produk,@Score / (select count(*) from #FundClient where FundClientPk = @FundClientPK)


                                    FETCH NEXT FROM A INTO @FundClientPK
                                END;
 
                            CLOSE A;
 
                            DEALLOCATE A;


                            select A.Name,case when A.InvestorType = 1 then 'INDIVIDUAL' when A.InvestorType = 2 then 'INSTITUTION' else '' end InvestorType,
                            case when A.InvestorType = 1 then B.DescOne else '' end Pekerjaan,case when A.InvestorType = 1 then isnull(A.JabatanKantor,'') else '' end Jabatan,
                            case when A.InvestorType = 1 then isnull(C.DescOne,'') else '' end KYCRiskprofile,case when A.InvestorType = 1 then isnull(C.Score,0) else 0 end KYCRiskProfileScore
                            , case when A.InvestorType = 1 then isnull(D.DescOne,'') when A.InvestorType = 2 then isnull(E.DescOne,'')  else '' end Negara,case when A.InvestorType = 1 then isnull(D.Score,0) 
                            when A.InvestorType = 2 then isnull(E.Score,0) else 0 end NegaraScore,case when A.InvestorType = 1 then isnull(F.DescOne,'') when A.InvestorType = 2 then isnull(G.DescOne,'')  else '' end Kota,
                            case when A.InvestorType = 1 then isnull(F.Score,0) when A.InvestorType = 2 then isnull(G.Score,0)  else 0 end KotaScore,case when A.EntryUsersID = 'BKLP' or A.EntryUsersID = 'RDO' then 'Penjualan Internal (Online)'
                            else 'Penjualan Internal (Direct)' end DistributionChannel,6 DistributionChannelScore,isnull(H.Product,'') Product, isnull(H.ProductScore,0) ProductScore from FundClient A
                            left join MasterValue B on A.Pekerjaan = B.Code and B.ID = 'Occupation' and B.Status in (1,2)
                            left join MasterValue C on A.KYCRiskProfile = C.Code and C.ID = 'KYCRiskProfile' and C.Status in (1,2)
                            left join MasterValue D on A.CountryofCorrespondence = D.Code and D.ID = 'SDICountry' and D.Status in (1,2)
                            left join MasterValue E on A.Negara = E.Code and E.ID = 'SDICountry' and E.Status in (1,2)
                            left join MasterValue F on A.KodeKotaInd1 = F.Code and F.ID = 'CityRHB' and F.Status in (1,2)
                            left join MasterValue G on A.KodeKotaIns = G.Code and G.ID = 'CityRHB' and G.Status in (1,2)
                            left join #FundClientPosition H on A.FundClientPK = H.FundClientPK
                            where A.Status = 2 " + _paramFundClient;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _OjkRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ScoringNasabah" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ScoringNasabah" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CustodianReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Scoring Nasabah");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ScoringNasabah> rList = new List<ScoringNasabah>();
                                        while (dr0.Read())
                                        {

                                            ScoringNasabah rSingle = new ScoringNasabah();
                                            rSingle.ClientName = dr0["Name"].ToString();
                                            rSingle.InvestorType = dr0["InvestorType"].ToString();
                                            rSingle.Pekerjaan = dr0["Pekerjaan"].ToString();
                                            rSingle.Jabatan = dr0["Jabatan"].ToString();
                                            rSingle.KYCRiskprofile = dr0["KYCRiskprofile"].ToString();
                                            rSingle.KYCRiskprofileScore = Convert.ToInt32(dr0["KYCRiskprofileScore"]);
                                            rSingle.Negara = dr0["Negara"].ToString();
                                            rSingle.NegaraScore = Convert.ToInt32(dr0["NegaraScore"]);
                                            rSingle.Kota = dr0["Kota"].ToString();
                                            rSingle.KotaScore = Convert.ToInt32(dr0["KotaScore"]);
                                            rSingle.DistributionChannel = dr0["DistributionChannel"].ToString();
                                            rSingle.DistributionChannelScore = Convert.ToInt32(dr0["DistributionChannelScore"]);
                                            rSingle.Product = dr0["Product"].ToString();
                                            rSingle.ProductScore = Convert.ToDecimal(dr0["ProductScore"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;


                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Report Scoring Nasabah";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;
                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "As Of: " + Convert.ToDateTime(_OjkRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 18;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["P" + incRowExcel + ":P" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        incRowExcel++;


                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 2].Value = "Nama Nasabah";
                                        worksheet.Cells[incRowExcel, 3].Value = "Type";
                                        worksheet.Cells[incRowExcel, 4].Value = "Pekerjaan";
                                        worksheet.Cells[incRowExcel, 5].Value = "Jabatan";
                                        worksheet.Cells[incRowExcel, 6].Value = "KYC Risk Profile";
                                        worksheet.Cells[incRowExcel, 7].Value = "Score";
                                        worksheet.Cells[incRowExcel, 8].Value = "Negara";
                                        worksheet.Cells[incRowExcel, 9].Value = "Score";
                                        worksheet.Cells[incRowExcel, 10].Value = "Kota";
                                        worksheet.Cells[incRowExcel, 11].Value = "Score";
                                        worksheet.Cells[incRowExcel, 12].Value = "Distribution Channel";
                                        worksheet.Cells[incRowExcel, 13].Value = "Score";
                                        worksheet.Cells[incRowExcel, 14].Value = "Produk";
                                        worksheet.Cells[incRowExcel, 15].Value = "Score";
                                        worksheet.Cells[incRowExcel, 16].Value = "Final Score";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;



                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InvestorType;
                                                worksheet.Cells[incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Pekerjaan;
                                                worksheet.Cells[incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Jabatan;
                                                worksheet.Cells[incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.KYCRiskprofile;
                                                worksheet.Cells[incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.KYCRiskprofileScore;
                                                worksheet.Cells[incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Negara;
                                                worksheet.Cells[incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.NegaraScore;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Kota;
                                                worksheet.Cells[incRowExcel, 10].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.KotaScore;
                                                worksheet.Cells[incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.DistributionChannel;
                                                worksheet.Cells[incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.DistributionChannelScore;
                                                worksheet.Cells[incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Product;
                                                worksheet.Cells[incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.ProductScore;
                                                worksheet.Cells[incRowExcel, 15].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 16].Formula = "(O" + incRowExcel + "+M" + incRowExcel + "+K" + incRowExcel + "+I" + incRowExcel + "+G" + incRowExcel + ")/5";
                                                worksheet.Cells[incRowExcel, 16].Calculate();
                                                worksheet.Cells[incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }


                                        }
                                        int _a = incRowExcel - 1;
                                        worksheet.Cells[_a, 1, _a, 16].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 16];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 10;
                                        worksheet.Column(8).Width = 18;
                                        worksheet.Column(9).Width = 10;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 10;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 10;
                                        worksheet.Column(14).Width = 35;
                                        worksheet.Column(15).Width = 10;
                                        worksheet.Column(16).Width = 13;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Scoring Nasabah ";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_OjkRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }

        public string SInvestRedemptionRpt_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {

            try
            {

                string paramClientRedemptionSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientRedemptionSelected = " And ClientRedemptionPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientRedemptionSelected = " And ClientRedemptionPK in (0) ";
                }

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {


                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        cmd.CommandText = @"
                        BEGIN  
                        SET NOCOUNT ON    
                        create table #Text(    
                        [ResultText] [nvarchar](1000)  NULL        
                        )                      
                        truncate table #Text    
                        insert into #Text     
                        select ''      
                        insert into #Text           
                        Select  RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Type,''))))
                        + '|' + @CompanyID
                        + '|' + isnull(A.IFUACode,'')
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SInvestCode,''))))
                        + '|' + case when A.CashAmount = 0 then '' else cast(isnull(cast(A.CashAmount as decimal(22,2)),'')as nvarchar) end
                        + '|' + case when A.TotalUnitAmount = 0 then '' else cast(isnull(Round(A.TotalUnitAmount,4),'')as nvarchar) end
                        + '|' + case when A.BitRedemptionAll = 1 then 'Y' else '' end
                        + '|' + case when A.FeeType = 2 and A.FeeAmount > 0 then cast(isnull(cast(A.FeeAmount as decimal(22,2)),'')as nvarchar) else '' end
                        + '|' + 
                        + '|' + case when A.FeeType = 1 and A.FeePercent > 0 then cast(isnull(cast(A.FeePercent as decimal(10,2)),'')as nvarchar) else '' end
                        + '|' + 
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SInvestID,''))))
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BICode,''))))
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccNo,''))))
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), SettlementDate, 112) <> '19000101' then CONVERT(VARCHAR(10), SettlementDate, 112) else '' End),''))))          
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.TransferType,''))))
                        + '|' + A.Reference
                        from (      
                        Select CR.ValueDate,F.SInvestCode,CR.PaymentDate SettlementDate,CR.RedemptionFeePercent FeePercent,CR.RedemptionFeeAmount FeeAmount,'2' Type,
                        ROUND(CashAmount,2)CashAmount ,ROUND(TotalUnitAmount,4)TotalUnitAmount ,CR.BitRedemptionAll BitRedemptionAll , CR.FeeType FeeType, 
                        case when CR.EntryUsersID = 'BKLP' then case when Z2.Country <> 'ID' then isnull(Z2.SInvestID,'') else '' end else
                        case when BankRecipientPK= 1 and B1.Country <> 'ID' then isnull(B1.SInvestID,'') else case when BankRecipientPK= 2 and B2.Country <> 'ID' then isnull(B2.SInvestID,'')  else
                        Case when BankRecipientPK= 3 and B3.Country <> 'ID' then isnull(B3.SInvestID,'') else case when   B4.Country <> 'ID' then isnull(B4.SInvestID,'')
                        else '' end end end end end SInvestID,
                        case when CR.EntryUsersID = 'BKLP' then case when Z2.Country = 'ID' then isnull(Z2.BICode,'') else '' end else
                        case when BankRecipientPK= 1 and B1.Country = 'ID' then isnull(B1.BICode,'') else case when BankRecipientPK= 2 and B2.Country = 'ID' then isnull(B2.BICode,'')  else
                        Case when BankRecipientPK= 3 and B3.Country = 'ID' then isnull(B3.BICode,'') else case when  B4.Country = 'ID' then isnull(B4.BICode,'')
                        else '' end end end end end BICode,
                        case when CR.EntryUsersID = 'BKLP' then Z.AccountNo else
                        case when BankRecipientPK = 0 then  '' when BankRecipientPK=1 then FC.NomorRekening1 
                        else case when BankRecipientPK = 2 then FC.NomorRekening2  else 
                        case when BankRecipientPK = 3 then FC.NomorRekening3 else FCB.AccountNo end end end end AccNo ,
                        TransferType TransferType
                        ,

cast(ClientRedemptionPK as nvarchar) +'-'+ 'ID'+'-'+  isnull(A.ID,'') +'-'+ 'ID'  Reference

,FC.IFUACode
                        from ClientRedemption CR 

                        left join Fund F on CR.FundPK = F.fundPK and f.Status in (1,2)
                        left join FundClient FC on CR.FundClientPK = FC.FundClientPK and fc.Status in (1,2)      
                        left join Bank B1 ON FC.NamaBank1 = B1.BankPK  and B1.status in (1,2)   
                        left join Bank B2 ON FC.NamaBank2 = B2.BankPK  and B2.status in (1,2)    
                        left join Bank B3 ON FC.NamaBank3 = B3.BankPK  and B3.status in (1,2)   
                        Left Join FundClientBankList FCB on CR.BankRecipientPK = FCB.NoBank and FCB.status in (1,2) and FCB.fundclientPK = Cr.FundClientPK
                        Left join Bank B4 on FCB.bankPK = B4.BankPK and B4.status in (1,2)
                        left join ZRDO_80_BANK Z on CR.BankRecipientPK = Z.BankID and Z.status = 2
                        left join ZRDO_80_BANK_MAPPING Z1 on Z.BankName = Z1.PartnerCode
                        left join Bank Z2 on Z1.RadsoftCode = Z2.ID and Z2.status in (1,2)
                        Left join Mastervalue MV1 on CR.Type = MV1.Code and MV1.ID = 'SubscriptionType' and MV1.status in (1,2)
                        left join Agent A on CR.AgentPK = A.AgentPK and A.Status in (1,2)
                        where ValueDate =  @ValueDate and Cr.status = 2 " + paramClientRedemptionSelected + @"
                        )A    
                        Group by A.ValueDate,A.SInvestCode,A.FeePercent,A.BICode,A.AccNo,A.SettlementDate,A.FeeAmount,A.Type,A.CashAmount,A.TotalUnitAmount,A.BitRedemptionAll,A.TransferType,A.Reference,A.IFUACode, A.FeeType, A.SInvestID
                        order by A.ValueDate Asc        
                        select * from #text  
                        END";

                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "SUBS_REDM_SWTC_Order_Upload_REDM_Order.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "SUBS_REDM_SWTC_Order_Upload_REDM_Order.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public bool FundClient_SInvest(string _userID, string _category, int _fundClientPKFrom, int _fundClientPKTo, string _type, FundClient _FundClient)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string paramFundClientSelected = "";
                        if (_FundClient.FundClientSelected == "" || _FundClient.FundClientSelected == "0")
                        {
                            paramFundClientSelected = "";
                        }
                        else
                        {
                            paramFundClientSelected = "and FC.FundClientPK in (" + _FundClient.FundClientSelected + ") ";
                        }

                        string _paramFundClientPK = "";
                        if (_fundClientPKFrom == 0 || _fundClientPKTo == 0)
                        {
                            _paramFundClientPK = "";
                        }
                        else
                        {
                            _paramFundClientPK = " And FC.FundClientPK Between " + _fundClientPKFrom + @" and " + _fundClientPKTo;
                        }
                        if (_category == "1")
                        {

                            if (_type == "1")
                            {
                                cmd.CommandText = @"

create table #tableBank
(
	BankID int,
	status int,
	BankName nvarchar(50) ,
	AccountNo nvarchar(50) ,
	AccountName nvarchar(50) ,
	Currency nvarchar(50) ,
	FundClientPK int
)

insert into #tableBank
select cast(bankID as int) ,status,BankName,AccountNo,AccountName,currency,fundclientpk from ZRDO_80_BANK FC where  status = 2 " + paramFundClientSelected + @"
order by BankID asc


BEGIN  
SET NOCOUNT ON         
select @Type  
+'|' + @CompanyID    
+ '|' + ''  
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanInd,''))))      
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahInd,''))))      
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangInd,''))))    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(nationality,''))))  
+ '|' + (isnull(NoIdentitasInd1,''))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when IdentitasInd1 = 7 then '99981231' else case when CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) = '19000101' or CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) < '20160802' then '' else CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) end End),''))))          
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NPWP,''))))   
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), RegistrationNPWP, 112) <> '19000101' then CONVERT(VARCHAR(10), RegistrationNPWP, 112) else '' End),''))))          
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Countryofbirth,''))))    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TempatLahir,''))))   
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), TanggalLahir, 112) <> '19000101' then CONVERT(VARCHAR(10), TanggalLahir, 112) else '' End),''))))   
+ '|' + case when JenisKelamin = '0' then '' else isnull(cast(JenisKelamin as nvarchar(1)),'') end 
+ '|' + case when Pendidikan = '0' then '' else isnull(cast(Pendidikan as nvarchar(1)),'') end  
+ '|' + case when mothermaidenname = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(mothermaidenname ,'')))) end      
+ '|' + case when Agama = '0' then '' else isnull(cast(Agama as nvarchar(1)),'') end  
+ '|' + case when Pekerjaan = '0' then '' else isnull(cast(Pekerjaan as nvarchar(1)),'') end    
+ '|' + case when PenghasilanInd = '0' then '' else isnull(cast(PenghasilanInd as nvarchar(1)),'') end   
+ '|' + case when StatusPerkawinan = '0' then '' else isnull(cast(StatusPerkawinan as nvarchar(1)),'') end   
+ '|' + case when SpouseName = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SpouseName ,'')))) end      
+ '|' + case when InvestorsRiskProfile = '0' then '' else isnull(cast(InvestorsRiskProfile as nvarchar(1)),'') end  
+ '|' + case when MaksudTujuanInd = '0' then '' else isnull(cast(MaksudTujuanInd as nvarchar(1)),'') end   
+ '|' + case when SumberDanaInd = '0' then '' else isnull(cast(SumberDanaInd as nvarchar(2)),'') end   
+ '|' + case when AssetOwner = '0' then '' else isnull(cast(AssetOwner as nvarchar(1)),'') end  
+ '|' + case when OtherAlamatInd1 = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(OtherAlamatInd1,''))),char(13),''),char(10),'') end
+ '|' + case when OtherKodeKotaInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(OtherKodeKotaInd1 as nvarchar(4)),'')))) end     
+ '|' + case when OtherKodePosInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OtherKodePosInd1 ,'')))) end      
+ '|' + case when AlamatInd1 = '0' then '' else   REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatInd1,''))),char(13),''),char(10),'') end      
+ '|' + case when KodeKotaInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(KodeKotaInd1 as nvarchar(4)),'')))) end  
+ '|' + isnull(MV13.DescOne,'')                                    
+ '|' + case when KodePosInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosInd1 ,'')))) end    
+ '|' + isnull(CountryofCorrespondence,'')  
+ '|' + case when AlamatInd2 = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatInd2,''))),char(13),''),char(10),'') end   
+ '|' + case when KodeKotaInd2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(KodeKotaInd2 as nvarchar(4)),'')))) end  
+ '|' + isnull(MV14.DescOne,'')                                     
+ '|' + case when KodePosInd2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosInd2 ,'')))) end   
+ '|' + isnull(CountryofDomicile,'') 
+ '|' + case when TeleponRumah = '0' then '' else isnull(TeleponRumah ,'') end    
+ '|' + case when TeleponSelular = '0' then '' else isnull(TeleponSelular ,'') end    
+ '|' + case when fc.Fax = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.Fax ,'')))) end     
+ '|' + case when fc.Email = '0' then '' else isnull(fc.Email,'') end     
+ '|' + case when StatementType = '0' then '' else isnull(cast(StatementType as nvarchar(1)),'') end    
+ '|' + case when FATCA = '0' then '' else isnull(cast(FATCA as nvarchar(1)),'') end   
+ '|' + case when TIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TIN ,'')))) end    
+ '|' + case when TINIssuanceCountry = '0' then '' else isnull(cast(TINIssuanceCountry as nvarchar(2)),'') end                                   
--1
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G1.Country = 'ID' then case when isnull(G1.SInvestID,'') <> '' and  isnull(G1.BICode,'') <> '' then '' else isnull(B1.SInvestID,'') end else '' end else case when B1.Country = 'ID' then case when isnull(B1.SInvestID,'') <> '' and  isnull(B1.BICode,'') <> '' then '' else isnull(B1.SInvestID,'') end else '' end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G1.Country = 'ID' then isnull(G1.BICode,'') else '' end else case when B1.Country = 'ID' then isnull(B1.BICode,'') else '' end end                           
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G1.Name,'') else isnull(B1.Name,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G1.Country,'') else isnull(B1.Country,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then '' else case when BankBranchName1 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName1 ,'')))) as nvarchar(100)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(C1.Currency,'') collate database_default else isnull(MV15.DescOne,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C1.AccountNo = '0' then '' else isnull(cast(C1.AccountNo as nvarchar(50)),'') end else case when NomorRekening1 = '0' then '' else isnull(cast(NomorRekening1 as nvarchar(50)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C1.AccountName = '0' then '' else isnull(cast(C1.AccountName as nvarchar(100)),'') end else case when NamaNasabah1 = '0' then '' else isnull(cast(NamaNasabah1 as nvarchar(100)),'') end end
----2
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G2.Country = 'ID' then isnull(G2.SInvestID,'') else '' end else case when B2.Country = 'ID' then isnull(B2.SInvestID,'') else '' end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G2.Country = 'ID' then isnull(G2.BICode,'') else '' end else case when B2.Country = 'ID' then isnull(B2.BICode,'') else '' end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G2.Name,'') else isnull(B2.Name,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G2.Country,'') else isnull(B2.Country,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then '' else case when BankBranchName2 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName2 ,'')))) as nvarchar(100)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(C2.Currency,'') collate database_default else isnull(MV16.DescOne,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C2.AccountNo = '0' then '' else isnull(cast(C2.AccountNo as nvarchar(50)),'') end else case when NomorRekening2 = '0' then '' else isnull(cast(NomorRekening2 as nvarchar(50)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C2.AccountName = '0' then '' else isnull(cast(C2.AccountName as nvarchar(100)),'') end else case when NamaNasabah2 = '0' then '' else isnull(cast(NamaNasabah2 as nvarchar(100)),'') end end
--3
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G3.Country = 'ID' then isnull(G3.SInvestID,'') else '' end else case when B3.Country = 'ID' then isnull(B3.SInvestID,'') else '' end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G3.Country = 'ID' then isnull(G3.BICode,'') else '' end else case when B3.Country = 'ID' then isnull(B3.BICode,'') else '' end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G3.Name,'') else isnull(B3.Name,'') end 
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G3.Country,'') else isnull(B3.Country,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then '' else case when BankBranchName3 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName3 ,'')))) as nvarchar(100)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(C3.Currency,'') collate database_default else isnull(MV17.DescOne,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C3.AccountNo = '0' then '' else isnull(cast(C3.AccountNo as nvarchar(50)),'') end else case when NomorRekening3 = '0' then '' else isnull(cast(NomorRekening3 as nvarchar(50)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C3.AccountName = '0' then '' else isnull(cast(C3.AccountName as nvarchar(100)),'') end else case when NamaNasabah3 = '0' then '' else isnull(cast(NamaNasabah3 as nvarchar(100)),'') end end                                     
+ '|' + isnull(FC.ID,'') ResultText                                    
from fundclient FC left join Agent A on FC.SellingAgentPK = A.AgentPK and A.Status = 2   
left join MasterValue MV3 on FC.JenisKelamin = MV3.Code and MV3.status =2  and MV3.ID ='Sex'   
left join MasterValue MV4 on FC.Pendidikan = MV4.Code and MV4.status =2  and MV4.ID ='EducationalBackground'   
left join MasterValue MV5 on FC.Agama = MV5.Code and MV5.status =2  and MV5.ID ='Religion'   
left join MasterValue MV6 on FC.Pekerjaan = MV6.Code and MV6.status =2  and MV6.ID ='Occupation'   
left join MasterValue MV7 on FC.PenghasilanInd = MV7.Code and MV7.status =2  and MV7.ID ='IncomeInd'   
left join MasterValue MV8 on FC.StatusPerkawinan = MV8.Code and MV8.status =2  and MV8.ID ='MaritalStatus'   
left join MasterValue MV9 on FC.InvestorsRiskProfile = MV9.Code and MV9.status =2  and MV9.ID ='InvestorsRiskProfile'  
left join MasterValue MV10 on FC.MaksudTujuanInd = MV10.Code and MV10.status =2  and MV10.ID ='InvestmentObjectivesIND'   
left join MasterValue MV11 on FC.SumberDanaInd = MV11.Code and MV11.status =2  and MV11.ID ='IncomeSourceIND'   
left join MasterValue MV12 on FC.AssetOwner = MV12.Code and MV12.status =2  and MV12.ID ='AssetOwner'   
left join MasterValue MV13 on FC.KodeKotaInd1 = MV13.Code and MV13.status =2  and MV13.ID ='CityRHB'   
left join MasterValue MV14 on FC.KodeKotaInd2 = MV14.Code and MV14.status =2  and MV14.ID ='CityRHB'   
left join MasterValue MV15 on FC.MataUang1 = MV15.Code and MV15.status =2  and MV15.ID ='MataUang'   
left join MasterValue MV16 on FC.MataUang2 = MV16.Code and MV16.status =2  and MV16.ID ='MataUang'   
left join MasterValue MV17 on FC.MataUang3 = MV17.Code and MV17.status =2  and MV17.ID ='MataUang' 
left join Bank B1 on fc.NamaBank1 = B1.BankPK and B1.status = 2   
left join Bank B2 on fc.NamaBank2 = B2.BankPK and B2.status = 2   
left join Bank B3 on fc.NamaBank3 = B3.BankPK and B3.status = 2 
left join #tableBank C1 on FC.FundClientPK = C1.FundClientPK and FC.namabank1 = c1.bankID
left join ZRDO_80_BANK_MAPPING F1 on C1.BankName = F1.PartnerCode collate database_default
left join Bank G1 on F1.RadsoftCode = G1.ID and G1.status = 2 
left join MasterValue E1 on G1.Country = E1.Code and E1.Id = 'SDICountry' and E1.Status = 2
left join #tableBank C2 on FC.FundClientPK = C2.FundClientPK and FC.namabank2 = c2.bankID 
left join ZRDO_80_BANK_MAPPING F2 on C2.BankName = F2.PartnerCode   collate database_default
left join Bank G2 on F2.RadsoftCode = G2.ID  and G2.status = 2
left join MasterValue E2 on G2.Country = E2.Code and E2.Id = 'SDICountry' and E2.Status = 2
left join #tableBank C3 on FC.FundClientPK = C3.FundClientPK and FC.namabank3 = c3.bankID
left join ZRDO_80_BANK_MAPPING F3 on C3.BankName = F3.PartnerCode   collate database_default
left join Bank G3 on F3.RadsoftCode = G3.ID  and G3.status = 2
where FC.Status = 2 and FC.InvestorType = 1
" + paramFundClientSelected + @"  
and FC.FundClientPK not in ( select FundClientPK from HighRiskMonitoring where status = 1 and HighRiskType = 1)
" + _paramFundClientPK + @" 
order by FC.name asc 

 END   ";
                            }
                            else
                            {
                                cmd.CommandText = @"


BEGIN  
SET NOCOUNT ON         
select @Type  
+'|' + @CompanyID    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,'')))) 
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanInd,''))))      
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahInd,''))))      
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangInd,''))))    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(nationality,''))))  
+ '|' + (isnull(NoIdentitasInd1,''))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when IdentitasInd1 = 7 then '99981231' else case when CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) = '19000101' or CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) < '20160802' then '' else CONVERT(VARCHAR(10), ExpiredDateIdentitasInd1, 112) end End),''))))          
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NPWP,''))))   
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), RegistrationNPWP, 112) <> '19000101' then CONVERT(VARCHAR(10), RegistrationNPWP, 112) else '' End),''))))          
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Countryofbirth,''))))    
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TempatLahir,''))))   
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), TanggalLahir, 112) <> '19000101' then CONVERT(VARCHAR(10), TanggalLahir, 112) else '' End),''))))   
+ '|' + case when JenisKelamin = '0' then '' else isnull(cast(JenisKelamin as nvarchar(1)),'') end 
+ '|' + case when Pendidikan = '0' then '' else isnull(cast(Pendidikan as nvarchar(1)),'') end  
+ '|' + case when mothermaidenname = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(mothermaidenname ,'')))) end      
+ '|' + case when Agama = '0' then '' else isnull(cast(Agama as nvarchar(1)),'') end  
+ '|' + case when Pekerjaan = '0' then '' else isnull(cast(Pekerjaan as nvarchar(1)),'') end    
+ '|' + case when PenghasilanInd = '0' then '' else isnull(cast(PenghasilanInd as nvarchar(1)),'') end   
+ '|' + case when StatusPerkawinan = '0' then '' else isnull(cast(StatusPerkawinan as nvarchar(1)),'') end   
+ '|' + case when SpouseName = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SpouseName ,'')))) end      
+ '|' + case when InvestorsRiskProfile = '0' then '' else isnull(cast(InvestorsRiskProfile as nvarchar(1)),'') end  
+ '|' + case when MaksudTujuanInd = '0' then '' else isnull(cast(MaksudTujuanInd as nvarchar(1)),'') end   
+ '|' + case when SumberDanaInd = '0' then '' else isnull(cast(SumberDanaInd as nvarchar(2)),'') end   
+ '|' + case when AssetOwner = '0' then '' else isnull(cast(AssetOwner as nvarchar(1)),'') end  
+ '|' + case when OtherAlamatInd1 = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(OtherAlamatInd1,''))),char(13),''),char(10),'') end
+ '|' + case when OtherKodeKotaInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(OtherKodeKotaInd1 as nvarchar(4)),'')))) end     
+ '|' + case when OtherKodePosInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OtherKodePosInd1 ,'')))) end      
+ '|' + case when AlamatInd1 = '0' then '' else   REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatInd1,''))),char(13),''),char(10),'') end      
+ '|' + case when KodeKotaInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(KodeKotaInd1 as nvarchar(4)),'')))) end  
+ '|' + isnull(MV13.DescOne,'')                                    
+ '|' + case when KodePosInd1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosInd1 ,'')))) end    
+ '|' + isnull(CountryofCorrespondence,'')  
+ '|' + case when AlamatInd2 = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatInd2,''))),char(13),''),char(10),'') end   
+ '|' + case when KodeKotaInd2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(cast(KodeKotaInd2 as nvarchar(4)),'')))) end  
+ '|' + isnull(MV14.DescOne,'')                                     
+ '|' + case when KodePosInd2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosInd2 ,'')))) end   
+ '|' + isnull(CountryofDomicile,'') 
+ '|' + case when TeleponRumah = '0' then '' else isnull(TeleponRumah ,'') end    
+ '|' + case when TeleponSelular = '0' then '' else isnull(TeleponSelular ,'') end    
+ '|' + case when fc.Fax = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.Fax ,'')))) end     
+ '|' + case when fc.Email = '0' then '' else isnull(fc.Email,'') end     
+ '|' + case when StatementType = '0' then '' else isnull(cast(StatementType as nvarchar(1)),'') end    
+ '|' + case when FATCA = '0' then '' else isnull(cast(FATCA as nvarchar(1)),'') end   
+ '|' + case when TIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TIN ,'')))) end    
+ '|' + case when TINIssuanceCountry = '0' then '' else isnull(cast(TINIssuanceCountry as nvarchar(2)),'') end
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''
+ '|' + ''                                                                    
+ '|' + '' ResultText                                     
from fundclient FC left join Agent A on FC.SellingAgentPK = A.AgentPK and A.Status = 2   
left join MasterValue MV3 on FC.JenisKelamin = MV3.Code and MV3.status =2  and MV3.ID ='Sex'   
left join MasterValue MV4 on FC.Pendidikan = MV4.Code and MV4.status =2  and MV4.ID ='EducationalBackground'   
left join MasterValue MV5 on FC.Agama = MV5.Code and MV5.status =2  and MV5.ID ='Religion'   
left join MasterValue MV6 on FC.Pekerjaan = MV6.Code and MV6.status =2  and MV6.ID ='Occupation'   
left join MasterValue MV7 on FC.PenghasilanInd = MV7.Code and MV7.status =2  and MV7.ID ='IncomeInd'   
left join MasterValue MV8 on FC.StatusPerkawinan = MV8.Code and MV8.status =2  and MV8.ID ='MaritalStatus'   
left join MasterValue MV9 on FC.InvestorsRiskProfile = MV9.Code and MV9.status =2  and MV9.ID ='InvestorsRiskProfile'  
left join MasterValue MV10 on FC.MaksudTujuanInd = MV10.Code and MV10.status =2  and MV10.ID ='InvestmentObjectivesIND'   
left join MasterValue MV11 on FC.SumberDanaInd = MV11.Code and MV11.status =2  and MV11.ID ='IncomeSourceIND'   
left join MasterValue MV12 on FC.AssetOwner = MV12.Code and MV12.status =2  and MV12.ID ='AssetOwner'   
left join MasterValue MV13 on FC.KodeKotaInd1 = MV13.Code and MV13.status =2  and MV13.ID ='CityRHB'   
left join MasterValue MV14 on FC.KodeKotaInd2 = MV14.Code and MV14.status =2  and MV14.ID ='CityRHB'   
left join MasterValue MV15 on FC.MataUang1 = MV15.Code and MV15.status =2  and MV15.ID ='MataUang'   
left join MasterValue MV16 on FC.MataUang2 = MV16.Code and MV16.status =2  and MV16.ID ='MataUang'   
left join MasterValue MV17 on FC.MataUang3 = MV17.Code and MV17.status =2  and MV17.ID ='MataUang' 
left join Bank B1 on fc.NamaBank1 = B1.BankPK and B1.status = 2   
left join Bank B2 on fc.NamaBank2 = B2.BankPK and B2.status = 2   
left join Bank B3 on fc.NamaBank3 = B3.BankPK and B3.status = 2 
where FC.Status = 2 and FC.InvestorType = 1 " + paramFundClientSelected + @"  and FC.FundClientPK not in ( select FundClientPK from HighRiskMonitoring where status = 1 and HighRiskType = 1) 
" + _paramFundClientPK + @" 
order by FC.name asc 

 END   

";
                            }




                            cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                            cmd.Parameters.AddWithValue("@Type", _type);
                            cmd.CommandTimeout = 0;
                            using (SqlDataReader dr1 = cmd.ExecuteReader())
                            {
                                if (dr1.HasRows)
                                {
                                    string filePath;
                                    filePath = Tools.SInvestTextPath + "SInvestIndividuTxtVersion.txt";
                                    FileInfo txtFile = new FileInfo(filePath);
                                    if (txtFile.Exists)
                                    {
                                        txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    }

                                    using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                    {
                                        file.WriteLine("");
                                        while (dr1.Read())
                                        {

                                            file.WriteLine(Convert.ToString(dr1["ResultText"]));
                                        }
                                        return true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            cmd.CommandText = @"
create table #tableBank
(
	BankID int,
	status int,
	BankName nvarchar(50),
	AccountNo nvarchar(50),
	AccountName nvarchar(50),
	Currency nvarchar(50),
	FundClientPK int,
)

insert into #tableBank
select cast(bankID as nvarchar(50)),status,BankName,AccountNo,AccountName,currency,fundclientpk from ZRDO_80_BANK FC where status = 2 " + paramFundClientSelected + @" 
order by BankID asc

BEGIN 
select @Type  
+'|' + @CompanyID     
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,''))))    
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FC.Name,''))))       
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Negara,''))))  
+'|' + RTRIM(LTRIM(case when NomorSIUP = '0' then '' else isnull(cast(NomorSIUP as nvarchar(40)),'') end))   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), SIUPExpirationDate, 112) <> '19000101' then CONVERT(VARCHAR(10), SIUPExpirationDate, 112) else '' End))) 
+'|' + case when NoSKD = '0' then '' else RTRIM(LTRIM(isnull(cast(NoSKD as nvarchar(40)),''))) end
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), ExpiredDateSKD, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateSKD, 112) else '' End))) 
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NPWP,'')))) 
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(case when CONVERT(VARCHAR(10), RegistrationNPWP, 112) <> '19000101' then CONVERT(VARCHAR(10), RegistrationNPWP, 112) else '' End)))
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CountryofEstablishment,''))))  
+'|' + case when LokasiBerdiri = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(LokasiBerdiri ,'')))) end  
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), TanggalBerdiri, 112) <> '19000101' then CONVERT(VARCHAR(10), TanggalBerdiri, 112) else '' End),''))))         
+'|' + RTRIM(LTRIM((isnull(NomorAnggaran,''))))
+'|' + case when Tipe = '0' then '' else isnull(cast(Tipe as nvarchar(1)),'') end 
+'|' + case when Karakteristik = '0' then '' else isnull(cast(Karakteristik as nvarchar(1)),'') end 
+'|' + case when PenghasilanInstitusi = '0' then '' else isnull(cast(PenghasilanInstitusi as nvarchar(1)),'') end 
+'|' + case when InvestorsRiskProfile = '0' then '' else isnull(cast(InvestorsRiskProfile as nvarchar(1)),'') end 
+'|' + case when MaksudTujuanInstitusi = '0' then '' else isnull(cast(MaksudTujuanInstitusi as nvarchar(1)),'') end 
+'|' + case when SumberDanaInstitusi = '0' then '' else isnull(cast(SumberDanaInstitusi as nvarchar(1)),'') end 
+'|' + case when AssetOwner = '0' then '' else isnull(cast(AssetOwner as nvarchar(1)),'') end  
+'|' + case when AlamatPerusahaan = '0' then '' else REPLACE(REPLACE(RTRIM(LTRIM(isnull(AlamatPerusahaan ,''))),char(13),''),char(10),'') end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CompanyCityName,'')))) 
+'|' + isnull(MV18.DescOne,'')                                    
+'|' + case when KodePosIns = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodePosIns ,'')))) end  
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CountryOfCompany,''))))   
+'|' + case when TeleponBisnis = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TeleponBisnis ,'')))) end    
+'|' + case when FC.Companyfax = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FC.Companyfax ,'')))) end    
+'|' + case when fc.CompanyMail = '0' then '' else isnull(fc.CompanyMail,'') end     
+'|' + case when StatementType = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(StatementType ,'')))) end   
+'|' + case when NamaDepanIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanIns1 ,'')))) end   
+'|' + case when NamaTengahIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahIns1 ,'')))) end  
+'|' + case when NamaBelakangIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangIns1 ,'')))) end  
+'|' + case when Jabatan1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Jabatan1 ,'')))) end   
+'|' + case when fc.PhoneIns1 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.PhoneIns1 ,'')))) end   
+'|' + case when fc.EmailIns1 = '0' then '' else isnull(fc.EmailIns1,'') end    
+'|' + case when fc.NPWPPerson1 = '0' then '' else isnull(fc.NPWPPerson1,'') end  
+'|' + case when fc.NoIdentitasIns11 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.NoIdentitasIns11 ,'')))) end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), ExpiredDateIdentitasIns11, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateIdentitasIns11, 112) else '' End),''))))  
+'|' +  
+'|' +  
+'|' + case when NamaDepanIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaDepanIns2 ,'')))) end   
+'|' + case when NamaTengahIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaTengahIns2 ,'')))) end  
+'|' + case when NamaBelakangIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NamaBelakangIns2 ,'')))) end  
+'|' + case when Jabatan2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Jabatan2 ,'')))) end   
+'|' + case when fc.PhoneIns2 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.PhoneIns2 ,'')))) end   
+'|' + case when fc.EmailIns2 = '0' then '' else isnull(fc.EmailIns2,'') end   
+'|' + case when fc.NPWPPerson2 = '0' then '' else isnull(fc.NPWPPerson2,'') end  
+'|' + case when fc.NoIdentitasIns21 = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(fc.NoIdentitasIns21 ,'')))) end   
+'|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), ExpiredDateIdentitasIns21, 112) <> '19000101' then CONVERT(VARCHAR(10), ExpiredDateIdentitasIns21, 112) else '' End),''))))   
+'|' +  
+'|' +  
+'|' + case when AssetFor1Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor1Year ,'')))) end  
+'|' + case when AssetFor2Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor2Year ,'')))) end   
+'|' + case when AssetFor3Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(AssetFor3Year ,'')))) end 
+'|' + case when OperatingProfitFor1Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor1Year ,'')))) end   
+'|' + case when OperatingProfitFor2Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor2Year ,'')))) end   
+'|' + case when OperatingProfitFor3Year = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(OperatingProfitFor3Year ,'')))) end 
+'|' + case when FATCA = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(FATCA ,'')))) end 
+'|' + case when TIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TIN ,'')))) end  
+'|' + case when TINIssuanceCountry = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TINIssuanceCountry ,'')))) end  
+'|' + case when GIIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(GIIN ,'')))) end   
+'|' + case when SubstantialOwnerName = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerName ,'')))) end    
+'|' + case when SubstantialOwnerAddress = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerAddress ,'')))) end    
+'|' + case when SubstantialOwnerTIN = '0' then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SubstantialOwnerTIN ,'')))) end                                   
+ '|' + ''
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G1.Country = 'ID' then isnull(G1.BICode,'') else '' end else case when B1.Country = 'ID' then isnull(B1.BICode,'') else '' end end                           
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G1.Name,'') else isnull(B1.Name,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G1.Country,'') else isnull(B1.Country,'') end
+ '|' + case when BankBranchName1 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName1 ,'')))) as nvarchar(100)),'') end 
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(C1.Currency,'') collate database_default else isnull(MV15.DescOne,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C1.AccountNo = '0' then '' else isnull(cast(C1.AccountNo as nvarchar(50)),'') end else case when NomorRekening1 = '0' then '' else isnull(cast(NomorRekening1 as nvarchar(50)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C1.AccountName = '0' then '' else isnull(cast(C1.AccountName as nvarchar(100)),'') end else case when NamaNasabah1 = '0' then '' else isnull(cast(NamaNasabah1 as nvarchar(100)),'') end end
+ '|' +  ''
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G2.Country = 'ID' then isnull(G2.BICode,'') else '' end else case when B2.Country = 'ID' then isnull(B2.BICode,'') else '' end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G2.Name,'') else isnull(B2.Name,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G2.Country,'') else isnull(B2.Country,'') end
+ '|' + case when BankBranchName2 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName2 ,'')))) as nvarchar(100)),'') end 
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(C2.Currency,'') collate database_default else isnull(MV16.DescOne,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C2.AccountNo = '0' then '' else isnull(cast(C2.AccountNo as nvarchar(50)),'') end else case when NomorRekening2 = '0' then '' else isnull(cast(NomorRekening2 as nvarchar(50)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C2.AccountName = '0' then '' else isnull(cast(C2.AccountName as nvarchar(100)),'') end else case when NamaNasabah2 = '0' then '' else isnull(cast(NamaNasabah2 as nvarchar(100)),'') end end 
+ '|' + ''
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when G3.Country = 'ID' then isnull(G3.BICode,'') else '' end else case when B3.Country = 'ID' then isnull(B3.BICode,'') else '' end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G3.Name,'') else isnull(B3.Name,'') end 
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(G3.Country,'') else isnull(B3.Country,'') end
+ '|' + case when BankBranchName3 = '0' then '' else isnull(cast(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(BankBranchName3 ,'')))) as nvarchar(100)),'') end 
+ '|' + case when FC.EntryUsersID = 'BKLP' then isnull(C3.Currency,'') collate database_default else isnull(MV17.DescOne,'') end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C3.AccountNo = '0' then '' else isnull(cast(C3.AccountNo as nvarchar(50)),'') end else case when NomorRekening3 = '0' then '' else isnull(cast(NomorRekening3 as nvarchar(50)),'') end end
+ '|' + case when FC.EntryUsersID = 'BKLP' then case when C3.AccountName = '0' then '' else isnull(cast(C3.AccountName as nvarchar(100)),'') end else case when NamaNasabah3 = '0' then '' else isnull(cast(NamaNasabah3 as nvarchar(100)),'') end end                                     
+ '|' + isnull(FC.ID,'')   ResultText
from fundclient FC left join Agent A on FC.SellingAgentPK = A.AgentPK and A.Status = 2   
left join MasterValue MV3 on FC.Tipe = MV3.Code and MV3.status =2  and MV3.ID ='CompanyType'   
left join MasterValue MV4 on FC.Karakteristik = MV4.Code and MV4.status =2  and MV4.ID ='CompanyCharacteristic'   
left join MasterValue MV5 on FC.PenghasilanInstitusi = MV5.Code and MV5.status =2  and MV5.ID ='IncomeINS'   
left join MasterValue MV6 on FC.InvestorsRiskProfile = MV6.Code and MV6.status =2  and MV6.ID ='InvestorsRiskProfile'   
left join MasterValue MV7 on FC.MaksudTujuanInstitusi = MV7.Code and MV7.status =2  and MV7.ID ='InvestmentObjectivesINS'  
left join MasterValue MV8 on FC.SumberDanaInstitusi = MV8.Code and MV8.status =2  and MV8.ID ='IncomeSourceINS'   
left join MasterValue MV9 on FC.AssetOwner = MV9.Code and MV9.status =2  and MV9.ID ='AssetOwner'   
left join MasterValue MV10 on FC.KodeKotaIns = MV10.Code and MV10.status =2  and MV10.ID ='CityRHB'   
left join MasterValue MV15 on FC.MataUang1 = MV15.Code and MV15.status =2  and MV15.ID ='MataUang'   
left join MasterValue MV16 on FC.MataUang2 = MV16.Code and MV16.status =2  and MV16.ID ='MataUang'   
left join MasterValue MV17 on FC.MataUang3 = MV17.Code and MV17.status =2  and MV17.ID ='MataUang'   
left join MasterValue MV18 on CompanyCityName = MV18.Code and MV18.status =2  and MV18.ID ='CityRHB'  
left join Bank B1 on fc.NamaBank1 = B1.BankPK and B1.status = 2   
left join Bank B2 on fc.NamaBank2 = B2.BankPK and B2.status = 2   
left join Bank B3 on fc.NamaBank3 = B3.BankPK and B3.status = 2 
left join #tableBank C1 on FC.FundClientPK = C1.FundClientPK and FC.namabank1 = c1.bankID
left join ZRDO_80_BANK_MAPPING F1 on C1.BankName = F1.PartnerCode collate database_default
left join Bank G1 on F1.RadsoftCode = G1.ID and G1.status = 2 
left join MasterValue E1 on G1.Country = E1.Code and E1.Id = 'SDICountry' and E1.Status = 2
left join #tableBank C2 on FC.FundClientPK = C2.FundClientPK and FC.namabank2 = c2.bankID 
left join ZRDO_80_BANK_MAPPING F2 on C2.BankName = F2.PartnerCode   collate database_default
left join Bank G2 on F2.RadsoftCode = G2.ID  and G2.status = 2
left join MasterValue E2 on G2.Country = E2.Code and E2.Id = 'SDICountry' and E2.Status = 2
left join #tableBank C3 on FC.FundClientPK = C3.FundClientPK and FC.namabank3 = c3.bankID
left join ZRDO_80_BANK_MAPPING F3 on C3.BankName = F3.PartnerCode   collate database_default
left join Bank G3 on F3.RadsoftCode = G3.ID  and G3.status = 2
where FC.Status = 2 and FC.InvestorType = 2 " + paramFundClientSelected + @" and FC.FundClientPK not in ( select FundClientPK from HighRiskMonitoring where status = 1 and HighRiskType = 1)

" + _paramFundClientPK + @" 
order by FC.name asc  
                        END ";

                            cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                            cmd.Parameters.AddWithValue("@Type", _type);
                            cmd.CommandTimeout = 0;
                            using (SqlDataReader dr1 = cmd.ExecuteReader())
                            {
                                if (dr1.HasRows)
                                {
                                    if (dr1.HasRows)
                                    {
                                        string filePath;
                                        filePath = Tools.SInvestTextPath + "SInvestInstitusiTxtVersion.txt";
                                        FileInfo txtFile = new FileInfo(filePath);
                                        if (txtFile.Exists)
                                        {
                                            txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        }

                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                        {
                                            file.WriteLine("");
                                            while (dr1.Read())
                                            {
                                                file.WriteLine(Convert.ToString(dr1["ResultText"]));
                                            }
                                            return true;
                                        }
                                    }
                                    return false;
                                }
                            }
                        }
                        return false;

                    }

                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public string SInvestSubscriptionRpt_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {

            try
            {
                string paramClientSubscriptionSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientSubscriptionSelected = "  ClientSubscriptionPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientSubscriptionSelected = "  ClientSubscriptionPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                                    BEGIN  
                                    SET NOCOUNT ON    
                                    create table #Text(    
                                    [ResultText] [nvarchar](1000)  NULL        
                                    )                      

                                    truncate table #Text     
                                    insert into #Text     
                                    select 'Transaction Date|Transaction Type|SA Code|Investor Fund Unit A/C No.|Fund Code|Amount (Nominal)|Amount (Unit)|Amount (All Units)|Fee (Nominal)|Fee (Unit)|Fee (%)|REDM Payment A/C Sequential Code|REDM Payment Bank BIC Code|REDM Payment Bank BI Member Code|REDM Payment A/C No.|Payment Date|Transfer Type|SA Reference No.'
                                    
                                    insert into #Text         
                                    Select  RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Type,''))))
                                    + '|' + @CompanyID
                                    + '|' + isnull(A.IFUACode,'')
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SInvestCode,''))))
                                    + '|' + case when A.CashAmount = 0 then '' else cast(isnull(cast(A.CashAmount as decimal(22,2)),'')as nvarchar) end -- TotalCashAmount
                                    + '|' + case when A.TotalUnitAmount = 0 then '' else cast(isnull(Round(A.TotalUnitAmount,4),'')as nvarchar) end
                                    + '|' + 
                                    + '|' + case when A.FeeAmount = 0 then '' else cast(isnull(cast(A.FeeAmount as decimal(22,2)),'')as nvarchar) end -- 0
                                    + '|' + 
                                    + '|' + 
                                    + '|' + 
                                    + '|' + 
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BICode,''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccNo,''))))
                                    + '|' +        
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.TransferType,''))))
                                    + '|' + A.Reference
                                    from (      
                                    Select CS.ValueDate,F.SInvestCode, '' SettlementDate,CS.SubscriptionFeePercent FeePercent,CS.SubscriptionFeeAmount FeeAmount,'1' Type,
                                    ROUND(CashAmount,2)CashAmount ,ROUND(TotalUnitAmount,4)TotalUnitAmount ,'' BICode, '' AccNo ,'' TransferType, 
                                  
cast(ClientSubscriptionPK as nvarchar) +'-'+  isnull(TUP.Name,'') +'-'+ 'ID' +'-'+ isnull(A.ID,'') +'-'+ 'ID' Reference
                                    ,FC.IFUACode  
                                    from ClientSubscription CS 
                                    left join Fund F on Cs.FundPK = F.fundPK and f.Status in (1,2)     
                                    left join FundClient FC on CS.FundClientPK = FC.FundClientPK and fc.Status in (1,2)
                                    Left join TrxUnitPaymentProvider TUP on CS.TrxUnitPaymentProviderPK = TUP.TrxUnitPaymentProviderPK and TUP.status in (1,2)
                                    Left join TrxUnitPaymentType TPT on CS.TrxUnitPaymentTypePK = TPT.TrxUnitPaymentTypePK and TPT.status in (1,2)
                                    Left join Mastervalue MV1 on CS.Type = MV1.Code and MV1.ID = 'SubscriptionType' and MV1.status in (1,2)
                                    left join Agent A on CS.AgentPK = A.AgentPK and A.Status in (1,2)
                                    where    
                                    ValueDate =  @ValueDate and " + paramClientSubscriptionSelected + @" and Cs.status = 2
                                    )A    
                                    Group by A.ValueDate,A.SInvestCode,A.FeePercent,A.BICode,A.AccNo,A.SettlementDate,A.FeeAmount,A.Type,A.CashAmount,A.TotalUnitAmount,A.TransferType,A.Reference,A.IFUACode
                                    order by A.ValueDate Asc
                                    select * from #text          
                                    END ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "SUBS_REDM_SWTC_Order_Upload_SUBS_Order.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "SUBS_REDM_SWTC_Order_Upload_SUBS_Order.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public string SInvestSwitchingRpt_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, ParamUnitRegistryBySelected _paramUnitRegistryBySelected)
        {

            try
            {
                string paramClientSwitchingSelected = "";
                if (!_host.findString(_paramUnitRegistryBySelected.UnitRegistrySelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramUnitRegistryBySelected.UnitRegistrySelected))
                {
                    paramClientSwitchingSelected = "  ClientSwitchingPK in (" + _paramUnitRegistryBySelected.UnitRegistrySelected + ") ";
                }
                else
                {
                    paramClientSwitchingSelected = "  ClientSwitchingPK in (0) ";
                }


                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                                    BEGIN  
                                    SET NOCOUNT ON 
                                    --drop table #text   
                                    create table #Text(    
                                    [ResultText] [nvarchar](1000)  NULL        
                                    )   
                   
                                    truncate table #Text     
                                    insert into #Text     
                                    select 'Transaction Date|Transaction Type|SA Code|Investor Fund Unit A/C No.|Fund Code|Amount (Nominal)|Amount (Unit)|Amount (All Units)|Fee (Nominal)|Fee (Unit)|Fee (%)|REDM Payment A/C Sequential Code|REDM Payment Bank BIC Code|REDM Payment Bank BI Member Code|REDM Payment A/C No.|Payment Date|Transfer Type|SA Reference No.'

                                    insert into #Text         
                                    Select  RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Type,''))))
                                    + '|' + @CompanyID
                                    + '|' + isnull(A.IFUACode,'')
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundFromSinvest,''))))
                                    + '|' + case when A.CashAmount = 0 then '' else cast(isnull(cast(A.CashAmount as decimal(22,2)),'')as nvarchar) end
                                    + '|' + case when A.UnitAmount = 0 then '' else cast(isnull(cast(A.UnitAmount as decimal(22,4)),'') as nvarchar) end
                                    + '|' + case when A.BitSwitchingAll = 1 then 'Y' else '' end
                                    + '|' + case when A.Feetype = 'OUT' then '1' else '2' end
                                    + '|' + 
                                    + '|' + 
                                    + '|' + case when A.FeePercent = 0 then '' else cast(isnull(cast(A.FeePercent as decimal(10,2)),'')as nvarchar) end
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundToSinvest,''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull((case when CONVERT(VARCHAR(10), SettlementDate, 112) <> '19000101' then CONVERT(VARCHAR(10), SettlementDate, 112) else '' End),''))))          
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.TransferType,''))))
                                    + '|' + A.Reference

                                    from (   
  
                                    Select CW.FundPKFrom,CW.FundPKTo,CW.ValueDate,F.SInvestCode FundFromSinvest, F1.SInvestCode FundToSinvest,CW.PaymentDate SettlementDate,CW.SwitchingFeePercent FeePercent,CW.SwitchingFeeAmount FeeAmount,'3' Type,ROUND(CashAmount,2)CashAmount ,ROUND(UnitAmount,4)UnitAmount ,CW.BitSwitchingAll BitSwitchingAll,TransferType TransferType
                                    ,

cast(ClientSwitchingPK as nvarchar) +'-'+ 'ID' +'-'+  isnull(A.ID,'') +'-'+ 'ID'  Reference

,FC.IFUACode,CW.FeeType
                                    from ClientSwitching CW 
                                    left join Fund F on CW.FundPKFrom = F.fundPK and f.Status=2 
                                    left join fund F1 on CW.FundPKTo = F1.FundPK and F1.status = 2 
                                    left join FundClient FC on CW.FundClientPK = FC.FundClientPK and fc.Status=2      
                                    Left join Mastervalue MV1 on CW.Type = MV1.Code and MV1.ID = 'SubscriptionType' and MV1.status in (1,2)
                                    left join Agent A on CW.AgentPK = A.AgentPK and A.Status in (1,2)

                                    where ValueDate =   @ValueDate and " + paramClientSwitchingSelected + @" and Cw.status = 2
                                    )A    
                                    Group by A.FundPKFrom,A.FundPKTo,A.ValueDate,A.FundFromSinvest,A.FundToSinvest,A.FeePercent,A.SettlementDate,A.FeeAmount,A.Type,A.CashAmount,A.UnitAmount,A.BitSwitchingAll,A.TransferType,A.Reference,A.IFUACode,A.FeeType
                                    order by A.ValueDate Asc
                                    select * from #text          
                                    END ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "SUBS_REDM_SWTC_Order_Upload_SUBS_Order.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "SUBS_REDM_SWTC_Order_Upload_SUBS_Order.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public string SchedulerCheckingFCP(string _userID)
        {

            #region Scheduler Checking EMAIL

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        cmd.CommandText = @"

declare @Valuedate date

set @Valuedate = getdate()
--set @Valuedate = '2020-07-03'


declare @TableCloseNAV table (
	FundPK int
)

declare @FailedCloseNAV table (
	FundPK int
)

declare @checkNav table (
	FundPKFrom int,
	StatusNAVFrom nvarchar(100),
	FundPKTo int,
	StatusNAVTo nvarchar(100),
	Type int,
	CountPosting int,
	CountAvgFailed int
)

declare @FundPKFrom int, 
		@FundPKTo int,
		@CountPosting int, 
		@Type int,
		@StatusScheduler nvarchar(100)


insert into @TableCloseNAV
select FundPK from CloseNAV A where status = 2 and date = @valuedate 

insert into @FailedCloseNAV(FundPK)
select FundPK from Fund where status = 2 AND FundPK not in (
select FundPK from @TableCloseNAV ) and IsPublic = 1
--1. cek NAV From [Tidak Tersedia/Tersedia]

insert into @checkNav(FundPKFrom,Type,FundPKTo)
select distinct FundPK, 1 Type,0 from ClientSubscription where ValueDate = @Valuedate and status = 2 and type in (1,2,4,5) and FundPK in (select FundPK from @FailedCloseNAV)

insert into @checkNav(FundPKFrom,Type,FundPKTo)
select distinct FundPK, 2 Type,0 from ClientRedemption where ValueDate = @Valuedate and status = 2 and type in (1,2,4,5) and FundPK in (select FundPK from @FailedCloseNAV)


--2. cek NAV To [Tidak Tersedia/Tersedia]

insert into @checkNav(FundPKFrom,Type,FundPKTo)
select distinct FundPKFrom, 3 Type,FundPKTo from ClientSwitching 
where ValueDate = @Valuedate and status = 2 and type in (1,2,4,5)  
and FundPKFrom in (select FundPK from @FailedCloseNAV)
and FundPKTo in (select FundPK from @FailedCloseNAV)



--3. cek statusposting unit registry (Type in 1,2,4,5) [Complete/Partial/Fail]
DECLARE A CURSOR
FOR 

	select FundPK FundPKFrom,0 FundPKTo,count(*) CountPosting,1 Type from ClientSubscription where ValueDate = @Valuedate and status = 2 and Type in (1,2,4,5) and posted = 0 --and FundPK in (select FundPK from @FailedCloseNAV)
	group by FundPK
	union all
	select FundPK FundPKFrom,0 FundPKTo,count(*) CountPosting,2 Type from ClientRedemption where ValueDate = @Valuedate and status = 2 and Type in (1,2,4,5) and posted = 0 --and FundPK in (select FundPK from @FailedCloseNAV)
	group by FundPK
	union all
	select FundPKFrom,FundPKTo,count(*) CountPosting,3 Type from ClientSwitching where ValueDate = @Valuedate and status = 2 and Type in (1,2,4,5) and posted = 0 --and FundPKFrom in (select FundPK from @FailedCloseNAV)
	group by FundPKFrom,FundPKTo
 
OPEN A;
 
FETCH NEXT FROM A INTO @FundPKFrom, @FundPKTo, @CountPosting, @Type 
 
WHILE @@FETCH_STATUS = 0
    BEGIN
		
		if exists ( select * from @checkNav where FundPKFrom = @FundPKFrom and FundPKTo = @FundPKTo and Type = @Type )
			update @checkNav set CountPosting = @CountPosting where FundPKFrom = @FundPKFrom and FundPKTo = @FundPKTo and Type = @Type 
		else
		begin
			insert into @checkNav(FundPKFrom,FundPKTo,Type,CountPosting)
			select @FundPKFrom,@FundPKTo,@Type,@CountPosting

		end


        FETCH NEXT FROM A INTO @FundPKFrom, @FundPKTo, @CountPosting, @Type 
    END;
 
CLOSE A;
 
DEALLOCATE A;



--4. cek scheduler nav jalan atau gak [Complete/Fail]
update A set A.CountAvgFailed = B.CountAvgFailed
from @checkNav A left join (

select count(*) CountAvgFailed, 1 Type from ClientSubscription where Type in (1,2,4,5) and ValueDate = @Valuedate and status = 2 
union all
select count(*) CountAvgFailed, 2 Type from ClientRedemption where Type in (1,2,4,5) and ValueDate = @Valuedate and status = 2 
union all
select count(*) CountAvgFailed, 3 Type from ClientSwitching where Type in (1,2,4,5) and ValueDate = @Valuedate and status = 2 
)B on A.Type = B.Type

select @StatusScheduler =  case when Status = 'Success' then 'Complete' else 'Fail' end from schedulerLog where SqlAgent = 'AvgPrice' and cast(date as date) = @Valuedate

set @StatusScheduler = isnull(@StatusScheduler,'Fail')


update @checkNav set CountPosting = 0 where CountPosting is null

update A set StatusNAVFrom = case when B.FundPK is null then case when A.FundPKFrom = 0 then '' else 'Tersedia' end else 'Tidak Tersedia' end
from @checkNav A
left join @FailedCloseNAV B on A.FundPKFrom = B.FundPK

update A set StatusNAVTo = case when B.FundPK is null then case when A.FundPKTo = 0 then '' else 'Tersedia' end else 'Tidak Tersedia' end
from @checkNav A
left join @FailedCloseNAV B on A.FundPKTo = B.FundPK

delete @checkNav where FundPKFrom in (
	select FundPK from Fund where status = 2 and IsPublic = 0
)

delete @checkNav where FundPKTo in (
	select FundPK from Fund where status = 2 and IsPublic = 0
)


select C.ID BK,case when A.Type = 1 then 'Subscription' when A.Type = 2 then 'Redemption' when A.Type = 3 then 'Switching' else '' end Type,B.ID Fund,
StatusNAVFrom,case when isnull(A.CountPosting,0) = 0 then 'Complete' else 'Fail' end Unitisasi,
case when A.CountPosting = 0 then '' else cast(A.CountPosting as nvarchar) end JumlahGagalUnitisasi,@StatusScheduler AVGNav,
case when @StatusScheduler = 'Complete' then '' else cast(A.CountAvgFailed as nvarchar) end JumlahGagalNAV,isnull(E.ID,'') BKTo,isnull(D.ID,'') FundTo,A.StatusNAVTo from @checkNav A
left join Fund B on A.FundPKFrom = B.FundPK and B.Status = 2
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.Status = 2
left join Fund D on A.FundPKTo = D.FundPK and D.Status = 2
left join BankBranch E on D.BankBranchPK = E.BankBranchPK and E.Status = 2
order by TYpe,Fund




";
                        cmd.CommandTimeout = 0;


                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            string filePath = Tools.ReportsPath + "SchedulerChecking" + "_" + _userID + ".xlsx";
                            string pdfPath = Tools.ReportsPath + "SchedulerChecking" + "_" + _userID + ".pdf";
                            FileInfo excelFile = new FileInfo(filePath);
                            if (excelFile.Exists)
                            {
                                excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                excelFile = new FileInfo(filePath);
                            }

                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                            using (ExcelPackage package = new ExcelPackage(excelFile))
                            {
                                package.Workbook.Properties.Title = "Scheduler Checking";
                                package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Scheduler Checking");


                                //ATUR DATA GROUPINGNYA DULU
                                List<SchedulerCheckingCustom10> rList = new List<SchedulerCheckingCustom10>();
                                while (dr0.Read())
                                {

                                    SchedulerCheckingCustom10 rSingle = new SchedulerCheckingCustom10();
                                    rSingle.BKFrom = dr0["BK"].ToString();
                                    rSingle.Type = dr0["Type"].ToString();
                                    rSingle.FundFrom = dr0["Fund"].ToString();
                                    rSingle.NAVFrom = dr0["StatusNAVFrom"].ToString();
                                    rSingle.Unitisasi = dr0["Unitisasi"].ToString();
                                    rSingle.JumlahGagalUnitisasi = dr0["JumlahGagalUnitisasi"].ToString();
                                    rSingle.AVGNav = dr0["AVGNav"].ToString();
                                    rSingle.JumlahGagalNAV = dr0["JumlahGagalNAV"].ToString();
                                    rSingle.BKTo = dr0["BKTo"].ToString();
                                    rSingle.FundTo = dr0["FundTo"].ToString();
                                    rSingle.NAVTo = dr0["StatusNAVTo"].ToString();
                                    rList.Add(rSingle);

                                }



                                var GroupByReference =
                                        from r in rList
                                        //orderby r ascending
                                        group r by new { } into rGroup
                                        select rGroup;

                                int incRowExcel = 0;

                                incRowExcel++;

                                int RowB = incRowExcel;
                                int RowG = incRowExcel + 1;

                                worksheet.Cells[incRowExcel, 1].Value = "BK";
                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 2].Value = "Type";
                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 3].Value = "Fund";
                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 4].Value = "NAV";
                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 5].Value = "Unitisasi";
                                worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 6].Value = "Jumlah Gagal Unitisasi";
                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 7].Value = "AVG NAV";
                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 8].Value = "Jumlah Gagal AVG NAV";
                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 9].Value = "BK To";
                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 10].Value = "Fund To";
                                worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 11].Value = "NAV To";
                                worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                foreach (var rsHeader in GroupByReference)
                                {

                                    incRowExcel++;

                                    int first = incRowExcel;

                                    int _no = 1;
                                    int _startRowDetail = incRowExcel;
                                    int _endRowDetail = 0;

                                    foreach (var rsDetail in rsHeader)
                                    {
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.BKFrom;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.Type;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundFrom;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.NAVFrom;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.Unitisasi;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.JumlahGagalUnitisasi;
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail.AVGNav;
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.JumlahGagalNAV;
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.BKTo;
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.FundTo;
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.NAVTo;
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        _no++;
                                        _endRowDetail = incRowExcel;
                                        incRowExcel++;
                                    }



                                }



                                worksheet.PrinterSettings.FitToPage = true;
                                worksheet.PrinterSettings.FitToWidth = 1;
                                worksheet.PrinterSettings.FitToHeight = 0;
                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                worksheet.Column(1).AutoFit();
                                worksheet.Column(2).AutoFit();
                                worksheet.Column(3).AutoFit();
                                worksheet.Column(4).AutoFit();
                                worksheet.Column(5).AutoFit();
                                worksheet.Column(6).AutoFit();
                                worksheet.Column(7).AutoFit();
                                worksheet.Column(8).AutoFit();
                                worksheet.Column(9).AutoFit();
                                worksheet.Column(10).AutoFit();
                                worksheet.Column(11).AutoFit();


                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                //worksheet.PrinterSettings.FitToPage = true;
                                worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Email";


                                //Image img = Image.FromFile(Tools.ReportImage);
                                //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                //Image img = Image.FromFile(Tools.ReportImage);
                                //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                package.Save();
                                //if (_EmailRpt.DownloadMode == "PDF")
                                //{
                                //    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                //}


                                return filePath;
                            }

                        }
                    }
                }
            }

            catch (Exception err)
            {
                return "";
                throw err;
            }


            #endregion

        }




    }
}